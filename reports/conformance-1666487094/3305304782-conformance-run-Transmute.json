{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "549ee108-14b6-4e82-ba8a-976da9b67bcd",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6c8abe5f-16cd-4cc1-956b-e2b933bb08c9",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bff4316a-1941-4dc7-aa88-6cfbb570b2e4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "488ef245-7d47-4d53-8033-219ca381d3bb"
                }
              }
            ]
          },
          {
            "id": "4b8f4d20-1614-4950-b0bf-230071768d15",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "140b9f48-4f0f-4cae-9e58-928629029ae1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2bf3c807-d042-426f-a879-e14f835f3ce5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fbe9a30f-e25a-4ce7-a04a-548f1550f442",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "94049e68-5cfe-40d5-8fe7-15e7bbebbeff",
            "name": "Positive Testing",
            "item": [
              {
                "id": "af6a477c-d62b-4a00-a234-f342ad08b6fd",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4faa388d-9c87-4223-9a94-561326810249",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "716a4719-4369-4de3-b08e-261dca606a02"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "076f62da-5bf8-4968-9265-4d27e035b0c9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1a5f3637-f64a-4125-b647-dfd0aedd8053"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "39e67c89-2ad2-45ea-a05c-48c3e68d40a4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "901806e6-3fae-4884-96c2-e2f4838900dd"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "33e10779-866d-4100-a3cd-1adf7feda84d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "03e5b95e-45e2-46b8-b808-001a587eb40e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe326bf2-a1f5-4406-a977-a4158b928714",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "45a2fb42-44bf-4566-b3d6-7f10a14a7b6c"
            }
          }
        ]
      },
      {
        "id": "ac55274a-e74f-4fc9-a5af-704d68d440bb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1cabf0e7-1c70-4012-9cc0-bc071c49cbfe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fde65ea0-3aed-4302-8660-ac6cafa1817e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a07f94d4-46e2-41d8-8302-32397eaafa82",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61966dda-8d39-4d5b-9a7c-828890846118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e7ae2ca-c3a9-4da8-a8d4-0cb884eacf3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c89cdf-c0d1-457a-85cb-9599195b3ee8",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf389541-1c1e-4efc-9a11-ab340ff0f145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20594645-b980-4474-bc7e-60ca549962b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd84f70-3758-48cb-a643-52e34c0155af",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0d4150-b2ae-4ecd-b760-40449b78772e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb01184f-3e49-41fe-8ef3-b89fa4750d8e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a02b608e-6d8f-4631-9319-80fc2be23d41",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a579a98-cc75-43b0-ac28-fa32009cd107",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32cd31ec-fa70-46e1-8d75-35c956cba5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05bd1311-15eb-4efd-b5f0-979a577db8b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190fab80-8c63-428e-b873-388c5b85c274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f3bb0d5-48ab-4071-92b7-0bf5d66c030f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c73908-cb6d-4fe1-9252-16a110d28e5e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0ba6e3-8ca0-4493-bfad-21b53c8414e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e437d38-69b2-4ae0-b362-2160cccd843c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00f4118-c2fd-482e-a115-173bd2d9b65e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f5b72861-1025-49e0-bf26-faa13f26894d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0969479f-235f-4db6-bb78-d9892a72352a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "03df1f54-b779-4b94-a39c-f528246e9fae",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "240e7706-e9c2-45f1-97b9-1eb56aa7be0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d64c1096-63ab-4f9d-861a-1ecac9bda536"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "648518d4-305f-4dcf-91fa-d47f38ce5288",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "018a5a73-48cf-46b9-9c90-43139a64ce31"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e19b9faf-a10e-4ca1-b3be-aed9f966c545",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "07b62a15-ae08-4eb1-ab26-6ebe137ddde8"
            }
          }
        ]
      },
      {
        "id": "f382e0b5-d46a-4d88-a98c-c8bee09335cd",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3f765791-8308-47ad-a28c-92a0e7b2acf8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c063556b-65bb-42e4-a826-aefdd05791c5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a99ad5a2-54cd-40cc-a4e5-b919150d40f9",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a826f1b2-4d78-4247-914c-ad291d2da072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b77ad4-3d44-4a8d-8956-6e0f05bb35a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0d713e-94ed-45f9-9ab6-66c9b19c784e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bb0fe23-4a60-4a71-b09c-69be67d544a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d4360d-991a-4729-84b0-d56b5c6edc86",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2dc3844-97a4-427f-aefb-177cab5f73a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0dd472a-3641-4ad5-b402-70e52a425bee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd14451-5560-4439-b1a0-8555fe2fe552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2567bd67-840e-43a8-8af2-9d4a8e591a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b85c00b-69bb-4b39-962a-324ebf23ef15",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1518c0e7-6e79-4d0b-b69b-7e8a5574dbb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e2fb28-eb98-42a0-bbfe-4977725eb065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d2f762-740d-49f6-a140-a3b2dbe858be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d594dc81-1546-4fa7-b829-28eff9b346f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35973b83-a9e3-420d-9751-bd0dc7d8ef04",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfab41d4-de82-477e-853f-2f7276fcb10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c5c964-af3a-493c-80f7-f8c071d40100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d908b189-fb55-4a77-adc1-3fe5effdf391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28f2d273-1dcf-483e-ba7c-64e6245b3929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2db65b-a337-4375-8e1e-bb62b634e763",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99073ff-f45a-4638-8bd9-7e917dcf1eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d2dd070-da7d-41f1-9fd7-eee2bdbeff52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a342dce1-c96f-4058-8583-a2ae69fca5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "152a24c6-b782-4bea-9d5b-4e20794f4e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b24a1d-6077-4147-b717-c45cb4b0ebc9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32f90d1-ebc3-483f-a208-441fbbc29732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f6de2d-c268-40be-90cb-f84bf29176a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92882ba-07be-444d-960f-c1e6b990c35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "909c4a57-1460-45d8-a992-ff8381c4219d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998ae21a-97d8-496c-b1f3-8fa8569cb657",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cdfdd3-a7ad-476b-ad1c-4e43d6c8fc72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e94c73ee-dce1-406b-a49b-667ae48d4589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12ff870-9f92-4274-a921-cee54af42f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f22561d-4760-4726-8cb5-d921f9b43440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0365fa-eae3-493a-b01c-e6d267cada74",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc80b95-be87-4cab-b373-6f361743af77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4b43f61-1090-49b2-906a-50c219a7674c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad888a1-0e93-43c7-a6a4-9e7752a358a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48f65011-037d-4897-b657-138facc19d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dbc72a4-7c95-4064-8a81-2df2fef92d22",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d23754-d568-465d-8071-ccb8a5d97e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef612b53-0be6-4006-a5ac-8a7049985e2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b9ce11-d0a1-41d7-b0f7-49999ceba71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30aae5a6-6d72-45e5-83e3-43a469eff415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5717c140-b924-42c1-9740-c6879e56d890",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9052cfd-45eb-4a52-a0d0-d6e5c1d0005d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334eba5f-fa53-484f-bcff-0c404cc06c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2bf8745-3638-4b25-b4de-8711b59380d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee52f474-7cc0-477b-a27f-797aa6fa9570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47e3b32-1e2e-4436-857c-5151e1fe6081",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76b541f-cf0f-46d6-b39f-6e9d1d3008b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b88d92b0-bbb4-4079-ad8e-acee64e9e74f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fcdb232-3bcb-46a9-8a5f-ad5a84ad3187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "adfa4741-c017-4b8d-8e6e-1181dc75eac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a31f5c-363d-4681-8f6b-c30e68226270",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf0a93e-3a3c-47b8-bd99-77d0b83c437d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de48dbd6-7360-44fa-81c3-b78536518a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d32dd8-1509-46dd-8b27-fb7ad89ce718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa3c1ffb-d4b3-40aa-a211-332b27f8781c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27f0162-32f8-4c0d-8b0e-a20ad6a21e34",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced995a9-8e3f-4c66-9a4e-035d67aeada8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19553f79-2216-4a47-a7fe-e5a9c232d7c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3cec7c-f5e9-4857-a8c3-483c0b6e99f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8aac6196-a7c7-49b9-8ab9-edc670a1caa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4908c0b5-94b3-4a11-847d-bd8a99abe4b8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4841fec1-a5cf-4375-a990-10bc435ca0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "836bbdfe-578c-4b5d-bf8f-7ad35131bf06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4150a48-4165-44d4-a4a9-14502b763966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04c9ee2a-07d2-4a5f-a55a-432f910b1c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1d4e2d-6976-4b23-a111-d1d8921e8c32",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e256a7-1c22-4a7c-8255-12886fa8d86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc5ba55-2eb1-4a0a-a44b-c13652469f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06bfaf7f-deb3-4073-bedf-d5052d4d9a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dce1b4de-a21a-4278-8177-2e92fa4c5500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a37b6f9-38d2-41e4-8161-7fdb935052ab",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6117617c-3e48-4b21-a33c-b6839ef88ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b347633-b9bd-49b3-a2f6-6edece083ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d3794f-e292-422e-b0e4-c01ff3ae729f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b36e549f-3e29-4aef-959b-e586753e59a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe1d775-c5ba-47b8-a120-21e1358dbd75",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66820265-9aa6-4edb-be37-7a7b902cb624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6544533-3e13-444c-9184-febcf61dc146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61a394b-a5fe-438b-a12b-3ca268544095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "faf71843-6b04-4eca-8467-4d24c752c6eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bcc80ec-c86a-4ab5-aa2c-d8002e628c9d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3264ee0e-cf0d-45b5-aa4c-50758582d371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f0e04dd-9fc5-43e2-9624-e8048ee1d294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89aeb284-6979-495d-98a5-51036b69e52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac675821-ae1b-4975-a8cc-43bb9633d77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9d96fe-6bcc-4783-a9ec-0d8ae8e0b436",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d970b697-8348-43a9-9435-c36945f4c866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a97dc8bb-817b-4a6c-ad1f-a6d799c8233e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d4b19d-caa0-4539-abee-9eb0d6a79ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "108f4ec4-6f16-4e08-89e0-d96840c84430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3777079-0305-4d59-a807-e197bbf4b993",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4b5163-dbd5-492b-9464-1affcb1555c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c8f62b4-b86c-4fe0-a24b-48ccc0174d6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e0d7f3-ff2e-4c93-831a-4b71c74b0ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "968ef811-05ad-4b3a-8cf6-cee9678e182d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb2acc9-096a-4bb5-b1ab-769de34db002",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e245d7-9887-4c89-b4d8-82bf94472d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83bf9496-9bd7-41bb-9b9d-57b5761c6225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09359878-f208-4b7f-a0bb-c2c5bb977fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a65f02-fa69-4858-8147-46c75b425291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd356531-8851-4d58-beb6-65ac263ce840",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2dbc743-76a2-4bf0-812e-9fb6caa4f7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f00c2196-26d0-412f-8245-0ab3849501c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2003663-8091-47b8-8a3d-88805fb6d752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d66c579-d4db-45ba-bc2f-1d9628b85c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e35a4a5-8be1-49da-8160-5f437b0905a9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b073e61-54aa-4631-9c73-438760294400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67fb771d-f2a8-49bf-b992-7d9dad31df88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6d58ba-9f0c-487a-b778-091cb74ca4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b5ebf32-6380-417b-8841-d1c0c9828920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03fa8e2-db01-49fe-885e-7636dd779964",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a16b08-759a-4a8a-8cf2-24d29f30dd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38d555e-1f41-44eb-9213-5316b1647dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a34ffcb-e328-445e-9069-982aeff17783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "48e1b754-9feb-458a-9876-3fde1510a039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be405cf-bbda-40aa-8c01-0b97f2b5345e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b5e620-e968-4e5f-b1e2-5463d53c781f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de01723-1606-4a0b-9fbf-3522e25196db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38e1f11-b557-41fd-bcc6-69cfa90c11bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "97106d4e-5008-4436-8b83-1e6c5bc101d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18870f9-2684-4618-99d9-751c56de8032",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de743b14-3391-4ad8-93bd-74904fb49179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f69008f3-c61c-4d54-acd4-601eef9c1679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52d9216-aeea-45dc-92f3-d67dfa277275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00cdef9e-7abb-4ddd-9db3-070013d49631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4e00d2-0245-4de1-be9f-e05266672fe8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865986f8-1ef8-47f9-9797-ea53356f60fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa66fb2-d46f-4d7a-b50f-aaa5cc948518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b340d3c1-8e8d-458c-ae5e-84d1ebfe4b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "39b30dc5-81cb-493d-9743-a83201e6a5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc9a46e-d76b-4ca8-8a35-107af530355b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f01707-a6a4-4afa-a69d-8246a099f3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "931a0ade-f299-436b-b69f-d2c82493750b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af132b72-70d3-4563-abca-1f8bb29e05d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "23367014-cdc7-4c5b-af88-1ec5ba74673c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5930d6-9f06-4912-952a-79eb6d613a28",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ad2953-1dd0-4430-9ee0-69331bb5fdc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97b643d8-f27f-43fb-aaa5-a6b89d3dffc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87feb2da-d164-4885-91ea-404d5472148a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "87d907db-6f85-4fd4-9485-4e9f4ae5f3d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c261cb-a4ff-47b0-b6b7-09e7acaf0ef8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5f0923-9185-4bd8-bd5c-1416862ce903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0781534-bc9f-489c-a91a-05fbb4b4bab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00db83c-331d-4d37-9098-68c52bbf93b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e0abaa2-7012-41d8-8fc8-1f1e6c38451c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e255bf-0f9c-4ad3-976f-a881b8ad611f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce18451a-2326-4490-936a-d1cc64f0e514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eda0a9d5-12d2-4209-81b6-ade5ef0a50c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1d8572-2e6a-4b1f-b892-f905a2d10ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c97913f-1454-4695-985a-19628b78cbcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff7d7e4-d0f8-46b9-8e4c-23778fb92d88",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba43ce69-47e4-49de-ad0b-b55b07e3f940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d248bb0-b6f0-4be1-afbc-4c4591dae6f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20d55d4-150b-4827-8416-3d021568f869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85b30808-9c2e-4dc3-b9b7-dd1343ee4c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa2f660-ed72-4aec-a50e-8c9f3a0b3d7d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee216b0-3a4d-4f7f-ab5e-1717f2e9d84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91547090-35f1-4906-bf44-1d44d89297a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43547793-b01e-4fd6-af22-5c5651723770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9799860d-1608-43b5-8684-e0f679c9b913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6943fc7-724c-4f0c-b60e-52e620cabc4d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb97a3e4-875a-4889-9140-ca3cdf0156f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f2d881-e4da-42f0-9b1b-a36ff2801978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7446ad-ae32-4c9d-a4b1-c0015a3fca44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb2dcf5-8c1f-4a72-8a57-10147af0cc11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2688361c-7ab0-4ec7-95ba-f5b988d4cb0f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "132824c8-db1f-4488-9523-7f9bca3dcf05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f16449c8-8d30-40ef-bd77-3ce48664b29c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6acd2d4-a4b5-4842-987b-c0399afaff0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e5c64cfa-b260-41e6-9ca1-ac6ebd983eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5168f8-37b4-4bf8-b21d-ad097a1c6103",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2fb7ed-fc20-4939-b1b7-ba7a74c47c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d806cd4c-9a23-469b-80c7-2c7938deff3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e2caca-8d11-4ba8-9477-1182782862e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a20e1f-d783-49db-9121-be17b4e6a52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8d509a-452c-4353-b7a8-0bfca967d111",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae41f61-1e59-47bc-bbd0-bd891e6b4724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6609ff1-a687-4c06-8c86-1556130c1f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c986d9-6f1f-4ccf-baa4-7697a15c7351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "acd65209-7c61-4f56-a05b-7bfa0c164cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "781c8f2d-2d8a-455e-823f-384da6da6b3e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32cb751c-d266-4571-945f-e95d210d2616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09dddb91-92c6-4d02-bd56-244b443cebb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7aff23e-ae16-43f7-accb-4ab9268940fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce599bed-906b-406b-8e37-442cea17d940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0147b1-bdf8-426a-b608-4393c1da4f03",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe2a72e-c05f-4d38-8fb4-671c13379694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f355c97-cc4c-4e86-abd3-aec788e6fa76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe509cc-01e7-42f1-b8b5-2ec580fa1e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3cb626d-aa17-4653-af66-6858c817bb44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31cb538-bc72-4a8b-88fe-dba60919cff1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b21e07-2265-47fb-924a-2dfcd3840f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e264361-2ef3-42c4-afc8-b2a91163b6bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541ef3dd-29ce-4af0-8a3d-f0b4f231d771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d356076-2d96-4515-b33d-0651998ec892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef154f66-5649-4e2a-b8cb-d88378be6145",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a270577-69e4-49b1-a3f0-3d36c083350f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d4e6d53-eb1b-4901-8bdb-b7ca8b3098aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e268c7c-8611-438a-81b3-2cfb6cc3cba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "45bf5031-621f-4151-b693-ab6bdfb24c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb873f2-9b83-4a1b-8302-04f0261e4838",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce2aed1-f71b-4c04-b914-6f17fa9cafb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc58610b-deb0-4ae3-a9b3-dcff207799d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e86866b-6d79-40be-8e3c-dec1549931b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4e860509-c0d5-419c-966e-c9bfd40869b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ceb247-7520-434c-87e5-7c3805cfad68",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a440e78-fd7f-49d7-b5a7-1341c361e22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1ea99d7-717f-4a46-8e27-32f8f774ac95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0924e9-4f05-46dc-8243-e7ec8b2459b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd28175c-bd61-4c24-9764-4f1e25069588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519a5c5e-0005-43cc-a8ba-01215665cb09",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18dd5f4-f671-4f28-a340-207713c94bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e9c783f-9131-47d2-8a57-a608f6f2b4fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707998c5-9245-4e36-af43-8af2b3fbc44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c1f8239-7622-45ea-b190-0b994d0e8085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f225d18f-d96a-4787-9ff9-2aca4b7c8ee6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5bd4f1-ae1f-4b9a-a307-1644a86dc007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "910ca734-8425-4033-a735-6ac1260128ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa9dc1b-1afa-4a4d-b6f4-684cf79cf846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b079ad15-0b08-47a0-b5f4-c517327c573d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e832870e-9b74-4a83-8507-d90a74dd5fb2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de91cbdb-4c9c-40af-ab15-6270cd2d2ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2669228f-27e1-42ac-b5a6-9f02d6ba93b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035f6e67-63ff-4922-a448-2799f9b0c979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5af40b2c-9c84-4fa1-a1d7-1c2ce1903dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0149b8ba-07a9-4ffe-a57c-eb43db7d7b00",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e032ef8-3124-485a-81bd-39866ce643af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b6f80e-e58f-400f-b460-e2564e057ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2532c0b-693a-44db-9048-036eddea8bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d88926-e326-4ee7-8bde-c9aabe7cb512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacc9032-1b16-440f-8cab-d3a250c968e4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a1e884-06ee-4fb6-803e-b05820196722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40296ef-ddd7-4760-ba20-b8f5e3f0815b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee51f9b-0289-4dfa-b6e6-f17a197700f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f15c77b-2e2a-4c05-9cee-8ac83aaf1950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b8f65e-31dd-483e-9a82-fac98f46df4c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "352773d7-cf15-48d0-b5eb-9f0fca085bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f13c0bc9-9508-4b8e-80b9-ad4674845318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ae54df-bb48-4a11-a3c0-1cb621dd761a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2dacc2b4-d1ab-4b84-a602-6608de57d021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb2b416-ac6f-4c8c-b816-7f986e63a6df",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ed8d90-c62f-4665-96ea-39c913ef6751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dffddd9f-490e-4e33-9e88-c7ce6423ad98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8b4e91-5a0f-4b41-84b2-389a59d92e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a323339a-b8d2-4fe9-85c0-47dd064f085d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63e4c71-3ac7-4851-9a0d-8c7bf3ecddee",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e111d86a-8c91-42fe-b7cd-903e46b4e579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd768f7e-51c8-4257-b593-538916604272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c740244-44f4-4a11-b3ae-52a521eed91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb76311-62d4-4592-93e3-d83b8e955fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b57cab48-7989-4867-89e5-9f29abc9ccb6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fcc3d99-c3a0-4d55-9dc4-d877868f79e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f8f31b-0eba-4fa5-9f80-d3ca044c2d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4431e3ba-336b-4a26-90b0-3d8a709ad2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c0dafa5-dd1a-46d6-ad2f-15344a55e8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3030c20-8ddd-4ce2-8386-4b270a860b2b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e723c3e-ede9-471a-8986-9786b5f970bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043b7274-dfc5-4de3-aff0-9434a6d0a063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9ff28a-0aa8-4839-8416-ab0826da7eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a82ad731-698f-4051-91fb-dc85226a65f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ffbbaa-809d-4b6e-823d-0070d2bab83b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df15f1f-9af0-4cff-91b8-9df95f83cfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5154d0e-e859-4a58-9f8b-0ddc0059947b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda7ed1b-779b-44e2-91f2-a8f5242c2916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bad18f0-b26c-4b8d-af34-4a29bd28a4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ab0057-5694-4f1b-be05-ef43df3b33a7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f717357-c4e3-4d2d-b595-31b215cfb91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef1d928-a7fe-4f60-85d1-51cb3444431d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd774c12-06fd-43ab-9033-f0c8be42283b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd3f0dbd-a4c8-4f85-b3d7-2c3b4815950d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1efbdc29-06e8-4d74-83b8-edae503d0a1b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3598c195-bf01-43f7-88c7-e2b0f8f646c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78c2be7-630c-4b2d-b7f7-ffcba8e49ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d9b4d4-e5d6-43d9-a724-e0c84e0b6edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e031100e-daef-4aa4-abac-d6937231a332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e333e72-6e14-40b3-b651-a58d77fcb7c8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "195202f4-86b9-4ad5-b452-91e3695921c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e70b508d-1b87-4456-8cea-116cfa39d629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077c3cca-1ade-48fd-9d58-76aaf5f223d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "05b376b1-8877-49b7-ba83-985229fde393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "125adb76-70a3-4c18-93af-5b853cded788",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b1ee03-593d-488b-8474-4392933817fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cefa8b7-6d47-40a1-b87d-915bf2081715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2dcc22-a36f-48d0-9fd0-d687c503fb40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "98c9dbaf-2c5d-4979-bef4-ea6879be1fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b543f4-b8d0-4353-bac0-e358f5a54865",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba8778b-7e9e-48b0-bebe-857dde3fcbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29938e81-4b0b-42cc-8c43-160e5e48cf7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f91e1a-fee0-4be3-8e62-12d150ca0508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bd1c911-cec0-4e0d-a384-d0dc5af47dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f3c37b-bcaa-495c-88e7-9f4528943ba3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7af0485-9a76-44e0-bad0-ae42e6fde90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49cf8c82-7cb0-4115-a62c-e7c792ee9555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6bd1edc-f376-457f-9bf7-d2ac98b7cf6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6024116-abd1-4846-80ca-a656cf09cd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea800cfa-7449-459c-9f59-baeb898b8b5a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde04a34-646a-4188-8a67-660b8e6b9a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e2efcb-8724-4e26-9d73-94b18124cc5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70f30a9-62e5-4547-94b2-b746798183b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a19b3b0c-5f69-4590-afa3-b2ddf99c13d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1419a38-83f2-414f-b413-19f77264fd7d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a082cdc-5427-4fd9-a5c0-8b018d539bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a171e190-3e7c-4679-ac08-6f528f7f62b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2f6c55-342d-44d9-aa43-a822bbcbb455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae7de5e-af01-4d01-8fa9-1124d1cd259c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4ab5e1-ff55-46d8-8030-83968850a6e9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6ff2d5-b7a1-430c-b9e3-35365cfb5f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ccff12-ff35-4556-b84f-a670bb60e329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f49f058-d890-4244-950d-7f78b4ed99ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ccfa3ed-14d7-4bff-b49f-cd32159944ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9dae51d-62ca-4be1-8dc8-9f0015edf03e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "671bee3c-b7a2-4247-acc1-188bce820a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93455dac-82e2-4bdd-a0f5-ef13a0dbbeb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636e5b22-eaf2-47ff-83bd-b83ce10e84f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed2779f-c50b-4580-b987-1f03d29aa894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b653900-10db-4eef-a23d-6ef8db8e15f1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf90ded-a321-48da-a73f-62d2bfcfd537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8722fbc-aa77-4757-975e-d44f98e48cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4921ee0-f764-41c2-a6ab-ed8f41ccfc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5961cff9-007d-40cf-bf6c-995da1c2b487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de5a7f1-c012-46bb-beb8-6d23d6087403",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef4521b-7312-4c74-b1dd-35f0c25587f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd34d77-df03-4add-afb2-376d272a35d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22fa4831-6f12-4b5f-a594-bd1fc5a6c6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7138f47-6a0e-448e-b605-719c75658530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ecc631-ea6b-4c05-ae8a-74355a031ac6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1318f9-eb83-4e03-8012-078f1e89dbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165b4ebf-cc28-4525-b7fa-4866a6d91f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855831f1-30ac-44b5-af56-5fcfd3ef8247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5433fbf2-ead5-4071-868d-8ebafa391108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17dbe594-a2f3-4498-b2e1-2c95a26e1fc4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c98937-1802-490a-b43f-64a6143f2e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f49d3b83-0601-48eb-83f8-11cbe5490127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ac6565-838a-4c2c-953f-b04c4f3a6841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e820a423-dcd7-4b2a-b98e-2d777048a72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "403f993d-ff13-43d3-a276-73d09bd2eb32",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8600ce4c-82fd-46fd-9e3d-b9f7b7713364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b456c511-62e6-42c7-8199-0f272766b8b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a94d68-34ab-4d8e-8628-159d11c75e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6460e873-5dd7-46fc-8fed-5e5bf4202caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6dce98-a53f-44cf-8b9b-f97b4ad5ff7b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ed669b9-93ec-4774-88f5-75cb82d6c7fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f1c402-3ee3-4cd6-9b10-4d9069b21324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "553bef90-db49-4c69-b7a6-08d6cc4fecb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50683b2f-a131-4eec-bf0f-65ad1506a600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b0a4e0-54e5-406b-b75f-5fbc8f66c81f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b2383b-73d9-4f92-9fd6-c1ae7d7d12e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc7555dd-a62d-4cdd-85fc-92e7250ce996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba592763-921f-460f-9201-05f56f350750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b0912d-455a-442b-b37d-dc7fc15b9554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea50233-daaa-4596-a5f2-1c452936e513",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aabe126-1a33-471e-b526-8c2feae92df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "115762a1-bc42-474c-92f6-6260a7b212f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cb5a3e-2da6-4893-9262-cd25a1ed76c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63c99f8d-406e-4c6b-926e-c2a81379e261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27ee900-437b-46eb-9fc1-6328fe586dd1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02a0ed5-c776-4d21-8c60-0935bea30d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9976da9e-9d33-4876-b9c5-6510d1e2beb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f344434-b7b3-4af3-8c32-6c84afbb355d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a16f0ed0-5b36-4b0b-b1bb-db13a23e7bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f8dab1-429f-46ba-9661-ee3263d42b3c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b182b669-08a2-4b32-b6f5-53fe5ab82c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e84781c5-dbb6-4a3f-a384-ad6f6da579b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477c6366-da53-4791-a75a-1f90b08ec20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "63df31a8-6c73-47a6-8c99-6467e69d4cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f931ab9-898f-4d6a-8acd-1b9daa26c9aa",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb53d51-f973-4851-b83f-247b8bc81522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "611048e6-15d4-4ed5-afa7-577d47d568f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28c28a6-7234-4fa6-baf3-684191882906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0211d5b5-8f1e-4376-a8c2-a0c3ae08b87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ae3820-c6a9-496d-bae1-4fa6c399a0b6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcb1bf5-1f85-4643-b5f2-3462542d40a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dec1f103-1d3f-421d-b843-7b3afb6a68f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de366e6b-4534-4e11-bac8-8148197ec1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8fb836c-f0c3-4a3c-a7ba-cb1596ed057f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2430d04d-5abb-4e24-8494-75b37a0158ad",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e3eab6-3b50-4482-a7d5-359e4c068bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7831f904-2d4a-4e77-994e-6bdece4ff30a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d56b1d-9e9f-46d4-9ee8-b2336af170b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd3533b-93fd-4bbf-884c-3c773c75b60f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce3da2e-bf03-4b34-9557-b0de958e8a03",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fe9d84-8b9c-47cb-9d6f-ab9df386ae35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2127c3e-00a7-4459-ab96-c56eec8e6982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139aef6a-c2b1-4028-ac03-f6d250adfe9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d566b96b-5c19-4ac6-8032-dd811a6b103d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b05b5f0-df35-4444-aa93-a5312e87bfbb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d24b5b-ff26-4df5-a45f-db3951da774c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ae042e-af87-4160-96f7-8b64bad8393a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c481322-b83f-4d91-8c78-503f2dd6c2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea7bd97b-030b-47d5-9a7a-d9d4d738d770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d74b0c1-f245-4d2c-8eb3-b3485c675758",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd61dd3-d692-4d2b-9841-8dee1acadad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "454ef018-72f1-4e1d-be90-294f1f815670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982dc516-cc09-437b-854d-29e217530a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "527a6645-c5ca-4c49-ba26-0ec2aa1436aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0557a573-8f22-4bee-aef4-13a742480b49",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e9ade4-828d-4f7e-9a09-53e6972bdbe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16342df3-f041-41f6-83b9-5c1c9e7bd4c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0270abbc-c1eb-491a-8a45-775f2ff393e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "513c7096-ba98-4b93-a0d9-24f3cca19ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485a84ba-740b-4759-8e1c-3f5c5e40d2ab",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b87583-5218-46b7-8b08-d9274f89e87b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecfb47b7-8cbb-45d6-a5bf-d5fe6d87f4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4857d0e8-9179-4186-8141-013c67160dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "312352cd-be46-4791-baf9-faf3acf03f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964e2d7c-3625-4941-98b9-6c2bf2a2a378",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f269fc6-20b9-4644-8dfe-c3f42cd5bd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e9f4b0d-522c-485b-a0dc-5e5276877f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96237ce-eab9-45e0-b55f-146097a01c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60d77b8f-6b55-4715-a7f3-bc5941422a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5624cfb2-6452-482d-b85f-4e43bee1da52",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da53bbb1-6092-41fc-b255-89591f8f3835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea12478-8247-43ec-926c-1b1df3458214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06fc922-0a15-41fe-ba75-1395fdaaa10f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76ae96cd-bfb3-4281-8412-4b1db43050a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bbecb9-afc2-4b00-b9fe-62699bb512d1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1e9cd4-d402-4612-8ae1-5695f97ad1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1156f541-2271-4e50-aaa6-81fa450e14c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e472159-882e-42d6-9ce2-75605a7db6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6e4e530b-567d-4894-afee-ff7001d3ddc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e714cf-e25a-4d60-9e07-f277fedcdb96",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ecb7e6-4f95-4949-a73c-7a1ec7069fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f331ae9c-1c3a-42a4-b930-5c9cbeee268d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc32ffe-17bd-4289-808d-14163e55d87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "537c3f0d-a794-4ed1-87a9-cb508079547b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8b34d1-1bce-47f7-8da4-ea7fa7bf0f89",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e553c2a-6002-43d5-8ada-db017493f326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ccec90-e0fd-4455-b1dd-96e06113b261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d67a1f8-e711-4f49-886c-6fbe69a791ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "100ea551-95c5-4ba7-805e-b94298d3efff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "277ef62d-6628-4eab-ad45-afd857f3b9ad",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0ed924-231a-40f2-bf75-8256de3d32d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e99fb2d-7612-4980-9bb4-30fb978d9b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f888cf99-2574-47d5-9572-ac85da36c01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ce17c1a-d0ca-4d86-a375-d987fd587f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7dadc3a-12bc-4a49-b554-f125056b16a9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7a0a6e-8c63-4939-b2a3-aa0a89d43ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af31dee5-b56d-44a5-b947-b616298e2832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e65e37-bd30-45b6-9c30-91bffa40575b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b39a44ae-d7f8-4d06-bac1-7bfd734334e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dca34d3-8ff9-4b3c-8a34-831d95f14ba9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "522eea92-48ba-45b6-8e50-bf900899cf07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ef91fc-2b2e-4f33-8163-a2ceeee885e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e53133-7929-402a-bcf4-8ae873031a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc8a17e-e429-4c8a-9039-602bd2296d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4d6d2c-ae66-480c-9efd-c22676603338",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97de8845-47d9-4e07-90ef-d94ddf830f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c224ce-74aa-4b81-b0f0-039e38c142b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbd85fd-156f-413c-b1a8-3a3e57cc0195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ab9277-6f6b-4793-9bcb-c4470a579735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5672ad1d-1b88-4d9d-aedb-1555b55fd521",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c4ce0a-6731-4488-994c-5fcf2de34002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fac4f9a7-d3d1-49a4-81cb-859d25e58b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b669cd-c64e-4605-9b32-cb5cb49fe781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "296314d8-7093-4a95-a2a9-723412caf9b6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "825be336-ff90-49c6-b3ea-91d7dd0086b4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3e9230f3-2e01-407e-b22c-96a96abe5b3b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22339be8-d1c1-47d8-913f-1ef99f4216d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f1dce0a-0445-4bdf-8daa-8701ca7b50b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c6b610-0821-480d-a904-045564242d75",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "7c22f320-40af-4790-965e-9fb652a97a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dff9511-84bf-4f1f-81ff-d6f016ab0ed7",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bb9b24-37ba-418e-b7cb-b863481142ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "699fe58e-d5ef-4fe7-8804-c7aebf630830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c3bafe-e47b-4d5b-ae27-3fd2f2515342",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "62bb75d1-fdb7-496b-8ac9-11be722cd20c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09c1f873-afdc-4675-a7cb-d9ec648c6145",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c992c95-31a2-4ead-8b58-69432cb4ec58"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d29875a5-2ffc-420a-b82c-11cd44ed4246",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "315d4f02-aa34-4c14-a88a-dfc655c18383"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "75975836-7a5e-4507-866f-c16704b0ff51",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ecacf682-f1bd-4b11-a82f-4bf882adb6f5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "392eebf0-f81f-4da2-bcb8-1e91c43210a9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5ada5161-e093-4a43-8b23-6945205e3716"
                }
              }
            ]
          },
          {
            "id": "9351e232-e53e-4120-9bb2-e686a85a28c0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d9a3e12a-01eb-472e-8e54-6fd968c3ad28",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7615984-53a8-4b28-8bc3-3f8ab5606641",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5bf27e64-9f83-4fe3-8343-9cb727dcef7f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5047326e-ba2d-470b-a4b6-f8efbbdec07d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4493b6ed-8107-4490-b3aa-bf6ff2c386a0"
                    }
                  }
                ]
              },
              {
                "id": "f73b9f62-db98-473b-825c-4983b4ea46ed",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f54f838-3d44-4167-bcb0-3597fc51cb41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16f02a4f-b330-4e21-a18e-d80d9e0dfd0b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c8f070f-ba24-4d3d-9da6-39d415ed1c04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d0e31e94-2f23-4802-a0ed-617e3234dccf"
                    }
                  }
                ]
              },
              {
                "id": "3de3ca3d-3a1b-4571-92c6-c98a6932261e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef155a6f-bfd2-4db9-83da-7d747a105739",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f8141f53-dbaa-46b6-8a69-5e629e96fedf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c778adb-28a5-4b81-9369-5709f62603d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "af944118-ed91-4d6d-9c54-c064fb85691c"
                    }
                  }
                ]
              },
              {
                "id": "da84b000-9107-4f11-b5d6-d7db21e56652",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c32fb03-c3c4-478f-b075-78cc8694bcbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c6c6f435-c188-4a45-ae9d-0b117a289b52"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ec357db-b739-4860-af76-a8726853924d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fb6c05e5-9588-474d-9708-16c84a3cfc2e"
                    }
                  }
                ]
              },
              {
                "id": "219d525a-ce97-4b77-96e1-e3ea4b3b4ace",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9151356f-6e1e-4300-b7d3-2a46ef49127f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ace2528d-c237-430a-8cec-fa2fad8a6691"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff280e00-6376-4d9f-bcc0-4a77c82a00e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3d645d75-0784-47cd-bd91-3b14f03b8a45"
                    }
                  }
                ]
              },
              {
                "id": "05c29934-6684-453f-af48-ba32c4700036",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6bb8bd7e-9c27-4068-8411-d0665e15ca13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "088b2f30-eac8-41d4-bcea-44c547db8af1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b969af94-7a0f-4da4-8d64-2f808564a6b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b29af2c1-86cf-4f72-b078-40bb6fd8cfd2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8744a24c-eca5-4bf0-a12b-480c508dc9d8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f81fae3-7606-4eda-9bd9-b0a178911138"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dd08aca0-68af-414e-9137-b2f6633528e1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "217d7206-f0b9-434b-b93f-48fbee38796e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c615872-b998-4976-a5e9-1dc95372c45b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5095dad4-a202-4374-ab19-12c4924f82ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69316d8a-f00f-4b23-b3a3-0eeb36eaa5f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a671a69-11ed-4c86-abea-8f56a36cac24"
            }
          }
        ]
      },
      {
        "id": "56014e72-63b9-4e33-95a7-919631431aa2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "302d9198-253c-4aa6-ac8a-4ecdbf42a028",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77afc0b1-d0a0-4c93-97fb-cc5ecb473edf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3dd5bc9e-5ddb-4f87-9531-5c3c5f05aa2a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd41c199-3264-4f2f-be12-25e2ff487b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ccc13f-69fc-4d5e-baa7-35213627db60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2164f45c-da56-4b05-9a01-060be85f3558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc868189-f7d1-4e86-be5c-4a1aa25000f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a706b022-49bb-4cb4-8d5b-561edd46464d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8657888-5113-4184-9af5-9b992e9b0e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e3d2fb0-193f-4e39-9329-ea3418fe6184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4faf86-cade-40ca-b4bf-eb18b248a35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "57913b04-0a85-4dd7-a9a7-3b6caf98599f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775a4015-c5de-4528-a78f-b2cfc62d6882",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89338a19-7db9-4957-b547-b9aa48d2db58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8180cacb-5c21-4f39-9b0c-0ac854bc809f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa6f7e7-32ff-4279-879b-9ab3453c4824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc3e9d7-1770-420d-9336-d6b9c7011225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390a5632-3bf5-41e7-a7a9-8e46ad87222c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "442d782a-79e7-4a8f-b7a2-1c110f34fecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9cd41a5-944c-4aa7-8566-54f80c26ea49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c38c23-f7fe-448b-865f-a2c7f10c7855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18951b49-fb3a-4a8b-a522-0ecdedf3085a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d2bf48-aff0-442b-a1b3-0e9b839b009f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1ce8b1-d86d-4043-a251-7a0757882757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f472c0ae-6b0f-4aa2-ac4f-0d8134bd34f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2867beaa-f4e0-4be0-b287-1dc77aa58334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c3b35a8-0778-4735-8be9-066e1ff2278e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc51080-4b75-4b3e-a839-9b39d328ec50",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37ebf3b-932b-42fc-9f13-b0d9a85deef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc827fb-c343-4f8d-8a7e-a487835f6e93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264e82bd-091d-4ef5-954a-193913066fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "514978bb-bb12-43e5-b9ea-69154f522af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450061dd-fdb5-4ee0-9fa6-6c85dd14434a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4baecc7-67ff-440b-88dc-525406adede2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178d7828-b454-40a7-88a6-8bcb470e3635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28114c3d-c980-4724-b697-e64185018167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4788c287-af51-4caf-b28d-f94699e9ab93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db01a456-6175-455b-9fbb-d2ca02303b9e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3a1e09-22dd-4e83-9eea-ba99e2bce747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa11a33-4316-4a2f-acbe-2a2b9fbb59d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc065ef-ef12-4fe5-a884-fb4df82bfa89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbfb0f3e-8c56-480e-a310-652a66b4bb58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a65616-f83e-4942-b1b3-3e1b3bfb7a9f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13802712-8b7a-492d-8d35-c22c21443932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8bd97bc-20f2-4402-b225-2c630309d44a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8855e941-af3a-422f-a7af-8887b4553919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74d1f1f9-90a5-48da-abb2-11f37d54fdb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27977d04-ec48-4457-bb6b-0ecb7a15f07e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c673698-38c8-4b54-a317-267ae887e1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed22dae3-256e-4490-86a6-2b2a7bc7c030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2609a66-3b6e-4dca-acc3-c33dd0051576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51dc61fa-8aa1-4e32-b83c-7c5232f65059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2af6f15-15fb-4644-970a-30b84c90ef14",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe6c4f3-b15b-481c-8188-b31716b38c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e80f74af-e323-459c-b256-29689441ecdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64fc0919-b188-453b-9d90-edc7c7fc328a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3ff14daa-a72b-4b14-b7c0-b3074072cd59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c4ec4b-c6fc-4eb5-ac57-bd3012320272",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2082a8e7-066f-4f71-bcb7-e9ffbe8b1f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a160b630-ed85-48d2-968d-9a3bf2f287c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00984c91-7c50-40a9-918f-030e1162879f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "794326de-4dcd-4400-be74-dff1f0feee1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825cc19a-f918-4c0c-91ef-6014bab2d062",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47ab03b-dd16-4e9e-ad52-b335200283d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b74e263-146c-4112-8656-a96b343c6ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3c8a27-4ccf-434c-8125-e8502fcd8a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe57fbce-764d-45e2-b392-21df970fdbf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae376f79-06e1-4497-a062-880dfaa3ce9a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41b19fb-46b8-4c57-afb9-59a91a0ae86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0030f39f-d7c6-498c-9dd6-d304e5fbf9d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b4848d-1a86-4fe7-a0ee-7f521700bc61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "eff41894-e942-49ab-9368-985fc4cf6854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8bc731-1c98-44a9-947d-989d33413f56",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4340a0-ad0a-4db6-b1c7-e7bd7ffbcb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4523d35-c2ed-446d-b149-89f1f07ad68b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9891bcf2-3800-4631-8169-921e5fae1eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d62fe9d-a7f8-48d1-ab92-f06f6a14dac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85d9402-9c86-4565-9628-df14bd974b78",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bde2f7-c628-48dc-82d4-80bf6d17abab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd86209b-2c28-4fcc-973f-8c27db2364f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661001be-dd87-4471-9bab-c68776a9239c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "58658a51-f49e-4176-bd48-d2ead28e5cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a4f128-2060-408b-a307-03f0628c1a06",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb13572c-f02a-4dd2-bca1-91a57f2c5bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c2e17f0-8036-4a36-ad68-69ac68a89ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46aa4f54-4287-46f9-bc26-886d5a82a602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c89eef-827b-4207-820d-b0cad967b2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e3cbc9-203d-4b59-865d-2113d314ff38",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a07a148-81f4-4374-81da-9a04eff8e552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25569b0a-860f-4ea1-a93d-72e59ba9b65e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9b9d0b-7b1e-49fa-a8c0-0629a9303b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "91767a91-4c5b-4d37-a770-93da3743fc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0107a2-092a-4be1-95f9-cf11134d17aa",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d518977-bff3-4367-9420-c8a223e19815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e5c134f-62a2-4383-85d8-b9686ed767ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10125514-d84e-458f-86f0-0a842d7da108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f1c7f53-42db-4cb3-b593-519b2c72ec1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f59d16b-c8c6-4637-8994-ef2351d58c9b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b885e27e-13d3-4e8a-94a3-b0b713618c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31acf020-482e-496e-9bab-43df97a138f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a32182-51ba-45c5-bcca-f12c58fd5cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b75652-a09e-4ba1-8349-7d80b9d7b1c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6089ce4-d1ba-409a-88dc-e9c05f5cb866",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3257da7d-e032-4a28-85a5-f027347afd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ef8fd23-ac4f-4fc9-b98e-92038f0af672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6858c58d-89da-455d-ad3d-68ba434fb5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "276521bd-17f2-425a-aff4-1508805c6ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7e0d6c-bc1b-465a-b27b-59408b14a035",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4a68f1-238a-4923-9605-a54fa75effa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28321bd9-b40a-4566-8c49-3dc5dafd0228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f5f960-56e0-4d46-bde2-ec0c48dabb3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e53b85ff-9222-4986-bc70-c861ced75c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9434f91e-3f8b-4697-ab71-098be84d0666",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0fed5c-b922-4aab-a7cf-31d92459856a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fbc2348-8ddf-427f-9b4a-ff2f16ea4ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8feb220-8b98-4c12-b921-775be41c074c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7afb7cbd-ee05-4577-94a9-023c4d661f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7116e012-73dc-486d-907b-605090dcbaac",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce8869e-8172-4fbd-8a74-c8144440ef75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6216fce-02f1-4fa1-a417-264a58c0f956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bdf5f34-f763-4dab-8267-43651ddec845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a3b58a5-be5b-4dc7-a792-5b956b439e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf49e9d-f007-4430-9019-46caa59883ba",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3b6efe-00be-4ab5-b95e-413d77b47235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c038286-40d1-4d36-9f33-19712a05a7fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62086e18-1501-4aa4-b660-8864a695a381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd29deb9-d1ce-48de-bd53-b8de7171d852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a796987d-b59d-4ed7-901a-3269d0c55009",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c129f1-7f24-49c3-8a67-0f9b023a3360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baf79528-94a7-497d-84fb-14398129b4af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6716bf66-5993-482f-83be-03aa843b47b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f7f9df9-dd3a-4e0a-bb63-1599c13578be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a99181eb-6988-4516-bece-bc3c9ca32a6e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b13b07c-ab2d-470c-a771-69f467d3ba94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19463a70-f6d3-4db0-8ed2-3a37c6c535c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84238d73-81d3-42f5-9002-3968ea4dac9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "967e080a-90dc-4891-b1cd-bcd5231fdda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bf926e-9597-4421-8c5e-5f49009b9065",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b240df94-9a8c-45fa-8fb1-5d242742610e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48b4c965-8602-4cbd-bd2d-528414e67d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3896963-37b6-4c2e-abd8-5c0f2c04b27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "844b5eb5-876b-4b66-9a8e-f7d457b02de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3dfabe-dc49-4f22-a025-5150e448f131",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724c896b-eee6-4e53-a915-d70dcfab0cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27d72e1-7e30-481b-9158-baef312bca1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd6216d-251d-494e-ac6c-34524b8013c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f2a9388-a92a-4a36-9162-46160eea5c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d59784c-6a00-499e-9032-e0b36af2b3e7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4526dbcc-81db-4afa-b2c0-414e427a7bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c995e0-d2ea-4f6e-b866-94730a74969b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112e9715-bfa8-4d44-aaa2-f442d1b4c1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d594c0c6-6f0b-43f8-8ee6-dac167ccb491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39bd087a-a75b-4760-8391-f01ef673720b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e2b397-59bc-4e71-abee-ed8ee0168515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79b075d-57c8-4dcd-9df3-dea71e631464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b61eacf-d4f7-4257-bdef-fb88469a6f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f92f4c4-6d00-4a74-96ae-1313a0be456d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ef6785-3942-465e-99d5-b548011d0aba",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b0b40b-0f2a-4759-8fce-9870d270964a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6154952-c91a-4443-aa77-574719b04dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316c9d38-6d6a-43d6-90ff-e3c949e39c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e24ddb-b06c-49df-8666-5e7e40faf345"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "25169479-ed70-41b7-a5e3-ae931e2db8c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5625d2ce-ab83-41f3-b6c7-ed5d4f871f51",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f369e9e-c506-40c4-99b0-4108b8e1d767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f70501af-e557-4406-acfb-61dedd8282ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f278bb-70dc-4bd0-aea0-ae087b593dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6297c3f9-0993-4c2c-b085-d38ce8661d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f148d49a-1f24-4418-a68f-164c65aca538",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8680d58-ece2-4eab-a751-78489eafae47",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "ec2b17e6-5d30-48e6-b282-a9271fe50271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "376cbb4a-d60c-4027-94db-0666bc851ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3352f55d-8997-467c-9c04-7288f8f5e466"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5995b3a9-ca6f-4e65-926a-79bf02a5000b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16a0a09d-8b5c-4dc9-930a-a8e9af62bdf9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "16b5cfb8-5a29-4c67-9e30-7614669696d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff257c09-2c7e-4f15-9d81-2a4d4233e079"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da5f5ba7-b3ee-43f2-bc86-4908375bec15",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0b63682c-9535-4703-b937-b33f89db10dc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5592d6c6-79d4-417e-976b-650da3866e14",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0bbfbfdb-e147-40d1-96f7-e0b641424171"
            }
          }
        ]
      },
      {
        "id": "c74ffbe3-3690-4cd7-bd02-8c8df7242864",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cee05a66-208b-4a9e-8851-1413609e20fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "91e0016a-88c6-4a09-9374-fd65b42d5546",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "097e68fa-2e4d-4a84-8849-e5a8cd62e6d3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a29bf6-d535-4b28-aebe-0545fbd872e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe54a7a1-e73e-47cd-bf90-18569b6647f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1cbf8f-271c-42a1-ab57-e51f1e7d3256",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a62de2-04a9-4afd-9f34-a47c9a9a4f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e5071f-99d4-4879-ae84-aee83d371a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5878f69f-ced0-49ce-af6a-99f2a4dd5dda",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6e29d7-dfc1-4724-b82b-0679ff87f71a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8821934-c633-4f35-81a8-56c828d85026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053ec6c7-4fc8-46a4-945b-84c95ad3e0ae",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c59ffa-b6e9-482c-9e8c-5c0257ecb86a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f158831c-2fc6-450e-a004-6ae29c4ff1f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967db7a9-0877-460a-9792-e6ad0076e988",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f515dbc1-caae-496a-9244-0fea594764d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d00ca16-85b8-4734-9b1c-21ded6444086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07d7f97-ed75-43e1-8e34-2dcdea57ac5c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17042491-3cb4-40d0-8f0c-b0b48c7d21ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8c57d37-d524-4b02-9167-959be2a82b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c5af3f-d656-4ad0-ac14-c6712f8a38d4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b844b73-ad93-4434-8752-3a46c4d4be55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b903c800-4913-4d0f-9405-b6112a572249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12247e06-7da6-4ede-a70b-e2c8b3d7ede6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3263e4e-cee5-49f9-ba7a-7585dec597f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1301bde-a6b6-4902-ac39-38f9835b4f71",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821ea744-cd98-4b2a-9043-8bd61b857843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7471bba8-c72f-41e4-92ae-6434724985f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e162d7-4054-4a88-86c4-c7dd80a03d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3eeeb4b-05e1-4d48-96d5-c867c6b1f566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c21ff25-c03d-4106-a310-952d70be0d77",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038da471-7f6d-40b3-b1fc-caac75cff3c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6397ae4-1bfd-4460-957b-1a96a9e5ff40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e118305-ad61-4572-a5ef-7b02f94b31d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d582eb3-364f-43b6-b103-0749487895bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126f4170-47bd-4ed1-b803-cf624544f334",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9bd1af-6e03-4ec2-a772-3af20eb9a8d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f2e534f-eeb5-46a9-bfb7-601e1ac9effa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1ceb02-b831-47c0-9927-59bce0e05204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c77a8dae-c825-4615-b4a4-20f33955e8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cdf10ca-ce65-4076-9375-2d8bb11c8e84",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92730ac-55e8-46be-909d-f6ce3c252c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d2d2ff-0306-4cb6-8bb8-33d05ed107b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9212e7cf-96c7-4b3c-b644-e2428c80b533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2f091b-8673-45d8-9b26-12ca470bfce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d6da94-d796-4574-b3b3-aa4b7d298d64",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10eedb6-4622-4a57-9082-95ce85a34007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "accae4e6-9882-4816-a4d2-862bb9f45f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8395eb-48ff-4f8f-a288-2e20d0051350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d4da145-916f-4001-9374-4c7fbc418ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe16194c-f3d4-4962-af81-256505bf89b7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0a2d35-9d5c-4c2d-ba2d-145bb76fca48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0674279b-b555-483c-9348-1da35525c290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e7d786-e4e5-4b93-b72f-578e3edeac9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "615cc269-935e-4541-83ac-de0b9a62a97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8675a61b-1949-4dce-83dc-c93e40e05991",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd7bb43-3263-4aa9-8981-1014621dabf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fa6a3c7-4ea6-43ad-b4ba-f7a92e9fbc91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af762966-64aa-4620-8b28-60da357d3e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20102f29-cc98-4bbd-8767-17236415a57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c33dd24-d162-42bf-b4f2-f1c5a3e8cc2c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82f5a79-1171-490b-bcff-c0e95d657ba8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b50a23f2-3573-422d-a996-08a1e778933b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b91e94d-d83a-4103-87f5-f431bacc7c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "408235e5-9660-48d1-8ece-77a457e9a05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc924d0-3d09-4067-8c3c-86e760d96df1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df345c3b-da54-4e7d-b4a3-8654f5c985a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcdd6e3a-2d12-4e1f-b559-6f776cd236f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77386a8a-3992-414c-b4dd-030a0e71a5fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42ec6f18-882a-4dff-a356-6b217366c33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "239ea329-5d0c-4ef8-9623-4315e3504c2d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861577f7-a529-4f0e-85e1-bc2808393009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d317911c-49f1-4db6-849c-6ef71609a751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb1a49b-8d49-4a70-9335-66c71249843e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2583041-dbaa-4f48-984b-0129d98177dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61015b37-1d33-44ca-b420-3edd5c1696c4",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b847bebc-fad6-42a7-abc7-e398777ac2ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186047cc-373f-4fe9-bff4-89108e313bdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21caed6-e795-490f-92ed-f395d33f5d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42c6a804-0743-4700-b812-a3e9a4a48413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70eb2efd-7502-4fa7-a772-72877f9265e8",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b2eca0-5ac7-4241-83c8-6caaec68b50c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38aad07e-7722-4835-b15c-7dbc635c82dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f2f70a-c3cf-4709-803c-9e34b2b1a667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29f065c-c62f-43b4-aee7-8c991ab90576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679ea93a-b71e-4516-a3b4-99ccf544b2a9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ec046c-4c64-4e83-a4a5-5959097e2e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146044bf-8012-49c3-a3a2-db1c2946d5ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ebca075-a86f-4bcc-b3d6-d7203ff66707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b03f527-c99f-43e9-8d03-a77c617d1bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f27411-b2c9-4617-a20e-6a911c2cd0b0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbfd4c5-7707-4c61-a36a-45058ed130a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4b2a30-07fd-4a06-95b8-68f65fa7b6d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d69a3f4-7078-4e41-8d03-d4eba923214b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef3aa7e-bed4-4cb2-b276-d0a40ad1605b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb07eeb-ea3c-4708-ad50-d96f2fa1dda1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde5f57e-92b1-46d5-8df1-ab39e5cd32b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a241355-c6ac-4421-aad1-5bd81db8050b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12297c40-49af-41a8-bcec-5fda67833bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0135414-0af4-4099-b495-ed9deae33550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "766a8977-9014-4257-85e3-61f87e1854d8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c54eb3-263f-470f-8202-21d9a6e449c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca0ebdcd-89ec-4d88-b9ea-1d9580c3e07c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "909924c7-5517-4be8-93af-4b67c1ec6ccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0037a9a5-d13c-41fc-971f-8f51f771b416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0f6408-877f-4e06-b128-b43c8ec3a94e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70aa4b5-c1f3-41e1-b50c-ead0ca665689",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2cc3eaa-3b4b-42c5-b5b8-94b7779d8e57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc544ac-5db9-4dfe-81ca-824d1655f055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cdf01a1-f1ab-4027-9478-98e7507de62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2b725e-92cb-464c-8fbc-b4f7645a1583",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83fe8bc-dec1-43f5-ab14-e0289b4edb31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad212d12-e566-44d0-bf3a-cc69854abfa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "038a7be6-9b84-423e-961b-cd1d74d86114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "951e1555-fa28-4a48-954b-8a682e80ebab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d86e5b-12f1-49bd-be95-c577f2af8921",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f8e251-abd7-4e5f-a576-4d6ca59e1876",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "660f6aaa-bcea-492a-a108-6162c86ef865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f654166-60f8-4b36-8c01-52127d4db937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ad34e2-f59f-45bc-ad7c-b17c6010e171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf55fe4-1d24-4a52-b463-5634d1f31661",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2285d716-5437-42e7-99b0-763f8bdbed7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "604ca04f-46d4-4740-8c7f-5ee49df15645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e0c304-1202-44ac-a763-66b30d40a2e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c3866e2-c8a7-493e-b24e-da32e75b6293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ed465e-e137-45cc-a8e9-84d93aff40e9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96dc8cc3-7ab7-43e8-9210-0983f5a039e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784dab45-cc89-4b7f-9604-db9b96f88d83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d5490e-bab6-498c-a5e2-e3732fda6785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3746fdda-f5e1-421c-b4df-1ef4e077f9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b130029-9611-4a3c-84fa-ebfcb894f005",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e306d7-37b6-4dbe-b7f9-0c9d68447019",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c723098-0f9a-493b-8d87-5bf22656e4cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "772dedf7-14e9-4a43-b743-639e36ed1ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46fb4fd1-abcc-42d3-a36f-6aaec3665d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90448593-e806-4557-b083-f8709aa51bd5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204949e0-6334-4aa9-a1bf-df692f538af1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7c014b8-fbde-4229-915e-9fc56f10243c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9540de6-deff-4ec5-bc25-39fce9c9cd74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1504487f-872b-45ff-9915-5dc734a6e754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a95d944-3282-47bb-9ecf-1352128062c0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cadc77c4-adfe-46c3-8a5a-b040a67333e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f58da86-e448-492b-a452-c1a20b8f4dc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "073edb32-c94a-45e3-9f3c-a8ae989c31cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6478fda-e72c-466e-bd4f-6f022e8f41f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971cc7dd-ec4b-4446-9d95-97027cea7d34",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06acd652-0b34-4624-b44d-83f35021274d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0774d162-9ae4-49e6-9df7-ae6e5b382597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3d7201-6a6c-485a-86ee-c7433d3872e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11926eae-ddca-417b-be75-c9a3806860b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3950aff3-4f19-4e5e-93a6-236766ff80ba",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76043526-eb31-4a59-98d2-fdadb8e0f095",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c63dee7b-50e6-40fc-88f5-c753031ee6c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "374ca14a-294f-4b7d-ba41-43f7bc06563a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "686047f6-f430-450d-871b-68b9d462486d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d142f4a-d809-436b-b818-c22d178b8485",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2818f21e-179d-4a16-90e5-81fa7ad513d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed2c13b3-30d8-45f5-b9bd-0493e7108b9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87cc065d-ee5d-422d-8cd0-a1d1f32cd5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ae9b64-7ab4-4d52-b719-f55b5f66f688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3024b4-f6f9-4bc9-bf1d-5151361277b2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e04903-a1f7-4016-8f82-6f4ed6ee25c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c34fe89-4122-474d-a8c8-ef0a3a2d16d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce7eebd-cac6-48d9-a400-6a3e80bba3ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2f64fa-6d7e-4d1a-a663-952749c4e3fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782691d8-004e-4f52-8601-5f29515b8a00",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d019f2-2819-47f8-be26-6f1afa01476a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df84d68-8fb2-4c27-b0dd-095463e9be48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af985dd-fdbd-4b91-b114-6269dda5755c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ebec3e8-0bff-4278-a118-95631977a6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cabe088-4dc2-4cf9-9ea1-5d3fe28b5d99",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e493b2-4fc5-4c0d-b9f6-f78e0c5e6e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396752c9-5f76-4480-b8b3-4bddc070ccca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea254376-21da-41ed-ac60-813455fa7717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c90a27-1a9c-4290-aef0-a4a66a0c7c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91f6294-25b2-461f-ae4b-56a7aadcd551",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091c2247-60cc-4627-94f5-04b418790d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46b276b-dc66-43f0-a47e-d2f37764493c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26990d4f-2c13-4549-9b1b-09bad2b1e6df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c48f5f69-cc7e-4189-aed7-43af0026570a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c8dff8-631b-40fe-8817-6fcf051ab725",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a85a98-75cc-4a15-9449-303a22adbc5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed5fea3b-b7ac-4a42-9fff-8c59879f1df8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "849fcf19-5b49-41fc-a375-f6dcd30c41b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b42d832c-1fe8-4c44-8789-89c32ce30c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d851c4a-7092-4f0c-b664-59885e3c6483",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbcf36ae-a952-42ab-89f9-b7921d23b8b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb6af63e-3cef-47c7-8327-dc379007c210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ead50b-2252-4f39-a22a-08ea8da23c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "126f93e2-4e1a-4126-9708-2d70092bb4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986c4f11-b5ad-496b-b998-6e81bd6d1db3",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd58c96a-c55a-48ed-a5b5-c439d828e956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e1ae14e-1512-4813-aac0-fbc80b1917cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cac2e41-adf2-4787-a40e-77b147ef0890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ea1a18d-fc3f-4955-9bab-d0b38d82d879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c115f2ea-e20d-45f8-8ec4-863f145c9072",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c2d42a-6d8e-4360-914d-85f99e2de689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7827ddf5-4fa5-46ee-a5ba-a1f760108c37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aafb6403-8908-4833-a8d2-5e6dab84e7c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4000adb-b2cd-40d6-b8aa-bf2e638c8c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47706520-925f-4c73-9770-b7980f21f941",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d1ff0b-0a7d-4677-9f4c-fb61d3c2805e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e703e9a-f05a-499e-9402-abd47521a802"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a198e647-380a-44cc-94e3-196dfef0cbf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5bb0aad-5d2c-4ed3-bd2a-52fee3b32af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57fc17eb-4d85-4310-b6c6-154cd3e8640a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af18547-095b-491f-9a63-eb718853ca88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc9a2b9-8598-431f-b48a-12a33f5c5738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe369787-f82c-4475-a6fb-3ae2d347f34e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c7dd410-a159-497a-a774-acfe302d6786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1baeba-7c8b-49d1-ae5b-b8bef96509af",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d69253c-db56-48b2-9093-938424e40c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0cf22bd-47f1-445d-a02b-3aed52b1c290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0a7d3c-cf80-4c2c-969d-90e229c17fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb8a5676-1c53-45a5-8959-e13362d46504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68402cd-b663-49e8-87ab-60bbbd522c69",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e28837-32b6-4f4e-a68e-05854b806c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcb9b5c3-04c0-4289-9b3a-acc3efc722b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d8efb6-eed0-4b03-a36f-ce05fbe4690f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00bbbb8b-880a-421a-95ad-0b6fa74e368b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e542c96-67f6-4613-ad1c-cf0bb4e97ad0",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add8b320-e05a-4856-82ef-7154185b5f58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb976561-0a38-4db5-ab0f-d36ac1c0ad0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "793b5e3a-b81a-4df9-ab94-1775ea269d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de2212d2-32e0-4e00-8c09-560d00bb2e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f3f2606-2a37-4bb2-a732-2457c9da913a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de74936a-a3d7-4a9f-a301-c8bf9e2e0074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c82ae0-5aa6-4d98-8a04-13aac46f5d5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b8bbd9-6627-40a7-bb70-d95264df67dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b599209-a366-47a8-b6aa-56cb968c2e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab674d5a-5948-403a-b3e8-01de24419428",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100e720f-562b-4c15-bb89-00246be36bf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8cbc265-b18b-4bf0-9341-789460c081aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a2db42-b45f-47ce-a6c8-aa243d5004ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1d6487-904b-4fea-9de8-e4a096d028b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9790397a-11cc-4dec-a369-1b9453a3bae5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbe7727-0827-4c84-b356-bd9bd586976f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "411d8d1e-8ada-49c9-883b-f3cf258bd20c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "335c4dad-70e9-4fda-8248-680ec6299ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f121301-a98c-4b06-973d-9f4dab0eae90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54b4ab2-1232-4eee-a9cd-3edb192bf6b1",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee73303-53ea-4b14-98e5-d507fa42ae16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc56d692-3841-47b4-9d4d-9f90c8bde90f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae9f300d-6573-4e48-aba6-ce910a7c48a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43616629-6c78-4ced-bb4b-8303ad6041e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6c3d58-2aab-46ed-9633-60197e7f43f5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bb3715-92a7-4550-98c6-4f7e915faa5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c7cf2f-234a-4d55-857e-f5c469bcaf49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20757840-73b1-4e88-9a5f-7de8fc30a791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60eb3b2-00c9-47e9-bf61-a64bc404cc62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64840698-f028-4be9-a359-828dd7512feb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421db359-ceab-4742-9928-47d402af2b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c6348b-5ff3-40c2-934b-6593c612bf15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ea4ed4-1827-44d9-915b-010093eb1afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d46146ef-9fbb-4f43-86f5-14b0b8bb1306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46db2a4f-1511-4df3-bb65-e7bb9e1c2375",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3d7a96-a95e-4415-93b5-fc76bf5120c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d1a3a51-125f-4768-91f7-87ac96d02f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c239167d-649a-4cfa-8a81-c18374029c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aadf6aba-0e28-4d1f-8582-8ae369a6a135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4c96cf-3323-430d-9978-d12fa57458f5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7632f75b-d0d7-4a96-bb6f-9906c5e50636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26a83251-39b7-4984-a6f3-f1e527eaa6cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09925eb-4c84-4dcd-9fa2-6276bf6978b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5139dd36-472a-44c7-bf3f-3b039c5457ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575685b1-67ee-4c2c-a974-bd723f01bb89",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9d1f70-0e72-47a1-9e52-1b1172cf2a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ca6f44-c14b-48e6-8caf-88a2ae71ced5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e38864-338d-410e-a037-21889d01e23a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f689ed-0af5-46a2-817d-2ee1b4b2e142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d864be-3ce5-4f8f-8981-3d5dc604390c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4851c230-143b-431b-8419-ae5c29342120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed34c01-7316-461e-9d24-16faa132673f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02483f3-111b-4e9f-a92c-acc0c96ac5de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac90af6-8556-459c-ae59-dbc8ea1257b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35272765-4972-4a62-ba4f-019710b14f51",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6cd8327-046d-4275-8f47-e7d41f41ae5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04621742-83da-4e04-a340-e943cba37294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad57cf7-2b55-4ece-9ef6-f46ad0530aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47079a32-77b7-4076-93c9-28f758bbe35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ac55dd-29af-43b5-bc48-fd7d64e3aebf",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8fd6bf-7c61-44d5-8b45-f1db4e55e585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec84d952-ef62-4b21-b1cf-30715533217c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bb9227-491d-44e1-b821-3dd99e5b64c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12c69782-f5f7-4773-9842-87034b7a58d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f35dee-8fca-49bb-b45a-0d8bba68bbde",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41d9443-ec02-46b7-b5bf-90057ebebdab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5414b05-6575-445a-8e1d-5e3bef6286b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1e2335-233a-4094-8070-390ce0b2ebe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1806ff-726d-405c-9492-7e1f2a6ad0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732803b2-87cc-4d45-b1c5-35dcfc7e7010",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b663eac1-6300-4304-8195-2084f60ae63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd2fd13-4225-448b-956a-1ab85b49cf0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e410520-c556-4acc-a544-abed73ea37ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b91dbfbf-f59e-4826-9eac-fb7688b5d4de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00849317-577c-4a28-8994-698f915ba7cc",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e270d1d-7009-4a55-848c-4466e60d1d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9f89840-fc9b-4500-aef8-c97a395a1ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "781cccea-80c0-47e3-a5cf-5eab2c4fcf66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f00b0bb-6bf0-47f6-af4c-edd5dd503dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce35b71e-395d-432f-94b8-683bda783f6d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20db573c-5f64-4f3b-88e9-7fbd1f245ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05e69f67-7755-4b4b-a45c-caa76b844753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00249c3a-104f-4bdd-a3ad-1d53be0798d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a8397d-0fea-4656-b8f6-0e7e0112f028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a1b847-3ca7-4947-b339-d6e844ac0e3c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcd9d63-1a3c-4cc7-8a0f-1e407cd04e70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a591e5e7-92e7-465f-989c-35a75e09e483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9532bc-9371-49e1-b3cf-0c28da5f0fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f116e9f-8bef-4907-ad73-48169f930da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af73e5bf-c48b-4989-9b3b-d723b4fc2376",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3524fc5-8e3d-4c58-88c6-0a21d2de6cc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "687393fd-9ca4-4f96-8b8b-f8d3beab99ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "188e324e-68a4-41f7-923b-4baccb2919dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcbbe42a-e16a-4dbc-b591-924dc109864f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54716a0e-8836-4e93-aec3-cb68f7fa3539",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4333c6d1-38d8-411c-92cd-151e7da45675",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b861f3bd-b8e8-4505-bca6-b4137baefd1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a2eac9-55e1-4c5b-8305-46437daac744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d290b43-d328-4325-83e3-e3efccf5ba29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9f16f5-51d4-47dc-a11f-fb3065b710df",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b896db0-5861-4780-827a-0ebcf40809e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24f33c5a-dc81-4553-a6cc-f0f674ec226c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b262f11e-e5f9-4152-8434-93690cbeede4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73918033-e382-43b4-bb6e-a0cdfa63b10d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a510f5-02f3-4d2f-84e9-c2d875fb66dd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c32a339-6178-4d0b-b6c3-5200120d3909",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d16d8973-6b1b-4b59-8795-134b49fe2977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e7a698-9b4d-48d4-bea5-c0495850b88b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9d858e-f7fd-41d2-a719-42212ffd1ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b31226-ab27-4b3b-9809-fc64bdd19587",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec30b0c-bbef-4ad5-aa28-a609c7bc8f88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ef74cf9-cc46-47e0-b539-fdf21e6cfed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a6b64ce-c7c8-4c8c-b555-beace749ab76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2567a6-c2b0-40f4-be3b-dadf93cb2d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a32bf19-8395-4636-872b-970c7e9aa940",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316a1b3b-9d03-48c4-ae6f-927700374db3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62283c07-9459-4bbe-8db2-70162faf79c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f53b5da-3c45-43b7-b96f-f5e7e0b2274b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b0f9333-38e0-4e72-b645-0a9499753142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bf631a-9c2b-47fa-8085-fff5cc568e3c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fdda068-a618-4adc-bdf3-46bd93add874",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42d72f5d-a7b2-4e8c-81b2-fc17b602c408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5372b7fa-ca12-4c5e-803c-21a3650fd7c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42fbe41-9cd8-45ea-8bdd-43c61d64476a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5731ce-fad4-4a11-a5f1-4d34dbaa23bf",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e2d392-074f-49d2-8049-6f058c2ce279",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bfa4971-950b-4dba-83a1-57df31ebd110"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e3dc08-80c4-44da-97a7-04cc6462a2bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a159bb4c-d653-4198-a75e-0d180898c3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4ed75f-0b7f-423b-9e2f-2109ec052294",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e68ec0b-018a-4b47-8f16-73bc7686e019",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c735c3e-dd58-44c2-a484-5ba28c9a2ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e995e5-00f4-4c5f-8b62-a0e4b916f4c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18caa468-1906-48ce-87fd-9d0364f63c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94703647-e376-4fca-bc6d-523f4907f387",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0b27d4-13f2-499c-aa32-511b858e17ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab19a40c-aff8-4fd3-a6fe-17d05fa51794"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a012290-a837-47fd-b8c9-cf1b35d6598f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775107f2-2f9b-4176-9514-fe5eb54e89a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5278ca7-f25a-4755-b319-d3d4f7cf04ca",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded3c8e4-e6d6-472d-801f-9d48c8acab8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69043c80-0cc3-420c-bc3c-65cfdf8aa445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d7177e-a87b-4840-be90-fa91a68af68c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45aeca51-16c7-4428-a6ad-b201ac179c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8d02db-bb89-41cc-8c91-19b09266da78",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd74f1c-1471-49ee-a2f8-0b184269e212",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b3631db-1d3d-48e2-81ab-76d76be5d2d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "328c08b5-4817-4c2f-a394-d48f94283073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c71a854-d4e4-476f-a5dc-567095887808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff12dc88-05a6-42bb-9193-fb92d55affb8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c7ab98-0be8-44fc-9bb5-1ae5955ee3b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50351f3c-3696-4b4d-9de4-8d74f11e5c5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd122e6-df48-40c9-886b-7839baf826b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a18ea4-66ca-45d2-8d1e-3fb418aa84b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e7043e-dfb5-42f3-8c74-bd3015dfc285",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95c55a7-0bea-44e8-81d6-7a569b84a065",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb1f965e-5924-463b-9927-6968791798a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5e7fc4-6eb9-4b64-94e2-28d06f009617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f39e1b76-fd4e-41f7-9c31-24ed79da42f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d6d59a-3e18-40cf-8e4c-62938252adc2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86009a2f-bf93-4f80-915f-f8b9b4f6cbc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc25f41c-3b72-40d4-8ed1-32bf2b77ae32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c2cfcc-9645-4025-8092-0121f3bca944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69df6bb3-e1a1-4288-9df8-6eed72ca5bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d8c7a4-ba5a-4a33-938d-d23f99953904",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087d5d50-dbcf-4393-8d50-5b9307295513",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66ebd04b-2d4d-4dac-95a7-bd9440b8ec3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8868bcc-0a61-415b-b7f3-3dffd35b78b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa58234a-dd3c-403f-b76e-0dcfc6865497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6638ca90-0c65-4bdb-83d6-734dded0dcae",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afb0622-9a02-4392-9e65-3dc9570a859b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7960eb85-b537-46ed-8bc5-552d51a46a56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5537f54-33a9-4cc5-b14c-7e3ea6ad21bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5646fc5a-ba33-4ddd-a963-a8866878d241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f9e6e2-814d-431f-a32a-53c8363859e8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ae1a77-732a-42a7-b9bd-64bd3c3a313b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51da18f3-4ddd-4478-9abc-e7829adc117b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d8eb4c-bdd5-4c01-a00e-ec7d55e92119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16284297-8648-433f-84ce-91689e7ddcec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5fd8b1-5b67-48d2-99d2-970ed25320bd",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5a8603-ca76-47b7-90af-66c5ef439622",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "879ae5ee-26aa-40d6-b840-21852dd596aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5852ad-642c-4403-8cf6-7dfcf8823d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa23d42d-d7fa-483e-9248-d7a2c1717c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58cadf1-8675-4c31-b7e5-2b1f84d97288",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e5979a-dbf1-4169-af8d-88c91b5abcfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "292607e9-4f75-41b9-abd6-3ca77cde2c1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d54d23-1fa3-490b-944f-314eeb65b8b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ac90a7-f6b4-41cb-9222-4b93d49d30df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe84174e-bbe3-4c9c-aa72-bb8ed4aef634",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053146b2-adf9-471d-bef4-6788c0f8c9ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d788294-5085-464f-8ed2-b7f553f30011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c560a9ab-4119-4a70-a1ff-57ef3c322d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23336216-4efc-4249-b520-0de533e4f538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81af3bd0-a9f9-4c45-a4d4-25d353bd3da4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d332a43c-f866-451d-a4e5-a81d1a9e07c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ebc7e5a-4da9-4e7d-b754-e1a00fbaec72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8a7513-cc30-4347-bbde-bd13047df915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d00ca5c5-e814-45ea-a6b7-e941b62cfecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35afd3d7-7acf-41e3-a9f0-10cfbdb868d7",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d034f3-6563-4ee8-9b7a-7ce145ffb9f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f182813-e929-4ab6-960c-b88effbe45f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a50442b-c946-4727-abcd-284d4580d8f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e7036cc-29a1-4cb5-bf80-ff9e1795a73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dad1682-ff2e-4e0f-ad9b-5ac273a0545f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409cabff-e74e-4338-8381-a9be2bf8c187",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bc6a0a1-cd6e-4d75-b999-aed9f090722f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa1bed5-7454-436b-bab7-f0c47b8fa53e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bf263cc-b67a-446c-bda8-c67075638071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c66b07b-6771-4d5b-b052-2d2e8d494b73",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102e60a6-00e0-4086-a44d-d99cb74321ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "013b2fcd-601e-4b0a-8b58-f8eb7d18cd38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cfe675-e44a-468a-a25e-4005f64149e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e224101-4126-4ddf-9401-31e972475a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ca22c7-f5a9-4cb3-bb35-3ad9047aadb8",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b7a08c-54ba-4727-a64e-a273cfe83218",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2dc37b6-6fed-4c6f-83ca-58404dfc7673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad4560e-0988-441c-9188-46006b99e49c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3652148-a798-4618-a85d-cb6545112b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80df9309-73ef-4d05-b224-e0816c6a4a06",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3dfb3e-d2c2-443c-a693-4a16ca3fd948",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2ad1cc1-823b-4535-a85a-99c7be40ebb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea327da4-d51a-4e13-8372-f73b002159e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05f7d6b1-c2db-4597-abd9-b8bd8db28853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4689b4a8-fbf6-4ef6-ad79-147f740e3fe4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4dfe9f-9a5a-4cc4-b809-623ec231e93e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34d96ef0-f085-4762-8379-fdcc4ec9d471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e9f9d0-d6c9-44db-b435-4d1b4d09f68f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f9eee0-ea33-4f85-b347-e1ce22f5c366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b111c3f2-0a14-4a38-9c1c-a446135b0876",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83fac3f-da07-4aef-a55a-9471e77f2a89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92e7f1dc-d9a4-490b-a38f-c23cf72cff93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cfb7c7-2b8c-4363-a652-852f62ead62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65044e6a-0116-434c-831a-ba516846824e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eaf902b-4da3-4466-b5ad-40293fa0a9be",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a12ac01-573a-4cbd-8a48-23eee1f4ccee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab97bbcf-12e0-4925-b67a-39da999ad08b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2add1a-6b61-4e84-9b30-9ea07026cf80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23268e30-63ac-4be1-bff8-377b146aaac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a4db87-9a67-4beb-9f00-359cb4c29649",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dfc2d55-2411-4499-ba32-ca35e652fa19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4960f97d-9169-4977-9148-ef7c8bf5d4c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ffdbe4-54f0-4e74-a9a3-8848bce0a40c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8cf4fe8-49e6-4cf1-8f0a-6b7d1c073762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f9037e-6176-4282-976b-782064edce3f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f07316-2afb-4bd5-8dcd-3a5f86966a94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae707e56-b7d7-4556-9728-beff160dadfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5511169-e0f0-4ca5-918a-e54694619f5e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "962c1557-5214-431b-b69d-c9e7a39c63be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6a277e-54f1-4e13-9f96-6fe3b81a03db",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2796b243-39d1-4398-98b7-b467e88ccff7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c60df8c-ad72-42e4-9935-36984728a6c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88cd49c-7214-44b6-92f9-841e049ff513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11e50366-a27e-43f3-ab66-24e424e4bb4b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c336dc9-a3f5-42a0-96a2-1ddf4caff97c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78246948-3eba-4337-9124-4af1f426a804"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f56f30e7-5859-4511-bc3c-cc9f553b2635",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a0c2802-6614-46a3-94b7-65b60c2d82f0"
                    }
                  }
                ]
              },
              {
                "id": "9edd36b4-9200-4399-8e7e-6a5d1b163c8d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b6c0a34e-b97a-49f7-abdd-659d25ab0275",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73d1f88-d9e1-42f8-87bd-de66e532175a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "90064c12-ab3f-4c85-8eb3-01362319e213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169ce383-8115-445e-8ac2-0b825ff6e4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fee06817-cfb2-48ae-bcdb-a60bc6b88e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123329b7-b30d-454d-93cf-97aaa8db861b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55fbc26-df49-4f15-b919-c8743aab1b0b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "36464f0f-05ca-4006-a65e-4bfdb1d88851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc3336f-a08b-44cf-ac8a-456d45964b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a0ac5a7-222b-470b-a218-e93dfc44b3fd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ca62d4d-e07d-48ba-b456-e6d34752e041",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7478490-90d6-48e4-ba65-38b8d4ad60af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "51f114d9-c208-40ba-9f2e-fd460851a5c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc19ef6f-8ca4-4d9a-8701-103f305c3134"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "b6299982-21fc-41cb-b37c-e1e5d297920a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "07cca5b2-d74f-4f75-b1e2-5a20cb252247",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e4aa3f8-e628-468a-8129-a1d70f07e24d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "523a85ec-0822-4533-ad29-2fc726dbd3fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e898225-dd45-4362-89c1-3094703e6f49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18247705-c9d7-4c68-8a28-a2f43bb9a89b"
                    }
                  }
                ]
              },
              {
                "id": "d2b25007-22fe-46cb-9d30-aa9d51d03140",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "03a36e02-c26b-4f69-a860-c8e4338371f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf3beda1-8a7d-4279-b114-e9f67e5e77a3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45deb254-48b2-42c7-9acb-c1058d91dcd8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c55f1a82-0986-47db-84c7-e377526a42e6"
                    }
                  }
                ]
              },
              {
                "id": "d6c4bae0-5192-4562-bacd-a8aec83c89a8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91e89a21-936d-4331-ab0a-f4dc39f86bab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cdd077f6-9a71-4a50-b56f-ef7638309543"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "298fdd6e-e13a-4d06-8594-314a8e59a9aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bd7764c-576d-4246-b3e9-3760eb428c9c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28524ea1-a344-42f7-9370-7a4be7137a55",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4a7d3a08-ccaa-46cf-b25f-418dfd0124ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f48c9bb3-01b7-4510-a829-68c1db703111",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87c9ab46-8e04-4e73-9cc5-c8f4f532053c"
            }
          }
        ]
      },
      {
        "id": "3025bf48-bd70-472c-829b-47676f543994",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "816b9052-1290-4b5c-8931-4b5c0b3a9680",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37bd89b6-0e61-4b4f-954c-6c483f1f3386",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "65c9f688-3a19-4179-a851-176ef2802d06",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbfdf8e1-a8a4-45d8-9700-d5ee118b8d3a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "21ea7ae2-6f7b-4bbb-a7c5-d3bf365079da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "852bff33-0ce5-430a-ada2-b3536f173cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b7ddd16-3634-446f-84d2-b2d77daa9921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed55d11f-b15c-4eaf-b7a7-eaaf8c4b6011",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5cab21-33ec-497f-b32d-88a7e1d26d03",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b64dfc6e-3fcc-4059-b196-28d75428cff8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d9be29-9dbd-45ed-a260-7c3df98587f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "964d322f-509f-4c01-bcb1-06ab9596268e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9be3bf6-1f61-4d9f-a5b8-e4f7b215ea63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06e2d9e2-e508-4f4d-9213-b3d5c52f14dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c49eae75-60f4-4dea-9b61-f2a14988c809",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9543a7a-772e-4ccc-8ed6-0d03d4eee4fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef2aa07d-4675-498d-b98b-693814a99793",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "64197a2b-580f-4fdd-82dd-a7b93c0d001e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "258b0204-bae3-4823-bf33-4281aabf3ff7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ce87655-904c-4862-b8c7-adaf15f794fa"
            }
          }
        ]
      },
      {
        "id": "d28c8d28-5c27-4556-925b-77052e16e500",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6f09ba81-951a-4f78-ab21-d859c78d4c61",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a05c201-5549-4950-ab2f-a084fc4c647f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3ec10352-1759-4356-803a-b6cd3e6dab86",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c2017d-109b-4489-bebc-9f99b67b9423",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3e38539d-a38d-470b-bb5a-888b85ffbf5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff28921-7710-45c5-9c3e-deced63f74f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e91cf51c-962b-4cd4-ae7c-a05383c8d8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9126d963-2ad8-46ab-84f0-e633004bd270",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f81523-6c73-4297-b3f0-e10925758b79",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "af3ed456-87dc-410e-929b-4e1ad3d923e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bdfe5df-96cc-4dc8-bc3f-8e9a45fec0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6eff7beb-d78d-4a85-92fb-6cf1f49770bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac9c6c91-618c-4f50-b1e6-8375744e8281",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1dc1354a-ba71-43ed-8ad2-fc7df04c111c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "343a24f9-ecab-4471-bf55-6643bd8d3fc3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3100910-73d5-49b8-8480-f163e2ef02de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0ba99c88-ca7c-4a9a-ab6b-ceecead4e842",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "722c4819-1e61-468a-ba5d-f67cc9d53e8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60bcded9-4fa6-4ee1-8ff9-c212296dd07f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b435939-7ed7-45a3-8a75-4272a3bf19ca"
            }
          }
        ]
      },
      {
        "id": "001d008e-abc7-423f-ad0b-dfefca551ca0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "456993fa-0c03-46a5-8609-f25980febc51",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7ea732b2-cc04-4cd5-90e4-11174529d7db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ea8e631-196f-4005-b3c8-18ad53906c8e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896f351a-6ac9-48ae-a57b-f82e58832a13",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "10a29be3-b402-4f3e-861a-93c791642af2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e120a7-da44-49c1-b019-f7d541995140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee6213a6-6265-42b6-bb30-c7919e30bb41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676e2fef-0ac2-4b34-922c-36b5bc51811e",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbc53de-91dd-4e04-b233-2ade0e271d00",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6dd9e39e-69c4-4ded-a2b1-3672d03e23be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f5ce18-0b6b-4e4e-97e9-f164d57c1228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a152807-34d1-48f1-b853-46ded6a137c9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37fedc6d-372d-414f-bd2c-7b8ce0afe3b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2c755c9-11eb-4f02-ad89-ac18acf46eb9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4627ca2-717e-4bf9-8af2-d79c3102ca05",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "311bec7b-b373-4d39-921f-2d342fbb77fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b05722a6-e27d-4a70-bd45-f0c1ec8d6a72",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f97e247f-5a36-46e4-b1b1-b3bd4284fd27"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9c0c647-16ae-4cd0-834a-99f948d120f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "73ab5cc8-deea-4e02-a7d5-9f9a0a9ccf6d"
            }
          }
        ]
      },
      {
        "id": "a18ff280-68ab-42ff-a93e-21aeb99acc90",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bc473072-67ff-4e0f-a577-126745972928",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7014a723-21b2-4db4-a211-a86643694f7c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "35ecd372-60cd-43ac-9c93-8f581497e52c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8a401f80-6764-4e35-afc5-a0dc4b1e8fba",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "171061a1-3ddf-459c-b308-5328c233a12b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 338
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 782.3923076923081,
      "responseMin": 8,
      "responseMax": 11031,
      "responseSd": 1418.4653624802454,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666486755176,
      "completed": 1666486970396
    },
    "executions": [
      {
        "id": "6c8abe5f-16cd-4cc1-956b-e2b933bb08c9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d80ac73e-b139-46a7-88f8-d450ba8cb36a",
          "httpRequestId": "b8ab35dd-0bad-423c-9b63-1d8ac0c4de00"
        },
        "item": {
          "id": "6c8abe5f-16cd-4cc1-956b-e2b933bb08c9",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d536b9e4-c92b-4f66-83ef-aa1f85e8c97f",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 0
        }
      },
      {
        "id": "4b8f4d20-1614-4950-b0bf-230071768d15",
        "cursor": {
          "ref": "96b7de74-9d59-46e3-ab8e-647b6926419f",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0440d73d-f4e3-4e73-8cb8-47aa74513daf"
        },
        "item": {
          "id": "4b8f4d20-1614-4950-b0bf-230071768d15",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "39b0d7a2-888f-406b-bbbf-6da7435b585c",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "af6a477c-d62b-4a00-a234-f342ad08b6fd",
        "cursor": {
          "ref": "5960735c-1559-49cd-9c55-802d478ea1db",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1144f09f-b964-4073-9c35-457fc4757d39"
        },
        "item": {
          "id": "af6a477c-d62b-4a00-a234-f342ad08b6fd",
          "name": "did_json"
        },
        "response": {
          "id": "7a2852d5-2c01-4eee-b788-82760c28cfb5",
          "status": "OK",
          "code": 200,
          "responseTime": 843,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07f94d4-46e2-41d8-8302-32397eaafa82",
        "cursor": {
          "ref": "367301e2-a623-46d0-a405-9b0e3de834ea",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "afe9311a-b4fb-4567-9be1-a1b8291839e1"
        },
        "item": {
          "id": "a07f94d4-46e2-41d8-8302-32397eaafa82",
          "name": "did:invalid"
        },
        "response": {
          "id": "5a65dc1d-1a63-4da4-acf5-46da998b11d4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 771,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a07f94d4-46e2-41d8-8302-32397eaafa82",
        "cursor": {
          "ref": "367301e2-a623-46d0-a405-9b0e3de834ea",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "afe9311a-b4fb-4567-9be1-a1b8291839e1"
        },
        "item": {
          "id": "a07f94d4-46e2-41d8-8302-32397eaafa82",
          "name": "did:invalid"
        },
        "response": {
          "id": "5a65dc1d-1a63-4da4-acf5-46da998b11d4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 771,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "08c89cdf-c0d1-457a-85cb-9599195b3ee8",
        "cursor": {
          "ref": "8d8feed0-e11f-4672-b4e5-76f88388b582",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e960eca6-2504-4f0b-8094-2d44772d7111"
        },
        "item": {
          "id": "08c89cdf-c0d1-457a-85cb-9599195b3ee8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9840637e-8ccb-4897-bba5-46934ff7c8dd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 545,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "fcd84f70-3758-48cb-a643-52e34c0155af",
        "cursor": {
          "ref": "4278321d-708a-4f9e-8167-9f49c07b5ac1",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c23e5a03-c78c-44ef-b8f5-511b75254fe6"
        },
        "item": {
          "id": "fcd84f70-3758-48cb-a643-52e34c0155af",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "70b4ccb8-05f3-4b29-9f69-25b922a4ff32",
          "status": "Not Found",
          "code": 404,
          "responseTime": 375,
          "responseSize": 64
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "9a579a98-cc75-43b0-ac28-fa32009cd107",
        "cursor": {
          "ref": "a9692fd0-c305-4dd1-9a36-055043eb202b",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "127ebe3f-3c44-4ea6-a1b7-ed90247591c3"
        },
        "item": {
          "id": "9a579a98-cc75-43b0-ac28-fa32009cd107",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ca0369e6-efff-4214-91b8-7884d89f9e55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "b8c73908-cb6d-4fe1-9252-16a110d28e5e",
        "cursor": {
          "ref": "3c9dc34c-16fa-42b9-b39f-6586affe13b3",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c6b506bd-8e51-473a-b5c1-6c64a00167d4"
        },
        "item": {
          "id": "b8c73908-cb6d-4fe1-9252-16a110d28e5e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b5ea408d-7c2c-48bf-9225-3569415ba6c7",
          "status": "OK",
          "code": 200,
          "responseTime": 574,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "b8c73908-cb6d-4fe1-9252-16a110d28e5e",
        "cursor": {
          "ref": "3c9dc34c-16fa-42b9-b39f-6586affe13b3",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c6b506bd-8e51-473a-b5c1-6c64a00167d4"
        },
        "item": {
          "id": "b8c73908-cb6d-4fe1-9252-16a110d28e5e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b5ea408d-7c2c-48bf-9225-3569415ba6c7",
          "status": "OK",
          "code": 200,
          "responseTime": 574,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "03df1f54-b779-4b94-a39c-f528246e9fae",
        "cursor": {
          "ref": "54d10ab3-7dc7-487e-af6b-b8d566351452",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "27240974-475d-476a-8a0a-10ff3f7290c9"
        },
        "item": {
          "id": "03df1f54-b779-4b94-a39c-f528246e9fae",
          "name": "identifiers"
        },
        "response": {
          "id": "d5871285-d4a8-4821-93a2-d7fc7d7bc910",
          "status": "OK",
          "code": 200,
          "responseTime": 544,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a99ad5a2-54cd-40cc-a4e5-b919150d40f9",
        "cursor": {
          "ref": "1dc1d6bb-ebea-4c6d-91a3-53f27b63faa6",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ee2ca01c-64f6-4dab-8da7-c344e8a3fa22"
        },
        "item": {
          "id": "a99ad5a2-54cd-40cc-a4e5-b919150d40f9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "729f13c8-27d5-4628-926d-8a5b5e1918a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 509,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "a99ad5a2-54cd-40cc-a4e5-b919150d40f9",
        "cursor": {
          "ref": "1dc1d6bb-ebea-4c6d-91a3-53f27b63faa6",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ee2ca01c-64f6-4dab-8da7-c344e8a3fa22"
        },
        "item": {
          "id": "a99ad5a2-54cd-40cc-a4e5-b919150d40f9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "729f13c8-27d5-4628-926d-8a5b5e1918a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 509,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "92d4360d-991a-4729-84b0-d56b5c6edc86",
        "cursor": {
          "ref": "8ef2fe27-e5ad-4085-9ec7-324fe0fe897d",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3421f5a1-ab6c-4835-9bb3-ca1452cef982"
        },
        "item": {
          "id": "92d4360d-991a-4729-84b0-d56b5c6edc86",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a0716a16-077b-4007-89d3-df0d19e64a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 404,
          "responseSize": 441
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "2b85c00b-69bb-4b39-962a-324ebf23ef15",
        "cursor": {
          "ref": "73851b68-29d8-4dc1-aa28-9423018b77b2",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8d5d9a35-9907-40b3-b600-2f7eda84bc24"
        },
        "item": {
          "id": "2b85c00b-69bb-4b39-962a-324ebf23ef15",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "14966454-c230-4b17-a55a-e6f925cfea09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 395,
          "responseSize": 960
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "35973b83-a9e3-420d-9751-bd0dc7d8ef04",
        "cursor": {
          "ref": "417925d3-57b0-4843-82f4-715f2580e64e",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "847b5130-0c86-45e1-bc13-e7087bae078e"
        },
        "item": {
          "id": "35973b83-a9e3-420d-9751-bd0dc7d8ef04",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "04654bf6-13a4-47d0-aa93-3189e6289010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 390,
          "responseSize": 957
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "fe2db65b-a337-4375-8e1e-bb62b634e763",
        "cursor": {
          "ref": "dc4cc1b9-76a6-4c69-9029-540925fc2e6e",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f70b6abb-70fb-4bed-aac7-cbf438d51834"
        },
        "item": {
          "id": "fe2db65b-a337-4375-8e1e-bb62b634e763",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b4ec27f0-4e39-4dc5-8bd1-1731cd266aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 494,
          "responseSize": 959
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "16b24a1d-6077-4147-b717-c45cb4b0ebc9",
        "cursor": {
          "ref": "07721877-2efd-42a8-8b8c-ccb21ca37974",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a76a81ac-f41a-4c10-9b83-c8c897206a2f"
        },
        "item": {
          "id": "16b24a1d-6077-4147-b717-c45cb4b0ebc9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c8075d2b-4257-4c3e-8534-8e964d4ee123",
          "status": "Created",
          "code": 201,
          "responseTime": 4130,
          "responseSize": 645
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "998ae21a-97d8-496c-b1f3-8fa8569cb657",
        "cursor": {
          "ref": "92cab805-4ba8-4045-85d4-0603de02916f",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fe8964d0-2a43-44da-a398-ec7ca58233d0"
        },
        "item": {
          "id": "998ae21a-97d8-496c-b1f3-8fa8569cb657",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d10193b2-4521-438e-8edd-110d7f361d4e",
          "status": "Created",
          "code": 201,
          "responseTime": 2810,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "2b0365fa-eae3-493a-b01c-e6d267cada74",
        "cursor": {
          "ref": "31f6cc5e-fffa-4df9-8901-2fcc494332f3",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2c9c95f8-bf62-4778-bd89-f59fd9250dd5"
        },
        "item": {
          "id": "2b0365fa-eae3-493a-b01c-e6d267cada74",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0a132e83-f973-43c1-aba6-18b9dbd49efa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 395,
          "responseSize": 1448
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "3dbc72a4-7c95-4064-8a81-2df2fef92d22",
        "cursor": {
          "ref": "b5256e83-2c9a-4eb1-b167-b8d4660a7f50",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d6658a5d-3373-458a-bbea-8bdd779b0ced"
        },
        "item": {
          "id": "3dbc72a4-7c95-4064-8a81-2df2fef92d22",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6ada520d-0883-4ce3-acbb-0ae79f100953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 399,
          "responseSize": 1417
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "5717c140-b924-42c1-9740-c6879e56d890",
        "cursor": {
          "ref": "a63d8696-6b3b-4265-860a-bfe40a7fc6b4",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "522fc350-c5b9-4d04-91b5-a6327fb33055"
        },
        "item": {
          "id": "5717c140-b924-42c1-9740-c6879e56d890",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7b502b9a-d0ae-4c04-aed0-d361f2019a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 413,
          "responseSize": 1414
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "d47e3b32-1e2e-4436-857c-5151e1fe6081",
        "cursor": {
          "ref": "9f275b55-cecf-4f38-808b-d7b686bc6c64",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "05b6c1ef-f28b-4e4e-9969-312f02d21282"
        },
        "item": {
          "id": "d47e3b32-1e2e-4436-857c-5151e1fe6081",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "955dff4e-df89-46d0-b8fb-5a3121f444b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 432,
          "responseSize": 1416
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "62a31f5c-363d-4681-8f6b-c30e68226270",
        "cursor": {
          "ref": "60839df1-8956-4e88-81ef-83fc42f0a557",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6b716079-a2ba-4162-9d7f-89b2aec96492"
        },
        "item": {
          "id": "62a31f5c-363d-4681-8f6b-c30e68226270",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "83504e68-1760-4e37-a76a-af53a719469a",
          "status": "Created",
          "code": 201,
          "responseTime": 1734,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "c27f0162-32f8-4c0d-8b0e-a20ad6a21e34",
        "cursor": {
          "ref": "f51bc08b-d342-4608-82f0-9be4d7335a76",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a0f38a1a-be48-4241-8a2d-4c2dc9bce05a"
        },
        "item": {
          "id": "c27f0162-32f8-4c0d-8b0e-a20ad6a21e34",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "065a5e2f-1519-495b-975e-d6db999fa3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 402,
          "responseSize": 522
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "4908c0b5-94b3-4a11-847d-bd8a99abe4b8",
        "cursor": {
          "ref": "2bf1d089-d2d5-4334-b3f0-be2eab7647af",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "03cdb3c2-71f8-4ca9-a797-98d158448ec1"
        },
        "item": {
          "id": "4908c0b5-94b3-4a11-847d-bd8a99abe4b8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "cfb75794-e083-4b6a-9a60-387b405cec78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 474,
          "responseSize": 478
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "ec1d4e2d-6976-4b23-a111-d1d8921e8c32",
        "cursor": {
          "ref": "a641e91f-9e4e-4bc5-88d4-f07380e74c9b",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ff64f657-c1b3-43be-bb5a-a4c04a981d5e"
        },
        "item": {
          "id": "ec1d4e2d-6976-4b23-a111-d1d8921e8c32",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6fa4f2a4-b7e2-40de-94d3-386e95b18ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 467,
          "responseSize": 475
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "6a37b6f9-38d2-41e4-8161-7fdb935052ab",
        "cursor": {
          "ref": "4ff9b514-5793-4cbf-a810-c91999c919e3",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "269b2d44-131a-4272-84b2-d313fb72de88"
        },
        "item": {
          "id": "6a37b6f9-38d2-41e4-8161-7fdb935052ab",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "914982d9-af07-4032-9833-3bc78ff2b34c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 498,
          "responseSize": 477
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "abe1d775-c5ba-47b8-a120-21e1358dbd75",
        "cursor": {
          "ref": "cf3bd686-1c2a-46a1-994a-028d5db5384b",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bf6fc93b-311b-47d3-a646-c31aa8c79588"
        },
        "item": {
          "id": "abe1d775-c5ba-47b8-a120-21e1358dbd75",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "49472d19-c43a-4081-8624-ef8a50a23317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 398,
          "responseSize": 527
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "5bcc80ec-c86a-4ab5-aa2c-d8002e628c9d",
        "cursor": {
          "ref": "31449ae5-086e-403b-9e11-e62821a5882e",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b08ab58f-bd9f-4783-9268-115f6e38856e"
        },
        "item": {
          "id": "5bcc80ec-c86a-4ab5-aa2c-d8002e628c9d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9645318b-1ca5-4cf1-9c5f-ec77f4ec87f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 376,
          "responseSize": 455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "0a9d96fe-6bcc-4783-a9ec-0d8ae8e0b436",
        "cursor": {
          "ref": "771f0988-2bde-4d4b-9eb1-7908049e2c31",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "48da8298-2272-478b-9bba-1a3b25545904"
        },
        "item": {
          "id": "0a9d96fe-6bcc-4783-a9ec-0d8ae8e0b436",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "142119e4-3041-4333-a6e0-0c567906073e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 401,
          "responseSize": 757
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "e3777079-0305-4d59-a807-e197bbf4b993",
        "cursor": {
          "ref": "1d128fec-5ab9-4f79-9c5c-847dc5253f15",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2a265b76-caac-4380-858a-134c3185860f"
        },
        "item": {
          "id": "e3777079-0305-4d59-a807-e197bbf4b993",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c2267f4e-3724-4a08-b2ab-7e4ade7bf9b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 406,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "7cb2acc9-096a-4bb5-b1ab-769de34db002",
        "cursor": {
          "ref": "9fbbd1fc-9085-42fc-ad1a-817a67800292",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c677f59e-999d-4916-8a5a-1d3225986489"
        },
        "item": {
          "id": "7cb2acc9-096a-4bb5-b1ab-769de34db002",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1ee3d77b-76b3-4779-a40a-0262fa27cae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "dd356531-8851-4d58-beb6-65ac263ce840",
        "cursor": {
          "ref": "9403fa0d-1a9c-4ef3-84d5-85643662af10",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "67bdcffd-6d93-4b02-9a26-7442cf961746"
        },
        "item": {
          "id": "dd356531-8851-4d58-beb6-65ac263ce840",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "bf4c05b7-3148-485e-9b90-4a36e9f0fcac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 403,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "1e35a4a5-8be1-49da-8160-5f437b0905a9",
        "cursor": {
          "ref": "4cf25e29-b0cb-48df-8e86-a3b376da1106",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "bdb61bd0-3096-449c-9f41-50d26370fcc9"
        },
        "item": {
          "id": "1e35a4a5-8be1-49da-8160-5f437b0905a9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e2347485-74a7-4227-9d3e-274831568f8e",
          "status": "Created",
          "code": 201,
          "responseTime": 1569,
          "responseSize": 634
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "b03fa8e2-db01-49fe-885e-7636dd779964",
        "cursor": {
          "ref": "29d67ea2-b34a-4de6-96e1-cabb440ea1af",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "950e37cd-beb0-473d-a489-f2838872c357"
        },
        "item": {
          "id": "b03fa8e2-db01-49fe-885e-7636dd779964",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "37a8573d-e90e-4882-bc2b-b6f521afe0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 174
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "9be405cf-bbda-40aa-8c01-0b97f2b5345e",
        "cursor": {
          "ref": "0c00f210-ab54-463d-b5df-fc0a6d073bf6",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2332baae-5b6b-4417-880e-548e09b16481"
        },
        "item": {
          "id": "9be405cf-bbda-40aa-8c01-0b97f2b5345e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "868a70d8-f93a-45a7-82fc-da925a56aba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 802
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "c18870f9-2684-4618-99d9-751c56de8032",
        "cursor": {
          "ref": "df3d2b1c-6ad2-4478-9141-defd583a0776",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8ab86a8e-2748-4d68-8f44-4774c34a146a"
        },
        "item": {
          "id": "c18870f9-2684-4618-99d9-751c56de8032",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6565860b-85c6-46a2-b2ad-fd8b0a136159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 394,
          "responseSize": 792
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "cc4e00d2-0245-4de1-be9f-e05266672fe8",
        "cursor": {
          "ref": "36e7fc21-d047-43a8-8095-672eca06d26b",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a9a4a6eb-e1e9-48c4-b435-e9738100b80e"
        },
        "item": {
          "id": "cc4e00d2-0245-4de1-be9f-e05266672fe8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f811b1cd-a96d-4d96-ab3d-2836022fb908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 390,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "bbc9a46e-d76b-4ca8-8a35-107af530355b",
        "cursor": {
          "ref": "84910a01-5086-4ad3-8fc1-338d41ada1cf",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5cb58c7c-2e49-4761-b534-a5e4f0eeb447"
        },
        "item": {
          "id": "bbc9a46e-d76b-4ca8-8a35-107af530355b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fe33d9a3-65d0-42f5-ab78-9a1c04df1198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 410,
          "responseSize": 791
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "ea5930d6-9f06-4912-952a-79eb6d613a28",
        "cursor": {
          "ref": "3dff50a2-2cac-47b1-9bd0-298d12ee24ad",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b8702e07-c870-4960-af53-8f73b3731c11"
        },
        "item": {
          "id": "ea5930d6-9f06-4912-952a-79eb6d613a28",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "621f1c9e-4451-48e1-a86d-288b24aba894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 410,
          "responseSize": 789
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "a9c261cb-a4ff-47b0-b6b7-09e7acaf0ef8",
        "cursor": {
          "ref": "95d5db0a-8b4f-46ca-8bfc-9ae92cffb171",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4dd41162-0291-484d-8fdd-fc962416de15"
        },
        "item": {
          "id": "a9c261cb-a4ff-47b0-b6b7-09e7acaf0ef8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "95609d6f-8d30-4f9c-9f39-5478e7a4bb21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 390,
          "responseSize": 407
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "93e255bf-0f9c-4ad3-976f-a881b8ad611f",
        "cursor": {
          "ref": "7b27136d-3195-4068-90db-a3d3de647921",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b177454b-dbac-4009-82a0-c372e788f38c"
        },
        "item": {
          "id": "93e255bf-0f9c-4ad3-976f-a881b8ad611f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b87ba613-866a-47ec-83f0-89c18bf15341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 386,
          "responseSize": 753
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "aff7d7e4-d0f8-46b9-8e4c-23778fb92d88",
        "cursor": {
          "ref": "5fc0fdcb-6f10-48b8-ab77-95893f91f3dd",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "47efe344-a671-4deb-a421-e5b5e93146c5"
        },
        "item": {
          "id": "aff7d7e4-d0f8-46b9-8e4c-23778fb92d88",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7af1bb0d-ffb1-4dbf-b298-54b57fe018bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 481,
          "responseSize": 682
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "4fa2f660-ed72-4aec-a50e-8c9f3a0b3d7d",
        "cursor": {
          "ref": "e547aefa-17c3-4a39-bf74-96e5575f8f82",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b16cc7e6-f0d8-48cc-8afe-3e9ad43b9a5d"
        },
        "item": {
          "id": "4fa2f660-ed72-4aec-a50e-8c9f3a0b3d7d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b480232e-b158-49db-91a0-65e0ce562bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 410,
          "responseSize": 679
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "b6943fc7-724c-4f0c-b60e-52e620cabc4d",
        "cursor": {
          "ref": "5ca63078-b3af-466c-897a-c6f058be849a",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7da735bf-7f2f-4e2d-9994-b1406e9e9b93"
        },
        "item": {
          "id": "b6943fc7-724c-4f0c-b60e-52e620cabc4d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d099b98e-facb-45c3-9fa2-71e863424176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 383,
          "responseSize": 681
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2688361c-7ab0-4ec7-95ba-f5b988d4cb0f",
        "cursor": {
          "ref": "8ff86b16-e39e-4440-95a5-d92b06895adc",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0a1f16b7-e936-4eee-b970-9fd255f77ce4"
        },
        "item": {
          "id": "2688361c-7ab0-4ec7-95ba-f5b988d4cb0f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ef6dff95-1205-431d-a6f9-1d38525a803e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 930
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ef5168f8-37b4-4bf8-b21d-ad097a1c6103",
        "cursor": {
          "ref": "8a708de8-7a4f-4ed0-a52a-e4623b790023",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f880c473-b196-467a-b931-44f37fb4da47"
        },
        "item": {
          "id": "ef5168f8-37b4-4bf8-b21d-ad097a1c6103",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5e51f627-cde9-4310-bcba-a481a8080445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 418,
          "responseSize": 966
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ca8d509a-452c-4353-b7a8-0bfca967d111",
        "cursor": {
          "ref": "1f659e2b-3601-47e7-a953-f3eedf0a640c",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a2fa9f57-ec3d-4600-a398-81498d9de1a7"
        },
        "item": {
          "id": "ca8d509a-452c-4353-b7a8-0bfca967d111",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "664a87eb-b037-4dea-8ef8-3e2dfee5d9da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 416,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "781c8f2d-2d8a-455e-823f-384da6da6b3e",
        "cursor": {
          "ref": "a9c8cfa9-b893-48ad-9beb-359333f1c08c",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7acd7eaa-0ebc-4db2-a9d7-c4f48e8c6bbb"
        },
        "item": {
          "id": "781c8f2d-2d8a-455e-823f-384da6da6b3e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2b1b3a5d-71da-457c-9f8e-edec9acaa5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 401,
          "responseSize": 778
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "fe0147b1-bdf8-426a-b608-4393c1da4f03",
        "cursor": {
          "ref": "3fe0292d-0d68-432a-896c-67de991a76a9",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4d4039d5-729c-4cd1-a64a-932fe0dc81f3"
        },
        "item": {
          "id": "fe0147b1-bdf8-426a-b608-4393c1da4f03",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "029e6394-3637-415b-ae46-c1b1d940bee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 399,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c31cb538-bc72-4a8b-88fe-dba60919cff1",
        "cursor": {
          "ref": "0d86b945-a223-41bf-8520-6e08b2fd4efb",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2a97f37a-0c7d-4767-8c65-ea944316cbb7"
        },
        "item": {
          "id": "c31cb538-bc72-4a8b-88fe-dba60919cff1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b164648e-3252-4e6a-a8f4-7288eca2d248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 427,
          "responseSize": 704
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ef154f66-5649-4e2a-b8cb-d88378be6145",
        "cursor": {
          "ref": "22098ef3-c7f9-4b28-9f8b-80c18cadf886",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8fd4be5b-a768-4108-9544-ad80178c8925"
        },
        "item": {
          "id": "ef154f66-5649-4e2a-b8cb-d88378be6145",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "edb5e9c0-bdc0-4804-930b-17f103c9efbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 706
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "adb873f2-9b83-4a1b-8302-04f0261e4838",
        "cursor": {
          "ref": "6b220daa-e64d-4aad-a9bd-09fb43bdac15",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4edcc257-a075-491f-9661-22db88f6f52a"
        },
        "item": {
          "id": "adb873f2-9b83-4a1b-8302-04f0261e4838",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "652b78ed-b261-4b85-9e65-c0ab146efa26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 429,
          "responseSize": 955
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d0ceb247-7520-434c-87e5-7c3805cfad68",
        "cursor": {
          "ref": "50679d4c-562e-406a-b194-860ebd409e6d",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a454742d-b91e-4c5a-a55a-04546807c1b3"
        },
        "item": {
          "id": "d0ceb247-7520-434c-87e5-7c3805cfad68",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7e9da2ef-2bba-4d9b-be0d-7b5997896177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 430,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "519a5c5e-0005-43cc-a8ba-01215665cb09",
        "cursor": {
          "ref": "204be6a8-b342-4c5d-ae55-dddc8fff1909",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2a51fd39-7a1b-43ea-8074-f30e649e4054"
        },
        "item": {
          "id": "519a5c5e-0005-43cc-a8ba-01215665cb09",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9bc77e9d-380e-4e19-ad74-aadb1de9d133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 792,
          "responseSize": 465
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "f225d18f-d96a-4787-9ff9-2aca4b7c8ee6",
        "cursor": {
          "ref": "b04c0f52-cda2-4972-8f17-e5026a75e3f7",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "cb5056f5-87e1-44a9-8ac4-6430ea901c77"
        },
        "item": {
          "id": "f225d18f-d96a-4787-9ff9-2aca4b7c8ee6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "bfb8e089-5109-41b0-bcf7-3151cea687d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 616,
          "responseSize": 489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "e832870e-9b74-4a83-8507-d90a74dd5fb2",
        "cursor": {
          "ref": "a5901e3c-8e8a-472f-8e66-67a800eb842d",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "879e5cd1-bf77-4a17-8300-c2971e01842f"
        },
        "item": {
          "id": "e832870e-9b74-4a83-8507-d90a74dd5fb2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d6646f02-4e3c-4bf7-a8ab-6c529f6e28ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 529,
          "responseSize": 470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "0149b8ba-07a9-4ffe-a57c-eb43db7d7b00",
        "cursor": {
          "ref": "a17fbfb2-b2f1-4475-928c-fffb9f760a95",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b343240c-02bd-4de5-8acc-0f18bc0a4b72"
        },
        "item": {
          "id": "0149b8ba-07a9-4ffe-a57c-eb43db7d7b00",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a2f4cbcd-e765-4a2b-9f52-3cd110c737eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 516,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "cacc9032-1b16-440f-8cab-d3a250c968e4",
        "cursor": {
          "ref": "505ee8fc-7cd6-4b2b-8402-e1af15a0f9b0",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1639e634-939f-49a3-8c03-0f1aac472fc9"
        },
        "item": {
          "id": "cacc9032-1b16-440f-8cab-d3a250c968e4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "614dcfb3-e7ec-41dc-b73e-f720a3e4fadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 677,
          "responseSize": 469
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "35b8f65e-31dd-483e-9a82-fac98f46df4c",
        "cursor": {
          "ref": "f55d6aa6-33e0-4b61-ba74-61e5b4c21774",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "788aee26-6076-48fa-82b5-201ffd1b3b05"
        },
        "item": {
          "id": "35b8f65e-31dd-483e-9a82-fac98f46df4c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "cb663f3b-132e-4da3-aaca-efa986ad02c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 577,
          "responseSize": 467
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "bfb2b416-ac6f-4c8c-b816-7f986e63a6df",
        "cursor": {
          "ref": "7a8a76d5-2ee4-4cbd-9395-6ae47e5b397c",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d8e50fc4-89c7-47e4-a05c-415c45d59379"
        },
        "item": {
          "id": "bfb2b416-ac6f-4c8c-b816-7f986e63a6df",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a8cdedb4-2811-4da1-b7c7-ce9c22c5934a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 758,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "c63e4c71-3ac7-4851-9a0d-8c7bf3ecddee",
        "cursor": {
          "ref": "0820e178-db07-485b-b0ff-9f0b0ac2a26b",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "73909bf2-65d6-4b8e-b4fe-c2b1b9edee27"
        },
        "item": {
          "id": "c63e4c71-3ac7-4851-9a0d-8c7bf3ecddee",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "51eb0727-52a7-4f00-be3f-2bf0d0a84ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 664,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "b57cab48-7989-4867-89e5-9f29abc9ccb6",
        "cursor": {
          "ref": "e59273ca-0939-460f-aec8-a5d6e76b4c4c",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f41dbf7c-83ea-4407-9e97-a27e1d3e4f90"
        },
        "item": {
          "id": "b57cab48-7989-4867-89e5-9f29abc9ccb6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "dec533e2-c22b-4907-83c6-12f0c32ba876",
          "status": "Created",
          "code": 201,
          "responseTime": 2088,
          "responseSize": 653
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "b3030c20-8ddd-4ce2-8386-4b270a860b2b",
        "cursor": {
          "ref": "80fa5492-992b-4c59-9f8f-a77599232a06",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "28e1f704-a6de-4470-847e-04fdfcd7b43a"
        },
        "item": {
          "id": "b3030c20-8ddd-4ce2-8386-4b270a860b2b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "21cf4e6a-e23e-4e1f-a90f-7382994f5597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 935
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "e7ffbbaa-809d-4b6e-823d-0070d2bab83b",
        "cursor": {
          "ref": "09bdf53f-9824-418a-98dc-20cacbcefe87",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c9cdecef-1fe4-418e-acf7-2c378ccc6504"
        },
        "item": {
          "id": "e7ffbbaa-809d-4b6e-823d-0070d2bab83b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d749eb8c-37a3-4b01-bef3-4a07a162ae67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 407,
          "responseSize": 932
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "c2ab0057-5694-4f1b-be05-ef43df3b33a7",
        "cursor": {
          "ref": "287c3319-d6df-463f-8cde-bcf3988d4c00",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "888167ab-ad14-4541-8ee9-e726d06ed178"
        },
        "item": {
          "id": "c2ab0057-5694-4f1b-be05-ef43df3b33a7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8ccd2afa-3462-414b-9a55-4d050dffa28a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 408,
          "responseSize": 934
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "1efbdc29-06e8-4d74-83b8-edae503d0a1b",
        "cursor": {
          "ref": "4a14fada-a0d0-4a4a-b982-5d0a91e89f88",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e78c804c-22f3-4d4a-8caa-a4fee094c132"
        },
        "item": {
          "id": "1efbdc29-06e8-4d74-83b8-edae503d0a1b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "13b4b37e-f870-4171-b1ae-127166255618",
          "status": "Created",
          "code": 201,
          "responseTime": 1724,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "2e333e72-6e14-40b3-b651-a58d77fcb7c8",
        "cursor": {
          "ref": "2ca94093-6ccc-46bc-9c77-f4f26281816e",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c6df3499-e64c-4b8b-95e3-8aef34268ef8"
        },
        "item": {
          "id": "2e333e72-6e14-40b3-b651-a58d77fcb7c8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b36964b7-57e3-43e6-b7d1-a1dec0b6b6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 398,
          "responseSize": 1273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "125adb76-70a3-4c18-93af-5b853cded788",
        "cursor": {
          "ref": "ecd22ab2-eb5c-4dd8-953d-393d501e02ff",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e95b11c8-a0ce-4d5a-8b68-5438bcc0a068"
        },
        "item": {
          "id": "125adb76-70a3-4c18-93af-5b853cded788",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d7ce6558-8cd1-4b30-9309-3d79a14aa774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 492,
          "responseSize": 1259
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "63b543f4-b8d0-4353-bac0-e358f5a54865",
        "cursor": {
          "ref": "119d9402-9424-47ee-b2e2-68d08199cd4c",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8f9895d9-2256-491f-9a58-11576f5b2a21"
        },
        "item": {
          "id": "63b543f4-b8d0-4353-bac0-e358f5a54865",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4d40addd-3480-41e9-b9ed-fd477f66e3db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "f7f3c37b-bcaa-495c-88e7-9f4528943ba3",
        "cursor": {
          "ref": "5c27e000-7508-4ba2-b5ba-c5bc0c3b94a0",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4feb4516-e861-43e0-8076-ea511f05acfe"
        },
        "item": {
          "id": "f7f3c37b-bcaa-495c-88e7-9f4528943ba3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5e142ba5-449d-4243-ab3d-5f7b7b89e742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 437,
          "responseSize": 1258
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ea800cfa-7449-459c-9f59-baeb898b8b5a",
        "cursor": {
          "ref": "348a1c75-0762-4bd2-9661-882512c71035",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0562354e-c5d4-42d1-8c6f-a4865c2f616b"
        },
        "item": {
          "id": "ea800cfa-7449-459c-9f59-baeb898b8b5a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2bf3c642-7384-458a-8e95-627cee757de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 400,
          "responseSize": 1256
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "e1419a38-83f2-414f-b413-19f77264fd7d",
        "cursor": {
          "ref": "1a9af17b-122c-490a-bb8f-6775b0fcec42",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7ef5d1bb-f568-4220-9c85-c8eee70b6b23"
        },
        "item": {
          "id": "e1419a38-83f2-414f-b413-19f77264fd7d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5f6769fd-a30e-4057-a29e-1c5b9516f747",
          "status": "Created",
          "code": 201,
          "responseTime": 1616,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "0a4ab5e1-ff55-46d8-8030-83968850a6e9",
        "cursor": {
          "ref": "09485402-306e-4269-8bd5-9db3896e8c48",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1ac99537-b648-46e7-9a62-c7bc08106d5a"
        },
        "item": {
          "id": "0a4ab5e1-ff55-46d8-8030-83968850a6e9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b89bb006-d556-4203-b3da-cc98f14b6abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 409,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "c9dae51d-62ca-4be1-8dc8-9f0015edf03e",
        "cursor": {
          "ref": "1043b9cf-852d-4b6e-a46e-c76be37e5eaa",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5735e4db-e221-44e8-8c60-42da185c355e"
        },
        "item": {
          "id": "c9dae51d-62ca-4be1-8dc8-9f0015edf03e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1751a174-889e-4da4-bdd1-92cfe99ef63d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 421,
          "responseSize": 463
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "1b653900-10db-4eef-a23d-6ef8db8e15f1",
        "cursor": {
          "ref": "e055252b-3d16-405d-9fb0-be457da8e2ab",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b55f5200-e075-4ec5-9c46-8bd35e9c3688"
        },
        "item": {
          "id": "1b653900-10db-4eef-a23d-6ef8db8e15f1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "296ff7fa-52d9-404f-bbe4-f49635435508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 662,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "1de5a7f1-c012-46bb-beb8-6d23d6087403",
        "cursor": {
          "ref": "0103f443-0db0-4f87-b643-880ef632bc45",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "49e2bad9-8a6c-4706-8b51-5671db52e556"
        },
        "item": {
          "id": "1de5a7f1-c012-46bb-beb8-6d23d6087403",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "23e3ba8c-38fd-4f8f-ad02-0482e81b1231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 767,
          "responseSize": 462
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "c6ecc631-ea6b-4c05-ae8a-74355a031ac6",
        "cursor": {
          "ref": "646e96f8-37af-4042-8496-d4164f0b6891",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0080e3d7-2bcc-427a-8119-070722172643"
        },
        "item": {
          "id": "c6ecc631-ea6b-4c05-ae8a-74355a031ac6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9127f282-7157-415b-aceb-4de9e57988c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 889,
          "responseSize": 460
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "17dbe594-a2f3-4498-b2e1-2c95a26e1fc4",
        "cursor": {
          "ref": "e113d1c1-4769-4cd2-8398-be8448d86615",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d333c866-3d86-4d6e-b456-646d7c4606c7"
        },
        "item": {
          "id": "17dbe594-a2f3-4498-b2e1-2c95a26e1fc4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9d2782d4-6482-4064-8286-0273c0b26200",
          "status": "Created",
          "code": 201,
          "responseTime": 10926,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "403f993d-ff13-43d3-a276-73d09bd2eb32",
        "cursor": {
          "ref": "e94c9348-6941-4625-b8b2-5c5906cb911b",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "421f65b0-fcad-4a75-a95c-2a792fbc8c3c"
        },
        "item": {
          "id": "403f993d-ff13-43d3-a276-73d09bd2eb32",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7aebde9c-24ba-4de0-aa30-7caf626b39da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1993,
          "responseSize": 512
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "8e6dce98-a53f-44cf-8b9b-f97b4ad5ff7b",
        "cursor": {
          "ref": "c5eee12f-1b6d-4eb3-a741-4a812126b298",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f8345d75-884f-49d2-ab24-074cb1384124"
        },
        "item": {
          "id": "8e6dce98-a53f-44cf-8b9b-f97b4ad5ff7b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3b105bea-1323-4295-b113-557409d89a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1947,
          "responseSize": 493
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "c0b0a4e0-54e5-406b-b75f-5fbc8f66c81f",
        "cursor": {
          "ref": "97aab5d5-aa27-4648-8690-4a7b3199730c",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4b99c74f-1464-4976-afa1-78a8836fe9d6"
        },
        "item": {
          "id": "c0b0a4e0-54e5-406b-b75f-5fbc8f66c81f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c17c5910-83dc-492e-98d5-4b69e56dda11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2015,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "8ea50233-daaa-4596-a5f2-1c452936e513",
        "cursor": {
          "ref": "c632a60d-5ba5-44d2-b0a4-5d8423b96443",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "76b14974-95d4-460a-b84f-7bdfc3945c73"
        },
        "item": {
          "id": "8ea50233-daaa-4596-a5f2-1c452936e513",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4ff15a2f-0b41-4aff-9422-e459f53d2f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2038,
          "responseSize": 492
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "c27ee900-437b-46eb-9fc1-6328fe586dd1",
        "cursor": {
          "ref": "9dd1afee-8a07-461b-bcce-a11fab3224a0",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "758f37ff-4e26-4e9b-914c-42662d920b68"
        },
        "item": {
          "id": "c27ee900-437b-46eb-9fc1-6328fe586dd1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "524e8dc2-2709-4b9a-86ff-312b829d725b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1673,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "16f8dab1-429f-46ba-9661-ee3263d42b3c",
        "cursor": {
          "ref": "51c89e7e-4c81-40db-b067-73da29bb6e86",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d92c2480-8cb5-41ff-b3e5-5c2023b82f28"
        },
        "item": {
          "id": "16f8dab1-429f-46ba-9661-ee3263d42b3c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "97d17f3e-6a13-4430-9726-b7fdf85109f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2116,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "6f931ab9-898f-4d6a-8acd-1b9daa26c9aa",
        "cursor": {
          "ref": "10d3445f-5af6-4c0b-bfab-d507b97d81e5",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "872cfc4d-e77d-4bc4-92d5-4b2051751664"
        },
        "item": {
          "id": "6f931ab9-898f-4d6a-8acd-1b9daa26c9aa",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f25a30e7-ba74-4348-b44a-7cc4cb6d3020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1789,
          "responseSize": 551
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "e2ae3820-c6a9-496d-bae1-4fa6c399a0b6",
        "cursor": {
          "ref": "0b694177-6eef-4023-ad59-71506e2c0f24",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e7f3e7f8-f87f-4f68-831a-a2404cc4ea5f"
        },
        "item": {
          "id": "e2ae3820-c6a9-496d-bae1-4fa6c399a0b6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "460de3f3-76e7-4d1f-a2e1-ca48821dbd77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1693,
          "responseSize": 532
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "2430d04d-5abb-4e24-8494-75b37a0158ad",
        "cursor": {
          "ref": "b51f8d01-1c18-4a28-917b-ff1e91f62233",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "95787fcc-1fb7-4bf2-9f07-8f715ac9fcdc"
        },
        "item": {
          "id": "2430d04d-5abb-4e24-8494-75b37a0158ad",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c8011fc8-68ea-44e4-9a64-610de40534db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1810,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "2ce3da2e-bf03-4b34-9557-b0de958e8a03",
        "cursor": {
          "ref": "88fd3537-1515-4a72-abc3-0707be860da3",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b5f67a6f-6d80-4128-ab26-32b0231e52db"
        },
        "item": {
          "id": "2ce3da2e-bf03-4b34-9557-b0de958e8a03",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "76be7ff6-975c-47a3-a219-32b3f659be3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2351,
          "responseSize": 531
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "7b05b5f0-df35-4444-aa93-a5312e87bfbb",
        "cursor": {
          "ref": "2bb9faa6-3348-4b3d-badc-0648ff1f3f78",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0d082188-ace9-4e43-a3e9-d55d717c5304"
        },
        "item": {
          "id": "7b05b5f0-df35-4444-aa93-a5312e87bfbb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ed4a8422-ac84-4955-82db-763802aecaa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2318,
          "responseSize": 529
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "2d74b0c1-f245-4d2c-8eb3-b3485c675758",
        "cursor": {
          "ref": "244c7a43-ea65-4f42-9029-7d8f3d34c98b",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "42c05067-70aa-4db2-9af3-4e5ab413a53f"
        },
        "item": {
          "id": "2d74b0c1-f245-4d2c-8eb3-b3485c675758",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2706b223-c798-42c4-97f6-91bbc8496a9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8996,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "0557a573-8f22-4bee-aef4-13a742480b49",
        "cursor": {
          "ref": "931ab565-a132-4224-9a2b-e36b456963dd",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e240b5a4-5645-46fe-8dd4-be84bdde1463"
        },
        "item": {
          "id": "0557a573-8f22-4bee-aef4-13a742480b49",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "17180c84-12fb-4145-a42f-cb24d632a18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1372,
          "responseSize": 582
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "485a84ba-740b-4759-8e1c-3f5c5e40d2ab",
        "cursor": {
          "ref": "efe17320-39b1-4c03-8ce1-c1715272731a",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ccda7e57-f0af-4503-872c-b4697df8ab87"
        },
        "item": {
          "id": "485a84ba-740b-4759-8e1c-3f5c5e40d2ab",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "84ca12b8-dbdb-48f2-b690-28e7fa6d4806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1136,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "964e2d7c-3625-4941-98b9-6c2bf2a2a378",
        "cursor": {
          "ref": "d3c6773b-9a3f-47a7-bd39-8a18d0c46a9b",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "05e08710-bb91-45c1-b878-2ecc19d3b2d1"
        },
        "item": {
          "id": "964e2d7c-3625-4941-98b9-6c2bf2a2a378",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9a75573d-18fa-45a8-8f58-134b506c1ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 861,
          "responseSize": 556
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "5624cfb2-6452-482d-b85f-4e43bee1da52",
        "cursor": {
          "ref": "caa54e0b-828a-478e-b742-339cd5377995",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d6905f49-7c93-4c62-8646-a9215e87a815"
        },
        "item": {
          "id": "5624cfb2-6452-482d-b85f-4e43bee1da52",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ed1c3b2a-bae5-4f6a-9747-2cc28206450b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1426,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "d9bbecb9-afc2-4b00-b9fe-62699bb512d1",
        "cursor": {
          "ref": "81561b88-adfe-4717-9a02-8dd54f14e2b5",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "21b4bf1b-ebf9-471d-8cde-8eeec4455c94"
        },
        "item": {
          "id": "d9bbecb9-afc2-4b00-b9fe-62699bb512d1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "30535376-45ff-4d18-b0bc-f3c7fedeab1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1358,
          "responseSize": 580
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "d5e714cf-e25a-4d60-9e07-f277fedcdb96",
        "cursor": {
          "ref": "cc64f6c9-a859-4e63-9b03-9ee5e00722f1",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1c7c4fad-e40b-42a0-8ef3-6732bab81ed3"
        },
        "item": {
          "id": "d5e714cf-e25a-4d60-9e07-f277fedcdb96",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0ccfc0f6-ee29-4eac-a108-19c6eb34c1fb",
          "status": "Created",
          "code": 201,
          "responseTime": 11031,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "db8b34d1-1bce-47f7-8da4-ea7fa7bf0f89",
        "cursor": {
          "ref": "ee2bd705-375a-4ecb-99cc-9676010cb306",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7b53c4b6-37bd-481b-a914-8c78c17e6b17"
        },
        "item": {
          "id": "db8b34d1-1bce-47f7-8da4-ea7fa7bf0f89",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1fa73652-f311-4869-8ef1-131ef1753bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1391,
          "responseSize": 612
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "277ef62d-6628-4eab-ad45-afd857f3b9ad",
        "cursor": {
          "ref": "b4e2fd84-235f-4b7a-a92e-cf021f5688e0",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4bcf0f34-0edd-48cd-9957-066fc40ed63b"
        },
        "item": {
          "id": "277ef62d-6628-4eab-ad45-afd857f3b9ad",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1971e325-69a1-4d1e-966f-f85b9216af46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1855,
          "responseSize": 589
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "a7dadc3a-12bc-4a49-b554-f125056b16a9",
        "cursor": {
          "ref": "5d300b7f-bc78-4e47-81e9-bca4623c3d0f",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "536c0292-4823-462c-b122-a8b79bac5f31"
        },
        "item": {
          "id": "a7dadc3a-12bc-4a49-b554-f125056b16a9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ad10390f-12cf-426f-8563-9ba58deeef35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1218,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "0dca34d3-8ff9-4b3c-8a34-831d95f14ba9",
        "cursor": {
          "ref": "73a0eb22-ea28-4143-ab7f-b6c7aa44d4e0",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8a308bc2-58d9-43d5-afe9-894031ce0797"
        },
        "item": {
          "id": "0dca34d3-8ff9-4b3c-8a34-831d95f14ba9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "22e6db03-0bfb-40c6-b3a8-79ab704b4f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1465,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "3f4d6d2c-ae66-480c-9efd-c22676603338",
        "cursor": {
          "ref": "9af1c495-3454-41a6-8258-1dedefbd70de",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e6d961fd-2679-41a6-bce4-5524c42c405f"
        },
        "item": {
          "id": "3f4d6d2c-ae66-480c-9efd-c22676603338",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2213ddb7-fd14-42eb-b877-1c19686e81c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1809,
          "responseSize": 586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "5672ad1d-1b88-4d9d-aedb-1555b55fd521",
        "cursor": {
          "ref": "83e4f0c7-006a-4891-add0-61df7677ed45",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "68dbd302-66bc-4c37-ba51-60066b7913bf"
        },
        "item": {
          "id": "5672ad1d-1b88-4d9d-aedb-1555b55fd521",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b9f6ead9-1d2d-459a-a837-b0192e9312ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1378,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "3e9230f3-2e01-407e-b22c-96a96abe5b3b",
        "cursor": {
          "ref": "ea7f389c-4cec-4af1-ba70-f83d26e99d7d",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5f069789-5518-48a2-be42-2c99690cba60"
        },
        "item": {
          "id": "3e9230f3-2e01-407e-b22c-96a96abe5b3b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c82b75e9-bf98-42a6-bfab-c45c303a3308",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "6dff9511-84bf-4f1f-81ff-d6f016ab0ed7",
        "cursor": {
          "ref": "489ef81e-dbb2-4b29-af9b-0c082344035e",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "57841655-111a-4ac9-a522-85e64ca55669"
        },
        "item": {
          "id": "6dff9511-84bf-4f1f-81ff-d6f016ab0ed7",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "ca4b3b4e-f8af-4e4b-b65c-6f1fb30f2696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1098,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "d9a3e12a-01eb-472e-8e54-6fd968c3ad28",
        "cursor": {
          "ref": "06ae03c1-3a18-4df8-b539-fc8c2ddd685a",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e90b9649-10c0-4f8b-87fd-9f3ef1af8fa5"
        },
        "item": {
          "id": "d9a3e12a-01eb-472e-8e54-6fd968c3ad28",
          "name": "credentials_issue"
        },
        "response": {
          "id": "25294fc6-194e-4058-a8e6-36d89507693e",
          "status": "Created",
          "code": 201,
          "responseTime": 6341,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73b9f62-db98-473b-825c-4983b4ea46ed",
        "cursor": {
          "ref": "475a0c7e-998f-4c20-80ea-645d122f4d0c",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "df659b2f-a5c0-464e-b9ea-121b795db728"
        },
        "item": {
          "id": "f73b9f62-db98-473b-825c-4983b4ea46ed",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "68f3a11a-8826-45ac-83ad-ca90eaca027f",
          "status": "Created",
          "code": 201,
          "responseTime": 6876,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de3ca3d-3a1b-4571-92c6-c98a6932261e",
        "cursor": {
          "ref": "1b5385ad-f010-4ae5-9618-a2106339fdda",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3b329b22-ad41-4059-9366-0a5c489895bc"
        },
        "item": {
          "id": "3de3ca3d-3a1b-4571-92c6-c98a6932261e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "aadd5a67-0b78-44b9-878c-fc6af74473d4",
          "status": "Created",
          "code": 201,
          "responseTime": 5990,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "da84b000-9107-4f11-b5d6-d7db21e56652",
        "cursor": {
          "ref": "6b8b628b-7079-4f9f-b521-22eba33afe4d",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7f2675b3-0823-434b-8485-d82d76ef6d6b"
        },
        "item": {
          "id": "da84b000-9107-4f11-b5d6-d7db21e56652",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0420d904-3d64-4aa1-b41d-3766fd0a599f",
          "status": "Created",
          "code": 201,
          "responseTime": 6389,
          "responseSize": 658
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "219d525a-ce97-4b77-96e1-e3ea4b3b4ace",
        "cursor": {
          "ref": "924abac0-5205-4f90-8ba6-895646cf6581",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "db422868-a20f-4c12-b18f-b1ba835265da"
        },
        "item": {
          "id": "219d525a-ce97-4b77-96e1-e3ea4b3b4ace",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "adeb3787-8594-4627-9de3-56aa7fddb533",
          "status": "Created",
          "code": 201,
          "responseTime": 4224,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c29934-6684-453f-af48-ba32c4700036",
        "cursor": {
          "ref": "fbb224aa-5771-4282-a3fe-251c1e09e03f",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e7ee8c85-c637-4940-bedd-2943ac5a1f1e"
        },
        "item": {
          "id": "05c29934-6684-453f-af48-ba32c4700036",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ec59a41e-481d-4d51-b664-8df1278d9029",
          "status": "Created",
          "code": 201,
          "responseTime": 4825,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd5bc9e-5ddb-4f87-9531-5c3c5f05aa2a",
        "cursor": {
          "ref": "44604e63-cb24-4804-9310-f6f7412f6df9",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ead3145f-f51d-4fee-8e5a-1f3e3295b12a"
        },
        "item": {
          "id": "3dd5bc9e-5ddb-4f87-9531-5c3c5f05aa2a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "49d4eb40-d03f-4669-a927-11fd2de87bc1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 912,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "3dd5bc9e-5ddb-4f87-9531-5c3c5f05aa2a",
        "cursor": {
          "ref": "44604e63-cb24-4804-9310-f6f7412f6df9",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ead3145f-f51d-4fee-8e5a-1f3e3295b12a"
        },
        "item": {
          "id": "3dd5bc9e-5ddb-4f87-9531-5c3c5f05aa2a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "49d4eb40-d03f-4669-a927-11fd2de87bc1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 912,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "a706b022-49bb-4cb4-8d5b-561edd46464d",
        "cursor": {
          "ref": "58e29014-a58d-4881-91b4-e6b3a659cbbc",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d02f3da7-f3eb-4e8b-9999-da25572b453a"
        },
        "item": {
          "id": "a706b022-49bb-4cb4-8d5b-561edd46464d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1e1405b6-f365-4704-8586-38827beb4c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1012,
          "responseSize": 327
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "775a4015-c5de-4528-a78f-b2cfc62d6882",
        "cursor": {
          "ref": "df4d795e-bf0f-4463-9bf7-01cb53a09f82",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f3b51ba3-164d-4a6a-9222-74e50628686d"
        },
        "item": {
          "id": "775a4015-c5de-4528-a78f-b2cfc62d6882",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0b82f605-f600-48c1-809a-dcd71c640ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1276,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "390a5632-3bf5-41e7-a7a9-8e46ad87222c",
        "cursor": {
          "ref": "c5ee3125-a0ea-486f-bd88-cc69f3daeaee",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d8b9d691-6d0e-40ae-ad0d-640a98a4c2f7"
        },
        "item": {
          "id": "390a5632-3bf5-41e7-a7a9-8e46ad87222c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e8b53b50-4514-4804-b95d-1d8b63f23823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1249,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "e0d2bf48-aff0-442b-a1b3-0e9b839b009f",
        "cursor": {
          "ref": "771f8d21-2f44-423d-b4dc-6e05260295ac",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b52a8890-fe2e-41a1-8de6-037b6fee178f"
        },
        "item": {
          "id": "e0d2bf48-aff0-442b-a1b3-0e9b839b009f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b86c607c-0fc9-48b1-974b-fad32c7da14c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1483,
          "responseSize": 282
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "6cc51080-4b75-4b3e-a839-9b39d328ec50",
        "cursor": {
          "ref": "23b27e4b-6133-4681-aaf6-70290c15132c",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "445fc7ad-637f-4ba5-92c2-cd4fd56fc1cb"
        },
        "item": {
          "id": "6cc51080-4b75-4b3e-a839-9b39d328ec50",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d4c889d8-2922-44ed-8a2b-d308b1594fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1373,
          "responseSize": 280
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "450061dd-fdb5-4ee0-9fa6-6c85dd14434a",
        "cursor": {
          "ref": "c54826a1-ebee-483d-9062-b8e85f62e3c9",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "035becd4-1a88-4d98-b6ca-cbd7fc343820"
        },
        "item": {
          "id": "450061dd-fdb5-4ee0-9fa6-6c85dd14434a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dc31b619-cf5c-4e57-bb76-cf98cd5d997e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1331,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "db01a456-6175-455b-9fbb-d2ca02303b9e",
        "cursor": {
          "ref": "6a12c599-c3be-4576-b03f-c514959fd09b",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1e6f7ce8-48b8-4d3b-9bf7-238da6be8e96"
        },
        "item": {
          "id": "db01a456-6175-455b-9fbb-d2ca02303b9e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "233fe50a-8df6-406b-967b-7b57889cd775",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1200,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "b2a65616-f83e-4942-b1b3-3e1b3bfb7a9f",
        "cursor": {
          "ref": "a3ce7716-de88-47ee-9c28-bce84774108a",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3dd86f4e-2694-4533-a73f-6ae294b8a383"
        },
        "item": {
          "id": "b2a65616-f83e-4942-b1b3-3e1b3bfb7a9f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d883d4dc-aa54-4ed6-bde7-f637bdfc45b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1526,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "27977d04-ec48-4457-bb6b-0ecb7a15f07e",
        "cursor": {
          "ref": "ca904a14-08b9-435e-bdef-25729d8795c7",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5f75814e-dbf9-44fb-9603-7ce183266e56"
        },
        "item": {
          "id": "27977d04-ec48-4457-bb6b-0ecb7a15f07e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "89b19e4f-dd3d-479a-bed4-bef663875736",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1054,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "e2af6f15-15fb-4644-970a-30b84c90ef14",
        "cursor": {
          "ref": "732103d1-ac8a-4482-a9d0-7d8447f2877b",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b1ae69a1-550b-4f3d-b5b0-4ac4a372d367"
        },
        "item": {
          "id": "e2af6f15-15fb-4644-970a-30b84c90ef14",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "63c63d7f-94c9-45db-9e6f-fd2822758343",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 835,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "e7c4ec4b-c6fc-4eb5-ac57-bd3012320272",
        "cursor": {
          "ref": "6bc51cf3-4ac6-4014-8440-30e79a29173c",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "12e756b1-e19a-4eb2-8be2-356383488506"
        },
        "item": {
          "id": "e7c4ec4b-c6fc-4eb5-ac57-bd3012320272",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cdfaf36f-4935-4ea9-ae22-d1f60b4c7f83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 969,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "825cc19a-f918-4c0c-91ef-6014bab2d062",
        "cursor": {
          "ref": "ac9b70ba-fe63-4495-9e18-afc4b5094c09",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9c8fa006-a60e-4cd4-a9d3-331f55d6c46a"
        },
        "item": {
          "id": "825cc19a-f918-4c0c-91ef-6014bab2d062",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "aab3424b-e2c3-4242-ba7b-5cabf31f0d88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 953,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ae376f79-06e1-4497-a062-880dfaa3ce9a",
        "cursor": {
          "ref": "53a68e62-0694-49eb-a949-8b36aa6cc706",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d014b34d-20b5-4941-afa9-a8abd1be74cc"
        },
        "item": {
          "id": "ae376f79-06e1-4497-a062-880dfaa3ce9a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b6cc54f1-6a93-4407-90a9-0873a196961f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 887,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "9d8bc731-1c98-44a9-947d-989d33413f56",
        "cursor": {
          "ref": "a7f2f000-61dd-49d1-a810-c70f9611b83b",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b29ef5d8-85bd-4508-84f3-04f66b5f1180"
        },
        "item": {
          "id": "9d8bc731-1c98-44a9-947d-989d33413f56",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8f583414-5cc4-418b-b60e-534be4373491",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 877,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "b85d9402-9c86-4565-9628-df14bd974b78",
        "cursor": {
          "ref": "5fc8e08c-e557-4eef-af3f-0d999bb2d51a",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "13179419-62e1-4ecb-8646-7b67fe7f7c30"
        },
        "item": {
          "id": "b85d9402-9c86-4565-9628-df14bd974b78",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b606582a-55d2-4ac6-9103-e04d592e6e40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 707,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "c0a4f128-2060-408b-a307-03f0628c1a06",
        "cursor": {
          "ref": "7641d3c9-85eb-4242-bf9d-dd6b160428ba",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "bc6a7cbc-6fe1-4d36-8f78-1c3f6a6c2ecd"
        },
        "item": {
          "id": "c0a4f128-2060-408b-a307-03f0628c1a06",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "65dcd2bf-40ef-43b8-b646-cdf55495f81f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 706,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "a3e3cbc9-203d-4b59-865d-2113d314ff38",
        "cursor": {
          "ref": "5a3a11f3-a05e-471c-9148-b9d5071b87df",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e34b80d2-66c3-4e0b-8e5e-5ed960fb304f"
        },
        "item": {
          "id": "a3e3cbc9-203d-4b59-865d-2113d314ff38",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bd54b9a5-ec75-41da-91b0-89792ae13076",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 749,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "9e0107a2-092a-4be1-95f9-cf11134d17aa",
        "cursor": {
          "ref": "223b275a-219b-48d9-b582-ff194e4ea23a",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3073557b-7bc1-4345-92d1-b52d33fcaddd"
        },
        "item": {
          "id": "9e0107a2-092a-4be1-95f9-cf11134d17aa",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "aa1b1adc-11bd-450d-a4fa-627dd764850c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 719,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "9f59d16b-c8c6-4637-8994-ef2351d58c9b",
        "cursor": {
          "ref": "7847537a-fae9-444f-a073-70b9c25918d1",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "5e88c0ff-a1cf-4482-bcde-823de03ab836"
        },
        "item": {
          "id": "9f59d16b-c8c6-4637-8994-ef2351d58c9b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bdb9debb-bdf0-4f78-98e5-ea42550544ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 718,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "c6089ce4-d1ba-409a-88dc-e9c05f5cb866",
        "cursor": {
          "ref": "c60de95b-392f-4bb4-b482-82df22790dda",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "17b74834-a51c-462f-ad8f-50b62e90aa0c"
        },
        "item": {
          "id": "c6089ce4-d1ba-409a-88dc-e9c05f5cb866",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "131abe29-b622-465a-9ba5-bfb0443fc1af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 646,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "fc7e0d6c-bc1b-465a-b27b-59408b14a035",
        "cursor": {
          "ref": "9648ec52-17ff-4dcf-a34d-736122129996",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4e006a9c-b00b-4867-bc57-af81417c33c5"
        },
        "item": {
          "id": "fc7e0d6c-bc1b-465a-b27b-59408b14a035",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "195a2dc3-534e-4618-b5cc-452e343583ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 550,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "9434f91e-3f8b-4697-ab71-098be84d0666",
        "cursor": {
          "ref": "0154f337-84c7-4e9f-a30a-32f04b7ec8ec",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a63c19aa-017e-41d2-a5a3-e27f78518f05"
        },
        "item": {
          "id": "9434f91e-3f8b-4697-ab71-098be84d0666",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a0badc11-82d2-4a01-b266-96b973bcbdef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 445,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "7116e012-73dc-486d-907b-605090dcbaac",
        "cursor": {
          "ref": "3250ad72-00c4-42e5-8435-e8c68b32149d",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "be53583c-86c6-4307-a31c-1462147f40af"
        },
        "item": {
          "id": "7116e012-73dc-486d-907b-605090dcbaac",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bd47ffce-453d-448d-ab2e-6f67d276fab0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 505,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "5cf49e9d-f007-4430-9019-46caa59883ba",
        "cursor": {
          "ref": "4259523f-a679-4a0f-8bc5-55ee5712a529",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1ca45019-b908-41f8-b6c1-a90f7bdbba68"
        },
        "item": {
          "id": "5cf49e9d-f007-4430-9019-46caa59883ba",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "095bf4aa-f5b6-4f2f-a06b-c14e08487b34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 489,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "a796987d-b59d-4ed7-901a-3269d0c55009",
        "cursor": {
          "ref": "d5b330d8-ecd9-4907-954b-5dea60983432",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "8ac9b40c-88a3-40d1-88b9-1e2b1edf3ea1"
        },
        "item": {
          "id": "a796987d-b59d-4ed7-901a-3269d0c55009",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "96a8b28e-ef54-4336-8990-50e2788b186e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 659,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "a99181eb-6988-4516-bece-bc3c9ca32a6e",
        "cursor": {
          "ref": "17be17a3-d37b-4841-b814-0aec03f168e5",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7d2ccea0-f988-4f1d-86b9-fbbb0905eecb"
        },
        "item": {
          "id": "a99181eb-6988-4516-bece-bc3c9ca32a6e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "980a7548-b47e-469c-9507-8d70eb3c2b22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 470,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "55bf926e-9597-4421-8c5e-5f49009b9065",
        "cursor": {
          "ref": "5e3ade67-2caa-4376-a494-85a67c269199",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "bb281e45-9232-41e6-8f2a-7bd422e38f33"
        },
        "item": {
          "id": "55bf926e-9597-4421-8c5e-5f49009b9065",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "aa24c70e-77dd-46e5-b617-29ab47f3aeed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 522,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "5a3dfabe-dc49-4f22-a025-5150e448f131",
        "cursor": {
          "ref": "e23927eb-2d6c-49b1-beae-eaeb187adba1",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "59a10c16-0e82-4747-a154-dd99d590f58e"
        },
        "item": {
          "id": "5a3dfabe-dc49-4f22-a025-5150e448f131",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "07b487a4-7fbd-430b-a017-8a9e3155c33d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 456,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "2d59784c-6a00-499e-9032-e0b36af2b3e7",
        "cursor": {
          "ref": "471c80d9-dc64-4e85-99d6-9f32d81006e6",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "34c74613-215f-468d-89c6-17194ec23db5"
        },
        "item": {
          "id": "2d59784c-6a00-499e-9032-e0b36af2b3e7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a2baa9cc-a0e9-4d6e-81a6-b361d0456c0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 531,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "39bd087a-a75b-4760-8391-f01ef673720b",
        "cursor": {
          "ref": "e0f889f1-4ecf-4a40-babb-54aa566847a7",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "364860c1-4d11-46ea-b7d8-bdf0f6ca22b2"
        },
        "item": {
          "id": "39bd087a-a75b-4760-8391-f01ef673720b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "157bfefb-95bc-41c4-b3fe-ef125b6d1f8e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 415,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "43ef6785-3942-465e-99d5-b548011d0aba",
        "cursor": {
          "ref": "d1506508-0ff6-4897-ad73-24255c097863",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "80d0eb2c-6b73-4434-be57-e0a74b5fd6fc"
        },
        "item": {
          "id": "43ef6785-3942-465e-99d5-b548011d0aba",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "37a4e266-1f1b-4081-aa0d-cb5714a47872",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 400,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "5625d2ce-ab83-41f3-b6c7-ed5d4f871f51",
        "cursor": {
          "ref": "e0faef09-a463-4b1e-91c2-f48f34b15411",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b951c7c7-fd30-46a6-8b02-61f0f51cb41f"
        },
        "item": {
          "id": "5625d2ce-ab83-41f3-b6c7-ed5d4f871f51",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "20198106-d289-45e8-9415-222eca6b12d8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f148d49a-1f24-4418-a68f-164c65aca538",
        "cursor": {
          "ref": "567e9ed0-4a6a-448f-b663-95044a261fc7",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bab0fc84-8ad4-48a2-83b7-209106ade161"
        },
        "item": {
          "id": "f148d49a-1f24-4418-a68f-164c65aca538",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "7bd54bb6-10c7-44f0-8271-88db468fa551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 403,
          "responseSize": 206
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "097e68fa-2e4d-4a84-8849-e5a8cd62e6d3",
        "cursor": {
          "ref": "3788976d-4c4a-428e-bac6-cb9224ede703",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "26aab173-facd-44f4-a471-e203571c7ead"
        },
        "item": {
          "id": "097e68fa-2e4d-4a84-8849-e5a8cd62e6d3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b41434e9-f582-4d1a-9186-8be8f18c6efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "097e68fa-2e4d-4a84-8849-e5a8cd62e6d3",
        "cursor": {
          "ref": "3788976d-4c4a-428e-bac6-cb9224ede703",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "26aab173-facd-44f4-a471-e203571c7ead"
        },
        "item": {
          "id": "097e68fa-2e4d-4a84-8849-e5a8cd62e6d3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b41434e9-f582-4d1a-9186-8be8f18c6efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "3f1cbf8f-271c-42a1-ab57-e51f1e7d3256",
        "cursor": {
          "ref": "be9a1dd1-a6ac-4358-91b0-34100288d0df",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6fcc4aec-bed1-490e-9955-da11bbc5ef79"
        },
        "item": {
          "id": "3f1cbf8f-271c-42a1-ab57-e51f1e7d3256",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "274cceda-ce00-4cbd-8c66-8983c012f5cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 187,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "5878f69f-ced0-49ce-af6a-99f2a4dd5dda",
        "cursor": {
          "ref": "2caa8683-f069-4a36-802f-c7a4f909432d",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3f037cf7-badf-4a2f-a19b-623e978fbd89"
        },
        "item": {
          "id": "5878f69f-ced0-49ce-af6a-99f2a4dd5dda",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b2606b34-81af-4276-aea9-764ee57aa411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "053ec6c7-4fc8-46a4-945b-84c95ad3e0ae",
        "cursor": {
          "ref": "2c14aeed-2621-482c-9b71-2d0f534d340d",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "90278a59-a624-47af-a5d9-2ae0dd08a1df"
        },
        "item": {
          "id": "053ec6c7-4fc8-46a4-945b-84c95ad3e0ae",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "37e5b50a-a079-4256-9be2-9b8ea8fc88f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 540
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "967db7a9-0877-460a-9792-e6ad0076e988",
        "cursor": {
          "ref": "7d4002a8-3137-4e62-bf24-3c1d362862bc",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fd515e03-1bd8-4822-bce1-cd35e51fb4c0"
        },
        "item": {
          "id": "967db7a9-0877-460a-9792-e6ad0076e988",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "255055b4-a031-47a5-865e-56f18e066e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "a07d7f97-ed75-43e1-8e34-2dcdea57ac5c",
        "cursor": {
          "ref": "c1c81451-e4ef-4724-89a7-e9975358b2e1",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d3007f37-3293-450b-af25-f79b609cd9fa"
        },
        "item": {
          "id": "a07d7f97-ed75-43e1-8e34-2dcdea57ac5c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0486adaf-c2e6-43b8-9483-7b7ab8fbc47c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 539
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "d3c5af3f-d656-4ad0-ac14-c6712f8a38d4",
        "cursor": {
          "ref": "05db0273-e343-4521-ab8f-f10d043abe42",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7434af1c-e9d9-437f-a3fb-322f13dd70b6"
        },
        "item": {
          "id": "d3c5af3f-d656-4ad0-ac14-c6712f8a38d4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ae26225a-808e-4f6d-b7ef-e2cd3ec001e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 1154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "c1301bde-a6b6-4902-ac39-38f9835b4f71",
        "cursor": {
          "ref": "ed577664-363f-41b1-a4d5-143d408d27be",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "40dd3438-2b99-47df-b6c2-0ea84be24e40"
        },
        "item": {
          "id": "c1301bde-a6b6-4902-ac39-38f9835b4f71",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "66fe76c0-c032-4e9c-ab18-b7f71ffb2b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "3c21ff25-c03d-4106-a310-952d70be0d77",
        "cursor": {
          "ref": "f837cd7a-998a-4e79-bde7-a4d5186dfb15",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "462059ad-715e-487a-9556-7bc060430be5"
        },
        "item": {
          "id": "3c21ff25-c03d-4106-a310-952d70be0d77",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "28a9f216-7807-4977-8f26-b12dea404933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 1699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "126f4170-47bd-4ed1-b803-cf624544f334",
        "cursor": {
          "ref": "e85cbd9f-84a0-49c6-b298-e4e1db922b6a",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "505fa2c2-cb42-4033-9304-931211638257"
        },
        "item": {
          "id": "126f4170-47bd-4ed1-b803-cf624544f334",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0e75dfc9-473f-4bd1-b71f-b41b6e6e5546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "2cdf10ca-ce65-4076-9375-2d8bb11c8e84",
        "cursor": {
          "ref": "05ad3190-92ac-4d06-9597-6d5733741e45",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3f36e6d1-8842-480f-a526-ad6a68a44535"
        },
        "item": {
          "id": "2cdf10ca-ce65-4076-9375-2d8bb11c8e84",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1c4a458a-cbcc-4b32-968d-64ef285602cd",
          "status": "OK",
          "code": 200,
          "responseTime": 327,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "21d6da94-d796-4574-b3b3-aa4b7d298d64",
        "cursor": {
          "ref": "509a4314-00bb-4948-a88c-01c3c996b187",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a68d9399-d2bc-467d-bc32-07d8164aff34"
        },
        "item": {
          "id": "21d6da94-d796-4574-b3b3-aa4b7d298d64",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8b5a2a15-f9e9-45c9-91e3-f9fe91364321",
          "status": "OK",
          "code": 200,
          "responseTime": 282,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "fe16194c-f3d4-4962-af81-256505bf89b7",
        "cursor": {
          "ref": "27109914-8bfd-47f0-ad19-193f433e472d",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d15e3045-8b75-46bb-86d0-7224c9740837"
        },
        "item": {
          "id": "fe16194c-f3d4-4962-af81-256505bf89b7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7ea6957e-ec4a-4e0e-9c96-661460d48f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 2187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "8675a61b-1949-4dce-83dc-c93e40e05991",
        "cursor": {
          "ref": "c8ac43af-c116-49fe-b57f-7a7b31192480",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "dae5f436-65a6-4382-a948-5e0c3ca60e11"
        },
        "item": {
          "id": "8675a61b-1949-4dce-83dc-c93e40e05991",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2deecf9c-e18b-418a-9c97-5cba488369fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "9c33dd24-d162-42bf-b4f2-f1c5a3e8cc2c",
        "cursor": {
          "ref": "dff62405-14b4-4631-bacf-ebce5661fb46",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c83ef21b-6854-4fed-a1c8-343f3000464d"
        },
        "item": {
          "id": "9c33dd24-d162-42bf-b4f2-f1c5a3e8cc2c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f5cb5399-ed48-4d5a-aef1-7e8907fd9429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 2176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "bcc924d0-3d09-4067-8c3c-86e760d96df1",
        "cursor": {
          "ref": "8a7ce23d-79f1-4681-bf5f-a1f4a2abeb66",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c23216d9-1a2e-4c02-9dc2-26bd848948e2"
        },
        "item": {
          "id": "bcc924d0-3d09-4067-8c3c-86e760d96df1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d1ab3bfe-8d51-422d-826b-f1ba20a95470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "239ea329-5d0c-4ef8-9623-4315e3504c2d",
        "cursor": {
          "ref": "d203fe06-0842-44b3-aa20-076476a3de0e",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "da4eece4-849d-4377-9373-17a3eae8c0c1"
        },
        "item": {
          "id": "239ea329-5d0c-4ef8-9623-4315e3504c2d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c71118a5-342b-4d12-8877-02393585d9e1",
          "status": "OK",
          "code": 200,
          "responseTime": 271,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "61015b37-1d33-44ca-b420-3edd5c1696c4",
        "cursor": {
          "ref": "f353f022-b084-4807-9d37-9b59e2327832",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3f0d5473-1c26-436d-8f0f-668197902b48"
        },
        "item": {
          "id": "61015b37-1d33-44ca-b420-3edd5c1696c4",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "14103557-4a9a-440e-bc2b-66309217db2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 1235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "70eb2efd-7502-4fa7-a772-72877f9265e8",
        "cursor": {
          "ref": "fa6311e5-6fac-4b63-8413-bed9e73e1d4a",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0d685bda-5bc0-41db-b85f-25f9d3818f3b"
        },
        "item": {
          "id": "70eb2efd-7502-4fa7-a772-72877f9265e8",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f917a5bb-41ec-4d53-bd3e-a742e7d0aa68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 1191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "679ea93a-b71e-4516-a3b4-99ccf544b2a9",
        "cursor": {
          "ref": "7b0b2f8b-e078-47ee-ab2c-5eb77a36b0ca",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "62bb1550-3984-4135-b832-7bc83a56d558"
        },
        "item": {
          "id": "679ea93a-b71e-4516-a3b4-99ccf544b2a9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2062cf53-8702-44fa-9b27-2659ae9aa991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 1189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "18f27411-b2c9-4617-a20e-6a911c2cd0b0",
        "cursor": {
          "ref": "b9d09849-d2b4-4edc-9dc6-65c4942c7074",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "267bc514-1c30-4ae0-b82b-83cca1f5ef12"
        },
        "item": {
          "id": "18f27411-b2c9-4617-a20e-6a911c2cd0b0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "dae0d4f3-d26f-4ef6-a9c4-9e8fbed29785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 1190
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "bdb07eeb-ea3c-4708-ad50-d96f2fa1dda1",
        "cursor": {
          "ref": "f13ac5f7-f6f0-4d2e-9e57-1f95d77566a5",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0246d488-f7c6-4a92-8e2b-cee43582999f"
        },
        "item": {
          "id": "bdb07eeb-ea3c-4708-ad50-d96f2fa1dda1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "507b0bfa-da7a-4706-91d1-f0d9390ba0a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 1241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "766a8977-9014-4257-85e3-61f87e1854d8",
        "cursor": {
          "ref": "9c738fde-42ce-441a-bc47-d8b5340376d2",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fe5b8971-a82f-4fd8-a333-ca48f46cd2fc"
        },
        "item": {
          "id": "766a8977-9014-4257-85e3-61f87e1854d8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7d67195f-aaaa-4557-8967-95ecce301e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 1168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "aa0f6408-877f-4e06-b128-b43c8ec3a94e",
        "cursor": {
          "ref": "9afb9bfd-a7ed-40da-917b-82da9158272a",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "72e25e10-20e0-461b-99af-24ee60c5532f"
        },
        "item": {
          "id": "aa0f6408-877f-4e06-b128-b43c8ec3a94e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "82c2fc88-458b-49fd-8041-181c2a2a2ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "7d2b725e-92cb-464c-8fbc-b4f7645a1583",
        "cursor": {
          "ref": "e17279bc-f7a5-4883-8dfa-798cf53859ec",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9c983319-1d13-463f-99ed-86bf3556bf2c"
        },
        "item": {
          "id": "7d2b725e-92cb-464c-8fbc-b4f7645a1583",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2e6e467a-0f0d-4a21-bbf4-40310c40906b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 1488
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "f1d86e5b-12f1-49bd-be95-c577f2af8921",
        "cursor": {
          "ref": "70b5d52d-eba8-4c17-9bff-9333afb38c93",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d21b6ced-0273-4e0f-ae43-c22a71ff5d9f"
        },
        "item": {
          "id": "f1d86e5b-12f1-49bd-be95-c577f2af8921",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "17735635-04eb-468b-bde1-4a0e8e1dc664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "bcf55fe4-1d24-4a52-b463-5634d1f31661",
        "cursor": {
          "ref": "75866714-42ab-48db-b173-09126f417424",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "cbdcbd24-46c9-41e5-ba50-62b758a0a547"
        },
        "item": {
          "id": "bcf55fe4-1d24-4a52-b463-5634d1f31661",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a130ad33-1617-4001-ab80-32532495457d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 1515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "44ed465e-e137-45cc-a8e9-84d93aff40e9",
        "cursor": {
          "ref": "3befe74c-c509-42ca-9a21-d8977706d371",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f9fc68f0-c815-449f-a533-cccef47c7e1a"
        },
        "item": {
          "id": "44ed465e-e137-45cc-a8e9-84d93aff40e9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "638ae0ce-9337-4cc5-bd57-e8b3d1a962a5",
          "status": "OK",
          "code": 200,
          "responseTime": 286,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "4b130029-9611-4a3c-84fa-ebfcb894f005",
        "cursor": {
          "ref": "0a4b4261-b3a0-4308-8103-dfe0596dd85a",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "96549892-1e91-4b05-addd-cf2f62e8bc99"
        },
        "item": {
          "id": "4b130029-9611-4a3c-84fa-ebfcb894f005",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c56a9c04-2924-4f01-89b6-136a13be4781",
          "status": "OK",
          "code": 200,
          "responseTime": 201,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "90448593-e806-4557-b083-f8709aa51bd5",
        "cursor": {
          "ref": "56bfb34f-14d4-400a-aaea-4acd69271afd",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f3464262-43e8-47bb-bc1f-68dfbb7e6aa0"
        },
        "item": {
          "id": "90448593-e806-4557-b083-f8709aa51bd5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5298454c-6636-4f48-b2b7-b48e02ec1781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 1534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "4a95d944-3282-47bb-9ecf-1352128062c0",
        "cursor": {
          "ref": "e9926b76-b1be-4dab-a3b6-690fc8fd4bf4",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "888e17e5-c62e-4f7a-b95d-76b8e020a3bc"
        },
        "item": {
          "id": "4a95d944-3282-47bb-9ecf-1352128062c0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ddfd9cff-f411-41bc-ab96-bca284d63f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "971cc7dd-ec4b-4446-9d95-97027cea7d34",
        "cursor": {
          "ref": "1416b755-26c8-45fb-a6ad-a51cfca14ed8",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8d6e9290-5bcd-4adc-8eb6-289b9b1c314a"
        },
        "item": {
          "id": "971cc7dd-ec4b-4446-9d95-97027cea7d34",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "04be135f-a4c8-4a73-b02a-814b941f0bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "3950aff3-4f19-4e5e-93a6-236766ff80ba",
        "cursor": {
          "ref": "f993110a-e957-459d-9afd-515c60c0e62d",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "feedf54f-9e44-4132-9a9b-4ac459ad6183"
        },
        "item": {
          "id": "3950aff3-4f19-4e5e-93a6-236766ff80ba",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "fb5f44d6-300a-4f41-bb8c-3cfb1facc68c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "7d142f4a-d809-436b-b818-c22d178b8485",
        "cursor": {
          "ref": "ed8b3061-6d9e-459c-8afe-e0ad37248168",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "62e23a14-fc5a-4c4d-bc6e-7b5360f82d54"
        },
        "item": {
          "id": "7d142f4a-d809-436b-b818-c22d178b8485",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "aad11051-f1c8-44d2-816d-17ec1745bc53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 1550
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "6e3024b4-f6f9-4bc9-bf1d-5151361277b2",
        "cursor": {
          "ref": "1131e269-9341-4040-80f6-fc5aa846a0df",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7521e212-6844-4d8b-9349-439abcd4a858"
        },
        "item": {
          "id": "6e3024b4-f6f9-4bc9-bf1d-5151361277b2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "150d4671-2c56-4a60-a8d7-5bd7d2a7daf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 1136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "782691d8-004e-4f52-8601-5f29515b8a00",
        "cursor": {
          "ref": "c46289e2-14c2-44b2-9900-a1004d62ea34",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fde8fe73-2a08-4400-b545-0e8dc59857f0"
        },
        "item": {
          "id": "782691d8-004e-4f52-8601-5f29515b8a00",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1b155277-2b23-4f81-8e4d-438160031a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 1445
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "7cabe088-4dc2-4cf9-9ea1-5d3fe28b5d99",
        "cursor": {
          "ref": "54b06a4d-3c55-4dca-b611-59543672f926",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "83169ee4-8b97-4b98-a339-6b87880bc6c7"
        },
        "item": {
          "id": "7cabe088-4dc2-4cf9-9ea1-5d3fe28b5d99",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "72326e72-4ddc-4894-855c-7259d6696ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 1431
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "e91f6294-25b2-461f-ae4b-56a7aadcd551",
        "cursor": {
          "ref": "3cac2da9-b1b1-41f8-811d-1fb7cd0efda8",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e9edaf4e-14bf-432e-8c23-08a60a2230d1"
        },
        "item": {
          "id": "e91f6294-25b2-461f-ae4b-56a7aadcd551",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c7b3253a-8a90-48f7-a469-bf083f87559d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 1429
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "06c8dff8-631b-40fe-8817-6fcf051ab725",
        "cursor": {
          "ref": "e0d5b434-41bc-47ea-9576-2a5c693fba6b",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e7ba1461-f508-4513-adb3-e639fefdacaf"
        },
        "item": {
          "id": "06c8dff8-631b-40fe-8817-6fcf051ab725",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "daa4b658-b0cb-43cb-b4b8-554b7fff68b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 1430
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "9d851c4a-7092-4f0c-b664-59885e3c6483",
        "cursor": {
          "ref": "e671cb33-dbc0-46bb-ba91-c89716a57e50",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "90885759-16f0-44b0-96f6-8df444d0a69a"
        },
        "item": {
          "id": "9d851c4a-7092-4f0c-b664-59885e3c6483",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "53d677be-1bc7-4200-b2c5-e615dd9122fa",
          "status": "OK",
          "code": 200,
          "responseTime": 229,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "986c4f11-b5ad-496b-b998-6e81bd6d1db3",
        "cursor": {
          "ref": "e71ad668-8bd3-4046-b88b-0cc860fcce16",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "71ddb77d-3bd8-4a45-92de-b9d82b170f6a"
        },
        "item": {
          "id": "986c4f11-b5ad-496b-b998-6e81bd6d1db3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9b72c285-d5f0-4e6e-8b26-705f70647676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 1470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c115f2ea-e20d-45f8-8ec4-863f145c9072",
        "cursor": {
          "ref": "ce39bc66-b3a9-44b4-82ea-bb93ac48bb56",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b169fbec-f4a9-48e0-be0d-568bbc1901fe"
        },
        "item": {
          "id": "c115f2ea-e20d-45f8-8ec4-863f145c9072",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b2d299c3-8551-459a-9085-121f756ee135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 1456
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "47706520-925f-4c73-9770-b7980f21f941",
        "cursor": {
          "ref": "138598bd-3c3f-4e70-b422-1744f71d4078",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "51a6656a-d094-4fb6-ac4d-65f1adc0f36a"
        },
        "item": {
          "id": "47706520-925f-4c73-9770-b7980f21f941",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "10e4063a-7e0d-4266-8f7f-2ca72f479e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 1454
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "57fc17eb-4d85-4310-b6c6-154cd3e8640a",
        "cursor": {
          "ref": "e0c2deef-bb60-4a48-a025-4e7ef3edf776",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9abcb92d-9339-4441-bd25-00ec8cf6220f"
        },
        "item": {
          "id": "57fc17eb-4d85-4310-b6c6-154cd3e8640a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "acd2dd9a-2a17-4b17-a8b1-82985747a47d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 1455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "ab1baeba-7c8b-49d1-ae5b-b8bef96509af",
        "cursor": {
          "ref": "b212a656-8ba8-43b5-8fb1-2faaab0668e4",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1682609b-cb79-42c4-82a5-668f42256e9b"
        },
        "item": {
          "id": "ab1baeba-7c8b-49d1-ae5b-b8bef96509af",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0b22023c-b5b6-45ba-8028-cba27782bee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 1476
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "f68402cd-b663-49e8-87ab-60bbbd522c69",
        "cursor": {
          "ref": "39ce83a4-f343-471b-93bc-729ab37cc818",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6fefe930-1670-46b8-83a0-30c5f2783a8f"
        },
        "item": {
          "id": "f68402cd-b663-49e8-87ab-60bbbd522c69",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7792a357-144c-4178-97ae-784868158f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 1178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "6e542c96-67f6-4613-ad1c-cf0bb4e97ad0",
        "cursor": {
          "ref": "8a8e8d38-fa0e-4786-a845-3d28405e9ccd",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "81b15c88-c39b-40b7-8833-cbcb3d401460"
        },
        "item": {
          "id": "6e542c96-67f6-4613-ad1c-cf0bb4e97ad0",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "cbc40102-8309-454e-b207-7c8a8100e59c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 1202
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "3f3f2606-2a37-4bb2-a732-2457c9da913a",
        "cursor": {
          "ref": "043b031f-409b-40ec-a106-51ad5e3a4093",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9450b362-b614-4d0f-891c-7a92b809caf0"
        },
        "item": {
          "id": "3f3f2606-2a37-4bb2-a732-2457c9da913a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "09e32e85-cc29-43dd-82d4-61120191a810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 1183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "ab674d5a-5948-403a-b3e8-01de24419428",
        "cursor": {
          "ref": "d7e9561c-7c32-4cc9-92e1-1960b052325f",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "96967b08-ab8d-464b-9ffc-7a7f51c31ad6"
        },
        "item": {
          "id": "ab674d5a-5948-403a-b3e8-01de24419428",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "64c89a64-93b2-4196-af7e-909fdf3ac11a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "9790397a-11cc-4dec-a369-1b9453a3bae5",
        "cursor": {
          "ref": "6d9b2ee4-5da1-4f61-a6b6-12f7b9894413",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0247e495-84f6-4d8c-9a74-76fc2b4f6f2d"
        },
        "item": {
          "id": "9790397a-11cc-4dec-a369-1b9453a3bae5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "018ffab5-586e-4a56-850c-91153453dc65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 1182
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "d54b4ab2-1232-4eee-a9cd-3edb192bf6b1",
        "cursor": {
          "ref": "d2949147-905a-4761-a242-e8c1532f08b4",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9b475107-1371-4e59-9fbb-5474e3fac9bc"
        },
        "item": {
          "id": "d54b4ab2-1232-4eee-a9cd-3edb192bf6b1",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b62c8aff-c2b0-4028-9551-c6e205b94d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 1208
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "3b6c3d58-2aab-46ed-9633-60197e7f43f5",
        "cursor": {
          "ref": "cdd1cc13-ec37-4f7f-9a76-d3632d2177f6",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2b0a954d-7272-4bd6-adaf-509b30ca8078"
        },
        "item": {
          "id": "3b6c3d58-2aab-46ed-9633-60197e7f43f5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3239f272-d092-49c5-8938-1ba4655a7627",
          "status": "OK",
          "code": 200,
          "responseTime": 273,
          "responseSize": 333
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "64840698-f028-4be9-a359-828dd7512feb",
        "cursor": {
          "ref": "33c6b704-3140-4896-a022-ea318f10a3b5",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "599d9195-f158-4000-8358-2b91cc0ad646"
        },
        "item": {
          "id": "64840698-f028-4be9-a359-828dd7512feb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ccf83c53-c390-490f-a1a9-5a78aef3e3bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "46db2a4f-1511-4df3-bb65-e7bb9e1c2375",
        "cursor": {
          "ref": "9e138c18-7751-4b73-b841-29d1955ed3ee",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d7004434-159a-434a-9bea-f01dbf335e1a"
        },
        "item": {
          "id": "46db2a4f-1511-4df3-bb65-e7bb9e1c2375",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6a8016b6-28e8-493a-928c-4d0eee0827d3",
          "status": "OK",
          "code": 200,
          "responseTime": 270,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "9f4c96cf-3323-430d-9978-d12fa57458f5",
        "cursor": {
          "ref": "8efd6b3d-48c9-430e-be18-1797cf54bf80",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "22a26caf-7c3c-4690-8665-3a3814b4a288"
        },
        "item": {
          "id": "9f4c96cf-3323-430d-9978-d12fa57458f5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6fa74bac-8582-46f7-8777-70b5d5bf7673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "575685b1-67ee-4c2c-a974-bd723f01bb89",
        "cursor": {
          "ref": "baadbf7c-8486-4400-ac50-a8aee34acf01",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b11be3bb-d3e5-4104-97c8-e234be7fdc8a"
        },
        "item": {
          "id": "575685b1-67ee-4c2c-a974-bd723f01bb89",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e0eed63a-c612-4a9d-9f63-0cc8809f25dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 1654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "16d864be-3ce5-4f8f-8981-3d5dc604390c",
        "cursor": {
          "ref": "f590b6cd-9140-4210-8273-0c38fbe2ce00",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "adb55cd4-1427-4a6a-ade9-9abdf2d83bde"
        },
        "item": {
          "id": "16d864be-3ce5-4f8f-8981-3d5dc604390c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "fe1107a8-5085-4f58-8f5c-2dbf334b2f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 1655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "35272765-4972-4a62-ba4f-019710b14f51",
        "cursor": {
          "ref": "e4aa0cec-8135-4c19-86b4-0d6764d4fa01",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e7fde817-d101-4e63-b71d-8ef131080f8d"
        },
        "item": {
          "id": "35272765-4972-4a62-ba4f-019710b14f51",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "17a8a66c-0c65-4f19-b070-aa4e97fb5fa3",
          "status": "OK",
          "code": 200,
          "responseTime": 319,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "e8ac55dd-29af-43b5-bc48-fd7d64e3aebf",
        "cursor": {
          "ref": "29f2d0e3-2528-42db-9a9a-53067b251f66",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5cdc5e81-cdd7-44c6-a5a4-f9e557dcc6ae"
        },
        "item": {
          "id": "e8ac55dd-29af-43b5-bc48-fd7d64e3aebf",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "818fee67-8c33-445f-8b5a-26aa7b585f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 2014
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "d1f35dee-8fca-49bb-b45a-0d8bba68bbde",
        "cursor": {
          "ref": "2fe5abd6-ecb3-4471-a4c7-2da0dd66beb0",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "236cd1c2-c60e-4ed8-b33d-e23e91928723"
        },
        "item": {
          "id": "d1f35dee-8fca-49bb-b45a-0d8bba68bbde",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f0b93693-a32d-4565-9bcc-fb31c96be6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 2000
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "732803b2-87cc-4d45-b1c5-35dcfc7e7010",
        "cursor": {
          "ref": "e0ae6fab-d290-4cf1-a5f2-28d2841197b0",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5018bc3f-114d-424a-b63e-93c799cf7dac"
        },
        "item": {
          "id": "732803b2-87cc-4d45-b1c5-35dcfc7e7010",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f2216b34-2774-42b6-9edf-664edb0c35ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 1998
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "00849317-577c-4a28-8994-698f915ba7cc",
        "cursor": {
          "ref": "67f42127-5811-4a40-98dd-d3a68f2b3115",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5eb42e30-94eb-4fe6-99db-d0123025f756"
        },
        "item": {
          "id": "00849317-577c-4a28-8994-698f915ba7cc",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1a4b3503-133e-4496-9f4e-247804d47d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 1999
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "ce35b71e-395d-432f-94b8-683bda783f6d",
        "cursor": {
          "ref": "7db5c3fa-ad79-4479-955c-e4a93bcb60a2",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3ff77a5a-98bf-4fb8-9a40-10210a00a442"
        },
        "item": {
          "id": "ce35b71e-395d-432f-94b8-683bda783f6d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f3baed30-6d91-4896-9783-96280e021f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 2020
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "55a1b847-3ca7-4947-b339-d6e844ac0e3c",
        "cursor": {
          "ref": "bdd362bd-fbb0-4a65-b80a-3700fb66a478",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a97aae60-16c1-4b83-99e2-42ff60ec8c30"
        },
        "item": {
          "id": "55a1b847-3ca7-4947-b339-d6e844ac0e3c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "49e8c1df-31d8-4604-a89e-604bc35a26fa",
          "status": "OK",
          "code": 200,
          "responseTime": 200,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "af73e5bf-c48b-4989-9b3b-d723b4fc2376",
        "cursor": {
          "ref": "9f661105-6d62-477e-a547-d2ee0484003d",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "22056c9c-7fdf-47d3-88c2-200b6a541cde"
        },
        "item": {
          "id": "af73e5bf-c48b-4989-9b3b-d723b4fc2376",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6c6649e6-5a85-4cdc-9cfa-b21b77f26b9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 199,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "54716a0e-8836-4e93-aec3-cb68f7fa3539",
        "cursor": {
          "ref": "f5adc11e-913b-4e61-9362-fd0afb603a0f",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ff736373-b374-4914-92ad-720a2cc6eb3c"
        },
        "item": {
          "id": "54716a0e-8836-4e93-aec3-cb68f7fa3539",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "082895ef-96b1-4828-8997-821c769da563",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 211,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "ad9f16f5-51d4-47dc-a11f-fb3065b710df",
        "cursor": {
          "ref": "e81fb5f5-41e8-4522-a2c9-ddc7427542d6",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "747c761d-d564-49f8-9fc9-9c3bfa2ec788"
        },
        "item": {
          "id": "ad9f16f5-51d4-47dc-a11f-fb3065b710df",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1432d541-d6c1-4d62-8187-f90959c01bd3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 234,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "36a510f5-02f3-4d2f-84e9-c2d875fb66dd",
        "cursor": {
          "ref": "f4ad4c4f-91fa-4767-83f1-8bf2436e02b7",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "fefe1c38-c936-45a7-91b4-b94cc4d88cd6"
        },
        "item": {
          "id": "36a510f5-02f3-4d2f-84e9-c2d875fb66dd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "975b29f9-2799-4ab0-b931-1170b25d40ef",
          "status": "OK",
          "code": 200,
          "responseTime": 198,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "e8b31226-ab27-4b3b-9809-fc64bdd19587",
        "cursor": {
          "ref": "487a8e06-c1e8-4c1f-bb58-4846b19b8dc5",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "77d2bb05-c5c1-4530-b262-adcbfba9db57"
        },
        "item": {
          "id": "e8b31226-ab27-4b3b-9809-fc64bdd19587",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8ae43f33-1503-443a-8476-a191766030b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 190,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "4a32bf19-8395-4636-872b-970c7e9aa940",
        "cursor": {
          "ref": "99f5edd4-5564-4aec-b7e4-f9ad4d070824",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "03987e8c-340f-4b91-ad8e-40ecea1d6766"
        },
        "item": {
          "id": "4a32bf19-8395-4636-872b-970c7e9aa940",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6a8a5a1e-d714-4238-ab40-08da6e94ec1f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 186,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "d3bf631a-9c2b-47fa-8085-fff5cc568e3c",
        "cursor": {
          "ref": "46760cbc-eefd-4e19-8b8d-dbc42f3c3286",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6380b915-98e2-4954-baf9-5e2b4e939954"
        },
        "item": {
          "id": "d3bf631a-9c2b-47fa-8085-fff5cc568e3c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a11fd563-5ded-4a48-afa2-db6fc6c907c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 291,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "1a5731ce-fad4-4a11-a5f1-4d34dbaa23bf",
        "cursor": {
          "ref": "2bf747a5-17d0-4377-93fa-74bed8dd0202",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fbf7b5d0-c3fe-487e-acd8-f9396184f543"
        },
        "item": {
          "id": "1a5731ce-fad4-4a11-a5f1-4d34dbaa23bf",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c8177274-f8ea-4fef-8b86-d28954e23132",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 206,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "cc4ed75f-0b7f-423b-9e2f-2109ec052294",
        "cursor": {
          "ref": "5e4b4155-e624-4036-9e09-9ff9096838a1",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "86d325d5-f036-4d93-8746-1b13903308db"
        },
        "item": {
          "id": "cc4ed75f-0b7f-423b-9e2f-2109ec052294",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ac134dd1-7374-4b08-a600-1aca8a365feb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 177,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "94703647-e376-4fca-bc6d-523f4907f387",
        "cursor": {
          "ref": "51190ef9-8959-4698-8a0c-fbf51a6da4c0",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5fe3e35b-7717-40c1-9a70-a013a3d943ea"
        },
        "item": {
          "id": "94703647-e376-4fca-bc6d-523f4907f387",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "77a9ff55-aae6-4c41-b423-0a13ab4167f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 194,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "d5278ca7-f25a-4755-b319-d3d4f7cf04ca",
        "cursor": {
          "ref": "a6d07f58-9afa-4292-82ca-4f127f3634ba",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "863cabe1-a8a0-4e7c-bc2a-3df155e8d4b6"
        },
        "item": {
          "id": "d5278ca7-f25a-4755-b319-d3d4f7cf04ca",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "812ad968-03d2-4b0b-a27c-18b1ad75e535",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 181,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "ba8d02db-bb89-41cc-8c91-19b09266da78",
        "cursor": {
          "ref": "34fbfff5-68a9-469d-9c4d-ac3f612ad4e6",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6957e341-ab49-481e-b1fa-790b98529f2a"
        },
        "item": {
          "id": "ba8d02db-bb89-41cc-8c91-19b09266da78",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "58c5253f-3847-430e-9ced-a8fff71ca5f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 214,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ff12dc88-05a6-42bb-9193-fb92d55affb8",
        "cursor": {
          "ref": "d3a808a9-313c-4426-abc5-b3a402e6d808",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dda283b9-b475-40d4-8cf6-51b93f2e43f9"
        },
        "item": {
          "id": "ff12dc88-05a6-42bb-9193-fb92d55affb8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a69202ca-116d-4ea7-98ca-124ebc45616a",
          "status": "OK",
          "code": 200,
          "responseTime": 239,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "f1e7043e-dfb5-42f3-8c74-bd3015dfc285",
        "cursor": {
          "ref": "3d37217b-a1ce-4f7b-89cb-117df1a02f8d",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fd837f19-b202-4e1f-ae72-2dbb0b90c5a2"
        },
        "item": {
          "id": "f1e7043e-dfb5-42f3-8c74-bd3015dfc285",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1aead953-474c-4a9e-9692-84f843e32da0",
          "status": "OK",
          "code": 200,
          "responseTime": 266,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "64d6d59a-3e18-40cf-8e4c-62938252adc2",
        "cursor": {
          "ref": "f84870c2-b396-49da-bfa9-3644869c3880",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "79a77270-0606-4192-a509-97af08ff8583"
        },
        "item": {
          "id": "64d6d59a-3e18-40cf-8e4c-62938252adc2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "40f13945-180d-4606-852d-3ccc02b878a4",
          "status": "OK",
          "code": 200,
          "responseTime": 262,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "47d8c7a4-ba5a-4a33-938d-d23f99953904",
        "cursor": {
          "ref": "ab992bd1-d5f3-444a-bafb-770aca7791cb",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "260218d1-c29f-4c3f-a63b-dc0d939e6639"
        },
        "item": {
          "id": "47d8c7a4-ba5a-4a33-938d-d23f99953904",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "84b30c26-f7c5-48f8-9664-e14aa5bad0fe",
          "status": "OK",
          "code": 200,
          "responseTime": 205,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6638ca90-0c65-4bdb-83d6-734dded0dcae",
        "cursor": {
          "ref": "2f1e2d05-a956-47ea-a907-fb09882448e7",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c2f2a9d6-584c-40bc-bc55-5a7e0c3adc96"
        },
        "item": {
          "id": "6638ca90-0c65-4bdb-83d6-734dded0dcae",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "dc165231-73a7-4994-b799-4574db7bd3dd",
          "status": "OK",
          "code": 200,
          "responseTime": 200,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "e5f9e6e2-814d-431f-a32a-53c8363859e8",
        "cursor": {
          "ref": "d80dc5dc-d5bc-431e-8848-480a76e1d9d8",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c9131793-59ff-4696-a3e7-90e703956b3a"
        },
        "item": {
          "id": "e5f9e6e2-814d-431f-a32a-53c8363859e8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2b7c3928-3b90-43d6-bf23-dbcb799c4c55",
          "status": "OK",
          "code": 200,
          "responseTime": 227,
          "responseSize": 303
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "dd5fd8b1-5b67-48d2-99d2-970ed25320bd",
        "cursor": {
          "ref": "26295ad0-25d1-431a-a914-0a6c657f07bd",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9d12e499-9078-499c-9fd0-71b6d0c64f25"
        },
        "item": {
          "id": "dd5fd8b1-5b67-48d2-99d2-970ed25320bd",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1ac3e30f-f281-45db-919b-169711006421",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "b58cadf1-8675-4c31-b7e5-2b1f84d97288",
        "cursor": {
          "ref": "2cebcb0a-6e7c-4b24-8bca-a81a3137c703",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "19bfa625-da74-46b4-99e6-1c948e1f4473"
        },
        "item": {
          "id": "b58cadf1-8675-4c31-b7e5-2b1f84d97288",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0d845ed2-dd1b-4ebf-b181-31eacb908b26",
          "status": "OK",
          "code": 200,
          "responseTime": 227,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "fe84174e-bbe3-4c9c-aa72-bb8ed4aef634",
        "cursor": {
          "ref": "b8627be9-d3eb-4a01-9c6f-6b6fd26ed7c3",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "595a4401-ed43-4082-892e-50666a9ea9e7"
        },
        "item": {
          "id": "fe84174e-bbe3-4c9c-aa72-bb8ed4aef634",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f5758e0f-a677-4fc4-96ae-247d51738920",
          "status": "OK",
          "code": 200,
          "responseTime": 218,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "81af3bd0-a9f9-4c45-a4d4-25d353bd3da4",
        "cursor": {
          "ref": "72ac05a8-3788-4546-b84b-bf51d13c5583",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9cf6d68f-4b7e-412d-9937-c2d694b5be94"
        },
        "item": {
          "id": "81af3bd0-a9f9-4c45-a4d4-25d353bd3da4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c6df0899-c8f3-4327-bc14-8a17623c1696",
          "status": "OK",
          "code": 200,
          "responseTime": 201,
          "responseSize": 309
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "35afd3d7-7acf-41e3-a9f0-10cfbdb868d7",
        "cursor": {
          "ref": "99c586d5-6e55-4f68-9868-1fd17cc39874",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b656e1c0-6b42-456d-b6aa-b6706e92e56e"
        },
        "item": {
          "id": "35afd3d7-7acf-41e3-a9f0-10cfbdb868d7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "17c32492-d4c1-45c0-bc35-7b3b3a576408",
          "status": "OK",
          "code": 200,
          "responseTime": 272,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "6dad1682-ff2e-4e0f-ad9b-5ac273a0545f",
        "cursor": {
          "ref": "dba5251a-957b-4e39-b592-cbd3af0cca29",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d04dabd4-1a5c-4721-bec5-005fd0297ec4"
        },
        "item": {
          "id": "6dad1682-ff2e-4e0f-ad9b-5ac273a0545f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "768cfba1-0a2c-402a-a207-70804a50c7d5",
          "status": "OK",
          "code": 200,
          "responseTime": 224,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "6c66b07b-6771-4d5b-b052-2d2e8d494b73",
        "cursor": {
          "ref": "f08f1de4-18a9-4e79-84d2-4be8729f2b8d",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "52567a23-01f9-4ccf-9001-714a65333a76"
        },
        "item": {
          "id": "6c66b07b-6771-4d5b-b052-2d2e8d494b73",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d68ad302-9025-4d24-af66-a8d303f7a810",
          "status": "OK",
          "code": 200,
          "responseTime": 220,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "99ca22c7-f5a9-4cb3-bb35-3ad9047aadb8",
        "cursor": {
          "ref": "242109ec-3c4d-404e-a778-5fd4d652e2c8",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "36469117-2936-4eab-ab41-4b5ca71cad5b"
        },
        "item": {
          "id": "99ca22c7-f5a9-4cb3-bb35-3ad9047aadb8",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f37822cd-2ae4-433d-9c85-2414be28be79",
          "status": "OK",
          "code": 200,
          "responseTime": 208,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "80df9309-73ef-4d05-b224-e0816c6a4a06",
        "cursor": {
          "ref": "31ab3ca8-39dc-4b8b-b39c-30bbfff51241",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "64b37819-0e84-4fa1-b792-6ec97b1465f2"
        },
        "item": {
          "id": "80df9309-73ef-4d05-b224-e0816c6a4a06",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "38c4ae2c-b4ae-4b5b-88f3-5820519e894e",
          "status": "OK",
          "code": 200,
          "responseTime": 205,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "4689b4a8-fbf6-4ef6-ad79-147f740e3fe4",
        "cursor": {
          "ref": "2f119e5b-eda0-4708-b0e2-395f42806ea1",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8ea504e5-9e1c-4f54-be2f-60f81f72395c"
        },
        "item": {
          "id": "4689b4a8-fbf6-4ef6-ad79-147f740e3fe4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "107bf960-da30-47a3-9bd2-8d9b1c13d641",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 191,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "b111c3f2-0a14-4a38-9c1c-a446135b0876",
        "cursor": {
          "ref": "bb6ff0fb-94c9-4c07-bd08-ebea56dd1709",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e324291c-8aaa-44f7-8b24-7ec6f35bb24d"
        },
        "item": {
          "id": "b111c3f2-0a14-4a38-9c1c-a446135b0876",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d8eefa8b-13d4-4eff-a321-daa251ecf9c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 239,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "2eaf902b-4da3-4466-b5ad-40293fa0a9be",
        "cursor": {
          "ref": "a61be632-e16b-4ecd-bd2d-39a6ba1003e8",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "78f84abb-bf76-43d4-bfc7-24e1e670a83d"
        },
        "item": {
          "id": "2eaf902b-4da3-4466-b5ad-40293fa0a9be",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "867d3947-9715-4736-af99-ef50dde4b446",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 195,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "d9a4db87-9a67-4beb-9f00-359cb4c29649",
        "cursor": {
          "ref": "efe4c821-613a-4ac7-9c2c-2240b95c042e",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7ec65f0c-5e07-4b60-9e1f-e013cd250d57"
        },
        "item": {
          "id": "d9a4db87-9a67-4beb-9f00-359cb4c29649",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ab1b8bc9-090c-4bf7-a2df-9960f3a2b524",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "33f9037e-6176-4282-976b-782064edce3f",
        "cursor": {
          "ref": "bb805ab6-464c-4b5f-a6fb-4a274b91e300",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "59ff5851-8593-43a2-8f08-359181c1b176"
        },
        "item": {
          "id": "33f9037e-6176-4282-976b-782064edce3f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "29c109ba-c99a-48b9-a2d6-cee7c5f0b24d",
          "status": "OK",
          "code": 200,
          "responseTime": 202,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "fb6a277e-54f1-4e13-9f96-6fe3b81a03db",
        "cursor": {
          "ref": "2e6a4ee3-b720-4137-a6ee-0d92c4c6c02f",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5aff814f-472c-4638-a544-1bc877d43436"
        },
        "item": {
          "id": "fb6a277e-54f1-4e13-9f96-6fe3b81a03db",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ca3e1c60-144b-44f0-ad5c-ae6b5bfa1a1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 214,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "b6c0a34e-b97a-49f7-abdd-659d25ab0275",
        "cursor": {
          "ref": "b06c9966-b31f-4917-bb43-bcae98f6a6f3",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "bf23827e-91c6-4b84-a3da-773bab3f3ebc"
        },
        "item": {
          "id": "b6c0a34e-b97a-49f7-abdd-659d25ab0275",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "75d6e2ec-65e7-4020-86fe-985fb5b549ab",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 37,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 403",
              "stack": "AssertionError: expected response to have status code 401 but got 403\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "123329b7-b30d-454d-93cf-97aaa8db861b",
        "cursor": {
          "ref": "67501185-86be-480b-830a-52b638770789",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "45a318c8-1714-4de9-ba59-4be03dfbac43"
        },
        "item": {
          "id": "123329b7-b30d-454d-93cf-97aaa8db861b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "9156db36-d94a-4fd0-a093-c86295f48af0",
          "status": "OK",
          "code": 200,
          "responseTime": 284,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "07cca5b2-d74f-4f75-b1e2-5a20cb252247",
        "cursor": {
          "ref": "b9f5fd5b-5f58-4d90-a445-5ddfcc70033c",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2ee45f7a-e3a5-4527-b8fa-b85e95e49690"
        },
        "item": {
          "id": "07cca5b2-d74f-4f75-b1e2-5a20cb252247",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6cde89e0-9abd-4799-abf6-5f15174e337a",
          "status": "OK",
          "code": 200,
          "responseTime": 273,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "d2b25007-22fe-46cb-9d30-aa9d51d03140",
        "cursor": {
          "ref": "af6b965a-308b-4796-bdcb-efc88c0751d1",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6521ebd3-e69f-4bf3-8eab-60ac062ef0c7"
        },
        "item": {
          "id": "d2b25007-22fe-46cb-9d30-aa9d51d03140",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "fc3398b6-1a00-44d0-a8da-e2be94fd0a85",
          "status": "OK",
          "code": 200,
          "responseTime": 271,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "d6c4bae0-5192-4562-bacd-a8aec83c89a8",
        "cursor": {
          "ref": "09466212-85e3-4206-bbf5-e64aaad19065",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "38f4bc94-97b3-49ef-8bcd-8977cf067366"
        },
        "item": {
          "id": "d6c4bae0-5192-4562-bacd-a8aec83c89a8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f8848d21-e04b-4548-b9e0-8742bced722a",
          "status": "OK",
          "code": 200,
          "responseTime": 340,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "65c9f688-3a19-4179-a851-176ef2802d06",
        "cursor": {
          "ref": "f93b51ce-574e-4582-a604-ed58bd07c1ad",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e9730172-3489-4a62-acdd-83e474372e53"
        },
        "item": {
          "id": "65c9f688-3a19-4179-a851-176ef2802d06",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cec99721-c794-43b5-9a33-ac011ed622b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "65c9f688-3a19-4179-a851-176ef2802d06",
        "cursor": {
          "ref": "f93b51ce-574e-4582-a604-ed58bd07c1ad",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e9730172-3489-4a62-acdd-83e474372e53"
        },
        "item": {
          "id": "65c9f688-3a19-4179-a851-176ef2802d06",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cec99721-c794-43b5-9a33-ac011ed622b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "65c9f688-3a19-4179-a851-176ef2802d06",
        "cursor": {
          "ref": "f93b51ce-574e-4582-a604-ed58bd07c1ad",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e9730172-3489-4a62-acdd-83e474372e53"
        },
        "item": {
          "id": "65c9f688-3a19-4179-a851-176ef2802d06",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cec99721-c794-43b5-9a33-ac011ed622b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "ed55d11f-b15c-4eaf-b7a7-eaaf8c4b6011",
        "cursor": {
          "ref": "9de4a18e-d464-4c9f-80c4-0c36f0086dc5",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2c47ae12-5511-489f-85e4-5e071b0cc6d5"
        },
        "item": {
          "id": "ed55d11f-b15c-4eaf-b7a7-eaaf8c4b6011",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6b1a4884-4a9b-4c22-9425-8853d3c48e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 413,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "3ec10352-1759-4356-803a-b6cd3e6dab86",
        "cursor": {
          "ref": "c81d3f81-2faf-4fab-a879-a997014bc063",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f9de13e9-e66e-4aef-a97b-df753b8e22f1"
        },
        "item": {
          "id": "3ec10352-1759-4356-803a-b6cd3e6dab86",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "34be5b2f-fc53-4995-acd5-b96eac6bcc7b",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "3ec10352-1759-4356-803a-b6cd3e6dab86",
        "cursor": {
          "ref": "c81d3f81-2faf-4fab-a879-a997014bc063",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f9de13e9-e66e-4aef-a97b-df753b8e22f1"
        },
        "item": {
          "id": "3ec10352-1759-4356-803a-b6cd3e6dab86",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "34be5b2f-fc53-4995-acd5-b96eac6bcc7b",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9126d963-2ad8-46ab-84f0-e633004bd270",
        "cursor": {
          "ref": "da67e76f-806e-4b00-b6e6-4769d2596901",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f84d5829-4d37-4661-8d76-b095b4116688"
        },
        "item": {
          "id": "9126d963-2ad8-46ab-84f0-e633004bd270",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "392058dc-ce7d-426a-8eb4-2601baf90a9c",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1ea8e631-196f-4005-b3c8-18ad53906c8e",
        "cursor": {
          "ref": "302b32b3-5e02-4d90-b5e8-9a3ab2e1bc04",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7ac728d0-283f-4c7d-83b5-46dea0e5b276"
        },
        "item": {
          "id": "1ea8e631-196f-4005-b3c8-18ad53906c8e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e88f6b03-b625-44e2-989c-e279965afd31",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1ea8e631-196f-4005-b3c8-18ad53906c8e",
        "cursor": {
          "ref": "302b32b3-5e02-4d90-b5e8-9a3ab2e1bc04",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7ac728d0-283f-4c7d-83b5-46dea0e5b276"
        },
        "item": {
          "id": "1ea8e631-196f-4005-b3c8-18ad53906c8e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e88f6b03-b625-44e2-989c-e279965afd31",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "676e2fef-0ac2-4b34-922c-36b5bc51811e",
        "cursor": {
          "ref": "d296f022-164a-42d9-8820-e98524e22a4e",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "89976290-2955-42bb-9cb3-0be460d2dd29"
        },
        "item": {
          "id": "676e2fef-0ac2-4b34-922c-36b5bc51811e",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "2ecb4c93-615f-4892-97bc-93c8a4b3a776",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}