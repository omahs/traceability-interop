{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e3c100e3-34c6-4fdd-8f3b-0e9943d84ca5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "afc6ce97-ad7b-4bab-9bbe-028a2d00f0a4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8be9e39a-ff65-4052-80f9-f9a7a09dbbff",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "08236081-a56c-41d6-b64f-5cb0feb76c15"
                }
              }
            ]
          },
          {
            "id": "9d08826e-41c6-44ab-af72-14fb221840f1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "915f8e4e-b4e4-416c-9bf0-d9d5111d0079",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "20ee90ef-fddb-4a85-b2ce-68fd4c290fa1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9204a6c5-a93d-45ec-8eb8-cf008155bc2f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "437d5022-bd85-43f4-8c2e-ab3f593eceff",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6f9803c1-04cc-4857-a2ae-3c8a17f11f54",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae25c4c0-7c0e-48ab-8c53-5020208503c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87b59206-55d6-4fbd-830f-e2d8ef918661"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f76f8a5c-0ca9-4a55-8dda-850f00da5686",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dff0f60c-8d9a-4da0-a17a-66bedc37c8d3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4164e91f-649a-4481-90dd-b47273b6204c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4ac01c7b-9409-4b00-957d-faba6d876be4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b547e36-4433-4bbd-961f-ec90b35817f5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "63e352ec-2ab3-4634-a3ba-b119e34d1ed1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "699306e0-a1b8-425e-beb4-382b0944469f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18020ada-0d7e-4f4b-9cc3-f6c6d4a89e81"
            }
          }
        ]
      },
      {
        "id": "81d4e668-c2cb-49d9-b8ce-ce2a9e2fe30d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "823ca011-4f33-4463-ac55-53e0a27c8ba7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e011a770-ad9e-4de4-ae25-2a734e861d51",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "032db4e6-8062-4690-896e-de6c22bb71cd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d034a421-8e72-48d5-84ae-3552d32536d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8714ed8d-b37b-4071-b827-2e7fa27fa6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837f1c5d-e4a5-42e6-933a-a7e6cc70644f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0bea396-3277-4e7f-9ae1-635d23b15046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fe7128e-4472-44d6-b4c3-8f24abc8cb8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe13c88-2aec-4111-9d51-c5bb360da971",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef06c401-6f8c-4f32-88e0-b56ca07f9cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96696ad4-c828-42dd-9283-87edeed5b54a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "22bdf6c8-bf3b-483a-8eb2-fee911a03605",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ccca3214-0ae5-401e-8e55-5edaf54f831a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373cfeb1-8ad7-48f0-a09e-de22898e7309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "326bb30a-c2f8-4518-835f-900734ad2ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a865f2b-254c-4f77-9d61-37c44ae1321f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c841c5ea-6d11-4632-9327-7b39ef1ce5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72802789-2f74-4171-a2d2-4ad43685fad8",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec3ac30-88e3-449a-9415-a20e4683d627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc93c483-f8f9-41f1-98ee-f86f68845a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb306cd-4e1f-4c84-a02d-88a0476be65f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f84cd434-45a8-4917-ab4a-21223d0dc564"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2f98ff5a-fd34-4bee-95a7-f147dbc502c4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f8bb34fd-4dfd-46c2-aa67-6a801a6d6c32",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "784de261-afb5-4178-b487-80480735113d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4ee53b54-571b-4e87-8153-5dbd409ec5fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8c656b8-f7bd-46bc-9175-4a98bccc760b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e68f72e3-f3a7-47ab-8e48-b679c1c88cd7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82cdee2c-ec79-469b-8983-c325744e8a00",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "008a0daf-095b-4a24-a914-6138f2f1c049"
            }
          }
        ]
      },
      {
        "id": "36624373-c807-441a-928f-bf727b43aedb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "29ff1abb-9d2b-47f6-935f-3158751b1386",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8842c4cd-61b4-4ab5-b859-7e94eb53f7b3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3efdef55-4d70-49b3-bbd5-601529f769d3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26eb174c-ea36-4ede-a90d-2746c0d1c269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c32608-cc7c-4f46-8677-40dfbaf5910a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa9633d-fabf-441d-92ee-5b06dedd482a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f0e7b55-784f-461c-84c6-8afd53529319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f09dd0-2362-4d50-94f7-304f41444b24",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64edd770-172e-4ffe-b10e-b4c229b01ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c8b5be5-4383-434e-a39d-0899768dfde9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55e7c19-7d57-4510-b239-57899ba33960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33b14a9e-88ab-405a-a429-c0103c8e0477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f8005e-fd16-4933-a9aa-d81fc28a3fb1",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d92f4b-4e10-45d8-907f-8b02a21deb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b7d1383-27f7-4c5d-b245-55917e51c1d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c96476-cfe4-4048-821a-57034459f58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5615d2d6-2661-44b9-9b01-12413bbd4fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80beca0-f60b-4ec6-b9a2-406a1a922d76",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "741b95e1-b435-474f-afb1-3a52e5bb5094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a5c939-2562-41c8-8d7e-b0509f2beb9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2cea6e8-28e9-460b-aa3e-3af01b14f1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1075f98-6712-4002-9f27-7840b94aa852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c028147-4890-42cd-81a6-25be80406fad",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd47eb92-3f77-4b6c-83f5-a2a60edd4b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "089036da-5521-4e6e-ba8a-8bd51abb3912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78fa886-3e75-4717-b7db-93cf095f5537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b95371af-afe5-4b30-8e00-9246fe0b010e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e571d27-0ee4-4b9b-8134-eec254f6716a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d084557-1cf2-4ace-a463-f6c62a05d4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44e411c0-5eca-45e5-ab48-578d982728f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70d8409-1496-45c7-b5b8-e6fb57168e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aad17add-3a13-4c19-a66f-eecffe8b003a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9250fe12-4217-4a5f-a0ae-12d26a9898a8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d06b47-1300-43a4-8b5c-5be003033588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b11f0b29-d888-4410-a51d-f4d07cdbcdc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b1fe70-9fa9-4920-b9f9-268dd64c17c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc4cf369-5b26-48ba-b9aa-522ad9a85315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf6cbf4-c129-411b-be21-f315f215c0ab",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7e42c2-05bc-45d0-bc39-e32c6edf1537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7722c5fc-d93f-4fe3-b95d-485347fa1a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b11e17-06a7-4b20-b2fd-9baac1c264a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8499ec9d-5a0c-479e-8b2a-b6edde1dc56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19751a7-7aaf-40c5-a845-2067018c681d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc9b5cb-7c5a-4110-97be-b5e4f632ad1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf056d5-0257-41de-9e55-b03cd1bd336e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970f0128-5a47-4260-857b-6eac3fda3423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aedf328d-b402-48ea-a99a-4469b2ad5e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e773f9bf-cb2a-4862-a445-15b65c975600",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e92942-2bfc-4fe7-ba32-ea7f1e148a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be66eb2d-353c-4903-b11d-78abd2ad854b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2e1652-7f6c-4e0c-b3ea-307c9550821b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73eee43c-ad3d-414e-9608-8255368b5470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c14fb2-8c77-4063-8798-fbc46c73c788",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f08ab9b-9692-4ad7-a121-9690ac9a9908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d9d988-9244-444e-823c-cb2d8f1a33df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48b6cb3-3a05-4a38-961e-43cad77e859c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0d8f38a-e360-4910-bf13-226a8ed505dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a86f07c-30da-4cf2-8f95-0e255a80a303",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08db3a1f-d91c-47a4-bc1f-0c30c13afc64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67557229-aaff-4921-b354-085d44377bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c18adab1-a9a4-4480-a9b0-2631dd9cf55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "141a3b26-ca91-4a40-9f57-26e396c6a93d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3a95bd-2b1a-4730-8f76-7cec36dad485",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ecf7357-d95a-4c06-b546-22bc4f52cfb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46660b90-14f6-4b5e-b855-dadc1501c1ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f03564-df1c-45eb-8d8e-8c33548f9e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dcdd9f7-2a63-4bca-8341-a270f5b45fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b2d9c4-7396-47dc-a37c-5a6d4ddce6bd",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea6a50b-9953-45ca-bed1-2bc22186b290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb693a30-aba9-4e10-a067-652d78a5123c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8b8e11-27ae-4573-ac6e-768e53ab1d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8406b707-8073-4666-9582-27f56d90994f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada6a343-e09a-41a0-a226-30146cfe7b62",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9060db6-8d35-49c4-ac0d-fe66299d9ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b088b14-97c3-4717-9123-f1a2f5827169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc1d1a6-7faa-4e36-a92f-1ef0840dfc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31082626-2bad-42ee-a829-86c82b17471c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7b76ac-e513-42ae-8a47-60d78879b3d1",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e635e5-745f-45b7-b429-0503fa4ebf0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28e3a3d-96ab-4751-958a-c7f1c6fb5a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2a293b-3038-4731-b678-c0ab3e098296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc144490-dee3-405d-b6c0-61cba3d014bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f246cbb-895a-433c-8790-8223c6064746",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51529b6a-5690-47e7-90d3-e1ec9e2cf22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60c27f83-31e5-421a-b8ba-5c644d024a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2618fb-524a-422c-96ef-d7051acb4be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0138b7b9-5221-43a8-a876-44111e637157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878bb5fc-308f-456b-bad9-20587b59b138",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70d1446-5fbf-443e-8942-7c05df9fb0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd874e82-e18f-460a-9539-a688854150c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91dffe1-23dc-4f9b-9386-dd709996b272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f7b9807-48a5-4201-ab8b-0c26c066a529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52657602-55dd-48fe-aa82-22573df74356",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37efebb4-3f05-4792-9655-827c88ccb6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87be6316-de1d-411a-a45b-b49b7cfffb66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028ca8ba-94e2-4e8c-840b-80e0bd81bfcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "adf78d5d-9433-4573-91dd-11ea13549a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7acfb3a-25e4-44f7-85fd-dc365482c414",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e034327-20d2-4096-8e72-f4b69a680c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9178b8d0-2ef4-45a7-bb98-df5d53fd440e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "705b278a-3d04-4ba4-a33f-15d42034cb58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dcf7340-bcc1-45f6-8887-0562ed32259a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f477dacb-270d-4ef9-b86d-03e672f609fb",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b4b5ec-7c6c-4d96-95b0-d6c4485a3aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "294af5b1-9e70-48aa-b88b-1503e3014830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6b2da5-b5d1-4f0a-9a43-f9467ca73d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee8862f4-4549-42a8-8f5a-a4b0c54dc94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a9577d-c638-46b1-8006-c9e62cd160f4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1360ba05-00f1-4b1a-8a0b-a7cb7fabb99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6b45938-047a-4f1f-b9b5-4177049e1778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3b8e98-0ce3-48d0-8416-73139642d767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8aa1c4c3-c313-4b1e-9e72-311930858137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278da5d5-a8e6-417f-a2e6-1bd8dc5e5dac",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b4423d-4563-48b1-8dcd-6c8f28faebc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a4036c-dc97-4b78-9b86-50d650585203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee2e324-c215-4de0-bd01-8714459293e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "75a5bed7-98ee-42a8-afab-eb317484ac47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6247888-5b3b-4cd0-b904-60d5b9b790a0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5f5b3c-40d2-4f68-b0c0-4a0562fac584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b1c692-f4a1-470e-a4fb-ae634174d48d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a0db9e-52e2-490b-9795-76a97480e9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b074bceb-18e0-46f6-b05e-8907880be1c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0286d4-cf3f-488e-a45a-554bd19f69c9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97dd9b8-81b1-4742-84fd-f03109ceb263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f92ab2-437d-41e8-be1b-97e2b66f5ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c00498e-381a-4dca-81b5-de48dd884ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7b1a543-209e-4a7c-a2b7-b0090ef55ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bffc5c-09ab-45c2-923c-06638bd54d80",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff688da-1950-4a01-9dd9-e5b08a32b457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae744650-8b78-4405-bdfb-ba68e3b5f153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ae0b0c-cafa-47c6-b6f4-42db1eca297a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6af83073-8482-4b2a-b412-703b6d8439e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fedcb27d-62e2-4026-a9eb-4f24ff2d63a7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8955fb-8b01-4328-84b6-e6ebae87c047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e04c0b72-bef3-4c5f-87ec-baa2bc6d24b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505095af-d4d9-400e-ac82-a46089e24e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f34f1ee5-f325-42eb-a9b7-08ddbdc2d4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3910f9a-93ff-496a-bc04-c6a7def8df39",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce30fa6-eb49-4d8e-9bdd-f566b5f39a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c1b16d-e8c9-4ace-811e-0390ce62fee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9cd1da3-d52e-4d79-a1b3-19b8926808b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dca8c9a-0c4e-4653-81f3-d23ea4fafafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f915b51-de04-4c65-8e28-ee9a473b923b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee6aac9-4bf7-4fd5-ab08-14a433aee010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850568cc-c676-46cc-8f34-14d89f1441b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c680e84-9ea2-4e76-9c41-c1b14d4e4904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e47d41-f2de-4bd1-98b6-2aba2979f887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0610ca-9268-4a44-bb7c-13aa72fa9a12",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70297b08-aeb8-40fb-83e4-d020882f7e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba9ffdc-3858-4a13-be42-6733376ae93d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4044e78f-f63d-4dd2-94ea-10136dec8cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "db960ad2-fd38-44a8-b09e-c158b4037c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea023bc4-44ca-4d96-a28e-92df6cad1dc1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc923500-81ff-4d6d-8b6e-d19612e29b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a2927d4-d966-44e8-82a1-5200f619b70e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94e7d90-40b7-4754-b926-e817a31fb8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f25f9dd2-0930-4bde-8867-47fdc2efb6aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429566f1-e20b-4512-876c-398213b2bdd7",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ef45cf-61ac-4e60-a01b-e40881511ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad9866c-b15a-44d6-8297-c2c9dd4fa963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a7eeb9-8038-4e07-97a2-a2e964633ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7411375c-b3ac-4561-9e58-6e2b45551c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c180c7-cd84-4c8a-a409-6ae1dd6761be",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e2b236-60a6-4096-9e56-484e484a8a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "076d06c7-32f0-4aa5-bf5e-d34ea7aaec30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d3d146-c82b-4926-8f48-3d6559bec525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c28a18-a110-46ea-91b1-1e90250f9dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847b91a6-bc14-42a7-af26-0d377d290259",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e56fe1e-2c12-473d-b05c-b20444befea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a68d7cf-421d-4d72-a240-bae61d46c860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02338bab-169c-43de-b7d0-d7a3ce7a34fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea212d57-bd63-4d24-9d21-2c7e4d09e2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6080ac60-1d46-4464-a066-2deec8a7e02e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06a8c24-cdd0-4eba-b4c0-88bfffccbfef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edd66f0b-539c-4dad-b041-f72d891f598d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ad9832-8f47-4621-b12b-d2240134f4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d78280a8-887f-4887-9f52-9ac67509b832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e0d319-cf57-4756-b63c-34494e263bfa",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd64220a-3655-4cb7-9678-953b02f9b914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0728e9f-48ff-432b-8651-19eb5ee158ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0ec32d-e1a4-42a5-aaaa-775f85f83726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "601e0194-1e78-4921-9299-842bf5507369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09bbd6d-b0d5-4f95-9342-4c7687020891",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0cd73d9-201e-4ab9-9fad-cb141522c116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de335bd7-aa5c-4a8a-affd-f4e407d56028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a15f7cd-ed16-4c6f-8ca7-618a03dad89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9aeba5c6-1081-47ea-8e41-ab4c5e980030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b304b6d-6460-4235-86fb-1ccfc3b5416d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8821e1e6-8c0a-4eb2-9a33-ad820bc7bac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25ca62f2-7aa2-446a-a09f-a0e4a04c1b95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ceb388-b9b0-46d7-9530-480bb0b96969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2bcd71b-4aa8-4a2d-97eb-c1821c39d027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15617e84-dab2-4b9a-9619-55ae1e6eead8",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dfed6bf-eb99-4791-b9a4-de06d1d9b6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd2b34bb-dad2-4334-9957-3a899d3a4970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c039144b-1935-44cb-ba0f-8884cad065a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7fe01f4-b849-464e-b82c-445e642915f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1117390b-988c-4091-a513-2ca57c472ad7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5de8da-f213-4b77-b343-26fa92490408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c20bfbd-49e6-400f-bca1-23845c6018f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4282ca1b-0c40-431b-93f9-519aa53f2657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce32759-c887-4817-b7f7-32e86e75812e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715c98bd-9628-4673-873a-d1d72c35c50e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52828b4-9d27-41f3-b8fa-db1fba7d6c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1fc5d62-eea7-4312-8e69-a31784581797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c0abb6-573f-4ba6-8e1a-52aeb6604fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a035fa9-eff4-43ae-ae49-d3bbba816115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77e074a-cbc0-4bba-8d67-2abc4dfafe2c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1c17b8-873f-4f34-906d-1459ff1df3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e741367a-e5fb-443e-9ba8-b6f6ff8f367d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f16486-98cf-49c9-9c28-b1cf4111681c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "61399a92-a078-447d-a694-c01b08506b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b5699c-9b08-4569-9e7d-917a21c5294e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8313b8-b7d8-46d8-9456-049071929ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d383457f-5c8a-4e7e-8939-154b12e4c0fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23b1224-864d-4464-aa54-3bec8137bf3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd834592-0708-4590-8348-872a3276c5f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c395a01-d8c9-461d-b5b9-37c9b58f0af3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e63c63-bc2a-41ef-8089-e956cea5a777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda1df08-aa7a-4c5c-aa07-0b02f4f5bf87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84169979-19b8-499c-ba11-7fd0505daa5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "69f0c55a-80fe-4953-9175-ed9fa674b865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236e7d98-26a0-4101-b2da-1184cce1ca80",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "941283c9-5c22-4a15-a70a-89a992ddd0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9862d9a1-c4d0-4f0a-87c1-1e945d8b6f2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72bdca98-a2c2-48a6-8904-d3c0bbdaeed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8dd65e-6585-4714-8040-bbe7500b115a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e20af2-aa5b-412a-a6ae-00794ad46a44",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0c72d2-cac2-4101-9207-970505a1ed6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdb9c019-7b3d-443d-9503-4284e15a5652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e3ac75-5111-43f9-992a-9cd32684395d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7bd7eb0-770d-4889-8b8f-655dd49d89ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2625cff-331c-4c45-a8d5-86bc0ffe8825",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834e556f-217b-4aa8-b420-9e9e839b9c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c10b42d-1968-48b9-b5be-89155408159f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5a1464-96b9-4434-a483-24cab6c7002d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "194332dd-a4b4-4410-b4da-7b47df32b82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82483fee-e24d-433a-9b7f-a25fe5d6de0e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b37694-77f3-4d56-a744-ba5917d6c532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b6a45ed-4792-4d5b-89c2-bcfcd79d7457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f3e1e7-57c5-442d-89d2-35e9181c3533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab34b918-897a-4de0-98be-e618069fdf2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7817fb-4f67-4c9a-a188-d302cc37e629",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afcbf9b-7706-4ef8-8156-aec11fbfc1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad1d7ee-d8a5-44d6-b4e5-367dd860d643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a56edfb-8c91-4bc8-b41b-46fbd9e42456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ebd0a35-3a80-4ae1-b970-0e5b5a82a560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ba096d-24b7-488b-9050-63be1cf88dd2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "439d57ea-69ff-4394-888b-f349f5e7ff1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7d0fd9c-9d20-4a9b-af32-da659dd26624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4840f4fd-ae2e-4d8d-8a1b-591ff78aa474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "47d9c86a-ac0a-4f09-a207-3383f836b705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49a8cc0-b4a9-474c-865c-fb56afd5dd44",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2642a81a-cbe4-45d8-af13-9273f1f4b922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4fb4d77-e03b-4a13-b32a-0dca443f5f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ddf149d-600e-4b56-ba34-3a51a775713b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f53498-4e87-4881-ad63-8784c3649559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d33c09-113d-4373-ae38-ca5a2f9bce66",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e18f4d-7b04-4f3e-a5fa-2cd35dc555f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77c0066-bfa0-4d92-96e3-bd25c983f539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315e263d-a82b-4070-bae6-bd95e9fbdb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f09e0f1-5608-43ec-80f5-c0e8c677a2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cc7fca-751d-4a09-b054-5c1ff1c29c67",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ac9091-30b0-4cef-87f5-0f622d9fb422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02eec3d4-7b6e-4b25-be99-b7bda9ae2d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a816853b-c0db-4228-924b-6bb2586682a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59dc2667-7519-4083-b1a4-b60f1c55f5d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d669d6-e6e9-4f37-bacf-b9edf155091a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8a51d0-d063-4668-bd28-e276277e35a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55334c85-a9ef-4a77-975b-27d6a72deb41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6486797-c6b8-47af-804e-9f7d870580a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb9d679-17a2-4af3-8382-e77962140646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d32aabc-51b6-49fd-a945-c9a47140f1ec",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dbc8ffa-1115-4e44-8416-fd96ee783a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd0af66-1ed6-4261-a9eb-8d7bd3364868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452e4a5e-9ee1-4ef7-beda-872e2db7de31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9066e57f-6b4a-4266-8eb7-f0a142da5d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc75aa5-7acd-42b8-977c-0ed56f699706",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89da954e-0c5b-421e-bbb7-3dbefcdf9c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59e2dd2a-c4c7-4eb5-b2f0-a755d4c63dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996c8358-ca68-4c9e-befa-e9c1acef4f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff0fdc6-2d92-444d-a4ad-ebbf6a4b6339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23a04b7-2f2d-40a7-8b7d-f494819fbc73",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c161b1-a01b-428c-9db3-2eb1d3430cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0816d421-194c-464c-8004-ecd6434e32f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b10307-7b6e-4181-a32f-0ee86b994ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f2cdbac-f44e-402f-beef-37ca98dc0dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0020e5-7cf6-489f-8f3b-0f6c659e29bd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "659f3098-4cb9-4f6b-ae69-1a5c8877c109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f7d486-1d8d-4140-9a53-b4c87587d587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290368b5-ac45-4582-9973-5952ef0f8ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab1ad155-15e6-42bc-9ae0-41ea404bfab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f6b589-8e86-4434-9740-18de9b23891c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed548b9-8219-495e-81cc-ba8419337c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac1a794-f1f8-4af8-9195-01a70f17b9d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7f165c-c175-480d-8de9-1fbe1ee6bac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4a923f-984a-4e1b-9c5f-254c27f35bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4203c6-9fc1-48a1-b9cd-d51be195c6c4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66df446a-a9aa-4e70-9aa8-73daf960e0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ef2bf3b-c30e-4328-8f05-8734fd7a7cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c691ece-8b83-434c-89ec-e92fa9302d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f9f8dcd-5874-4935-aa65-fdfd19478fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eebdcfd-1193-4776-b75f-4b0e6bbc12a7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99af06f3-d718-4cca-a45d-8ddf39bdf80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cecfd9de-b473-4c25-a377-4db6988e6e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668d9f32-16bc-48f9-931b-e5e0654e91e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "76ad48da-c775-4d70-9861-deaa98fba20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe235c9-6372-432d-833b-69b4a4ceba5a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bbf3a76-fee0-426c-97ba-3a6337e17733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "418da473-a3d8-46c1-8c27-dc1d50b00847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0187979c-2589-405d-9772-69eed611011a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "df1c5598-87aa-496b-a3aa-9eea9d98491b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69192a70-7074-43e7-9006-6cb372328011",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b9f2a9-6f03-41b3-98cd-07fd195d2a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac06e4d2-d8c0-4ec4-a1aa-b118eee08de0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84365708-0a17-4eb8-ae62-7c0b5bc60197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "abc61387-272b-4354-a738-d410d7987c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e324cd4d-63a5-438a-b1fe-b720cb64ef12",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3b1eda-d90e-42da-b145-af269f030ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3409b77b-07d0-4170-9110-5e6ec4b49c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67517ebc-35d4-4785-81a6-f7606b15b30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72398bb4-d75f-4226-a108-9d4ea626b87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c707510-88db-4c95-8361-323e2d3ba1bf",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57e02a1-5d51-4c9f-99bf-2a4e932d0b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee52aac9-fa76-4dac-b0c1-a8b871f9cb42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3176f5-e2bc-4c1d-a0ff-365f5acd8932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f51fbccc-0e1c-4f56-8678-d15bd2aa1510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1366aa27-f68f-432e-b68c-f8ae1596ffc3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb167b1d-04fd-4e74-9b9a-75732155c71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0596bcd3-1206-4ee7-ae6e-6d13ae0b3937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6e208e-1897-416a-8552-c596fed73798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "226f26bf-e42d-4784-9809-9a31985f8827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8395752-6ac1-4e60-a7ff-37878498502c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2757973-b947-472c-a7b5-b99519be2b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ef0d8a-14e0-46de-bff3-ad733f94afe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20eb0ec8-5cf8-4126-b506-24c9f8f2418f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1337299d-2550-40fa-a6a3-7ec403c7e4a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbb2d93-e49f-4afe-a7be-329c231b5cbf",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b53f0b-8e2b-445d-bc58-e01144fad8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ccfb61-2ceb-46a8-837a-759cfa8fdca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929f3bd3-b5ee-4127-99bd-5211a45b14f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d66a74a3-96dc-453d-9acf-98430fb30008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6deea7-a37d-4d8f-b28c-2b3de55855cd",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302895aa-2a02-4816-a063-d8aa9624ec9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98a74031-058c-4f64-9fc8-ef95801888ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b583577b-8870-47c6-ae32-efd633ebc518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa484d5-78b0-434e-abce-9cc3f65773a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb9c021-91b9-4faa-b39c-7f7a5d4bd7f4",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c79738-f7b8-4658-8379-b439b45cac49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4022ab12-8fa0-47b3-bc17-b3c069a187e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fabad6-d5a3-4788-ac6f-f1f33da1e7a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34ff2c1c-3c14-4b4d-8c73-45551c049be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5d1001-b246-480e-8ec9-c127aa12fe71",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d24c8a9-2d71-42f8-b330-5e21b16d92ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70bf31c3-3af0-4d1d-b3f3-f8ba256e0754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6cdc07-ea9e-40a5-8a4d-bdc57fe4e77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6144a62f-7869-421f-bea2-3e47291bd985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4805f464-8661-4473-a078-0791292e6e6e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0569743-1fca-47c2-b8c1-0123b2f54a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c933b181-0191-4db4-a47f-aa424ec3df83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5263c4fd-51f8-42a0-9574-7c235b038c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "edb894e1-868d-49e6-a9b2-dd4ced913b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ee9013-1b16-4509-afa1-9c2bfa3057d0",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f7783b-cfd5-455f-8491-12ecc317773a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41de8236-fca0-4346-a6e0-b19c4b7a8196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5fcb2b-09fd-4293-8625-c4e5ba1382b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3c60f49-8ec6-4ecd-bc5b-3b9f46e102bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236f62ae-dda4-4b4a-a90b-92a79f8afef9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b1b5bf-6fe7-45c3-b0b8-6b5c02eefb63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0620265-16aa-4904-b99c-f80222f53cd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bcb64ab-3f65-400f-8678-fc35e2743573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "661e4485-04e9-4074-9b6f-78184dd4fe14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e30d43-4f48-4272-9815-076d4336ccbb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b198fc-fe3e-4a8a-94e3-4e88ee29f74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a589039b-48cf-4439-9b81-430b213cc829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4fa99c0-5c68-45e5-b0e8-c0fdcafd6350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "64eacebb-50a8-4f16-b220-ab05a0882f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40b0f56-d38b-4b33-aa12-7d849eb3635a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2d0f31-8a59-422b-997e-a45023a8e289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "512e8fad-338d-4a7a-a4a4-e865131de1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7e28b7-adc8-4ba0-8aef-ad4ba9d15201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "93eebf2a-1dfa-4cf2-9226-4be4f71a6151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57911c51-c3ca-4b9b-810b-fb2efecce524",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1888f7-5ee0-47f2-bfda-5e1b2ac6ad18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e5adba4-e20d-4b49-a389-84c2957511b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25053401-f3a4-44eb-a59e-a70eee5cd42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d866d3f-9354-4f8f-b028-f9908905e469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd8d61c-8a0c-4670-9814-e36a23dd5234",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2d609c-4ad3-4df9-8290-4f152d316b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2da18cd3-dd8d-4dfe-bbbe-59c20a87aba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48367421-f2c6-4f66-adf7-1973f6f59922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fccc829-9dac-4b21-a34d-08285b0691ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736b9f1f-641e-427d-a895-a81b280813c2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37a34f0-69f2-43b2-825f-3f1b7de70d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb261294-9910-4cc2-8ee0-b54dd330dd51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461b8029-2f4d-409b-be03-74af5c81c5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb0236e-6265-4506-838e-bb61c5acab88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc948f0-a25e-4f52-8efe-f46cfed4413b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b66929-5214-4831-ab25-bde1ef87a0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "846dc6d2-0520-4fda-ad06-a9f2e3125c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117ac601-ad9c-4dfb-b838-b87cc4a88bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c605936-a183-4828-84c2-df17cf95ca38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bf836b-844b-40cb-a04d-2c9c37e8db9a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f31872-5bc4-48ad-9c0e-4c9b48757547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9693854c-5a2f-4018-8e39-431583a0e3e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27345ee0-9a15-4ccd-8175-c226544cd0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "756ba7d1-5423-4811-ace4-8e88846a95be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4753a311-958f-4ad5-9fd0-6b29c5a53249",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9407ae33-2254-488a-a9ee-1e9ae12a8816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df619596-2f4f-4bed-aa68-c70b9afba8d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2915c0-b49b-41b5-8f00-8a8516bae880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fae91ad9-a3a8-44f3-adc6-df26aec413cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa24b37-b379-4d8a-8826-bc036a1994cd",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "357b5b5b-8925-4a0a-bfda-c2020e31d1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31c8e8c9-c912-467a-8e89-71c82ce3486f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108a26e9-a594-4748-bdf3-1798efb20f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b5aabaa-3f63-403b-8acf-183e44c79ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c78fe49-0240-4f77-87be-2de7c98892c9",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5c1c6f-a04c-4e88-acc4-0b50c6282b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f180fbb-d646-4e07-a11b-78dab28ce745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e93ae5c-de19-4e13-b9c9-8d8e99178823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df3a17a7-e864-4dbd-99f9-4b60938d871e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d416756-6a1e-4dc4-8f83-cb7afb0cecaf",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69f8823-2955-4f0f-b8f9-60b6468378c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe58cb70-f325-4193-b184-f9498cddf672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5a129a-0fa1-46d4-a290-5dda791bdb65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1bbd088d-1d9e-4c4f-9287-77d53dcf1584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58b1748-7797-43dc-9038-727ca749edb3",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90dc285d-63b5-4c8b-af0b-1d1d6a4b6168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fea88c2-5f10-43f1-859b-e73aed4ca548"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47153e2a-ef19-4ba9-a406-9727e7cfa52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "99d33b91-43cf-4f6f-ae0b-06bbf713e157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70635de9-3002-4b8f-a4bd-58d2285b39dd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51c4c67-1b24-4533-8e04-95f98c1ff371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f2be58b-1a7d-4496-9eca-90e3cb525770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c90c2e-87c2-4b32-b4e2-78a0f8695656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "210b0ff4-80fd-42f4-8714-9815b55359cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82e3680-04e9-4890-93f0-ff7aaad35ec7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87f3d5c-e597-4387-a23b-e1c37ca1e364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492814fa-8900-4fcd-9981-e210a134a787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3e3f09-5dbf-4ad8-bb6e-1f251cb6935e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3feb5335-e182-4d42-91b6-9c27145767f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6f06c5-493f-439f-aabc-ee351bc37d16",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0829ca0f-7351-4894-a496-fdbb1b966478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "537b8e7b-c068-4005-925e-ba8eaa84d16c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5223bf-3dde-41f5-aad5-9d878440acca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "537d788c-15fe-407b-8239-080d1a6c8b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23cf3fc-6fdc-4c19-88a0-64082f497859",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee49635-e2c6-4c95-bb70-be8a41fe3105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd2abc32-866d-409b-ad39-bebb3d8df91f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfc5241-61da-4ced-8910-3d73e49883dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab2bf382-77b2-4851-b198-a6d5aaf8584c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3745635c-5795-4407-81bc-63597586e4de",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38eb7e94-ea16-4758-ac4b-599bed6f7b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d1cc53a-5796-4594-93d4-07e77f7698fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12733fdc-a0bc-43b4-b781-926142948430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa9773b5-cd1a-4af0-989c-10e84fd7fea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e628a560-23cb-4015-9dbc-ef79f33bf082",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389085fb-da64-4b87-b6d2-bc533e45c02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "270ec7a5-d510-4fd5-af92-a143dcd39761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79eaf29-333a-4592-bbb7-37f0186de63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc1f1c00-efdd-49ce-af27-d51c6c424be8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a39edd1e-2075-4d1d-b3d1-4f1ce1b50a07",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eeb5c5f3-6374-4cc2-9059-f48b9f1d1eaa",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85157b9a-370a-4b82-9c6b-3c549eb4a871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c670d98-5465-4039-8b2a-187f67a2eeca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894e4a48-9f3a-407c-a605-32f2aa8d13d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3b55a5e3-98f5-4046-8f2e-c966927cf976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d32d7d-d747-4e60-8452-ded1dfc5b406",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4745f48-60dc-4ce2-9bf4-ef7a760af24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11247e10-acb2-4966-bff3-9db1b2224b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ddcc07-28c6-4759-8f18-ae3f26e5f4cc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2ec625af-bd81-4b4e-89ff-9be4548f8aba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07fe99dd-9ec3-4ffb-b90e-1769dc615531",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37093e2b-912a-4a4a-b269-e27b7e52ff42"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8ab1fb0-df1b-4c4e-9089-e70fc7f431ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc672806-3b03-40bc-afaa-3864899708c0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "795d5085-7e03-441c-831b-a6a50c0cdf41",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "525a371e-d78b-4a59-80b1-097f8749aaaa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f16ebe38-8dbf-4a7a-84f9-1cc9621c02e9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "404587db-ad28-48e1-b1d2-295df3f0130b"
                }
              }
            ]
          },
          {
            "id": "2d75e9f6-c24b-4e94-89d3-91f87e60b945",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b2e88e89-252e-4d6d-be00-c5abd1053345",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1176c8a0-cbff-477a-8b41-79a3f4513010",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0be7e1fb-5a9e-4501-b3da-7f01ef8880a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "887b58b2-5d99-4038-b148-3e015ef82c5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "625dc9bb-4067-463a-bd48-ea2ac5111139"
                    }
                  }
                ]
              },
              {
                "id": "05ae4da1-1f23-4661-b13a-74c20eb7276e",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8ad30eb-0674-4a8c-ab46-5ab8362dbbc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a0ada34-a6c2-4d09-bf49-27e22d0b5b2e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3013517c-ea6c-49dc-8986-eb9373248ac6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cdea6ddc-2076-4f28-8083-f863201d62c1"
                    }
                  }
                ]
              },
              {
                "id": "c3591675-b6fe-4fae-a8ae-9bec6231af48",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63efb2ee-c8c0-4526-ab7e-16e7741eab4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7ac8c31b-c21e-48c7-b26e-d005f517f2b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff8cff17-e1b8-4307-a0f2-375dc41465c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "262ef220-200c-4217-8421-1762dce29334"
                    }
                  }
                ]
              },
              {
                "id": "d3deece8-28b5-4d41-abbc-5cf9925ee2ee",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b44cd2c8-2f51-40e8-b797-63956f3a062c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ed92ed96-c751-4363-8303-be17c0a13af3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1fdf4989-ff93-459a-9a3f-2e5d8758ad64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2ddd5c0a-e83e-4e0b-b123-3e37b8e46c72"
                    }
                  }
                ]
              },
              {
                "id": "2bf2b5e5-ac92-459d-a0d2-e7f2f63daf4f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b26b0637-f9a0-4098-937d-1225bb28d3ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1592df57-db60-4e5f-bdab-2d48cbd21337"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b053d09e-76a1-4a05-ade9-f7aff409da19",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "bc4f8e9f-35f8-48fe-ad60-025ba2968dbe"
                    }
                  }
                ]
              },
              {
                "id": "8a0d30ef-9f56-4954-b813-503de07ed14c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b8afae7-ed20-4911-80c5-aafbdd044c4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "289e58d9-7b76-449b-a39d-252229607112"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f010a0f-6824-4d85-b335-2e210e35ff80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2dd81ac9-5725-452d-977d-716b4fa11f3b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7da77062-6114-4120-9887-0bf7f22e8fd9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "81b5f4a7-ee02-4627-8539-b083ce668c00"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "56374b86-333a-4e93-831b-eaf8bd77286a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2d07a931-f148-43ce-95db-011650f96166"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58fe6d23-9c38-4516-af1a-3b6dffb1337e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "be531db2-1847-43ed-92fc-66e007398a21"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c452b088-7fc5-44a0-b2c1-570c6551891c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53656eb2-8405-4f2e-b03f-e546f48ff911"
            }
          }
        ]
      },
      {
        "id": "1abffcce-414e-4cac-a73f-77932d2e239d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "9fed99b2-78ed-436e-bff9-c46c0e4aef3b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a41bb15f-9512-4db6-9269-cd71ab312663",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "06daf523-8446-4e61-95b5-0a9005f5d6da",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ecb8be5-d809-4139-b660-ad32223d8097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a189d61-18dc-4fa7-8080-07874b5d8d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1b6a65-34ef-476c-861f-18c8d33e997f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2491a59f-bbc1-4d61-926d-14418096e7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a2f7ae-d15a-4f26-ae54-ff462ebd1e26",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3972bc6-a39c-49b0-927c-49caa86df8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82276a57-9554-45a2-8e26-dfce538ac0b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8126298-b2f7-4ef2-b93b-386a0cb931f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f15f4103-c746-4946-8a8e-f8c4ac98bfc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3c37e4-0a4a-47e6-bfd3-3411058b4289",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec4b748-8f05-482e-a12b-53d9a392e265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6500e095-c2d0-4a06-a3aa-375ad4af0110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a751ff-595a-47f0-b56a-1116ac7d4e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c20641c2-ef4d-472a-93c8-2ee0d5a2e1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a16fedc-cc52-456e-9332-13fae7fecc5e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d9f13d-fa96-44ca-9938-f44071b032c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46739aeb-2549-4d91-85af-bcfe6c35e889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2075da5d-a949-4e8e-a892-03c230819387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d164aa71-67b4-46a0-94f9-0b0114c30343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5b364a-afc8-4d9a-b7e7-895e4750e876",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61900a6e-1d29-4602-9d01-fcf268db0351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "116d96d6-7d45-4e50-bf84-b7ff5c942080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc8d649-26c0-4afc-a627-bdbacea27054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d73a554-cf3c-447c-9d2f-935ed2077424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0df751c-f0c9-4f3a-aaf0-351dc61c2e1f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a66122-262f-49fa-a8f8-5e0b6de1e6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912e0466-695f-47ba-bd63-034781b6faf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3185f512-0c47-4f0d-bb05-41228534b43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d4e2cbc-9555-4b74-a5e0-74929547b225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea113763-62f0-4794-ab09-616533980506",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fccc65b-860f-4958-9b51-a303b6514bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a8c1b6-a2e0-4d3f-9e25-fcc3b4e48384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc4c3ab-dd42-4f93-a9cf-762b7cd742be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "88af9a8a-bd08-4197-ae37-5427dbc71c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e94b1f-d056-4175-9537-7ab2a206448d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa7a222-d1d6-4668-a026-cb8efae9e115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc621be5-43b0-43d5-9622-eb5785ca69fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77bff56c-1cf2-4850-96e5-4713a73b35ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d88badc3-07c1-4b87-960f-4f7fdbf67d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5f5691-dc5d-4d2e-abb9-d8bd21c2984d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a200bb87-d98f-4087-bc63-4f51a5032f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "601ada95-71ba-43fd-a861-1c494cde721c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494cef70-6fdf-4fe8-bf4f-a7c029dea50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "479cf1de-7988-4274-a71f-76d916621f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ba43f6-96c1-47c2-897d-c2fc8f95b9b3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc52a81-ace1-4a07-ac28-93c06011652d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61797682-1b2f-43f8-b162-6b68852a9cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d57f81-f4b4-444c-bb13-a38e65a985d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db506f04-355c-4e7c-b8c7-bcaa2d8a2d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c07683f-e752-4be6-a81e-b1f9947f238a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a889342d-3aa9-4707-be49-9f0a61e3a85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2aeacc3-4925-4b2f-8c0d-62740c328b8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e6cac8-7f5f-45ed-a7c3-88fa7b1aab6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6b9dfc-8eab-489a-8e62-9345f1048175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75afb16a-f2e4-4854-95a2-597d06034be5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "decfaefa-e2b5-4c96-adca-2fbff7454a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "163bbbfb-e614-43d6-9beb-8e7f63ade4d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b933e7-87f3-4e88-bfed-1b6c6944f8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6df9f3-5875-4fac-9512-927194158d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9d13a9-b0ae-4af2-ac84-f70793d692b9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d955a6-8532-4b11-9a58-e3d919f7af73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6ff805e-23ae-42f9-83b6-e5717acb0b8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8610b2-3967-479f-8ad9-01cbd03516d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d25dbfbb-a1c7-4f04-9199-091680b15aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a567e595-65de-47b3-9e4d-1eea2f34acf8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e07a99-64d7-4d55-9e14-31c2a9be358b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b207d0e8-5950-43c9-8f3f-c3fb4df4a451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c46bf1-dccf-4e20-a305-7f88b81e06bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "19e9f20f-dd39-4874-9f7d-49bd20ad5229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a25e03b-27fd-41cb-8cd2-2fcf34d2c5f9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bed04d-f827-46ae-84a3-e6d32e0713ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb50591-3acb-4cb3-b824-dceb3df0256c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b71c5bb-fed9-4ad0-98b4-c424243a030f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c41963b7-29ef-4339-913a-efaef6dfe655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9d151e-09cc-45d8-8be1-9379c3d54c42",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6b01c9-9dd8-4289-b14c-c2f4da2e123a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e08ba46-16b4-404b-a1fb-fd97359ffb99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650866eb-c5e2-4707-b971-589e39dfd23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b533adb5-ad8f-48e9-aebf-fcc764cca3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77dd3419-b4a5-4b26-9989-dd032bc71f5e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df286611-8999-4ffa-9929-5e3064935630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb7a056-5047-44da-b19b-e0d60537879d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ccedb5-c0b2-46ff-9fc6-083262fe482c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf1ea48-93e6-4208-a634-b593be315be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652030f7-304b-4607-80a2-d051f4777e62",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0392376-ef2e-445e-a560-d4118a0925b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a9ab665-4cdf-43ab-9e7b-3b2e157d349a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae4dbe6-1fca-4aea-83a4-b5da6eb16931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5078af8d-2441-4327-b186-648ba9d766cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6dab76-424e-4474-85c8-ff90db2de92e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0416ead-6aa5-4323-90dd-ca83c45689c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c24026a-4bf6-4198-8f42-5b7014902171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d40fec-79f2-49c3-b406-753ea6f49a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "613667b3-3c13-41ef-a13d-9d1a12d996f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6846e82d-9b01-424f-8810-ccac3268b142",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10806873-e707-4244-9de7-2dc47c632f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80920bdb-0598-4a97-a3fc-2431c8dae9e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66bbb8e-62b9-47be-8d15-5631778104d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb2be7e-eac4-4e92-b93e-14f853e8d27f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d87d721-26d9-4378-b043-0bfe6be1eb7c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ff7b8f-5316-4a68-a440-25ec10a3547f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0943ba6c-72dc-4258-8de3-6c04076cc939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f47e6b8-a6f0-464a-8b6d-f34724a12144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e18bc91-7bf0-49fa-9964-b50d23c78053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059dd133-f493-42ea-8d9b-1585b52eb331",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f09ab7-38ae-4826-975e-595c2ccf55be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88af3a7-fb63-43dd-ba8b-ed69ae1daef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52eeb9d2-3abf-4907-9d07-c0912a408b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41cb4e39-e7bc-47dd-aa28-2375b9522143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce56094-d39c-492d-b37a-8e5ed4eee6d7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a7cf80-943c-493b-8e40-c0ec084a0b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e201d9c-8891-4347-a3e2-e9a9839f2f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6066c20-280f-4317-b814-5fe9b832c0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66db6d73-c0e5-4511-8e38-5c6514ad1804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a08397-d1dc-4ae9-8b10-05cb02a13c3d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f66392-b50e-426e-bab4-3feb1baefa60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "998f0452-7f2d-4a05-b9dd-847095b4d6f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e761f2da-27be-4da5-a14b-3d10802efac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d330e137-e1d4-4a2e-a3a5-ff73e66e322d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90074972-c3eb-4577-9950-507bfe1066c6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d53731-e291-48cb-9703-46e1ff42186b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cdc3d45-79e3-48c7-8412-64c175ae6000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef19e858-e3ad-473a-abec-160b0912ab71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43e8c989-fd37-4a7a-8175-6f5aa5d3d1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3226b3e-d2d1-4d55-b6a2-1562e3e05106",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f2a73d-3a7e-4896-8dfc-182a47f8dc0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d31367-f732-47ab-989b-a971525ee2b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abd5827-f867-4b09-b2f7-84a603f3fec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "035c985e-5ffe-4ccf-bb95-04af21e5f72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472a4d88-e5bf-4332-b798-e9fe4163236f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6489a780-c139-479d-9ca8-a9b0a515244a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14d313cd-8aa1-4687-87e7-8d3b74639396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4c7e38-09d8-4ea6-85ea-3daba4edd591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34738577-d7e6-4e2a-b9e0-bd360d74825d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7034068-a3b2-422d-bb83-c883457edc3b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a924f6e-a857-4e47-991e-bf68347a1f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9904b25-c566-447b-a991-f4c1dacc767b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78e2415-adfc-4d4f-a968-182f9f78e6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f72a993f-1587-468a-861b-3d6d0b90a9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e23407-90de-44b4-95de-a62daaa31431",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ac602b-e23e-4fa8-ae32-2a6853f47928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d3cbd60-bdc6-46f8-8084-d22b9e0e7690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d71163-9985-48b3-b480-9e0476a17fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "996c9e82-aa95-46c5-bfdb-930c38207c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c539392-339e-40a6-8959-ecc4c96cb8db",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17065f5-5424-4644-a6aa-f53b1a0eaa82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cef8824a-a845-4e75-99f3-d0b9dc120ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8bdc418-c5bf-4283-b0e5-ad6202850146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a419068-d9bb-478b-8fa8-b425819c5348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89fae341-1947-42aa-9e60-e56381eae57b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "626ff652-7080-496d-9dce-5542c1d3d0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b389b622-8a77-4300-9da8-f553c3184d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c7d0d4-732e-4c5d-b89f-e59b091b7f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "142a70c4-d466-45f1-9168-8b05d63fdf72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9649be9-7398-4cfe-80f4-e1991648ab5b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9715f6c1-0fb3-452b-82d4-240a864b9ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10904a17-32df-408f-bc7c-824dda81d2ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc0f131-d451-47ab-b091-1c2070141548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e49cfe5d-7f96-47e5-a0cc-03f17e183f49"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3ce64f9f-eff4-4e1d-8343-4ddac40c8861",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2cee3f37-c7a5-4984-ba10-2593a41d92c9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec808508-84b0-428d-bc97-aed4ba2190d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa14ebf3-330e-4685-8b5b-5568df9261a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d460570-24de-4fc5-9a10-ea580b57b258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "371b4c3d-6da9-435a-a816-ae2b08ff673b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1d2418-4ff0-4f9d-b5d2-8e0c96b59801",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea36551-bfcb-411c-9856-eb92c5878316",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b3b95c5b-5756-413a-b2d2-b79751b4f44f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09bbc22-7566-4c72-807f-56248aa6f1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69eb7cf4-5d4c-44a2-9036-5e424014a638"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "711f45e1-145b-4919-a1a5-b0fa4b58c2d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53a15726-151d-4257-b0d2-f67e3d10e0f4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05ecb317-bde4-4499-bd2c-04f57939ba70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86ff21bc-80ff-4521-913f-65b48ab097e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32b2d6e8-945d-4ada-8832-3c90f29069ac",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7372a5a1-9d95-46ea-81af-1ee9f304abff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93da9bca-d22b-4474-8539-637d00ebb0ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e7cbaf63-ae90-44f4-8282-af821296fd73"
            }
          }
        ]
      },
      {
        "id": "51f54a1b-b84b-4ec7-af14-28bfdcc71029",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "876bd613-efba-43a5-a9cc-8daca241a476",
            "name": "Negative Testing",
            "item": [
              {
                "id": "975a6c4d-c285-4ec2-abc9-339a3b82c9cf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b55a5111-3d66-4519-8988-561d070e0275",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a03043-7625-4bb1-a299-3bb1b8475dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb172a7-bf16-4239-a406-ad94a92a13a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6524bab5-f553-47c4-8002-22a75cf4ffab",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315291c8-2820-4d87-9f9a-29a7ba1039e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a69a57a0-efaf-421e-9e70-dd3ccfced0b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb7bd6b-7967-4d9c-8cdf-2a58b804fda4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656102d7-a84d-46fb-92d8-e6e29a947789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a762965-3cfb-4def-9bd7-8e37500d5b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab579f7-7ad9-43d6-8454-cbd7c86cf3fd",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08fba008-9172-4df1-a95a-749a4b00dda3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e25745-3ba4-441e-aced-c746f76641f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304d57dd-5f13-4482-a710-751eb97c81ab",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff971991-00bd-44ad-ba18-d3ee73cb5120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a1e018c-3475-467f-b18b-112f701a1b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c186f078-2ac7-430c-b5a5-ca87d5a6fafd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28e19d6-a3e7-49f0-8c0c-fbb82f2307d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3553a913-f627-471a-83bb-ba2e6fd490e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "199fc5a2-4fe1-4d6b-a39a-71a5332f0a37",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482142e5-4844-465f-98bc-eee67b6ca73d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977fe128-6272-4a86-812f-a5d0ac03e0de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5272cd46-90fe-4b0a-b261-d068380dd97d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07873570-8790-4de3-9a09-ab75a8ad1f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5b8be7-88b2-4fd9-ae21-0cab7fb94842",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b27585-aec4-403c-a4dd-49271378c1f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e5bfcbb-41b6-4eaa-8fd9-acf65cb8675c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28bbe19-e0db-451e-acd9-d7faecac7678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17dd769c-30d6-45ad-a18a-f53847fd0510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe0fc37-e30f-4866-8b68-d6fff314ea16",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2564f5e-b01a-435c-b684-b5764f30c7f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82ed8ffc-b179-4ffb-8b0d-3ab5a8eeab8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f7f5bd-d8cc-4682-821b-1b3f01a5de14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e3f905-41e7-4434-9382-bc0277befdef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc21f75-4fb8-48eb-a419-a8b0daebfad9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1abecfb-56a4-4fa6-8997-29e76d2d2ac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7fa6417-a175-48c2-ba83-f1a21ff58cc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b655a1fd-4291-4b88-8531-890830054176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2226b6c4-75b6-40d9-afa7-e1e25204d8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779dc55b-4282-4dc1-a166-9e44a0dc7121",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0be59a-e287-436d-a5ff-168563bc27a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36315ab4-37e8-464f-8e4b-cbfcdfa7d0c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c5ae1c-9905-4b44-8839-31243a0ec1c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d00ab12-dd48-439a-ae7d-0367bff653c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1002b2-7f4c-45e6-8b6f-e4b70a32d8d5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7898612-f7ec-4ac3-9999-4fa834d24f80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f96b8a8-0939-490e-96e9-b1fdb8dbd91f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1ac75c-f835-4e1c-96a6-985db5f24cb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade3f8f6-db01-4393-91be-0c9aec3bd6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d556a998-bf58-4fe3-8aad-e57636d49952",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60527745-6c8a-46bd-b4af-77a5e677140b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4463bf09-6bac-42ff-b398-2e158ccf91dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df811467-557f-4455-a71c-d1778908ccc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c5a0c46-fc1a-4d80-b7ae-cff77be27971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12eadb32-2a72-4da2-9504-935a2fb514f6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a763486-0201-417c-8b70-e476fdf65637",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a211f381-401b-4d8d-bb11-a0302b794cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab6ea1f-ae25-45f1-818e-42a3ff71753c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc04810-bced-44af-b839-7f306665b862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1090b6e2-c8ef-43b8-8db5-8ae09a2960e7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d487d5e-bc1b-4f08-91f3-d05ac0e3a3bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14574d2c-8439-4687-bb60-79b89dc1d464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0cb2237-4cdd-45c4-b0a3-f707c744ede4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecf86643-bfbb-4ca7-b673-90fd4abfec74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1c1b39-40a5-45b6-a52b-e9c7d5b9da90",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa0d3f0-f093-41bb-bed3-daaef34eeb78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a4715e5-4d31-4907-8faa-9f485cf6ca4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f995a433-1959-4e97-8126-2bc29f010571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0df2410-9d9a-4d4e-a35f-0f063502105b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3852b259-9559-4c30-8972-5b35df34ca1f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab627251-e0e1-4c22-a1e6-32c1a371939a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e975d6c-1e39-4a1d-8512-f47c9c77c937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae80c480-1654-4e54-bb81-682dd4882ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee5b6e1-462a-4279-992f-a6a956495992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc408e3-b669-46a5-8faa-ea91d6a1d3c1",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "333e2e3f-517e-4193-bae7-d6b0f1d81435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a39bc2-70bf-4c99-8107-6ba1c7092d99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "457d5b00-99ef-4957-9d80-c91ca5516520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4107816e-fe11-4398-80e7-857a886fb248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067b9717-6329-43e5-b4f9-61077fd4dcd5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f740354-ce52-43fd-8068-0956eb856c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16eaec44-e221-4588-b749-d05b5542e628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4840c47-0699-48a4-bff4-53fec616397c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e70faac-1210-451e-9a6d-7203d9ba4da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e6acb3-81c6-4658-8920-edef6d92cf7a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300509fd-15c9-4717-9cb0-5352035ad2e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fbebc7c-e621-4b60-a98d-4fd7dc1ebf43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4cf8958-3e23-4eb4-81c1-c813b0ab7b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7f61ec-5c8a-4ea6-9437-f9c31738f166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38b1287-7a09-4946-9c75-4960dcd063e0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce1d376-6d36-42a6-bf02-465692b8f1f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "554ea04d-2e72-4f8d-9249-a0313650f4ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "347bdab4-49bf-47b6-ad76-ed81ecce676e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9396ca17-b6d1-48fc-b23b-b0a60ecafe08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bb4e42-3ea4-4b88-98f5-12c3e3b8300b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e748462-16f9-4d40-a6c4-57f1942ff011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e70a345-d559-4d74-9801-8da33300b792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c1c2c3-4a07-4890-a753-baa7224d27a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c0f2ae-aede-4b89-b821-99fa6d41f936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43df6788-8335-4715-ba11-82de14079356",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df8642c-66e7-463f-b0a2-04f8dc7b433c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2711524f-29b1-4a5a-9695-3287b7c78bb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "722a514b-0513-4436-97b2-09c5e88d984c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c630a48-a40b-43ec-82ee-970551a388c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522b41df-db0b-4515-acc9-d72fccc51b5b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9806e6-bcf2-46f0-85e9-fe4bea393491",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "005f3354-9085-405e-bd1b-193482cbe727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b47eb2-e70c-4180-b123-6ec8dfa5d3dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58cce1d5-33de-4a2b-a2ca-9713a88b4373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ac30bb-641c-4893-ae44-60a3f1d3e7f9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f97c86-d061-4357-89d5-4a63a8133463",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "964b0973-a1bc-41c5-86a8-7547aaffb11e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8a256f-7fec-4b69-85e6-6b5e7d043a08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42553dc3-020f-4e7b-8b12-6ece39a0f8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5562b10-347d-40a8-9697-e69114967e62",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45684c8a-d1a9-4fca-a298-c8930b79d2c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "498db84d-e649-40fc-ae43-2149e8a6ca1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0c3ce8-a350-4a68-9b77-d4216baa3c30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46d9826b-528f-461c-9e2e-86499543b2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3bd54a-c0fc-4969-872a-da9b50b70c8b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7205479-4e4a-4347-b4c6-66ab1a84525b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e5bc58b-b00c-4fd2-9761-e65dde0aacb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "148881c0-9246-400e-81e5-35e409f339f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ffb4a75-2831-4cbf-a4b4-bebc7322eb83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962a21d9-637c-4b5f-ab60-8e6988ace240",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb21cfd-c3ba-45f1-8cc9-dad62b07ff89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d13158dd-6cd4-440c-a36a-4f409411b3ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec1eeac-d3ec-4621-b75a-3bebe37d4719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a04fed-0ecf-40fb-a7fe-6affc1e7a6a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05efd11-18a3-4b28-8d14-1ceb0c730e34",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15232c22-bea6-4bb4-958f-a705470c50f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "705d65b1-dac0-466b-8cb0-ac41ef02e259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95939db7-3eb7-4ef9-ac11-fefef3e9724d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e93261a-221b-4457-b112-6ee08baabd27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d895df-1d70-4601-9352-98a6f57bbf59",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7da566-fad6-45cf-84a1-3f5969db66fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4350bede-1db7-445a-8bd2-0cd097083fc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bca8c64-4fd9-4e9c-a152-5a9d5eff0026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7224976-2ed0-420a-9dca-fae585c0e88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06ecfc4-4964-46e5-9504-fadf5564f185",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c287f9-2c1f-482c-81a3-ecc3052b9959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e35d3857-ee66-4325-9174-d140800bfdfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92594a32-06f8-4705-bb72-02bfd29f18eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5422e58-7305-4828-a6a1-ac2ec384489a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de8f98b-2b53-4057-a9d1-b38a7b839982",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35d28d0-ebd4-478f-b749-44522b1a083f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51b847fc-d673-4cf9-aec4-d94abaf9daea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae302346-d034-473d-992c-f723fd969fe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f711b6c3-9bb3-4809-be91-a52c851371c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f39aec4-1af6-4f7b-8c0e-6a7eedd97799",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43199287-fcc5-46bd-9d4e-4f09301f3aaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "578dd3f3-b547-4d25-8427-8d2815128f11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94636bd1-05ad-421f-b079-c5e177dcad3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08759d71-26e1-408d-983c-d9148bbec1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1da0720-baa9-4268-9a80-f3e09669ce3f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a87d4c-2155-49c8-b3f6-193aa5b0a106",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b677474-76da-41ae-a192-a8fa6eb73f14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e587cee-3804-4557-889c-e9daca5ed8d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c846fe1a-ebbe-479c-89ef-af5553f81936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a686faa-6cd7-4ccb-bd5b-98087c877175",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8aa1e9-4dbb-4d8b-833a-11e2c3467f76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7dacad-3b87-4061-a84c-e67dcbfa57c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38bc1522-336a-44e1-a42a-523c321c14c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "becd4d61-fcc0-4f42-870c-43fbdb5805e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aaf8b50-5f91-4f04-99da-b2ddd1aa7675",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002d0285-81b3-4301-8725-647eba2c7df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846a609e-6287-4d48-966a-9bfe5cc4b45d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "258b8ea2-d315-4ea3-8ac6-814d75cd407c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696f0f0e-04ef-4d2e-a69a-fc524beb8ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12deee3-40ee-41bb-b2df-5f3aa68b0c28",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b8d3aa-4581-4da9-b02b-653f5a9ac881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e52c7fb5-e1f3-4129-b5ed-3ec7be9524f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb52bbfc-0adf-492e-bee4-c3821579f6a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49f1934e-32ca-4ca9-aed5-4847d6be0a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f800922-fc51-4c1f-b1cb-f6179b79deda",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab62fde9-2b1a-4c86-b137-9639aa171c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a8a735-d61a-454b-81a2-d0afe426f30f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9bdff3-ab11-4630-ac42-5b7e9f9cd1e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1599376-0497-426d-9ef6-a50292357e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae55a242-a8c6-4b5f-b59e-4076a5df42ec",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab71397-9b98-4d6f-99df-e86b39f492c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19021b29-19e5-4a35-9464-145da0601a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed701736-73b4-4a70-8d03-bd6f7ecefd76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73ea651-f144-41ab-8836-da5629538668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851f3e7d-8a93-4d89-87ec-5bed5a9a0892",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b901753-e0d0-4e95-8197-4e7e13c3b15a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb0eebd6-c7c9-4f65-8a1f-3cdcad3ea258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff12fd26-d55f-4516-9208-c3728c4bce44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9423b07-4ea3-433f-979c-9e69fd05945c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6966dea9-2815-463f-a756-37b078c5fd99",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50628340-3f3b-4cd0-8ca0-7692cdc03cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf246cc0-334d-48fb-bc1e-f74749e01443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6d7def-5515-4a20-9bf0-d9b10956e18e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e3fe97-1e2d-4974-8202-03424d2c67d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a497799-b89a-4020-81e7-5b7d4edc3b75",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f379d491-dbaf-40db-9c19-5d186366907e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4416e2d-ae9c-4317-a89b-aa9f62995267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e67625a-5e91-4ae4-ab39-4a870edfdb3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcec5d9a-3712-4022-ba72-74d99017a953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2d803c-a64f-4bad-9adb-44d1c30922ab",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46dbcbff-4090-4bd0-a68f-31ebb074573e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8aa746f-d8f6-4166-85a8-c7a3a470dbfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38234d03-9ff4-4da5-939d-a26e95e0cf50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "069c0e29-9094-441c-a372-0edcb9065353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85772e28-91b3-4a46-9d0e-f89440ef78ad",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5debf4e6-22e3-476a-a9c3-780f4a566f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73f8193-0d96-49ac-8bc4-30345e56802e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84e64da-6680-46d7-879b-a88628d41a65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c804a30-1493-4941-8945-e2015986abfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41eee42b-7218-46bc-88ed-7dfa74943375",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ededd0b-6251-4fbd-8c11-2d764dcfc978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "141d3d6d-0465-4e50-a09e-f69ca327548d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b3fbac-8bf1-4209-99d4-33e991ed7f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acae262e-ffb6-460d-80bf-3006785bb38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dcc832-3b4c-47f2-82e0-da7e90bde402",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a05ce8c-98e8-4075-8feb-f4c9df9a1898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569d38d6-2214-4014-b80b-c602563df1eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d69e03-a296-42bf-bd38-db5774664778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "788a9376-82a1-4607-8174-d404dd083982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8770ab5d-05ed-448c-adac-f6d2ad62ed9b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d80b6bb-369d-4b5c-8e23-4d6925bb4929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efacec0-32a3-49b9-bb2d-1a74ccecc290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fca2d846-a544-4226-82b5-ff225acff429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82af394c-086a-41c5-a01d-56c460ffddff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2171c43d-b42c-4e33-b4d2-d3ef670dea5a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ffe808-546c-4ad1-828b-0b369d67e93d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c62061b-2fc3-4489-8e0d-826c583bea70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f279f672-f487-4dbd-8f36-11bf1b2026fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec5fee91-1539-4a42-a280-569eb2f2cd31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df11e05-67a4-45f6-9f3c-bc884379cf50",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c25320-0072-42e5-aa9c-fab8784acfe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b268e39e-f6f3-443d-b489-5f31fd3a0ac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c770d1-9983-41af-bb51-1f386c851c48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccade435-2a6d-4600-b157-ec2250d8e419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458ee601-4d06-49cc-ad39-87fdcbf864b8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4ee280-ba89-4908-a09d-11b03c0e7524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a8514b-9fe8-423c-aab0-72bb3155c737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1232509-a77e-4013-afd5-f538d51ff04a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5ba4fdc-c58c-4602-a7f0-e27a7eba9e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0dea72-1783-4364-90d0-d498e7598fd5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d921905-df47-4aef-a079-f1ba37e0d1ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "083ecde2-5c01-4235-9861-5b8fe8ed0ae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2242efc-b5ca-48d5-9c80-057e8883001d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f16216-2a60-4f98-9bad-a0a03af55bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1603cc2a-9acd-4d49-9a45-a3e97b1eb108",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72390702-1b58-46c7-a584-6ee6bedc7759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2179476b-f6cf-4d5b-b9f9-30daf2dbcfe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8646b108-cf69-42f3-938c-577bb0ea69d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e87b43-dd65-4bb4-8e34-408d062fccab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574b7819-e2ad-4f61-9f6f-b989e0bd4289",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2505ba0a-551a-4678-b67d-8de1e431d6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2600e56-2e29-4fa9-8406-5aa81f3e5dc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b91bd7-e6f8-4c27-91d4-210151f5bcf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae52ef7-d875-4b44-8b48-0f7831f9e7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1b62c8-88f2-4f7f-bf4f-a4d24ad61820",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff904b1-1f6a-4882-b7c7-4953c48ce7ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a32be0d0-80b6-42ea-bddf-c86473faf0ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cce79ec-494c-48fc-91b5-66df9d9c99c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b394b7e3-e678-4504-8239-2790ff2867b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49ab067-fbbb-4970-9abb-6b340951ad3d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01158406-ed13-4789-8a50-e015c277561a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ab0667-312c-40d2-8ffc-0a0c141d44a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0dfc390-fc25-4581-8096-18aed23d4889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81bf58f4-6f58-4218-8c9a-4347c262e4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7bcb03b-4ec4-4a75-9490-3ace5415a8c9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9318f6ac-475f-4416-b89a-51bff27fdf3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e82e8fb-e9cd-4c47-84bc-64d524ac4cd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f0bff6-e4d0-4500-9687-98ed7d4c4d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49dd6ca-2e95-4893-a576-a5fb00f46648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6ea99b-c487-4934-ae41-3947e9ccfef9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2caddbde-06a6-45bf-8de1-64dff3ed5fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a23062e-424a-4f3c-8fe1-a9d8c709508d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e3819b-fa41-495f-951a-353939613742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "048b3596-9015-4e97-9481-51fb462f7b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2df23e-66bd-40c7-9584-5b898d0dc26f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761892f3-8841-4a97-9151-182e8d09cd45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ccf95a-dc41-4913-ad41-6cbdac6ddf96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23fc24f2-b57b-4760-b87c-292b918beeb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182f2864-9a9b-41de-8242-f3df1335cc74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ce0962-dd08-463e-b9e1-9aa6c76c6651",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb80f7bc-948c-41a9-8ede-2f405d48b3f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f9f3dc5-3aa2-4863-b1dd-7457bd1e6329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f696d5-1eb6-4714-8c45-240cd1730a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd4760c6-2f32-4feb-8efd-559c05dcedf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ef3cb8-a0ab-48f3-95b9-3493080b1a52",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41b1f4a-1d6e-4b5c-a903-c13c43205e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d34239a-2eeb-46e3-88ca-0e1262309a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe23a13-25c8-4795-998a-2e6de1fc4e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a293d9fc-4783-4d94-9f26-b5df2bcdf9b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db2522f-abae-4f91-a6ba-c7a8fd6ec54a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ede18f9-b0e0-43e0-8012-b716b3d198b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "444b5480-dc5d-45d1-a08b-839d6d45c856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "698977eb-a641-4227-9fcc-8f15a97ab803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3df1308-9221-4293-901b-23b9f05efddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b68bb6-954b-444b-ad63-37bbe49c1dcf",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ffbaf4-db55-4d02-b1d1-4a3e0c3f187c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09fe673e-f3e8-465e-a1a4-6c918f143825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeabc67a-333b-4d12-99d8-a573f00311d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ac92cdb-3ff3-410e-af92-415f7794b422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee46798-37e3-46c9-808f-c4c3d8969d1a",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28eeed61-9c87-4ecc-b26b-cf8743e2105c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "958c5ae7-b427-49c9-bf30-a95d8a5d217d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e11d20-2054-4de3-acc7-9835c23f35f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ffe3ff-fd0b-4dcb-a000-0c60a028e40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5bdcf7-d2e9-4ba9-be55-2074ec4db7b2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e790262-1e2b-4f32-b4fb-bd6c15b8ffb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de45d2e7-ed23-4069-9ed0-e5493f9c10a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6244dc5f-8a30-45fb-842b-6248e5bbbbcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c6f047e-eb60-4ee0-a162-818b1b03bfcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247305e0-ffc3-4f8a-a98c-49fc84dea56b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d81821f-f070-423b-8c8e-65f6f5091996",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ab0f09d-483c-430b-a349-9b08157e310b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b52cee1-8b30-4e8c-8f95-118bd96db1f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68e3e79-00b1-418a-aaf1-def813a417ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9254a295-355a-4255-9e99-6f945d74f419",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a1fab9-0b0e-4a08-8a02-09d12b2163f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f834de5f-dd73-41ae-be4c-fe901852a585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be00bba-723b-46a2-a356-9a0d8ac3f1eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58799d9f-d3c8-4090-9657-18de1d490551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01031b4b-2e1c-4a54-83c4-9c2525d43ac7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7568fd-07b4-4622-9b29-dc827d6594f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a44e569f-2195-4e7b-8160-8b77a53423f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b609f3-df81-4971-a21f-93c06284a28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3849febc-cc6f-453f-a094-dea4598fe424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c188e3bf-e130-4242-acb8-05df441e8d47",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8ac28c-c32d-462a-a30a-94f359403025",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "256acd07-2714-4862-93c2-f4f91c1451fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48275a8e-be5a-4631-b5cc-db18f6597b27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a534e1-239c-4f7f-bf04-e0b809cf0a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1859f36f-92a9-452d-bc0d-9a50d8faaf45",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c593720a-c0f0-424c-8256-2bcf660bcf4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8df65af-c248-4802-a9ca-946e486dd331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6550ce4a-5bd9-4b52-80fb-9d57c81b39b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a3e9cc7-50b5-41cd-b638-0aed8b72c2fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6d942d-d11e-41df-9723-413858c76882",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2304394-39fd-4480-b041-af265f502f8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fdb60e9-b0be-4fc9-b75d-738dec19aa54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2638dbfd-2c53-43f6-8158-79cb9a6a1b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4414af18-d053-4e27-bf87-2c634e430bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f198b9a3-f715-4048-9236-8bfebfeade13",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "998756c7-2400-4e4e-b279-f546ec29d71c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5478b7bc-6a42-4005-9201-5c1e8be4fb4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f152c5e6-5169-4ccb-8709-4b428f5c13e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b91cf9-46f2-4bc0-8ebe-f16ce1dce336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45728be-18d2-4728-afbe-5e3698e80312",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fef3acd-151f-46a8-b62d-51619da698fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e33d2602-af09-466a-a015-303dde4bcda4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f066f133-461e-4fd4-b26f-5695863c5620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4094d550-f696-429c-bd9b-345e48949330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eded52d3-c3e8-4a61-88a6-03252a044ab3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8335217-dd42-4e87-a651-8e7526ae51c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70583fe9-199a-49be-aac4-62a719f8f671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff9b6a6-e6e8-4b92-a29a-6f47c67c33b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0f3acc-4471-40c4-b476-8dcadbc6cca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b23f91f-2a1d-42f6-8466-0361c8cccc2a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8c45de-9944-4905-b37a-160c70a2b4a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8d0a0ec-0e2a-4f10-b079-42017f650a66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d5efb9-5a30-4dd8-b81d-af7f73317dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37326886-ecb9-45a0-9e23-b98480e2c45d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e99998-9fcc-4c8c-af01-377281818f3f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad6687c-2f70-4fe6-8f3c-47c61d974e56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7722546d-f5d0-4c52-a29f-d3cfdc8cd6b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de355134-828e-4aa0-b64f-e74d291dab4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec917ced-6bac-48dc-8c11-4c6c580322d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092909bc-8996-4c2c-b942-57b3b3efb2a6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8adba52-1b54-4a12-ab11-2414321893da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f07008df-5057-4df6-906b-8741a764c4be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b998c9de-bb61-4bde-8bcb-2d658637820d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77f11319-5482-4c3e-9e79-046e95ba18ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fdb5b45-65c0-48d8-8c85-423cab1624b1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b46407-0987-47ce-938c-9f93c14fcaff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75ede26e-84ff-4a78-b416-f537fd6d3c21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42b02df-24f7-4a17-81b5-1240ceadbd72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fe1f7ee-5a01-41f1-93f6-f49b7c10998e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7ac8c2-fd62-4b28-a02c-e9a9896cc5ac",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c91631-bf4f-4cb7-be12-5b64b5538b9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1c0ac61-6e81-48b9-93f2-0a081375d95f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3faa65-518a-4ba7-bc37-dbd19d5db39b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5986e6a-45e0-46de-8d7b-9a64b12ec5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03ff255-6e34-441d-88d9-5670f5b8e13b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c73f7b-1f4a-4a1d-a496-a5699d01ddfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a77f1dfa-53c3-4bfd-9f71-7281583f1443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac51c9a5-d40c-4485-b009-94fa3ffb7f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad8e3c88-b450-4ce4-8383-a81d5e00d8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08658403-639d-4723-9a1c-8c47e107b566",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeba5b97-e3ef-47a4-b26a-13522e7e4679",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46771d10-f0c5-44ce-8a65-e8327c54c94e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0a5ad8-ce76-448b-9e7a-d87d5a60ab46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0bfece-0038-4ffa-bb7e-85f62f906c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3852f5-2434-404b-bbd4-5bf9883e75c5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a563d005-92e0-4469-8b51-7cdbcaaccbdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db36f5c5-69f9-420e-bf9e-6f334eb91147"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54b5896-7ca1-4966-a6b6-09089967011a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e92b897-d405-461b-b4e9-af717f82faa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca32fa4f-c8c0-4e9b-b183-15e7e60adca2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f17ca35-6b8c-4f0a-9cae-f6eed39e8b5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc88654c-3888-4794-ad69-c20f7f957ff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "652efd94-ad95-4bb8-83e8-0de0e84f8440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ce1c558-e870-462e-82e7-0246ac5ecc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "562303b4-2108-4e20-a634-785b99b532cf",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7876fdfb-f6f6-4164-aeae-7ffbde9f7d4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b789e2c-ac94-4a6d-98ab-35b2f5f010ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffa0308-2c91-43e1-a1b6-4c8b71aa31b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16fd38b4-0f52-44cb-9d71-9cc44b607fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68b2001-829a-4365-8ab3-8bc646506525",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a772ba3-7858-44ad-8549-68e28286058d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1499a1e1-9dde-4ae7-8632-7eb8ee9606b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "800b08ca-9107-4655-8224-137c8835dd42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b970f0ea-9885-4792-bb13-a135eb344081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0bdeacb-b4ee-47e4-9ddd-becf6787eba5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed53f1a-b59c-478a-8d5f-f6e111916986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77905f7e-3dff-4aed-a898-dd9298154ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc206fa-2a78-427c-af0d-4c91273c836e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01eac8db-c452-424e-a6d1-9d3893d2f9b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04478da7-1bc3-4d0f-85c2-c7fed95177c6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66964ff-e13d-42b1-9edb-6a1182a1bfc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0babd940-e9b6-4229-a7fe-89dcebb0667c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da790dc1-88b0-43ef-88b9-4194f57e3d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae998968-9f07-43c1-8442-46bc8109bb9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc1d1af-c0e9-4540-9187-26cf72350463",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50159f56-3bb1-4e8c-ad81-73068e4f8c71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc3242c5-8cc6-41a9-b467-fd8846d0bea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb90836b-0948-4923-ab80-34c18eeac19c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb623eb-69e7-4195-ac3f-3aff78383cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd1694e-bc73-4aa6-9465-83d9ef01f01b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a002737-9fe2-4187-a957-3116dcffa370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f9622b8-b560-4325-b9ef-69f7c4f079ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ff46f1-08cb-476a-829a-98903554892a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38de6e83-cba4-4224-b356-a344392e8d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e38886-a6cb-4e10-893d-56d16caff9c7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934156a3-fe54-4525-92e9-4bf0722bb9ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7dd5e01-384e-405c-a0c9-d0324d3fe473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2bdf6a-0faa-4683-9d32-00cbf0105291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab3119a-10e6-4783-aadb-d2fc6c3a7c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb6d4af-8e6d-4d8e-8875-e6bcfe527dfb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed9bdee-7def-499a-9f7b-ef20621adaa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9961ff5c-06ee-435a-addd-207ea01f2ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "872e4d0a-1464-454e-af17-df9c0147a7a3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc26d752-c61d-43a9-89b4-b64b0bac2237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d54544c-9501-4a3b-818e-6900d6684e52",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d905476-45e4-4bc9-8cd0-032d4ec4dfcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5abc7d09-7cce-4049-8481-2b6aa433e517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "906eb920-0515-437a-b15d-749a4820328e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c95aec52-34b2-444d-940a-23fe654e6e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9607ce-5d34-468b-8da4-cb68bf0ecc2d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7ffd98-6e7e-4967-b95a-2ec16d4a9a2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a34a970b-b569-41b4-b798-6a4831689b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2daa99ff-f804-4393-bf9d-dbbfa941be69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad8f904-443f-450e-9cf2-0edbee613454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9997af-6019-493a-84dd-95d8c20dc53d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c0166d-7885-43c4-b4ab-decbbb1d6dc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26b4e080-9dce-4e39-95e9-0ae17713779b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f60346f-0166-4a31-9d6c-e978a21904c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3683bbb3-0862-4c81-8531-6b9cc4f39340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af54da23-552c-4477-9740-9b6ee605cb2c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a83eb41-fd2a-463d-947a-3a48b20af9cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a835c94-36bf-46be-949c-6aa7d071fa0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35613e91-0745-4f3e-8575-b1a9b32d1246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c171033e-3c56-449a-8664-17de694c9370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648c31b1-28a7-431d-afcf-d92130b97ba4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61607db0-3ec2-42f5-9212-6d3a1e4d43c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abadee71-ee37-4dbd-af82-253e1a607b72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e681f5e-1acc-4e61-95d6-1cb2615d3ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9cae29-73e7-4fd8-a9fe-d56e3b7d1c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8519cd-973a-4cf3-aac8-f9c8adfa2f73",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556c90cd-6dee-45b3-8b35-4a0f64a4aab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2823498-e4bd-4f90-8ddc-5d6cb6b8dd98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d17a8a-8c85-4080-bed8-199d8547da1c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "783c548f-2a61-4673-81e5-a6a903cdc99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b1ec42-2464-4213-9711-a048f11c240f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5386da72-c7d2-42dd-8f5e-b5afd661ed88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "866df58d-cafc-4de4-bc7b-77486df3913f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d3a2a5-1284-4d90-8aec-becb2a59916a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700173d5-4078-47ae-ae58-1789bfc86763"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6fd7cf6-534c-4ff3-be2d-07d8ebd256b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c136aa4-f754-40c2-856e-5b700af0e203"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3605972b-31ea-41e1-9f01-0f4824dfdf67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "095d3f89-5a40-4d47-89de-fcbb6bb5edec"
                    }
                  }
                ]
              },
              {
                "id": "f9db95be-ee35-47fc-a2d9-26029f788fd0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e9002534-297b-48d0-ab50-75b3bfc44f86",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b8b87b-31b9-4a88-9768-e352ddf10dfa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "62a31faa-ddad-4325-bb97-2477190515dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4abbf16-daf9-4d31-bc82-312a5f177cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89835482-cbed-4421-950a-9bb3f24341f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0a459d-e284-45b0-b508-cb43d8141b90",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9854a5dd-1de0-4e30-a5a0-e3313afd0244",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "897573cd-ab3e-4395-a79c-199614972ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02dfc57-a7f4-48ee-802e-73f7925f3532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae028e01-d141-48d4-8fb9-142b4916ca8a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6887316e-2487-4105-a0ea-374c1169dda3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9970469f-0ff4-4710-9cef-b99736639c7f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a0e9de5-1bdf-4445-98fa-619f2517dfca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e20c3be3-1107-4bf9-92a7-043f802114ae"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "e4f0fe0d-c158-4985-b89f-c30749d37d3b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2f5461b9-f610-47ed-915c-2949a1b4dd22",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5148e717-6fa8-481b-8582-90b7037624e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c322fc96-2517-4b42-806f-5cad928d06c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b63ee71c-c9e1-4e92-a250-1820660d24fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ef170da-919b-4f16-a62b-d57ed821d82c"
                    }
                  }
                ]
              },
              {
                "id": "ce6e6551-1748-41f9-b4fa-fc215cda8b90",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "946a94b1-5aee-45d8-948d-ce12cfc269ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d0397e8-45d4-4026-b471-d6944e0088e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c002a507-a9bb-49f9-9685-36dbeff0e5de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7433aaa9-1b2d-4016-954d-50609be3ef15"
                    }
                  }
                ]
              },
              {
                "id": "c7d53486-f3c9-4371-a28b-1e917a749ead",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0bbbc8b-87de-4950-9ecf-18cbec2ecc23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e45cba77-7898-4e34-a72f-9879d98a4131"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2ea9b8e-f7f4-4d58-abd3-48f881211fa6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae3a9091-2ab5-4eb9-9aee-5ff8ffbc5284"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4344e2aa-b599-48c4-a3e9-9d87757f5585",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a47f27a7-3bc7-4790-a3d3-348a9ff0a30d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c54c19c-5c84-4e5e-89a6-7e1f418137fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "301d0d52-472e-42d9-9700-6552eaa888e9"
            }
          }
        ]
      },
      {
        "id": "5bda9931-a574-4082-8217-c53384609ed4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b8934e83-7f5e-41d9-b099-ffe005067b10",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6d71fd20-64a3-4b7b-84b6-f7cbb1752f44",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a07d568c-6ce2-446c-b3c3-a5c8e11dd311",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa88bd4-6e26-4a4d-9d48-c55dd738b6b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b68b6d6c-18c2-4aad-919d-299b2614fa63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f96d041-0d00-4d94-9dc2-b0aab02300cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60414265-526e-42ab-a469-01880370292d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2fd85c-9a72-4750-8df9-cfa445018e4b",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf323896-459f-4768-aa39-2885ad1f3fa1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "61fdf931-af11-43a3-b9c1-58595754603e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b1ac4c-bc7d-4745-8e22-438ca00ed47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2eb3f90e-02d7-4507-b938-58848cf6675a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38d8facd-31a6-4507-9334-5f6694456ccd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83afa2a5-6e64-4c93-961e-77d19fdafb13"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1fe03c2b-3516-48e9-bc17-9807ca20cffe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae91f5a8-7faa-44f3-9c5d-fd8a4f985ff9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca41ea19-8c74-4e2f-a144-7cd35b6c956b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "211df928-9afd-4777-be38-e65c205aa760"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6a71e4c9-2221-4771-81b7-aa0d9ed84346",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "67281dd9-9669-4c50-a1e8-536a62b96871"
            }
          }
        ]
      },
      {
        "id": "6264f0bc-6c22-46be-a3a7-00cb7c1b98da",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "42453357-d784-4ec3-bede-7949e9ca843f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b2f69c0-d5b1-4ef0-8c79-6242eb741781",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5663414d-a8bb-4e6e-88a9-d5658a569ed2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce2a684-0ccc-422f-9eab-43c922c69a2f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2326a9c6-3864-4f1a-90fd-1b83be15a3d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b084f1e-4b7b-4cc8-adb1-b7d979e5d190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1315ccb8-7cc7-48f4-ba14-02087983cb70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff64953d-a99b-403d-9e5c-34c076f9b74d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0c9dd1-b329-4c6b-8a8e-b456328b0921",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "22b38fe8-b5b0-4b13-bb73-76b4a5b16a72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb50df9-01c3-4fba-b2d2-9f9c624625f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd64bdfe-07ba-4681-a36d-a8a0ee7a6f4b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d93ea30-7fa8-41f9-aafc-bdca85dba788",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6529b943-a080-46b8-8c4c-943c52bb890a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "698ceef4-a8f7-4501-b0c4-b97ca8f6ae75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d96b28e2-6405-440a-88bc-27dba0461e7a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "74c0a1ae-a7ab-4934-8f34-f39640bc2a42",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "49e8c082-beca-486b-97f9-ab31df6a76e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "098c1339-0b05-45f5-8ee0-a1ec006d4938",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ec483e8-6c90-41ca-8e96-af1d77d1ef49"
            }
          }
        ]
      },
      {
        "id": "f82f1232-f0f1-4707-ba7a-0b3ba64d0693",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1f181fa9-a697-4073-aaa8-2477fa3cb489",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b7d432e-afc0-4bde-b876-d9872c2817a1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "37539273-9429-4d93-81a4-03d718e1242f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31ca0d2-3b5f-4d04-9e5a-308b237b5341",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ebaf523e-7ff0-4b5c-84ef-1b0f79ec15c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb3002e-f649-4611-a597-43ecc1cf9034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c25afd8-987a-4c5a-85aa-e71841b85828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c4a784-7c50-4f25-9056-25bbe1ac95e1",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924a6bc8-79a6-4da9-9a6a-1c31d417c8c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "08ab1bfb-bbc4-4dd5-a767-2f709c595cf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc74f3f-cf3d-402c-8bba-de51a50ea805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6afd4d5-2656-4080-b5f3-5e9216e3ebb6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c28de0cb-f7ab-45f5-9208-0382975adbd9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f52b1db9-f96f-463d-b7ec-bfa5313cd3cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6be62fd-9af2-476b-afa8-8af64e23016c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a2fb7c5-8a29-4cf6-b7b5-ee1a7329fb2e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b769c558-6abe-4176-b003-601e70a19a75",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "801e1505-4344-42b2-993c-dad3e679eb2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4be52c8e-5194-45fa-8be8-2a2ce6300fdd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5242d788-f081-490d-ac41-633cf6c9a9d7"
            }
          }
        ]
      },
      {
        "id": "792e9346-fbb9-42a6-a603-e8e27934b7e5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "021e8fe5-4e79-46d0-9498-1f7bbc234bd1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6405e89-a318-47d3-aafe-bf006b3c7076",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "70cd5bdd-dba7-4399-b885-d85fcb015bbd",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4d779a1-5bdf-4857-a9e9-55b398a39eae",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0821bfdf-297a-4eab-894e-87b65b6fd556",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 195.73461538461538,
      "responseMin": 4,
      "responseMax": 3468,
      "responseSd": 408.5406235730631,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666486756098,
      "completed": 1666486817655
    },
    "executions": [
      {
        "id": "afc6ce97-ad7b-4bab-9bbe-028a2d00f0a4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5bbe1551-715e-4ac0-994f-25db89bf95b7",
          "httpRequestId": "c79ea5b3-c733-4c40-8d74-3920051197b0"
        },
        "item": {
          "id": "afc6ce97-ad7b-4bab-9bbe-028a2d00f0a4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ca648734-6ec7-410a-8019-f66536077633",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "9d08826e-41c6-44ab-af72-14fb221840f1",
        "cursor": {
          "ref": "836901c9-0366-4856-9db7-7b8e5becd0a5",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6a70c52e-2bc6-46bc-9fb0-fad010661484"
        },
        "item": {
          "id": "9d08826e-41c6-44ab-af72-14fb221840f1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "da001aac-4070-4bcd-aa15-1737f931bc68",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "6f9803c1-04cc-4857-a2ae-3c8a17f11f54",
        "cursor": {
          "ref": "cc1fd8f5-a8dc-46c1-ab32-fb822c49564c",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0452fdbc-87a3-4b83-8c44-027d0c0c4f10"
        },
        "item": {
          "id": "6f9803c1-04cc-4857-a2ae-3c8a17f11f54",
          "name": "did_json"
        },
        "response": {
          "id": "f97187f7-51da-4b60-9607-5994a98f2b9e",
          "status": "OK",
          "code": 200,
          "responseTime": 3468,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032db4e6-8062-4690-896e-de6c22bb71cd",
        "cursor": {
          "ref": "fa81619e-e6b1-440a-b9f5-f1222f0b4c59",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7c1400d-4b3a-4281-8ff2-4c3b7d05eb3e"
        },
        "item": {
          "id": "032db4e6-8062-4690-896e-de6c22bb71cd",
          "name": "did:invalid"
        },
        "response": {
          "id": "56a36a84-1441-4f10-9d40-a112c2adfcf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032db4e6-8062-4690-896e-de6c22bb71cd",
        "cursor": {
          "ref": "fa81619e-e6b1-440a-b9f5-f1222f0b4c59",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7c1400d-4b3a-4281-8ff2-4c3b7d05eb3e"
        },
        "item": {
          "id": "032db4e6-8062-4690-896e-de6c22bb71cd",
          "name": "did:invalid"
        },
        "response": {
          "id": "56a36a84-1441-4f10-9d40-a112c2adfcf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837f1c5d-e4a5-42e6-933a-a7e6cc70644f",
        "cursor": {
          "ref": "4bfec423-263d-4e63-89c7-624d38044e75",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "693d3247-f3f5-41d2-8e13-04dbd0aae6e2"
        },
        "item": {
          "id": "837f1c5d-e4a5-42e6-933a-a7e6cc70644f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b7ceb8da-ae0d-4094-9208-272ff434b2fa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 841,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe13c88-2aec-4111-9d51-c5bb360da971",
        "cursor": {
          "ref": "cdd45e02-793f-4579-9248-f1d7731851cd",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "337d263f-3c11-46ce-85dd-b115626ab814"
        },
        "item": {
          "id": "fbe13c88-2aec-4111-9d51-c5bb360da971",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f7a025cc-64c7-4eb7-81a2-e19050a84eb6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 183,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccca3214-0ae5-401e-8e55-5edaf54f831a",
        "cursor": {
          "ref": "700d5add-f9aa-4a87-8faa-66e5f5b97ffa",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "12391954-fd54-4ac8-969c-246d9a68f9b5"
        },
        "item": {
          "id": "ccca3214-0ae5-401e-8e55-5edaf54f831a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b25fac32-7249-4118-a977-c191f6b63b97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72802789-2f74-4171-a2d2-4ad43685fad8",
        "cursor": {
          "ref": "41ed598a-cd81-4f15-bb3c-d64ea3c9de22",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a0f73a6a-039c-43bd-80ca-160022d46c29"
        },
        "item": {
          "id": "72802789-2f74-4171-a2d2-4ad43685fad8",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "68c70c2a-0c87-44d2-a772-b3f47952683d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72802789-2f74-4171-a2d2-4ad43685fad8",
        "cursor": {
          "ref": "41ed598a-cd81-4f15-bb3c-d64ea3c9de22",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a0f73a6a-039c-43bd-80ca-160022d46c29"
        },
        "item": {
          "id": "72802789-2f74-4171-a2d2-4ad43685fad8",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "68c70c2a-0c87-44d2-a772-b3f47952683d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8bb34fd-4dfd-46c2-aa67-6a801a6d6c32",
        "cursor": {
          "ref": "95b03ed5-d838-4526-ad8b-a335b6a20039",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "73743ccc-f74c-442f-849a-b0cdc7e3df5a"
        },
        "item": {
          "id": "f8bb34fd-4dfd-46c2-aa67-6a801a6d6c32",
          "name": "identifiers"
        },
        "response": {
          "id": "ed960332-14e7-40e5-bed3-90e2e630724b",
          "status": "OK",
          "code": 200,
          "responseTime": 1085,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3efdef55-4d70-49b3-bbd5-601529f769d3",
        "cursor": {
          "ref": "e14bb66b-5145-4968-84fc-bfdb3789baba",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "47838af8-6347-479b-9365-568538179f1f"
        },
        "item": {
          "id": "3efdef55-4d70-49b3-bbd5-601529f769d3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "14a8c2f9-351b-4bbb-9549-76be9fd1205f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3efdef55-4d70-49b3-bbd5-601529f769d3",
        "cursor": {
          "ref": "e14bb66b-5145-4968-84fc-bfdb3789baba",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "47838af8-6347-479b-9365-568538179f1f"
        },
        "item": {
          "id": "3efdef55-4d70-49b3-bbd5-601529f769d3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "14a8c2f9-351b-4bbb-9549-76be9fd1205f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f09dd0-2362-4d50-94f7-304f41444b24",
        "cursor": {
          "ref": "d27e1496-6b46-4e57-a4d9-af42813682d7",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "756114bf-e4ef-43d9-85ae-8cc8e25ea7ec"
        },
        "item": {
          "id": "35f09dd0-2362-4d50-94f7-304f41444b24",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e89a8206-0a99-42c0-a6ed-5a4600935d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f8005e-fd16-4933-a9aa-d81fc28a3fb1",
        "cursor": {
          "ref": "15867547-23b2-4c9c-aada-e882358d9a3f",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4d585181-fe8b-432b-86ae-365785c22549"
        },
        "item": {
          "id": "01f8005e-fd16-4933-a9aa-d81fc28a3fb1",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "15f26279-93ca-4f25-a15f-2b1de9e544e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80beca0-f60b-4ec6-b9a2-406a1a922d76",
        "cursor": {
          "ref": "5c194263-56d6-4eb2-9161-8ff587ca5b8d",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "818ce6d4-5b70-46d3-9205-3c084c915339"
        },
        "item": {
          "id": "e80beca0-f60b-4ec6-b9a2-406a1a922d76",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b041c91d-20eb-4a70-afec-347c734898f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c028147-4890-42cd-81a6-25be80406fad",
        "cursor": {
          "ref": "d9c4dc31-de58-496a-99e1-820a523c91d8",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4494bed1-542b-4187-9293-a267591e15e5"
        },
        "item": {
          "id": "3c028147-4890-42cd-81a6-25be80406fad",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "389c1ee5-0ac7-441f-851e-f9987f01c058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e571d27-0ee4-4b9b-8134-eec254f6716a",
        "cursor": {
          "ref": "01df7f02-f698-4b4b-90c8-f078578567d9",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1d869ecb-9001-43e9-9efd-1fa6f4dcaca6"
        },
        "item": {
          "id": "6e571d27-0ee4-4b9b-8134-eec254f6716a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2181bbc3-db2d-4a2b-ba65-bce09379df1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9250fe12-4217-4a5f-a0ae-12d26a9898a8",
        "cursor": {
          "ref": "1c38cf58-efd2-49bb-9c54-ab37de76bf26",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4594c8ce-bf64-4ffa-b128-48b003e2844d"
        },
        "item": {
          "id": "9250fe12-4217-4a5f-a0ae-12d26a9898a8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "407f53a8-0bd4-4bcb-aa22-1ed54e7976cd",
          "status": "Created",
          "code": 201,
          "responseTime": 3063,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "0bf6cbf4-c129-411b-be21-f315f215c0ab",
        "cursor": {
          "ref": "b91bd80c-d0ee-44bc-8739-2da7fa6ef32a",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1e2fc550-1218-4eda-86e0-f4f90d68cf36"
        },
        "item": {
          "id": "0bf6cbf4-c129-411b-be21-f315f215c0ab",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b7284d68-5426-4c2a-9df6-47ff2fa6d506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19751a7-7aaf-40c5-a845-2067018c681d",
        "cursor": {
          "ref": "d25c7ed6-2cdf-4a8e-b108-31a327bb9414",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9104ee89-3c48-422e-8f9b-4ff7917c6312"
        },
        "item": {
          "id": "a19751a7-7aaf-40c5-a845-2067018c681d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "331ef7ea-b370-46f4-a18d-da750364dfe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e773f9bf-cb2a-4862-a445-15b65c975600",
        "cursor": {
          "ref": "fdcc8efd-380b-44c5-9f55-e127e0cd453e",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0a4432f2-535c-4b0e-b366-d1bbb7f3239c"
        },
        "item": {
          "id": "e773f9bf-cb2a-4862-a445-15b65c975600",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6741af4d-6dfe-4aeb-a37c-1fba40d46182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c14fb2-8c77-4063-8798-fbc46c73c788",
        "cursor": {
          "ref": "2f97ee04-bd1d-4944-8ca9-1208ba1b642e",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "83b37036-df1a-4ae0-b2e7-37e7dbab9e1c"
        },
        "item": {
          "id": "59c14fb2-8c77-4063-8798-fbc46c73c788",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "88ddcf26-6498-4214-84a5-8378a2d043f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a86f07c-30da-4cf2-8f95-0e255a80a303",
        "cursor": {
          "ref": "0486c236-b631-41d1-857c-937349c8985b",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2ace9154-9158-4fa1-9994-07e1a9606719"
        },
        "item": {
          "id": "4a86f07c-30da-4cf2-8f95-0e255a80a303",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d3aac395-6bb2-457a-98ca-79cb6159a4ee",
          "status": "Created",
          "code": 201,
          "responseTime": 462,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "de3a95bd-2b1a-4730-8f76-7cec36dad485",
        "cursor": {
          "ref": "240094b8-6378-4800-8473-17ccf1116a35",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3c7bed80-d81c-4f01-a166-6c24f5fd6679"
        },
        "item": {
          "id": "de3a95bd-2b1a-4730-8f76-7cec36dad485",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8fd99242-e31c-4d9c-94c4-1926dec7536f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b2d9c4-7396-47dc-a37c-5a6d4ddce6bd",
        "cursor": {
          "ref": "591a7563-f08d-4a1d-a47c-5e0a5fe4a36c",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "bd06ac19-2ab9-4d9e-97bd-3899220e0fd6"
        },
        "item": {
          "id": "79b2d9c4-7396-47dc-a37c-5a6d4ddce6bd",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2c4ead61-c302-4d53-9b75-873bf353b0f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada6a343-e09a-41a0-a226-30146cfe7b62",
        "cursor": {
          "ref": "ffbb0161-88ad-447a-a2dc-24a402d6ffc9",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e35ad24b-a3e2-462c-bccb-de4eb31acbaf"
        },
        "item": {
          "id": "ada6a343-e09a-41a0-a226-30146cfe7b62",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6ff9947b-1942-4018-b1d6-9ebabd1c46e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7b76ac-e513-42ae-8a47-60d78879b3d1",
        "cursor": {
          "ref": "5cfa8907-50e9-4646-9331-7469a3238171",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "48479b81-9a94-433b-bd97-0208f9a7f113"
        },
        "item": {
          "id": "eb7b76ac-e513-42ae-8a47-60d78879b3d1",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f028da6e-99fb-4ced-85d4-53b3fc5f88b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f246cbb-895a-433c-8790-8223c6064746",
        "cursor": {
          "ref": "c8c9bb8a-0ab3-4306-a4b7-7f47ecdb875f",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "38283d6d-9e79-47ba-88aa-23504034aa76"
        },
        "item": {
          "id": "2f246cbb-895a-433c-8790-8223c6064746",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "dfdd94ae-0158-43d8-ab40-155de2fe295f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "878bb5fc-308f-456b-bad9-20587b59b138",
        "cursor": {
          "ref": "94d95fe9-9e1f-403a-bf28-cc3b364150a8",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "769af0d9-14bd-47ad-895e-88b4915edcc0"
        },
        "item": {
          "id": "878bb5fc-308f-456b-bad9-20587b59b138",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "675be858-6fe9-4ee3-860d-6092791e60d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52657602-55dd-48fe-aa82-22573df74356",
        "cursor": {
          "ref": "3fae2a13-dfd9-4cd7-9905-78d2399f54b9",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9476cc03-e75d-43ed-9561-0b1f55f332fd"
        },
        "item": {
          "id": "52657602-55dd-48fe-aa82-22573df74356",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "bb1ed8e3-2b04-4903-8d61-674fa7ebc0f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7acfb3a-25e4-44f7-85fd-dc365482c414",
        "cursor": {
          "ref": "892c27d6-48a0-4211-8fff-5854107dcb83",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fe538fb1-e530-4570-acde-057eddb1d67c"
        },
        "item": {
          "id": "d7acfb3a-25e4-44f7-85fd-dc365482c414",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f8cdfc25-5bfb-41dd-9693-e3888d680127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 431,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f477dacb-270d-4ef9-b86d-03e672f609fb",
        "cursor": {
          "ref": "4c0434e8-7c30-406b-8b2b-7fbfe58e5106",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "516cc0a2-8617-4302-93cc-1a17aace97df"
        },
        "item": {
          "id": "f477dacb-270d-4ef9-b86d-03e672f609fb",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "517d2582-6198-4f15-8e11-2111ed9739e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a9577d-c638-46b1-8006-c9e62cd160f4",
        "cursor": {
          "ref": "6494c58b-dcf8-421c-bc1f-15e547ab3913",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "405a6c3b-9fa6-496f-9715-61c355e1200a"
        },
        "item": {
          "id": "06a9577d-c638-46b1-8006-c9e62cd160f4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "57dcda19-f819-4bcd-a3c2-998d1b4f8411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278da5d5-a8e6-417f-a2e6-1bd8dc5e5dac",
        "cursor": {
          "ref": "14b22fda-7f3b-4ac2-8e88-2b54b9420f1b",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "feab5ef5-5d52-4f06-bbf2-64c6a512f751"
        },
        "item": {
          "id": "278da5d5-a8e6-417f-a2e6-1bd8dc5e5dac",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "72ab6f81-f5ff-4217-898a-b3d47f2fe7bd",
          "status": "Created",
          "code": 201,
          "responseTime": 1544,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "c6247888-5b3b-4cd0-b904-60d5b9b790a0",
        "cursor": {
          "ref": "bc119a0e-51a4-4684-a4ce-a09425834d51",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "adaceb98-73ef-4558-a9d1-8a8053a13f04"
        },
        "item": {
          "id": "c6247888-5b3b-4cd0-b904-60d5b9b790a0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "85978752-9e02-45fa-ba0f-bc6ea20173da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 396,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0286d4-cf3f-488e-a45a-554bd19f69c9",
        "cursor": {
          "ref": "dade767c-6794-4e52-9bce-09b518ce6ef7",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bc35ae28-2614-44af-b7a5-2db0721d37d5"
        },
        "item": {
          "id": "9e0286d4-cf3f-488e-a45a-554bd19f69c9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3fe7d752-141e-4872-9055-13f15e5ed5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bffc5c-09ab-45c2-923c-06638bd54d80",
        "cursor": {
          "ref": "7f33ecab-4894-4868-a8e4-017a56f6477c",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "90937c5d-3f3a-4274-b4f0-b4d283618ef0"
        },
        "item": {
          "id": "84bffc5c-09ab-45c2-923c-06638bd54d80",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f024a0f4-067f-44fe-9deb-4850f8cf10b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 291,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fedcb27d-62e2-4026-a9eb-4f24ff2d63a7",
        "cursor": {
          "ref": "4688a2d9-4b6b-4e84-8ea0-c0db80067c6c",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1fb9fdef-7e12-4c12-8380-cb79b1af85a4"
        },
        "item": {
          "id": "fedcb27d-62e2-4026-a9eb-4f24ff2d63a7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a7b25acc-7f12-44a1-a7a1-740aa80b05be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3910f9a-93ff-496a-bc04-c6a7def8df39",
        "cursor": {
          "ref": "a006bf65-0cb7-48c9-9b78-135e2446bf25",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "95a423c8-48e1-44c8-8a79-48f6d311e176"
        },
        "item": {
          "id": "d3910f9a-93ff-496a-bc04-c6a7def8df39",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7f359c6d-2e97-44df-90e7-1e22a6c75cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f915b51-de04-4c65-8e28-ee9a473b923b",
        "cursor": {
          "ref": "2dda1492-9a21-4467-acb2-572fd766714a",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "661a1ad2-9b65-4e68-bb09-8c844e884f81"
        },
        "item": {
          "id": "3f915b51-de04-4c65-8e28-ee9a473b923b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ee694c4b-8009-456e-9d29-df7414001ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f0610ca-9268-4a44-bb7c-13aa72fa9a12",
        "cursor": {
          "ref": "432f5b47-f007-47b0-8a37-ef788658c2bb",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5e18438a-d9f0-4f52-87aa-3ba20209cc99"
        },
        "item": {
          "id": "2f0610ca-9268-4a44-bb7c-13aa72fa9a12",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c21fd531-f0e9-48a1-b8a8-8833ac6104a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea023bc4-44ca-4d96-a28e-92df6cad1dc1",
        "cursor": {
          "ref": "932d7f3e-f342-4ac5-a193-5567294ad0d0",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "bc293e0b-d2f6-41bc-9b3d-f5ea4fac3d85"
        },
        "item": {
          "id": "ea023bc4-44ca-4d96-a28e-92df6cad1dc1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6945e8d8-cf08-4596-a0b1-f83da0604ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429566f1-e20b-4512-876c-398213b2bdd7",
        "cursor": {
          "ref": "5bc97199-ee73-410e-a09c-36fe6d93afd1",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0b11dece-cbbd-4de5-b2e9-d15eccf258b7"
        },
        "item": {
          "id": "429566f1-e20b-4512-876c-398213b2bdd7",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b83f04f9-29d4-4122-a7d2-79f33dc93de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c180c7-cd84-4c8a-a409-6ae1dd6761be",
        "cursor": {
          "ref": "b65458b7-6faf-49e0-a9cd-62e4bf499cd1",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c9b495da-18bd-4802-8eb7-6c3c12a08e65"
        },
        "item": {
          "id": "20c180c7-cd84-4c8a-a409-6ae1dd6761be",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2f121c3d-0349-4920-a7ab-5e370080b7c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "847b91a6-bc14-42a7-af26-0d377d290259",
        "cursor": {
          "ref": "14ce24c9-a122-47c5-be02-355eeb83ef79",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "39131c3f-84a4-4500-8799-3fd113e5033b"
        },
        "item": {
          "id": "847b91a6-bc14-42a7-af26-0d377d290259",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ffea145a-f611-43a8-9d66-ff264daca6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6080ac60-1d46-4464-a066-2deec8a7e02e",
        "cursor": {
          "ref": "64982023-1edb-4d84-a42f-da88d02b93f1",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f45e7726-4b3d-4e8a-b20e-67a55dfff14a"
        },
        "item": {
          "id": "6080ac60-1d46-4464-a066-2deec8a7e02e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9e7ec3a9-2fc7-4d97-aceb-7b75de18c2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e0d319-cf57-4756-b63c-34494e263bfa",
        "cursor": {
          "ref": "b3d32613-2005-4b6d-9508-230d42d46e3b",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f770fac1-8ded-4120-8455-f6a3508b8e00"
        },
        "item": {
          "id": "70e0d319-cf57-4756-b63c-34494e263bfa",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c0a9cad5-7c60-44c1-bfe8-e3c0b4a77ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1161,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a09bbd6d-b0d5-4f95-9342-4c7687020891",
        "cursor": {
          "ref": "b8dd4794-f25b-46cc-9375-e8203fdf336b",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6b78ae87-50f1-4ee2-85ec-55b76dd1a6fa"
        },
        "item": {
          "id": "a09bbd6d-b0d5-4f95-9342-4c7687020891",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "237eb33f-749a-4657-ad23-02ed10157070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b304b6d-6460-4235-86fb-1ccfc3b5416d",
        "cursor": {
          "ref": "604d6d72-de40-41ea-bec5-215dc9bfbfd0",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7536a325-5683-40b0-8a54-02ceab6f05b3"
        },
        "item": {
          "id": "2b304b6d-6460-4235-86fb-1ccfc3b5416d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8002f0e1-6b06-4c13-b386-5f5a92dcd95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15617e84-dab2-4b9a-9619-55ae1e6eead8",
        "cursor": {
          "ref": "5ee37529-d283-42f5-b378-43d4c9582f21",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "700eef43-d639-4162-a0a6-c8a47faf228d"
        },
        "item": {
          "id": "15617e84-dab2-4b9a-9619-55ae1e6eead8",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "36abcf67-1cb9-45a9-af75-3fea4aa998ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1117390b-988c-4091-a513-2ca57c472ad7",
        "cursor": {
          "ref": "a098235f-5316-4d42-9e43-91966dfbe711",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ee85981b-8db2-40b7-b3f4-dd2fcbc40ae0"
        },
        "item": {
          "id": "1117390b-988c-4091-a513-2ca57c472ad7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ca6b3fad-f1e6-4f19-935d-4cb10bf08ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715c98bd-9628-4673-873a-d1d72c35c50e",
        "cursor": {
          "ref": "c8adf8b3-382f-4e61-b8c5-fdab08c92ad5",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9bf73952-ae53-4e90-9660-b69ea4b293db"
        },
        "item": {
          "id": "715c98bd-9628-4673-873a-d1d72c35c50e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e0788820-e9e5-49e7-8629-985b09d7705b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77e074a-cbc0-4bba-8d67-2abc4dfafe2c",
        "cursor": {
          "ref": "72593fc1-542d-4aa8-83b4-405a4623ec4e",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e3b3d126-c52f-4323-940d-7d451123344e"
        },
        "item": {
          "id": "c77e074a-cbc0-4bba-8d67-2abc4dfafe2c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e84f1647-5dd8-40f8-93d3-3c9c874a3c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b5699c-9b08-4569-9e7d-917a21c5294e",
        "cursor": {
          "ref": "ede71f8f-fa24-4d23-9adf-cd75f6824d58",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1bdd1aaa-174b-4f64-b08a-a527bd932b30"
        },
        "item": {
          "id": "78b5699c-9b08-4569-9e7d-917a21c5294e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "064c1a35-e2e1-46c8-ba80-66b5e32bba28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 372,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3c395a01-d8c9-461d-b5b9-37c9b58f0af3",
        "cursor": {
          "ref": "16bf1a9d-7cc0-43a3-8b80-d252f6d841ef",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "dcd9c870-f0d9-451b-99fc-663ac25caa1e"
        },
        "item": {
          "id": "3c395a01-d8c9-461d-b5b9-37c9b58f0af3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "52f8abe5-f3ad-4462-bda6-46a3e9da0e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236e7d98-26a0-4101-b2da-1184cce1ca80",
        "cursor": {
          "ref": "5215acdc-c47a-4292-a537-7045b83c2e34",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "38eb1786-5eb5-4fbb-8ed6-15aeacfc5df7"
        },
        "item": {
          "id": "236e7d98-26a0-4101-b2da-1184cce1ca80",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "92f10353-6e53-4ad6-957b-8b4c945569d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e20af2-aa5b-412a-a6ae-00794ad46a44",
        "cursor": {
          "ref": "664e955a-af5c-4e8a-a4aa-4ac818b5383b",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6d2fbd2d-548d-4ef0-b8e5-076ebe95cd1e"
        },
        "item": {
          "id": "18e20af2-aa5b-412a-a6ae-00794ad46a44",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0470b86c-5b5c-4a14-82ab-a32042d19676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2625cff-331c-4c45-a8d5-86bc0ffe8825",
        "cursor": {
          "ref": "9b1bfe48-29d3-4afb-8019-d1703d049427",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4dd23c4f-ab85-4b1c-a0c5-a9ba78ec0735"
        },
        "item": {
          "id": "c2625cff-331c-4c45-a8d5-86bc0ffe8825",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5074679c-8dd9-4068-b908-a00274125c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82483fee-e24d-433a-9b7f-a25fe5d6de0e",
        "cursor": {
          "ref": "0cfb7b7b-60ed-4347-b9d2-34835f1d7938",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "88430855-cd6f-4939-8dd1-b8ed0c2a2043"
        },
        "item": {
          "id": "82483fee-e24d-433a-9b7f-a25fe5d6de0e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a91641e0-cc53-4e6b-9c06-50fd50c4ec4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7817fb-4f67-4c9a-a188-d302cc37e629",
        "cursor": {
          "ref": "741e379b-073a-46b2-b370-00f2fc120de3",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "441fb125-9e99-44f7-9896-37b6eb841e0d"
        },
        "item": {
          "id": "5d7817fb-4f67-4c9a-a188-d302cc37e629",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bdfe55ee-f9fe-478f-9d45-fd3ac1096271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ba096d-24b7-488b-9050-63be1cf88dd2",
        "cursor": {
          "ref": "0951eb83-26ff-415d-88dc-1262d482eb98",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9dd76c76-1cc3-4fff-be23-357048d65e30"
        },
        "item": {
          "id": "00ba096d-24b7-488b-9050-63be1cf88dd2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "abb1f8b1-17ab-46ab-a8b8-90e3b7ffd9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49a8cc0-b4a9-474c-865c-fb56afd5dd44",
        "cursor": {
          "ref": "44ae89f0-3228-4ed8-9768-70e253405aac",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f9ca6612-224f-4b96-a215-e3d6361a1efb"
        },
        "item": {
          "id": "f49a8cc0-b4a9-474c-865c-fb56afd5dd44",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f8fd7c02-9ed8-4a29-a979-f13d98a3c93a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d33c09-113d-4373-ae38-ca5a2f9bce66",
        "cursor": {
          "ref": "e554774c-00ee-4534-be68-8f49eeb6e694",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ee42130f-4f75-4857-bebd-7d7b784d0c33"
        },
        "item": {
          "id": "a5d33c09-113d-4373-ae38-ca5a2f9bce66",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e2bf43fa-4ef4-4124-9cbe-8700a1ed352a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20cc7fca-751d-4a09-b054-5c1ff1c29c67",
        "cursor": {
          "ref": "8150b784-c82f-4364-9b82-50c41a84b70a",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a07b839a-bd9c-45fd-99eb-3045102decce"
        },
        "item": {
          "id": "20cc7fca-751d-4a09-b054-5c1ff1c29c67",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "91049139-acac-4235-b421-4d19ee705d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d669d6-e6e9-4f37-bacf-b9edf155091a",
        "cursor": {
          "ref": "648581c6-7615-42d9-9e33-f22026ff517b",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4243bd33-aad4-47b7-a561-90859e552118"
        },
        "item": {
          "id": "87d669d6-e6e9-4f37-bacf-b9edf155091a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0e0eb411-e0ee-4b4f-bcc4-03d79468154d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d32aabc-51b6-49fd-a945-c9a47140f1ec",
        "cursor": {
          "ref": "5e65f1d7-ead4-4dad-b91c-75c781217ee0",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "49c6ef3a-8e50-4f26-a29c-4c51928b14ed"
        },
        "item": {
          "id": "1d32aabc-51b6-49fd-a945-c9a47140f1ec",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0a9865d9-bec7-46ee-9b8f-57ab315c69b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc75aa5-7acd-42b8-977c-0ed56f699706",
        "cursor": {
          "ref": "c64baa9a-619d-4f4b-97dc-5cc57ef284e0",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ea8fc817-0934-4e63-bd3e-901907a7b07d"
        },
        "item": {
          "id": "fbc75aa5-7acd-42b8-977c-0ed56f699706",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "204cdafc-98b4-42fa-8f16-36f90d842e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23a04b7-2f2d-40a7-8b7d-f494819fbc73",
        "cursor": {
          "ref": "0a6d8002-9226-44f3-84fe-6a0a84292e70",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4361b2b0-585f-4696-9382-51d29b17cf4f"
        },
        "item": {
          "id": "f23a04b7-2f2d-40a7-8b7d-f494819fbc73",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7917a294-0e5f-41f5-b06a-d549775537b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0020e5-7cf6-489f-8f3b-0f6c659e29bd",
        "cursor": {
          "ref": "48cbbc33-699f-4b7a-a1db-d119937391b1",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1e6c2b3e-142d-476a-9fe6-d99b72a41458"
        },
        "item": {
          "id": "ef0020e5-7cf6-489f-8f3b-0f6c659e29bd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c3286792-2914-4c1b-88c5-f130045fde8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f6b589-8e86-4434-9740-18de9b23891c",
        "cursor": {
          "ref": "aa1b6247-e540-49d1-8d50-ecc31b184c24",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "662b272d-acfc-490c-8321-130359cb1177"
        },
        "item": {
          "id": "71f6b589-8e86-4434-9740-18de9b23891c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9d242390-061c-43b8-a1a3-8e69fbf5cb65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4203c6-9fc1-48a1-b9cd-d51be195c6c4",
        "cursor": {
          "ref": "290abe83-1320-4ae4-84c5-e80f0723795b",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "00c8fbab-3d3b-4239-94c9-7a441b6887c6"
        },
        "item": {
          "id": "9b4203c6-9fc1-48a1-b9cd-d51be195c6c4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8c58859e-68c7-43da-a212-b73afb3ec319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eebdcfd-1193-4776-b75f-4b0e6bbc12a7",
        "cursor": {
          "ref": "f2d054b1-9b76-4904-ac0b-f76311e33053",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e9fa5218-5ed7-4d0a-8fe0-1c3765fd42a7"
        },
        "item": {
          "id": "1eebdcfd-1193-4776-b75f-4b0e6bbc12a7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5dcb0fa3-6152-43cc-93ed-38534d430cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe235c9-6372-432d-833b-69b4a4ceba5a",
        "cursor": {
          "ref": "330a1a5d-8b78-45d4-9d0d-5db77849151c",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "062158b4-b612-4542-ae7d-4d9c8e20dcbe"
        },
        "item": {
          "id": "fbe235c9-6372-432d-833b-69b4a4ceba5a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "945f3cd7-6d3f-4dbc-9a65-7f6f09206215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69192a70-7074-43e7-9006-6cb372328011",
        "cursor": {
          "ref": "d8bfa422-b4f1-4543-ad37-790305363b20",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bfeb90f4-60e8-44c5-beb6-9fc5c9f49fd7"
        },
        "item": {
          "id": "69192a70-7074-43e7-9006-6cb372328011",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e9d3930c-7f4f-40ef-b5f0-35d8228ead1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e324cd4d-63a5-438a-b1fe-b720cb64ef12",
        "cursor": {
          "ref": "90ffeded-b20e-46e0-9183-d168cfd28ef7",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7e626b8b-748d-4b0b-ae6c-6266fa6ed95a"
        },
        "item": {
          "id": "e324cd4d-63a5-438a-b1fe-b720cb64ef12",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6235acea-86fc-4b25-89d6-08241faadeaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c707510-88db-4c95-8361-323e2d3ba1bf",
        "cursor": {
          "ref": "9f2a8c0b-79f6-4859-8430-00757d35838b",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "972979c1-24d1-4068-adc2-25c8fc695600"
        },
        "item": {
          "id": "1c707510-88db-4c95-8361-323e2d3ba1bf",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9020f772-c972-433b-aa74-c29a8bf5b88b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1366aa27-f68f-432e-b68c-f8ae1596ffc3",
        "cursor": {
          "ref": "7a889c58-a963-4bcd-bfb3-fc03c6ce41e8",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "483944ed-d226-4f78-98b9-177e207eabcd"
        },
        "item": {
          "id": "1366aa27-f68f-432e-b68c-f8ae1596ffc3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1a4e078f-af4d-48e9-bfa9-4feb5a7e86a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8395752-6ac1-4e60-a7ff-37878498502c",
        "cursor": {
          "ref": "bb38b348-e78e-4d6c-abf7-d93e284acbb9",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "aa82dac3-4c2e-4ac5-acb7-770cb159cf13"
        },
        "item": {
          "id": "b8395752-6ac1-4e60-a7ff-37878498502c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b53433d9-7ec2-4482-b733-2bb0837aaf7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efbb2d93-e49f-4afe-a7be-329c231b5cbf",
        "cursor": {
          "ref": "ee4d9414-f621-4442-b197-2cdd89a0247d",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5ef99b61-64ab-41ce-ba53-7f2c31e2af5d"
        },
        "item": {
          "id": "efbb2d93-e49f-4afe-a7be-329c231b5cbf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2a50db58-d6e5-4b0a-872e-4cf89d9dd834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6deea7-a37d-4d8f-b28c-2b3de55855cd",
        "cursor": {
          "ref": "382850d7-3639-4ddd-85fa-e0e519b0b69f",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "46ff75e7-aa9d-41e7-b428-6208374f99eb"
        },
        "item": {
          "id": "3b6deea7-a37d-4d8f-b28c-2b3de55855cd",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e70c59ab-735a-4902-b5a1-daece7af43ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb9c021-91b9-4faa-b39c-7f7a5d4bd7f4",
        "cursor": {
          "ref": "a43ccd40-38f5-401f-81b5-17ed8e9c9a0a",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f71d6dea-b559-42af-b90b-b49f3fef0a3a"
        },
        "item": {
          "id": "3cb9c021-91b9-4faa-b39c-7f7a5d4bd7f4",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9c4b782b-7946-4bc5-bac7-a3f9e758d956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5d1001-b246-480e-8ec9-c127aa12fe71",
        "cursor": {
          "ref": "2dc5b2ad-6490-41a9-a571-f77661316d17",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0aa19184-1be6-4d53-8d95-b94dbc78cbfb"
        },
        "item": {
          "id": "ff5d1001-b246-480e-8ec9-c127aa12fe71",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "410018d2-e2f5-4527-b028-b48ba5011c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4805f464-8661-4473-a078-0791292e6e6e",
        "cursor": {
          "ref": "0cee6848-e010-48b1-be18-ee2b5cf36d8a",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ab61f78e-7787-4753-932d-bac012d2237d"
        },
        "item": {
          "id": "4805f464-8661-4473-a078-0791292e6e6e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2175b671-92de-4023-a9ab-5b373cd4fdad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ee9013-1b16-4509-afa1-9c2bfa3057d0",
        "cursor": {
          "ref": "b2cc5d66-cc08-4d6a-8781-068f8ed2cad6",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "822abf55-b4f6-44e8-ae37-c19a5e2b26b0"
        },
        "item": {
          "id": "91ee9013-1b16-4509-afa1-9c2bfa3057d0",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2d4255da-eb3c-4935-96d3-e39c84761ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236f62ae-dda4-4b4a-a90b-92a79f8afef9",
        "cursor": {
          "ref": "35f7e9a7-5067-49be-aa7f-ace3d81d3d7e",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4089c8d0-9bf0-4950-9ab9-9b55909d2591"
        },
        "item": {
          "id": "236f62ae-dda4-4b4a-a90b-92a79f8afef9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b688eee9-ac45-4dd2-9792-93c2350aed9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e30d43-4f48-4272-9815-076d4336ccbb",
        "cursor": {
          "ref": "29396314-fcbe-4507-b799-578d2979942d",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a23090b8-f461-486c-b1cc-763b96672bdd"
        },
        "item": {
          "id": "f4e30d43-4f48-4272-9815-076d4336ccbb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7db8039a-7082-4d8c-a64b-85876c2d6c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40b0f56-d38b-4b33-aa12-7d849eb3635a",
        "cursor": {
          "ref": "dc74828b-ac4e-42d6-a966-bd7f677c5149",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "82e35f77-cb03-4d8a-876e-61677eb0605e"
        },
        "item": {
          "id": "e40b0f56-d38b-4b33-aa12-7d849eb3635a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "29c03bd2-748c-46b7-aeed-54d67b537a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57911c51-c3ca-4b9b-810b-fb2efecce524",
        "cursor": {
          "ref": "9d547afc-9495-4aa9-9c80-cd12132fad9a",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "417a10d3-2447-43b9-98ca-ece63f75e516"
        },
        "item": {
          "id": "57911c51-c3ca-4b9b-810b-fb2efecce524",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8d265c63-f35d-4211-b36a-bbd1ec425b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd8d61c-8a0c-4670-9814-e36a23dd5234",
        "cursor": {
          "ref": "9657d8fd-7f53-45f9-bf88-b71474c41c93",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6d09f842-4bc0-4772-88d0-4e8cb2c7c27c"
        },
        "item": {
          "id": "6cd8d61c-8a0c-4670-9814-e36a23dd5234",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2b54c636-c532-4abc-a8a4-ea11d9e0bb08",
          "status": "Created",
          "code": 201,
          "responseTime": 459,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "736b9f1f-641e-427d-a895-a81b280813c2",
        "cursor": {
          "ref": "6f4b2da7-3d68-4e75-9216-c11fed3c5c71",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ccfdaf9e-bb6c-4b1e-a7f9-a3b2cf9261ba"
        },
        "item": {
          "id": "736b9f1f-641e-427d-a895-a81b280813c2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "627981ee-78b4-40d8-92e7-c3e79b8311c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc948f0-a25e-4f52-8efe-f46cfed4413b",
        "cursor": {
          "ref": "75a32f34-0c4b-49c6-9cf8-e768db640ae0",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "cf81402a-a80b-46a6-9b0b-e03b69b1a893"
        },
        "item": {
          "id": "ccc948f0-a25e-4f52-8efe-f46cfed4413b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "76011e84-1a09-4189-983a-7928f5cd4c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2bf836b-844b-40cb-a04d-2c9c37e8db9a",
        "cursor": {
          "ref": "3ea86f60-20d9-4d43-b4d4-3fb969c622d1",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "392798c2-8d04-4f00-be38-1c6240158fa7"
        },
        "item": {
          "id": "c2bf836b-844b-40cb-a04d-2c9c37e8db9a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "82a3734a-59c4-4424-85a5-98f31447071d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4753a311-958f-4ad5-9fd0-6b29c5a53249",
        "cursor": {
          "ref": "3a6dfaa7-3ce7-40cd-b480-ca7015e85783",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "fb4f7e31-b20f-46f0-bf7a-68977f4cd7ea"
        },
        "item": {
          "id": "4753a311-958f-4ad5-9fd0-6b29c5a53249",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d110392f-78b1-4438-93a5-4183956fe500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa24b37-b379-4d8a-8826-bc036a1994cd",
        "cursor": {
          "ref": "6b2460e1-fa21-4539-9e70-a5e78634c216",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d1cf7b86-016d-450d-b5c7-c5a20c70f46d"
        },
        "item": {
          "id": "6aa24b37-b379-4d8a-8826-bc036a1994cd",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4fe3a68a-1fcd-4588-acc9-878bdf61ed85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c78fe49-0240-4f77-87be-2de7c98892c9",
        "cursor": {
          "ref": "27da535f-6b74-42d5-a99f-579434e2bc57",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "28bf5fa3-7ea6-418d-a531-afd2003c8e44"
        },
        "item": {
          "id": "9c78fe49-0240-4f77-87be-2de7c98892c9",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9fa55f19-ac0d-413d-8b80-fcc33a10d3ec",
          "status": "Created",
          "code": 201,
          "responseTime": 690,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "8d416756-6a1e-4dc4-8f83-cb7afb0cecaf",
        "cursor": {
          "ref": "fbf48a37-8db9-4005-b2a2-b6e86cc55e46",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "be4d037d-c6fb-4c63-90c7-ee586541cd11"
        },
        "item": {
          "id": "8d416756-6a1e-4dc4-8f83-cb7afb0cecaf",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e815d149-0c96-41e7-8142-d38eb6843a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58b1748-7797-43dc-9038-727ca749edb3",
        "cursor": {
          "ref": "6a5b11f7-1602-487e-8df6-bba0cff7aa88",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8f1edfee-462b-4e71-9999-8a3dc2aa6930"
        },
        "item": {
          "id": "a58b1748-7797-43dc-9038-727ca749edb3",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "236bbc3b-c4f4-403e-94c9-001a53e4aa3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70635de9-3002-4b8f-a4bd-58d2285b39dd",
        "cursor": {
          "ref": "b086e223-59cf-42ed-8268-2205b6d1a57f",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e07a9229-09ea-4eda-8b82-aba7cd4ffa1d"
        },
        "item": {
          "id": "70635de9-3002-4b8f-a4bd-58d2285b39dd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c6a2fa9d-6753-4beb-b948-f6256245ef43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82e3680-04e9-4890-93f0-ff7aaad35ec7",
        "cursor": {
          "ref": "9a840b28-cffa-4d13-8a1e-320a860e7569",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2e4ecf2b-5e87-4f1e-99a6-795a16435e2b"
        },
        "item": {
          "id": "d82e3680-04e9-4890-93f0-ff7aaad35ec7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6d6b5171-7145-4679-b414-e4ea5d488b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6f06c5-493f-439f-aabc-ee351bc37d16",
        "cursor": {
          "ref": "8d3e48e6-ade1-403e-86a8-aece548843dd",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7cbe7f94-3d06-46df-85d3-c771a0f0059a"
        },
        "item": {
          "id": "dd6f06c5-493f-439f-aabc-ee351bc37d16",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "368eab14-2817-4144-baf5-2828c6c34171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23cf3fc-6fdc-4c19-88a0-64082f497859",
        "cursor": {
          "ref": "2ef717ed-fde8-4991-baeb-79e9ec738bca",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cbb80321-3bc1-4092-b072-01924575de5a"
        },
        "item": {
          "id": "a23cf3fc-6fdc-4c19-88a0-64082f497859",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "72d402a2-d182-4d63-8dc9-9fa3e06cd8ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3745635c-5795-4407-81bc-63597586e4de",
        "cursor": {
          "ref": "891e88f0-fa6a-474d-8b11-f9be9f77f04f",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "40e65ffb-96e0-47a6-a1b0-cad4f1441347"
        },
        "item": {
          "id": "3745635c-5795-4407-81bc-63597586e4de",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b6493110-9b38-44d8-8389-2bbb22f6906d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e628a560-23cb-4015-9dbc-ef79f33bf082",
        "cursor": {
          "ref": "31f67176-ce5f-4adb-a8b9-7c8f3332175f",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bf43c228-753a-48ae-9108-bd81ded6e726"
        },
        "item": {
          "id": "e628a560-23cb-4015-9dbc-ef79f33bf082",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "583752b5-1cbc-428b-867d-007a1acc7999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb5c5f3-6374-4cc2-9059-f48b9f1d1eaa",
        "cursor": {
          "ref": "eb58c4cc-1a26-4d96-aea1-5fa72ccaf806",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "93f2c883-802d-470a-bcda-d5c28db10241"
        },
        "item": {
          "id": "eeb5c5f3-6374-4cc2-9059-f48b9f1d1eaa",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a8bb308b-a531-49c6-b687-d3c2facc972b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "27d32d7d-d747-4e60-8452-ded1dfc5b406",
        "cursor": {
          "ref": "ec74ae37-1a39-4d2a-9607-43b785c64824",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f68a1611-f337-4fd4-9022-9aa37fdafdd8"
        },
        "item": {
          "id": "27d32d7d-d747-4e60-8452-ded1dfc5b406",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0ffcd638-a1b2-4146-9eb1-75522588b1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b2e88e89-252e-4d6d-be00-c5abd1053345",
        "cursor": {
          "ref": "4d97fedf-d35e-4180-a24d-0971d02df734",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d9e3256b-bea9-4d8d-90fe-61ab9012aa02"
        },
        "item": {
          "id": "b2e88e89-252e-4d6d-be00-c5abd1053345",
          "name": "credentials_issue"
        },
        "response": {
          "id": "15eeae0a-ddc9-4ac2-8dfc-336b5b31ea48",
          "status": "Created",
          "code": 201,
          "responseTime": 365,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ae4da1-1f23-4661-b13a-74c20eb7276e",
        "cursor": {
          "ref": "9c12f859-ae6c-4d12-ba28-5dbd85d5ff13",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "bb3496aa-4bff-441d-9819-9f515fdc29e0"
        },
        "item": {
          "id": "05ae4da1-1f23-4661-b13a-74c20eb7276e",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "9607cc08-34b1-45e9-b95c-de542fc89b8b",
          "status": "Created",
          "code": 201,
          "responseTime": 1376,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3591675-b6fe-4fae-a8ae-9bec6231af48",
        "cursor": {
          "ref": "20427159-b811-42b3-81bd-4a7bd17595e1",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "96a314b5-f8f1-4055-81d1-1373ae1e87ae"
        },
        "item": {
          "id": "c3591675-b6fe-4fae-a8ae-9bec6231af48",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "98c52f0a-c093-4b57-9844-26c6eeaa1d80",
          "status": "Created",
          "code": 201,
          "responseTime": 675,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3deece8-28b5-4d41-abbc-5cf9925ee2ee",
        "cursor": {
          "ref": "6261fd12-ab0e-46ab-bd36-a86342cda003",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "681f38c9-dd63-49de-a885-b38231dff4f5"
        },
        "item": {
          "id": "d3deece8-28b5-4d41-abbc-5cf9925ee2ee",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b10c03fc-062b-4148-8cf2-e18fb2820e69",
          "status": "Created",
          "code": 201,
          "responseTime": 1543,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf2b5e5-ac92-459d-a0d2-e7f2f63daf4f",
        "cursor": {
          "ref": "42840440-0b4f-4c98-b3cf-e637579c1235",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "379c3401-dfe8-4a11-8e55-1f23341c80b3"
        },
        "item": {
          "id": "2bf2b5e5-ac92-459d-a0d2-e7f2f63daf4f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5066bd15-4ea2-419a-a2fc-0af22c89b357",
          "status": "Created",
          "code": 201,
          "responseTime": 1172,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0d30ef-9f56-4954-b813-503de07ed14c",
        "cursor": {
          "ref": "cc4e090b-fbff-45cb-a4da-5b8141c0323a",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fb838e94-a2d7-414f-9fa9-ebb05c45a6f7"
        },
        "item": {
          "id": "8a0d30ef-9f56-4954-b813-503de07ed14c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0f90b0e6-7aab-4045-b4c9-2adfd99ffeef",
          "status": "Created",
          "code": 201,
          "responseTime": 671,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06daf523-8446-4e61-95b5-0a9005f5d6da",
        "cursor": {
          "ref": "08300db7-a67d-4533-a60d-d5a3f50948be",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a512897f-1631-4772-8262-72aa99b5c828"
        },
        "item": {
          "id": "06daf523-8446-4e61-95b5-0a9005f5d6da",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "093f2500-46f2-4761-9e6d-899d358472a2",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "06daf523-8446-4e61-95b5-0a9005f5d6da",
        "cursor": {
          "ref": "08300db7-a67d-4533-a60d-d5a3f50948be",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a512897f-1631-4772-8262-72aa99b5c828"
        },
        "item": {
          "id": "06daf523-8446-4e61-95b5-0a9005f5d6da",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "093f2500-46f2-4761-9e6d-899d358472a2",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "11a2f7ae-d15a-4f26-ae54-ff462ebd1e26",
        "cursor": {
          "ref": "5d7b4401-7a66-479c-8be3-34dda66d0c22",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d17ce983-1af7-40b6-92cb-27f80812f689"
        },
        "item": {
          "id": "11a2f7ae-d15a-4f26-ae54-ff462ebd1e26",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "79d93bc4-8fff-46ee-887f-dabdbde02e07",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "2f3c37e4-0a4a-47e6-bfd3-3411058b4289",
        "cursor": {
          "ref": "db7f2a59-5638-412d-986c-fccdc808e001",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b6ee99c0-7a4e-4180-b735-683fed6482b3"
        },
        "item": {
          "id": "2f3c37e4-0a4a-47e6-bfd3-3411058b4289",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a2290326-b774-40c8-abf8-c212c8a73e01",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "9a16fedc-cc52-456e-9332-13fae7fecc5e",
        "cursor": {
          "ref": "504c17b6-7223-4cfe-84c3-b01ded4df12e",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b6e5a856-820a-4652-85f8-08864f853626"
        },
        "item": {
          "id": "9a16fedc-cc52-456e-9332-13fae7fecc5e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8caee093-3e71-414a-a87f-be9831c8b551",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "df5b364a-afc8-4d9a-b7e7-895e4750e876",
        "cursor": {
          "ref": "8fa282a0-651d-4d45-a0b7-6fecd4e19d5f",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "40c25769-bd81-44bd-8497-80b6802f94fa"
        },
        "item": {
          "id": "df5b364a-afc8-4d9a-b7e7-895e4750e876",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "844c2bd2-c458-4732-b2c3-e841d8183fdd",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "b0df751c-f0c9-4f3a-aaf0-351dc61c2e1f",
        "cursor": {
          "ref": "246eeb04-1971-4b4f-b38f-302f8d78681d",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "38114fab-d790-4088-ac33-a48422727c9f"
        },
        "item": {
          "id": "b0df751c-f0c9-4f3a-aaf0-351dc61c2e1f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "230a090a-9760-42bb-beb9-b25406a7f088",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "ea113763-62f0-4794-ab09-616533980506",
        "cursor": {
          "ref": "4907e766-b3ff-47e4-9fa0-c3bcdbcee617",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c00edb00-0a4a-4f8b-9f13-61df9168c58d"
        },
        "item": {
          "id": "ea113763-62f0-4794-ab09-616533980506",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c6dd9332-eb1c-40e0-aa21-8929f56b08c3",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "06e94b1f-d056-4175-9537-7ab2a206448d",
        "cursor": {
          "ref": "d57c717d-14ae-47db-93eb-b7e773338312",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "60f4fcbe-14bc-4f4e-b59a-0354be45537f"
        },
        "item": {
          "id": "06e94b1f-d056-4175-9537-7ab2a206448d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d3f3a877-7126-4fa8-a02b-2f1ae477a015",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "cf5f5691-dc5d-4d2e-abb9-d8bd21c2984d",
        "cursor": {
          "ref": "3fa4caad-1c6b-43f3-8d55-652709406d5a",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bbd29a14-a415-453e-ac75-6c05ff3f70aa"
        },
        "item": {
          "id": "cf5f5691-dc5d-4d2e-abb9-d8bd21c2984d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bcdf9105-d6ae-40b9-974d-bf53a06ac888",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "03ba43f6-96c1-47c2-897d-c2fc8f95b9b3",
        "cursor": {
          "ref": "5f2183e6-1d0e-4d11-999c-bbef957f45a4",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c3f52e6a-e944-46d5-a856-86b0856d1b6c"
        },
        "item": {
          "id": "03ba43f6-96c1-47c2-897d-c2fc8f95b9b3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3e8c0613-b990-434d-bf02-a88cb2dbe4e7",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "9c07683f-e752-4be6-a81e-b1f9947f238a",
        "cursor": {
          "ref": "f87bfa56-7876-4f1c-a44b-bc7261067e8e",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "5dc37ec4-38c4-46ce-91f2-0d43464b2404"
        },
        "item": {
          "id": "9c07683f-e752-4be6-a81e-b1f9947f238a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d61565b5-c37c-4539-ad29-abe6d57c5974",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "75afb16a-f2e4-4854-95a2-597d06034be5",
        "cursor": {
          "ref": "af460133-b3af-49a7-8ff1-3165890bd018",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e5c90cf7-251f-4338-9062-5bb694365c19"
        },
        "item": {
          "id": "75afb16a-f2e4-4854-95a2-597d06034be5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "89eb771f-5d06-49f8-aab0-7f36f95c855a",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "1d9d13a9-b0ae-4af2-ac84-f70793d692b9",
        "cursor": {
          "ref": "7ed5d582-4e7e-4d00-a09c-262fa3bcfa34",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "04de55ec-545f-430c-ac87-986e9d95a7d8"
        },
        "item": {
          "id": "1d9d13a9-b0ae-4af2-ac84-f70793d692b9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b0da635e-e042-425c-b22a-6714dcd2a356",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a567e595-65de-47b3-9e4d-1eea2f34acf8",
        "cursor": {
          "ref": "2810517a-37b3-4a60-9a23-802e8ab60003",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b125d7be-b1e3-4373-b1ec-61b11f7ef260"
        },
        "item": {
          "id": "a567e595-65de-47b3-9e4d-1eea2f34acf8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4879837f-e9a4-4a7a-89fb-a09d6c86478a",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "4a25e03b-27fd-41cb-8cd2-2fcf34d2c5f9",
        "cursor": {
          "ref": "027f5205-111f-4aeb-8e10-9231bad5b9b0",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e1ced1ec-15bf-47bc-a30a-7066ea4d408f"
        },
        "item": {
          "id": "4a25e03b-27fd-41cb-8cd2-2fcf34d2c5f9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e555ee7c-f79b-4d14-837b-271d7a3359ed",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "1f9d151e-09cc-45d8-8be1-9379c3d54c42",
        "cursor": {
          "ref": "6744bbc6-4443-46ca-a8ad-74e622c8a7df",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1eef715b-0a94-4b2d-9bac-cef21dd2b93f"
        },
        "item": {
          "id": "1f9d151e-09cc-45d8-8be1-9379c3d54c42",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "06edf65a-7915-443c-bffe-f8723fe5649f",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "77dd3419-b4a5-4b26-9989-dd032bc71f5e",
        "cursor": {
          "ref": "37617217-2318-46f6-8b68-a2f2bdaa630a",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6777abaf-b728-470e-9d58-bf31a929c451"
        },
        "item": {
          "id": "77dd3419-b4a5-4b26-9989-dd032bc71f5e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1cfbae98-589b-406e-b066-c688c6c9d9e5",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "652030f7-304b-4607-80a2-d051f4777e62",
        "cursor": {
          "ref": "3ffcfbcb-efeb-48b2-be9e-a743a11047c6",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "20782143-d567-46c7-8f4f-c0bf2b146905"
        },
        "item": {
          "id": "652030f7-304b-4607-80a2-d051f4777e62",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3b29b5bd-0d2c-4ec1-adb2-b110e60750de",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "1b6dab76-424e-4474-85c8-ff90db2de92e",
        "cursor": {
          "ref": "bd6b027f-0979-4bc6-8832-d892908d7a5a",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "71ba14de-52f4-4084-a47c-2cc35caa1393"
        },
        "item": {
          "id": "1b6dab76-424e-4474-85c8-ff90db2de92e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4a86d060-18cb-4138-9973-b4e0b54f81d1",
          "status": "OK",
          "code": 200,
          "responseTime": 435,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "6846e82d-9b01-424f-8810-ccac3268b142",
        "cursor": {
          "ref": "4ae62884-8a8e-4c50-9b2c-40479866c87c",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b60eb890-3adb-417d-8f6e-8ccb6afb9b88"
        },
        "item": {
          "id": "6846e82d-9b01-424f-8810-ccac3268b142",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9107599d-041d-4cd4-8105-f4db5eed0298",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "5d87d721-26d9-4378-b043-0bfe6be1eb7c",
        "cursor": {
          "ref": "f27eef06-24c9-4381-9367-503d243bccb6",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d63d3cf2-bf9a-4279-a1a9-7af3e3ab4a7e"
        },
        "item": {
          "id": "5d87d721-26d9-4378-b043-0bfe6be1eb7c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "57b3b857-2f98-4a8c-a46c-4f23e2fc9a75",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "059dd133-f493-42ea-8d9b-1585b52eb331",
        "cursor": {
          "ref": "900e9f4a-7da5-4258-b1d9-a98967cd35cf",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3e4bc19e-964b-4eb1-b2f7-98cbbd67fc68"
        },
        "item": {
          "id": "059dd133-f493-42ea-8d9b-1585b52eb331",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4ed98fa0-244a-4216-877a-9e1ad7539f35",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "bce56094-d39c-492d-b37a-8e5ed4eee6d7",
        "cursor": {
          "ref": "3318a506-0780-48eb-bf4b-460c67589855",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b5aaad91-823c-425b-80ca-eea955329a88"
        },
        "item": {
          "id": "bce56094-d39c-492d-b37a-8e5ed4eee6d7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3ab469d4-ab4e-4a28-8d2d-a830b07164a5",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "49a08397-d1dc-4ae9-8b10-05cb02a13c3d",
        "cursor": {
          "ref": "fa8f827a-5d84-422d-ade0-19e5cc22ce3a",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "25ad3594-0b4b-47c9-889d-2e29603f1ce8"
        },
        "item": {
          "id": "49a08397-d1dc-4ae9-8b10-05cb02a13c3d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c8922e3f-2e53-48c2-82d1-8a3f7bb7ee10",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "90074972-c3eb-4577-9950-507bfe1066c6",
        "cursor": {
          "ref": "812da4c9-1711-4f54-8fbf-354f21c93b07",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "196252fc-4bbe-48d8-a330-89e2c570ba88"
        },
        "item": {
          "id": "90074972-c3eb-4577-9950-507bfe1066c6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "abb3683e-d0a0-44bf-9216-dbeafc16298e",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "e3226b3e-d2d1-4d55-b6a2-1562e3e05106",
        "cursor": {
          "ref": "aa499216-92bf-4317-82c5-87ff93cf2160",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c138b0a0-75c4-4f19-9eb1-9d14491383f1"
        },
        "item": {
          "id": "e3226b3e-d2d1-4d55-b6a2-1562e3e05106",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cec8a17b-a614-4859-a8e3-0ddbcc8d82c1",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "472a4d88-e5bf-4332-b798-e9fe4163236f",
        "cursor": {
          "ref": "49eb4ccf-003a-47f6-a2a0-8aff0359f036",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "76802947-5b0f-4cb2-abbe-7f880a2ffcf1"
        },
        "item": {
          "id": "472a4d88-e5bf-4332-b798-e9fe4163236f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "30b61ac9-7a98-43e3-b9b0-64728ab8d5c4",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "f7034068-a3b2-422d-bb83-c883457edc3b",
        "cursor": {
          "ref": "0e59d9df-47f1-4a4d-8d46-408bf4e1b962",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "18f8f632-3746-4d7b-a492-0f199407e917"
        },
        "item": {
          "id": "f7034068-a3b2-422d-bb83-c883457edc3b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "913c37ff-3902-4fe7-a9a2-96aaf5235027",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "18e23407-90de-44b4-95de-a62daaa31431",
        "cursor": {
          "ref": "5d1b7ccd-af6c-4456-8a11-fb7c147f18a5",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "289bde13-197a-4408-8bda-a8ac186e4798"
        },
        "item": {
          "id": "18e23407-90de-44b4-95de-a62daaa31431",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "30579c74-1422-4987-86b6-af663f57631b",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "9c539392-339e-40a6-8959-ecc4c96cb8db",
        "cursor": {
          "ref": "4de39364-41bb-4369-86cc-0bcfbeb71d6e",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6a41699f-34b2-44ec-a204-baa2b0e0a789"
        },
        "item": {
          "id": "9c539392-339e-40a6-8959-ecc4c96cb8db",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "dc19e2ce-cf2b-462c-aa84-b8ff92a48951",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "89fae341-1947-42aa-9e60-e56381eae57b",
        "cursor": {
          "ref": "f73873ef-6c8b-43a3-9550-29f8d1a72a97",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "177c6b01-7c81-457d-b7b7-02aada50f70a"
        },
        "item": {
          "id": "89fae341-1947-42aa-9e60-e56381eae57b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f1f52712-8e72-4331-9c6d-e6f8063d4167",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c9649be9-7398-4cfe-80f4-e1991648ab5b",
        "cursor": {
          "ref": "5cf5ed45-2d75-4ee9-a29a-39143e9ad307",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8a96646c-5ec6-4c01-84c3-da82fe30a799"
        },
        "item": {
          "id": "c9649be9-7398-4cfe-80f4-e1991648ab5b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "91b537e5-3dfa-415d-9870-e5167a3eff83",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "2cee3f37-c7a5-4984-ba10-2593a41d92c9",
        "cursor": {
          "ref": "40838544-8113-4908-bd12-b9c9fbb91ab7",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "89e8829b-fe0c-4a61-b587-2a5acb32db86"
        },
        "item": {
          "id": "2cee3f37-c7a5-4984-ba10-2593a41d92c9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "476401ee-35b7-4a7b-806f-5ac377d0f658",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1d2418-4ff0-4f9d-b5d2-8e0c96b59801",
        "cursor": {
          "ref": "d382419a-ba0b-4680-bb30-3194742f6418",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "88a43032-2887-4b6b-b7ba-7e0d1cb0e55b"
        },
        "item": {
          "id": "fb1d2418-4ff0-4f9d-b5d2-8e0c96b59801",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d651d6ae-1d5f-44b3-8087-f46edfe8fc9c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 389,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55a5111-3d66-4519-8988-561d070e0275",
        "cursor": {
          "ref": "5503f558-2873-44b9-b077-5a47913dec35",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d237bdcd-a211-4079-8a45-79cf0af799df"
        },
        "item": {
          "id": "b55a5111-3d66-4519-8988-561d070e0275",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d88ebb21-0bc4-4b4c-9b9c-23f65b748f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55a5111-3d66-4519-8988-561d070e0275",
        "cursor": {
          "ref": "5503f558-2873-44b9-b077-5a47913dec35",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d237bdcd-a211-4079-8a45-79cf0af799df"
        },
        "item": {
          "id": "b55a5111-3d66-4519-8988-561d070e0275",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d88ebb21-0bc4-4b4c-9b9c-23f65b748f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6524bab5-f553-47c4-8002-22a75cf4ffab",
        "cursor": {
          "ref": "a1f2295c-76a3-44de-bdd7-0352b9584272",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "420dccfc-e1ff-4dd0-acae-35ddf7861f17"
        },
        "item": {
          "id": "6524bab5-f553-47c4-8002-22a75cf4ffab",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f2da9ea4-a0ee-4f81-abfb-347c0da99257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb7bd6b-7967-4d9c-8cdf-2a58b804fda4",
        "cursor": {
          "ref": "554385d9-f984-492d-b6e6-c451acc05989",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ff3ed4f3-e771-4d0d-a969-0ac4c15684fa"
        },
        "item": {
          "id": "ffb7bd6b-7967-4d9c-8cdf-2a58b804fda4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0d7e9708-f130-4616-bb94-3382c6153f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab579f7-7ad9-43d6-8454-cbd7c86cf3fd",
        "cursor": {
          "ref": "68a93862-40eb-4562-82b3-5c57ae34c7a0",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4c9156b4-df0f-49d1-ac36-812878ef63e0"
        },
        "item": {
          "id": "3ab579f7-7ad9-43d6-8454-cbd7c86cf3fd",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5170f993-7328-4410-915b-bd3310bc475d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304d57dd-5f13-4482-a710-751eb97c81ab",
        "cursor": {
          "ref": "99947ba0-c713-42da-9029-b56a0c407353",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ecf5aae5-87b7-4c3c-8eeb-f2d53ad327dd"
        },
        "item": {
          "id": "304d57dd-5f13-4482-a710-751eb97c81ab",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0275884f-fe1e-4b9b-b3ec-420c5db97eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c186f078-2ac7-430c-b5a5-ca87d5a6fafd",
        "cursor": {
          "ref": "81e94d18-ed76-48fe-a962-be9d75842047",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1e37eded-66f7-493b-b39b-49e1738e50f0"
        },
        "item": {
          "id": "c186f078-2ac7-430c-b5a5-ca87d5a6fafd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4c9da90e-8008-4b9a-b261-f2220070bb58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "199fc5a2-4fe1-4d6b-a39a-71a5332f0a37",
        "cursor": {
          "ref": "a04ac0fb-439d-4270-b3de-febe14e56b87",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c6523434-1de1-4644-97eb-30867f6e50f9"
        },
        "item": {
          "id": "199fc5a2-4fe1-4d6b-a39a-71a5332f0a37",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "cd015dcc-d9ee-4ca2-b444-e901307699cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5b8be7-88b2-4fd9-ae21-0cab7fb94842",
        "cursor": {
          "ref": "57ec686b-7474-424c-8217-c207760d9517",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "69b990c5-6960-4163-addd-b0e1ec777fcf"
        },
        "item": {
          "id": "bb5b8be7-88b2-4fd9-ae21-0cab7fb94842",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "82dddff5-20bd-4287-afb3-e230af225324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe0fc37-e30f-4866-8b68-d6fff314ea16",
        "cursor": {
          "ref": "726808c0-997a-45a5-a008-7bf31a567850",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3989d3e5-8dbf-48ef-89f1-52ef62b3f485"
        },
        "item": {
          "id": "2fe0fc37-e30f-4866-8b68-d6fff314ea16",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d3d27211-7252-4841-a4d3-b288f9f9c885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc21f75-4fb8-48eb-a419-a8b0daebfad9",
        "cursor": {
          "ref": "79c7c446-8e26-4360-ba29-8cc012f54744",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b5260f75-3c40-4fe4-8659-c038d5d60a13"
        },
        "item": {
          "id": "dbc21f75-4fb8-48eb-a419-a8b0daebfad9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c17b5b7f-fe53-4634-a732-0e3a072f43d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779dc55b-4282-4dc1-a166-9e44a0dc7121",
        "cursor": {
          "ref": "0d29c3e6-7c52-4081-bfe7-646b5fb98c5e",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d96f9328-d56d-4587-8aa3-cfcd6c6086ea"
        },
        "item": {
          "id": "779dc55b-4282-4dc1-a166-9e44a0dc7121",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "252624cc-0836-4dfc-9a81-f384a871a313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1002b2-7f4c-45e6-8b6f-e4b70a32d8d5",
        "cursor": {
          "ref": "f765781f-dcdc-4218-9b2e-61afa84c5e83",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "73e64f45-9626-4bba-99a6-ee9bfc629427"
        },
        "item": {
          "id": "5d1002b2-7f4c-45e6-8b6f-e4b70a32d8d5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "64a18fbe-e9a4-48bf-8edf-1d231f9442ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d556a998-bf58-4fe3-8aad-e57636d49952",
        "cursor": {
          "ref": "2f646723-544e-4665-a6bf-7175faeee2e8",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "aafce81a-4f33-4721-a002-ec0d07dfa34f"
        },
        "item": {
          "id": "d556a998-bf58-4fe3-8aad-e57636d49952",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "048ec170-e8bb-408d-9543-e5126794ed9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12eadb32-2a72-4da2-9504-935a2fb514f6",
        "cursor": {
          "ref": "e1b26ab4-8a33-4663-9d71-06eafd7ebfbb",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "69999760-2b31-4a06-983b-15ffc2aae404"
        },
        "item": {
          "id": "12eadb32-2a72-4da2-9504-935a2fb514f6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "cf64a394-5acf-47b3-a848-3133e0358f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1090b6e2-c8ef-43b8-8db5-8ae09a2960e7",
        "cursor": {
          "ref": "a2140e7d-25b3-427d-aeec-02de1776e1d2",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8c4e043f-f9ad-4881-abef-52f34d659c78"
        },
        "item": {
          "id": "1090b6e2-c8ef-43b8-8db5-8ae09a2960e7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d000af13-510b-48b2-9551-e61317d73768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1c1b39-40a5-45b6-a52b-e9c7d5b9da90",
        "cursor": {
          "ref": "996c1bea-74e1-4eea-aced-56cff4873e71",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c74260b3-8cb5-491d-81c0-6e9efad1db64"
        },
        "item": {
          "id": "1b1c1b39-40a5-45b6-a52b-e9c7d5b9da90",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0558add9-bc72-47a3-b231-4bf7e5bdf920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3852b259-9559-4c30-8972-5b35df34ca1f",
        "cursor": {
          "ref": "00d4ccba-e8e1-472d-952f-501ad7d25e12",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f76eb5ca-c100-4f82-b992-fcf83d1e9666"
        },
        "item": {
          "id": "3852b259-9559-4c30-8972-5b35df34ca1f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "58d400c8-4d24-49a3-80f4-b2ca81d59b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc408e3-b669-46a5-8faa-ea91d6a1d3c1",
        "cursor": {
          "ref": "7b55beaa-068b-4058-ae89-b21f167ac084",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "29aab62e-f20f-4712-96b8-5e53d9be9b81"
        },
        "item": {
          "id": "0dc408e3-b669-46a5-8faa-ea91d6a1d3c1",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7d97133d-f480-42a6-a357-49394c7beee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 526,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067b9717-6329-43e5-b4f9-61077fd4dcd5",
        "cursor": {
          "ref": "5b367e98-c41e-46f8-b6d6-a081d03b4020",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "cc2d516d-3aaa-473f-a721-128ff8041bf9"
        },
        "item": {
          "id": "067b9717-6329-43e5-b4f9-61077fd4dcd5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "af5c0d5d-f5af-4b7e-beb1-f3a47ae50a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e6acb3-81c6-4658-8920-edef6d92cf7a",
        "cursor": {
          "ref": "4296a123-70b4-450b-8d2f-205169279b8c",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f0605744-08d1-4f75-8b93-c338ded3ca25"
        },
        "item": {
          "id": "22e6acb3-81c6-4658-8920-edef6d92cf7a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "30466f78-72f4-4fea-95f0-d90679beb8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38b1287-7a09-4946-9c75-4960dcd063e0",
        "cursor": {
          "ref": "48521181-edb0-4c7a-a505-addd8bdfedbc",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b4994d34-2410-4837-87b9-add051caa10a"
        },
        "item": {
          "id": "e38b1287-7a09-4946-9c75-4960dcd063e0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "66691cd8-2880-4a4e-84a0-64e66b874185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95bb4e42-3ea4-4b88-98f5-12c3e3b8300b",
        "cursor": {
          "ref": "4d09f927-21e1-474e-bd47-90574cbb5628",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "db2bd41a-a44c-417a-a670-a8f93dcafa77"
        },
        "item": {
          "id": "95bb4e42-3ea4-4b88-98f5-12c3e3b8300b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1c63c341-5d44-449e-82fd-46ba65c40f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 399,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43df6788-8335-4715-ba11-82de14079356",
        "cursor": {
          "ref": "0f923b7d-a981-46fa-bd34-819d495ad56e",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "384eacc8-fae5-4a2b-ae8d-4fd7b1e6bf04"
        },
        "item": {
          "id": "43df6788-8335-4715-ba11-82de14079356",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9d6dbaa1-3c3f-47a6-860e-c7da10620f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 321,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522b41df-db0b-4515-acc9-d72fccc51b5b",
        "cursor": {
          "ref": "fdb5a24c-dc38-43ae-895c-d57888d2469a",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f1cc7509-a34e-4562-ae6c-822342950cef"
        },
        "item": {
          "id": "522b41df-db0b-4515-acc9-d72fccc51b5b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ef3b12b7-7729-4375-ba1c-8b6f885855a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ac30bb-641c-4893-ae44-60a3f1d3e7f9",
        "cursor": {
          "ref": "189f8bb3-a894-4c9e-8b55-3d550a9a6094",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d265ac96-9f12-4bb8-b4bf-8d1c6eee5182"
        },
        "item": {
          "id": "03ac30bb-641c-4893-ae44-60a3f1d3e7f9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7fedb3ab-4a8e-42b7-905d-1b9305bd9218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5562b10-347d-40a8-9697-e69114967e62",
        "cursor": {
          "ref": "94d76d4d-c80f-4c05-9103-845831e6c1ae",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7de77339-64c3-4829-8636-d8f960603b4d"
        },
        "item": {
          "id": "c5562b10-347d-40a8-9697-e69114967e62",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9f5b5501-305a-44d1-8b9d-43270db95061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3bd54a-c0fc-4969-872a-da9b50b70c8b",
        "cursor": {
          "ref": "9b556f0a-4475-46c4-b32c-95a7b0b1e800",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5d895092-d69b-48de-96e7-d3cbea6ea3a9"
        },
        "item": {
          "id": "4f3bd54a-c0fc-4969-872a-da9b50b70c8b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "88953e0f-0a5e-410c-ae92-fd6d0f3dfd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962a21d9-637c-4b5f-ab60-8e6988ace240",
        "cursor": {
          "ref": "d51f1b99-6b2b-413a-915a-52ddef749035",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d50b8275-3476-4aa5-b1de-13112340fee9"
        },
        "item": {
          "id": "962a21d9-637c-4b5f-ab60-8e6988ace240",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a339630a-6db6-43bf-9ce1-533d5948a920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f05efd11-18a3-4b28-8d14-1ceb0c730e34",
        "cursor": {
          "ref": "07a30b21-f443-4926-b6fc-92ce67b2c613",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1ca523d7-5cb0-453a-b97d-4526d5cf9598"
        },
        "item": {
          "id": "f05efd11-18a3-4b28-8d14-1ceb0c730e34",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "85cbf8c3-b14e-4f0d-9291-a287bfeadc87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d895df-1d70-4601-9352-98a6f57bbf59",
        "cursor": {
          "ref": "3360a64a-07bc-49fe-a58a-dc3063e9d1e3",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a6af05c0-484e-45a2-8d5c-93fa731e1fef"
        },
        "item": {
          "id": "26d895df-1d70-4601-9352-98a6f57bbf59",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5a44aead-02e6-49c9-90cf-10f4ff9fbab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06ecfc4-4964-46e5-9504-fadf5564f185",
        "cursor": {
          "ref": "d9a22cde-13d1-4c4b-9a46-4abdf0589ec5",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "52faf084-be51-4eb5-8236-182629c2b520"
        },
        "item": {
          "id": "a06ecfc4-4964-46e5-9504-fadf5564f185",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "28520520-79e7-4f27-81b5-decadd09f70a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de8f98b-2b53-4057-a9d1-b38a7b839982",
        "cursor": {
          "ref": "50bf2383-abcc-4cf8-8505-38c6b51eca22",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3277cadf-c86f-478c-9380-e344a79e0af0"
        },
        "item": {
          "id": "8de8f98b-2b53-4057-a9d1-b38a7b839982",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3c80b094-a5c1-403d-9475-d2dcde19c4e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f39aec4-1af6-4f7b-8c0e-6a7eedd97799",
        "cursor": {
          "ref": "fca38d68-a8a2-4e97-ac18-053f257ab8a2",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b00f329b-ee9b-49b5-b2e4-72224088c4ec"
        },
        "item": {
          "id": "5f39aec4-1af6-4f7b-8c0e-6a7eedd97799",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6c177dba-597f-4cc9-9c91-e0af6ed53830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1da0720-baa9-4268-9a80-f3e09669ce3f",
        "cursor": {
          "ref": "a696674d-d6d6-4d32-a4a5-047cfe51bb76",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "25a6bf23-50c0-408d-b3d6-884aec86b626"
        },
        "item": {
          "id": "e1da0720-baa9-4268-9a80-f3e09669ce3f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "38439b80-182a-4b1c-a30d-3f40bbeec813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a686faa-6cd7-4ccb-bd5b-98087c877175",
        "cursor": {
          "ref": "8a3f4c0f-c8a9-48b5-b635-744885d30e6c",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fe60604e-8955-4a4b-b46e-0a9d46a4338f"
        },
        "item": {
          "id": "9a686faa-6cd7-4ccb-bd5b-98087c877175",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "61a215aa-a876-477e-a62a-1bc9f709ede4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 355,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aaf8b50-5f91-4f04-99da-b2ddd1aa7675",
        "cursor": {
          "ref": "887761be-270a-4378-b839-73d58ce92d7c",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a7b36db9-46df-4106-b507-cc168db950ad"
        },
        "item": {
          "id": "8aaf8b50-5f91-4f04-99da-b2ddd1aa7675",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "dacbdfce-eafa-4ca6-be53-a3be1ebfb8d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 418,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12deee3-40ee-41bb-b2df-5f3aa68b0c28",
        "cursor": {
          "ref": "8a0d93fb-31ed-46cc-9df1-c01be0cb5c24",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "53ba87e5-d7b1-4c0b-ac2f-b8e5584708d0"
        },
        "item": {
          "id": "f12deee3-40ee-41bb-b2df-5f3aa68b0c28",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d7efb89c-3239-4adb-86a7-2eb4e35a30c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1573,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f800922-fc51-4c1f-b1cb-f6179b79deda",
        "cursor": {
          "ref": "ab10d31f-c447-4321-a972-383cb8ce8b8f",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c31143c3-af0e-4490-9bac-594de9e52448"
        },
        "item": {
          "id": "3f800922-fc51-4c1f-b1cb-f6179b79deda",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "013cc8c9-7296-4a2e-9faf-d67e20a2ebfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae55a242-a8c6-4b5f-b59e-4076a5df42ec",
        "cursor": {
          "ref": "20e56525-66b5-4e10-96ad-af9a436ea856",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8f27afeb-fab7-4823-bad1-32d6cbea36f9"
        },
        "item": {
          "id": "ae55a242-a8c6-4b5f-b59e-4076a5df42ec",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "962fb8eb-9a42-476b-8757-bc85191ff853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 458,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851f3e7d-8a93-4d89-87ec-5bed5a9a0892",
        "cursor": {
          "ref": "1f379b60-999d-40fe-8dfc-47b88c4583fe",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2d067251-96a8-4ffd-b5dd-0b54ff8be701"
        },
        "item": {
          "id": "851f3e7d-8a93-4d89-87ec-5bed5a9a0892",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "61354711-5d51-4e16-a373-f43e9699c660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 566,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6966dea9-2815-463f-a756-37b078c5fd99",
        "cursor": {
          "ref": "191d9af4-12b0-45a3-8e83-80e942fea4fa",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c75cc729-9524-45f8-a6f0-0cb95e146824"
        },
        "item": {
          "id": "6966dea9-2815-463f-a756-37b078c5fd99",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7447bb91-75bf-4448-bb43-0dbf9238d15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 347,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a497799-b89a-4020-81e7-5b7d4edc3b75",
        "cursor": {
          "ref": "1109663e-3017-4f71-b6b3-b2a7db8b1bdc",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "01b73d2c-5997-462a-b8bf-3177b24f63d4"
        },
        "item": {
          "id": "8a497799-b89a-4020-81e7-5b7d4edc3b75",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2401a945-57ff-40df-918b-8b6704431d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2d803c-a64f-4bad-9adb-44d1c30922ab",
        "cursor": {
          "ref": "3e3d1c89-fd20-4e44-b552-0391fbd8c742",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0d05a658-4c83-4676-a7e6-2bb94c4f6971"
        },
        "item": {
          "id": "fb2d803c-a64f-4bad-9adb-44d1c30922ab",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f667375f-8768-4645-9473-ed6332f4ad7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 754,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85772e28-91b3-4a46-9d0e-f89440ef78ad",
        "cursor": {
          "ref": "46c6a755-f0ba-4de5-9ef3-95218b8770ae",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ac90057e-ffe5-43c8-a82d-c0c3e3ebfa8b"
        },
        "item": {
          "id": "85772e28-91b3-4a46-9d0e-f89440ef78ad",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "15d030fb-1897-4283-9197-8270b369ebb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 324,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41eee42b-7218-46bc-88ed-7dfa74943375",
        "cursor": {
          "ref": "1d32a530-9918-4ac7-8b4a-9dc82b397eb4",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7782867f-5c9c-4615-ac99-d11693d4b71a"
        },
        "item": {
          "id": "41eee42b-7218-46bc-88ed-7dfa74943375",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "65cb88a4-297b-4147-bf50-4520bd1f2f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 592,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08dcc832-3b4c-47f2-82e0-da7e90bde402",
        "cursor": {
          "ref": "2a0b6d95-8976-49c9-b5bd-79bc0d83d234",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b470d292-ee27-49e6-baf3-421b4109071e"
        },
        "item": {
          "id": "08dcc832-3b4c-47f2-82e0-da7e90bde402",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5d07dbb9-54a8-4d9f-895b-cff2aba4931a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 476,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8770ab5d-05ed-448c-adac-f6d2ad62ed9b",
        "cursor": {
          "ref": "1cfd6cf2-5d59-4b26-813b-e0c16094d0a5",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "60cdca7a-b239-4875-b40b-333c44e8aac0"
        },
        "item": {
          "id": "8770ab5d-05ed-448c-adac-f6d2ad62ed9b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "160f987f-8b46-41e4-b0fc-5e7934b06e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 437,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2171c43d-b42c-4e33-b4d2-d3ef670dea5a",
        "cursor": {
          "ref": "1a9e957e-7eed-4410-a6fd-eb78e42af4dc",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "020494c1-56b2-4e12-9b2d-2effdcf4fb3a"
        },
        "item": {
          "id": "2171c43d-b42c-4e33-b4d2-d3ef670dea5a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a780ba88-90a4-413f-ba4b-2b6a8f06dd43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 452,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df11e05-67a4-45f6-9f3c-bc884379cf50",
        "cursor": {
          "ref": "e73c3f92-5c70-49e9-a3ac-79a904f2bbb8",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ab347adb-6516-412f-b301-f21525712d26"
        },
        "item": {
          "id": "0df11e05-67a4-45f6-9f3c-bc884379cf50",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "57ebccd5-8098-4a15-b00a-077638c59d8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 542,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458ee601-4d06-49cc-ad39-87fdcbf864b8",
        "cursor": {
          "ref": "737db2f8-55c7-4371-9ba8-b908da4c8316",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4bd7b69b-4a9b-4ab5-8b5d-5cc2d2cd578b"
        },
        "item": {
          "id": "458ee601-4d06-49cc-ad39-87fdcbf864b8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "61b7b24a-7a46-4714-b206-bb084d21085e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0dea72-1783-4364-90d0-d498e7598fd5",
        "cursor": {
          "ref": "9649d693-7661-4c97-88a9-74e76e7e2776",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "abdf5adb-21f3-4a8e-b7fb-ac34afab8b4d"
        },
        "item": {
          "id": "6d0dea72-1783-4364-90d0-d498e7598fd5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "07d7b557-7861-4e9e-b151-eeaa5913adc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 364,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1603cc2a-9acd-4d49-9a45-a3e97b1eb108",
        "cursor": {
          "ref": "38af8578-0b28-4ef4-9ead-7ef5ec22dbf4",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "79802381-e4df-408c-871d-c6c24b21abbf"
        },
        "item": {
          "id": "1603cc2a-9acd-4d49-9a45-a3e97b1eb108",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "145c28d8-0d5e-4d7e-81f8-2c96a17cd2c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574b7819-e2ad-4f61-9f6f-b989e0bd4289",
        "cursor": {
          "ref": "85e2e926-2a57-4415-9135-bcf0e17b5ccb",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "83d6f01c-566a-4fa2-83cc-42ea0c458e68"
        },
        "item": {
          "id": "574b7819-e2ad-4f61-9f6f-b989e0bd4289",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "386f59fc-7240-475c-9605-fc4fa08cce69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1b62c8-88f2-4f7f-bf4f-a4d24ad61820",
        "cursor": {
          "ref": "d26cd0b2-1aad-4950-99a1-2a43224f0def",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e8f7f066-6bb0-49e9-97d6-c3e7ac0bb5b1"
        },
        "item": {
          "id": "0d1b62c8-88f2-4f7f-bf4f-a4d24ad61820",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "10ef870f-c4c2-4300-837b-df358344d0dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49ab067-fbbb-4970-9abb-6b340951ad3d",
        "cursor": {
          "ref": "51e3b375-1ee9-4a3d-8661-8166136da201",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "08c0ff6e-4ce4-41d2-9248-19e87f16cd22"
        },
        "item": {
          "id": "b49ab067-fbbb-4970-9abb-6b340951ad3d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "32ef0f2b-3219-4088-a333-5c4aac75650b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7bcb03b-4ec4-4a75-9490-3ace5415a8c9",
        "cursor": {
          "ref": "a8fa64c5-5c9e-4d45-a647-0699d167dbbf",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b9a964b9-f102-4892-a099-640e28cdc564"
        },
        "item": {
          "id": "e7bcb03b-4ec4-4a75-9490-3ace5415a8c9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f082f232-ffe7-4870-9257-689993b511fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6ea99b-c487-4934-ae41-3947e9ccfef9",
        "cursor": {
          "ref": "567976cd-0e63-4b88-9fae-4ed74689447e",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "10e4767a-0205-4df2-93eb-40176f552aa8"
        },
        "item": {
          "id": "0d6ea99b-c487-4934-ae41-3947e9ccfef9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "4b0bd8cd-f687-4d0f-85f4-6a7613202d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2df23e-66bd-40c7-9584-5b898d0dc26f",
        "cursor": {
          "ref": "159c6485-8d5d-4b5f-b81d-0213e93c1736",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9f20af07-5e9b-481a-9f07-c635b6642df0"
        },
        "item": {
          "id": "0b2df23e-66bd-40c7-9584-5b898d0dc26f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6c7d8921-183b-48ab-88c5-3a3834ae4934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ce0962-dd08-463e-b9e1-9aa6c76c6651",
        "cursor": {
          "ref": "afa13477-141b-4f87-b77e-981027f3b6c4",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2d597237-f6d0-4831-bd7b-656e3400e57b"
        },
        "item": {
          "id": "32ce0962-dd08-463e-b9e1-9aa6c76c6651",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e50d0835-1312-49f0-8031-63c11a1f8a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8ef3cb8-a0ab-48f3-95b9-3493080b1a52",
        "cursor": {
          "ref": "24c8a73a-88c5-418e-b177-056eca2451e5",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6811feae-ed98-4528-a83a-06007dbc5f75"
        },
        "item": {
          "id": "a8ef3cb8-a0ab-48f3-95b9-3493080b1a52",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c6ce6c87-ced7-4d83-8202-4c94c00a6c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db2522f-abae-4f91-a6ba-c7a8fd6ec54a",
        "cursor": {
          "ref": "7ae1bca4-b103-4528-9075-5fb95981b274",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c334e770-005f-402c-aaee-435e1506dcb5"
        },
        "item": {
          "id": "1db2522f-abae-4f91-a6ba-c7a8fd6ec54a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "49cd2145-bed2-486f-832c-90c15b02ab71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b68bb6-954b-444b-ad63-37bbe49c1dcf",
        "cursor": {
          "ref": "e1f6fd9c-69a8-4fb7-b651-efafaf989e85",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1a598e7a-c067-4504-b995-30c0167ce728"
        },
        "item": {
          "id": "f4b68bb6-954b-444b-ad63-37bbe49c1dcf",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c079bab1-9ac7-4a5a-8374-5864fa9653c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1948,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee46798-37e3-46c9-808f-c4c3d8969d1a",
        "cursor": {
          "ref": "0893cc86-b55e-4f87-bab7-9e32a3bb6030",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4d61b757-4734-41c6-9eb8-3d4fd6e8f0dc"
        },
        "item": {
          "id": "3ee46798-37e3-46c9-808f-c4c3d8969d1a",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "26c6ccec-758c-4849-b46d-279b27cafde6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5bdcf7-d2e9-4ba9-be55-2074ec4db7b2",
        "cursor": {
          "ref": "a418fb7c-ee25-49de-b6ee-e40fcd89c1ab",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1c4ad7a1-b249-4679-aa9f-6dfdff840b2f"
        },
        "item": {
          "id": "db5bdcf7-d2e9-4ba9-be55-2074ec4db7b2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9743e69c-f461-42e3-aa99-05c0736576f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247305e0-ffc3-4f8a-a98c-49fc84dea56b",
        "cursor": {
          "ref": "cd4c05e3-79cd-41de-8d5f-f37c9c4d383e",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c3d65a6e-d196-4393-8836-0dcc1cb6f893"
        },
        "item": {
          "id": "247305e0-ffc3-4f8a-a98c-49fc84dea56b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5bb5c844-8e7d-4b5d-b796-70b4b6efc6f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9254a295-355a-4255-9e99-6f945d74f419",
        "cursor": {
          "ref": "f3b88fd3-c31c-46d8-b81b-28e20cf26f2f",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "00361a3b-0463-4fbe-9f5f-33de5d956ff9"
        },
        "item": {
          "id": "9254a295-355a-4255-9e99-6f945d74f419",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "812c8026-3299-44c6-a391-04ee0cb94dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01031b4b-2e1c-4a54-83c4-9c2525d43ac7",
        "cursor": {
          "ref": "b6249fe1-6797-42b2-8290-8c05045262df",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "370dc273-4fcf-40a5-8e96-6df8502b635d"
        },
        "item": {
          "id": "01031b4b-2e1c-4a54-83c4-9c2525d43ac7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "28d52583-07bf-4646-93ac-9ac22b32b918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c188e3bf-e130-4242-acb8-05df441e8d47",
        "cursor": {
          "ref": "47a4e382-7231-4717-879e-fa51a3905fa6",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "85476bf4-0811-44f9-9463-673eb2a6123b"
        },
        "item": {
          "id": "c188e3bf-e130-4242-acb8-05df441e8d47",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d381a4aa-560c-47bb-8788-9624b17a6ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1859f36f-92a9-452d-bc0d-9a50d8faaf45",
        "cursor": {
          "ref": "fc704bc7-fd50-4ee4-b912-0ee21f5629c0",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1706f327-8593-4698-8099-37f22907fbf4"
        },
        "item": {
          "id": "1859f36f-92a9-452d-bc0d-9a50d8faaf45",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8772c142-94ef-4f9c-8c1c-e9caa45d5820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6d942d-d11e-41df-9723-413858c76882",
        "cursor": {
          "ref": "e0c30726-9216-4415-bad2-dbeb1ed384df",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "61d18ad2-d4d3-4d97-a467-0135708efeef"
        },
        "item": {
          "id": "1a6d942d-d11e-41df-9723-413858c76882",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f36058b9-efea-48cc-9132-7bb35be7f7c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f198b9a3-f715-4048-9236-8bfebfeade13",
        "cursor": {
          "ref": "4839f092-eedd-4d4f-81bc-f72a0d813ff8",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7693982b-bc7e-448b-98d9-d748ab8aaf3e"
        },
        "item": {
          "id": "f198b9a3-f715-4048-9236-8bfebfeade13",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2078b21b-a9ac-4a32-8119-243ecfd0ee44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a45728be-18d2-4728-afbe-5e3698e80312",
        "cursor": {
          "ref": "795a9173-37a6-4094-9287-dc0488fe3aac",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0290a0ce-7832-400b-af69-6de9ba093c80"
        },
        "item": {
          "id": "a45728be-18d2-4728-afbe-5e3698e80312",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "035be5e4-0755-484c-9f7e-3a3da0d9ed4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eded52d3-c3e8-4a61-88a6-03252a044ab3",
        "cursor": {
          "ref": "6b20941c-32e9-487b-8b5a-c171e86cbf3f",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3f34f2a6-79bb-403d-89d7-20db2bc53956"
        },
        "item": {
          "id": "eded52d3-c3e8-4a61-88a6-03252a044ab3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8a0444af-68ec-4b9c-baa0-fab5557a6a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b23f91f-2a1d-42f6-8466-0361c8cccc2a",
        "cursor": {
          "ref": "3890a149-6f52-43f5-b9c8-bb716988fcaa",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "87cbf7ee-5248-41aa-8f05-c91b87d6260a"
        },
        "item": {
          "id": "7b23f91f-2a1d-42f6-8466-0361c8cccc2a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "60968f5e-7a04-448a-af64-f275d17d80fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e99998-9fcc-4c8c-af01-377281818f3f",
        "cursor": {
          "ref": "fed18766-13df-4baa-9836-317c6a8cd350",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4686acdd-be92-4a35-b701-ae6e4949b3e5"
        },
        "item": {
          "id": "12e99998-9fcc-4c8c-af01-377281818f3f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1788728f-4687-4d78-b423-2911393c16bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092909bc-8996-4c2c-b942-57b3b3efb2a6",
        "cursor": {
          "ref": "a0323cbb-5727-4e19-9e76-599759a7f120",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "32c6cad9-35d4-4407-b642-17d23993af5c"
        },
        "item": {
          "id": "092909bc-8996-4c2c-b942-57b3b3efb2a6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0cba37fc-577c-40af-b999-10513e092d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fdb5b45-65c0-48d8-8c85-423cab1624b1",
        "cursor": {
          "ref": "c21cd672-cee2-4c28-bdb8-bc2c45a4e58f",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "067cc3ba-2527-47ed-aa5b-6112f266e183"
        },
        "item": {
          "id": "2fdb5b45-65c0-48d8-8c85-423cab1624b1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "287ee896-4fff-475f-a3a9-8fef32b30770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7ac8c2-fd62-4b28-a02c-e9a9896cc5ac",
        "cursor": {
          "ref": "324d1556-c786-42c3-bc61-f31a5f67adb7",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "25ccd2bf-73f2-4f79-978d-9690a8ae471a"
        },
        "item": {
          "id": "6e7ac8c2-fd62-4b28-a02c-e9a9896cc5ac",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1e25de01-919c-4628-8c42-1c6f05174824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03ff255-6e34-441d-88d9-5670f5b8e13b",
        "cursor": {
          "ref": "94a9cc21-f2d6-452b-b9ed-95e3d6575b56",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "62459ed1-0be0-4cb6-9e96-0b45700fcb56"
        },
        "item": {
          "id": "d03ff255-6e34-441d-88d9-5670f5b8e13b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "233c854f-7f71-483f-bb05-215cc5498c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08658403-639d-4723-9a1c-8c47e107b566",
        "cursor": {
          "ref": "74f515c1-c5c4-4560-aaf2-45f4a1c0ab74",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ac0eadb6-b747-4e12-8f23-ecf882a0d4b4"
        },
        "item": {
          "id": "08658403-639d-4723-9a1c-8c47e107b566",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "30818002-ee7f-4ee2-923e-60df581fc764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3852f5-2434-404b-bbd4-5bf9883e75c5",
        "cursor": {
          "ref": "9daec4d8-6ffc-402f-8b72-ffcf9d045ef8",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5cab561c-b6f0-40f1-a144-195cd7259039"
        },
        "item": {
          "id": "dd3852f5-2434-404b-bbd4-5bf9883e75c5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2dbb4f9a-0d7a-471c-adb6-3a73ef30952f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca32fa4f-c8c0-4e9b-b183-15e7e60adca2",
        "cursor": {
          "ref": "dc23ecac-f411-4ce5-94a8-bc3f88b50e1a",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "80014dd0-faeb-4c87-9264-01365b9add6f"
        },
        "item": {
          "id": "ca32fa4f-c8c0-4e9b-b183-15e7e60adca2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5285118d-8fb0-4bdf-a0ff-54a06fbe116f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1023,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "562303b4-2108-4e20-a634-785b99b532cf",
        "cursor": {
          "ref": "5b09652e-9f06-4d90-8531-894095b42cd4",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "95d85830-09c1-480c-b6b3-86047a84e438"
        },
        "item": {
          "id": "562303b4-2108-4e20-a634-785b99b532cf",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "af539e63-0ed7-4506-a6c7-7e60054f7a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68b2001-829a-4365-8ab3-8bc646506525",
        "cursor": {
          "ref": "f2b275a9-f1bf-4fbb-9f64-9a435a259c00",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8b0e2da0-3ab3-4f8f-9227-943b25317ade"
        },
        "item": {
          "id": "d68b2001-829a-4365-8ab3-8bc646506525",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3cbeacbf-95e5-4304-a14c-ec66822ad947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0bdeacb-b4ee-47e4-9ddd-becf6787eba5",
        "cursor": {
          "ref": "f6faffeb-8b95-44a5-b6ce-041f737a5d2d",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4da4aaaf-7f45-4600-a643-dbece581803b"
        },
        "item": {
          "id": "c0bdeacb-b4ee-47e4-9ddd-becf6787eba5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "19497bb5-1afc-4e0d-9d13-478119f7d1aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04478da7-1bc3-4d0f-85c2-c7fed95177c6",
        "cursor": {
          "ref": "1b359d1f-4f2d-4d84-901e-ae15d17785c7",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "adaf0392-4b28-422e-b24d-0740796f7c66"
        },
        "item": {
          "id": "04478da7-1bc3-4d0f-85c2-c7fed95177c6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9ea49270-4e22-49ec-9505-6ede8dca979b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc1d1af-c0e9-4540-9187-26cf72350463",
        "cursor": {
          "ref": "45005791-b66b-4ef1-9afd-7974eea2201b",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "20f8d98b-6692-4f5d-860a-d808a3988c25"
        },
        "item": {
          "id": "4dc1d1af-c0e9-4540-9187-26cf72350463",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "73eb1166-58ee-4415-b59b-d767133e59e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd1694e-bc73-4aa6-9465-83d9ef01f01b",
        "cursor": {
          "ref": "692c8541-aca5-4ea4-b7e3-a39c427d9365",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "39d1f77c-0c2b-49ec-bb65-0bc5f96532a7"
        },
        "item": {
          "id": "6bd1694e-bc73-4aa6-9465-83d9ef01f01b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0504a7e1-98cd-4e16-8906-2cf4536bb4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e38886-a6cb-4e10-893d-56d16caff9c7",
        "cursor": {
          "ref": "e65615e9-dfe7-4bc5-a447-8862902ddc96",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ac947358-ee38-45ff-a24f-c1bc12c38870"
        },
        "item": {
          "id": "f3e38886-a6cb-4e10-893d-56d16caff9c7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4dff415c-501d-4c10-b526-e63835dfee85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb6d4af-8e6d-4d8e-8875-e6bcfe527dfb",
        "cursor": {
          "ref": "5a7533c0-f75d-410b-8c0d-4c84dcc75382",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "79819e5d-c6c1-473b-887b-5713a9f353c5"
        },
        "item": {
          "id": "7cb6d4af-8e6d-4d8e-8875-e6bcfe527dfb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5d2ff0b7-9a43-41a0-92fb-9866a1d2fb7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d54544c-9501-4a3b-818e-6900d6684e52",
        "cursor": {
          "ref": "c65828ae-a78b-4dcf-a331-bda87c8d9d59",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4d99ce46-943d-4859-9c83-7de01f8b2a65"
        },
        "item": {
          "id": "9d54544c-9501-4a3b-818e-6900d6684e52",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "535091e9-cd0c-494a-8311-5efe7511ce0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9607ce-5d34-468b-8da4-cb68bf0ecc2d",
        "cursor": {
          "ref": "d54dee92-f43b-4c28-a075-3a5bd66b8276",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a6bb78f7-95b7-4371-bd70-ac47e1a51da7"
        },
        "item": {
          "id": "4c9607ce-5d34-468b-8da4-cb68bf0ecc2d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5f14f9f4-fc62-4cb7-befe-9bc443fc339b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9997af-6019-493a-84dd-95d8c20dc53d",
        "cursor": {
          "ref": "9761b29a-17a6-457d-83cb-7b930202924d",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "baf25200-246e-4c81-bd37-25fb459dfadd"
        },
        "item": {
          "id": "7e9997af-6019-493a-84dd-95d8c20dc53d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5290ed9e-bfee-4578-b1f4-8268ba4a8b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af54da23-552c-4477-9740-9b6ee605cb2c",
        "cursor": {
          "ref": "84d0b353-afa5-4b13-95a4-882fff363483",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "04c30093-c5d0-4d51-a76f-9825831d3eac"
        },
        "item": {
          "id": "af54da23-552c-4477-9740-9b6ee605cb2c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0ac7c49a-5120-42c3-a1a3-751bace538bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "648c31b1-28a7-431d-afcf-d92130b97ba4",
        "cursor": {
          "ref": "93404744-5626-4a37-adcc-a54c4d55207f",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9d3d124d-a0c4-45c7-a3d4-59e715ffce50"
        },
        "item": {
          "id": "648c31b1-28a7-431d-afcf-d92130b97ba4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5b7bd3ce-8026-4e9a-9810-e8d5b723980d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8519cd-973a-4cf3-aac8-f9c8adfa2f73",
        "cursor": {
          "ref": "cad836cf-f256-4f84-88f7-970b01df0b19",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "cf4d6fe8-510a-41e4-b572-a9ea9b07eaf9"
        },
        "item": {
          "id": "ef8519cd-973a-4cf3-aac8-f9c8adfa2f73",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "fa766d01-17ec-4fa0-8c28-8ef271bfed8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b1ec42-2464-4213-9711-a048f11c240f",
        "cursor": {
          "ref": "664c2dd6-b3e2-403b-8d3e-c9470a98c3fc",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "602b94bc-4a02-472a-8da1-375640f3ae97"
        },
        "item": {
          "id": "d8b1ec42-2464-4213-9711-a048f11c240f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "56adbe93-efae-4115-b70b-30026d54971a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9002534-297b-48d0-ab50-75b3bfc44f86",
        "cursor": {
          "ref": "8401e9dd-fc8e-4c51-ac92-64d9963de5ae",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2fdc98b8-f9e0-433c-a9df-5e563cc4f5d2"
        },
        "item": {
          "id": "e9002534-297b-48d0-ab50-75b3bfc44f86",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "dcb80635-5c5f-4671-9aff-d3ae3e7484e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0a459d-e284-45b0-b508-cb43d8141b90",
        "cursor": {
          "ref": "3e58dcd0-2924-4058-894a-f496bd4daedf",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8c1ff91a-8c42-48c0-8da8-ce663fa8ff31"
        },
        "item": {
          "id": "5b0a459d-e284-45b0-b508-cb43d8141b90",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d538903b-2aeb-42db-896b-a5e32ef0d772",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 36,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5461b9-f610-47ed-915c-2949a1b4dd22",
        "cursor": {
          "ref": "098a085e-feef-4e20-b33b-c89ee5a2010b",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "97d7cf19-d6a2-45a5-975e-bacc3d6150c8"
        },
        "item": {
          "id": "2f5461b9-f610-47ed-915c-2949a1b4dd22",
          "name": "credentials_verify"
        },
        "response": {
          "id": "91b3bc4b-4fd3-47f7-930b-cfc9fe17cad1",
          "status": "OK",
          "code": 200,
          "responseTime": 1602,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6e6551-1748-41f9-b4fa-fc215cda8b90",
        "cursor": {
          "ref": "6e3935db-b8f3-44de-8161-d2cd6431dfe1",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "537af021-851f-46ce-813e-5d9cc5318c29"
        },
        "item": {
          "id": "ce6e6551-1748-41f9-b4fa-fc215cda8b90",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "0c76f9ff-ea24-4d30-817e-519493ec6737",
          "status": "OK",
          "code": 200,
          "responseTime": 473,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d53486-f3c9-4371-a28b-1e917a749ead",
        "cursor": {
          "ref": "0fab12a5-b616-4ead-976d-62186e39ea8b",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8ea5005f-0753-4fcc-b6d3-c07531ee4c70"
        },
        "item": {
          "id": "c7d53486-f3c9-4371-a28b-1e917a749ead",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1b24e711-9cb7-42cc-9dbb-448fdf5a7f52",
          "status": "OK",
          "code": 200,
          "responseTime": 375,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07d568c-6ce2-446c-b3c3-a5c8e11dd311",
        "cursor": {
          "ref": "14cf9f14-3350-46fa-8aa8-6d0209a6983c",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c7c14395-5df1-491b-ba66-8e80ae0b7d4b"
        },
        "item": {
          "id": "a07d568c-6ce2-446c-b3c3-a5c8e11dd311",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8a6c2810-3bdd-4aab-9e8c-516f5b7dff21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07d568c-6ce2-446c-b3c3-a5c8e11dd311",
        "cursor": {
          "ref": "14cf9f14-3350-46fa-8aa8-6d0209a6983c",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c7c14395-5df1-491b-ba66-8e80ae0b7d4b"
        },
        "item": {
          "id": "a07d568c-6ce2-446c-b3c3-a5c8e11dd311",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8a6c2810-3bdd-4aab-9e8c-516f5b7dff21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07d568c-6ce2-446c-b3c3-a5c8e11dd311",
        "cursor": {
          "ref": "14cf9f14-3350-46fa-8aa8-6d0209a6983c",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c7c14395-5df1-491b-ba66-8e80ae0b7d4b"
        },
        "item": {
          "id": "a07d568c-6ce2-446c-b3c3-a5c8e11dd311",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8a6c2810-3bdd-4aab-9e8c-516f5b7dff21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2fd85c-9a72-4750-8df9-cfa445018e4b",
        "cursor": {
          "ref": "3b62d1eb-322b-4a83-9315-dd6fdc8ae877",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ff15477d-e9c6-48c9-ac80-d716d6d466a8"
        },
        "item": {
          "id": "be2fd85c-9a72-4750-8df9-cfa445018e4b",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "7da48970-2e0a-44d7-bb60-fc873242c648",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5663414d-a8bb-4e6e-88a9-d5658a569ed2",
        "cursor": {
          "ref": "29bd58ed-b93f-48ad-bb02-ff7426b00144",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a63fda7c-bfb0-45ef-854b-7a8eec9988f0"
        },
        "item": {
          "id": "5663414d-a8bb-4e6e-88a9-d5658a569ed2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1e58a6fa-130e-41b2-83fa-d268fd665adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "5663414d-a8bb-4e6e-88a9-d5658a569ed2",
        "cursor": {
          "ref": "29bd58ed-b93f-48ad-bb02-ff7426b00144",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a63fda7c-bfb0-45ef-854b-7a8eec9988f0"
        },
        "item": {
          "id": "5663414d-a8bb-4e6e-88a9-d5658a569ed2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1e58a6fa-130e-41b2-83fa-d268fd665adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "ff64953d-a99b-403d-9e5c-34c076f9b74d",
        "cursor": {
          "ref": "bbca3589-ac1a-4360-b219-feaa40537334",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d4af654f-0a10-4eb3-a4da-c819b57311d8"
        },
        "item": {
          "id": "ff64953d-a99b-403d-9e5c-34c076f9b74d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "d2bd1c32-e3f3-44e9-84be-1e785cb78f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "37539273-9429-4d93-81a4-03d718e1242f",
        "cursor": {
          "ref": "9ccf2344-9bdf-48c2-821f-75876deae568",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "226a9ef1-a69c-47bb-8fd0-d247eba223d9"
        },
        "item": {
          "id": "37539273-9429-4d93-81a4-03d718e1242f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0547487b-4f66-4075-9eb4-852dd74cb0f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37539273-9429-4d93-81a4-03d718e1242f",
        "cursor": {
          "ref": "9ccf2344-9bdf-48c2-821f-75876deae568",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "226a9ef1-a69c-47bb-8fd0-d247eba223d9"
        },
        "item": {
          "id": "37539273-9429-4d93-81a4-03d718e1242f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0547487b-4f66-4075-9eb4-852dd74cb0f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c4a784-7c50-4f25-9056-25bbe1ac95e1",
        "cursor": {
          "ref": "0ff1f4d6-ff66-4c19-8e34-995fc8873804",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "bacc3c17-e6d2-4d2e-b256-35b239ee38b6"
        },
        "item": {
          "id": "e0c4a784-7c50-4f25-9056-25bbe1ac95e1",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "16042090-d04d-466e-8b0b-a7d750be14ae",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}