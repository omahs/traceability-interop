{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d4018a48-a167-40d4-b9fe-1b15ca9d9077",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5ad4a461-a8fe-450c-9a44-6f2d8eefbd9b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1d227882-7e35-4461-b72a-09b671ae83ce",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d231cd00-3a58-4e1d-9ea4-6cf0c4a59a71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "214d1865-7267-46ab-a629-b86f5fc74785"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "0bbec0c8-a340-44ba-bcca-a985af4ad0f5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d0b81640-6cb9-4d04-b921-0be8357aa7f8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b30c0130-eff5-41ef-9a4f-c3bc4ffc3976",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8b59fd98-4ade-41bc-bd45-a4cbeecedbac",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0744f3a5-4ae1-4d17-9b48-0a555437386e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0af6bff2-f40d-4d8f-a7a4-aecc18f498ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1af5ab5-f7d5-45f4-8f08-91e9df22bcf5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35cb53a-e596-4d27-a198-55146912a799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07202c9a-1191-4134-96fb-ca79c6f598b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb16476a-788e-442f-a27e-c1ce536e4030",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68eafcbc-5535-4f1f-a23d-6c786077a50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "680ea801-c36f-4f41-bd34-f3302fab3775"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a8a325bc-9876-459b-8c03-bc9cb141dc7d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "81e92d0a-e566-4fde-87c2-b23bfcb3e9cb",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ccc57b-4c30-490e-aba5-93e8ba7f55e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5bece03c-656d-4bfb-91dd-582e9b937c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688fb55c-1db6-4f25-88e8-828eaec07429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380a492f-8971-4fc7-b46e-1531e6f370d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd3722b-d038-41a5-8652-f2d39d9ba1c7",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfdc53a8-ae16-4801-8d6f-c86ba9d52765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6fbc38a-6bb7-4eb1-a854-abaaf206bebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2dc792-1f32-41f2-a19c-e7ffe81546c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "118c1ec1-c06a-40c2-9636-d4aebe1ab301"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d5c3f30a-540c-446c-a846-0695a54cc583",
            "name": "Positive Testing",
            "item": [
              {
                "id": "467ecee6-4f54-44aa-8cf1-b56c5e667644",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d394e3d0-d660-413e-a401-0f69d683fe3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d4e92a50-b2f6-4de6-871c-d6d8488042fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83baff32-8166-4daf-adcb-baf1204f7e66",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "17aba2ef-c41e-4cf7-95d4-aa44ef757f10"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b232d2e5-7b7f-403c-a021-ad9cb3a54026",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0791b6a-7613-41d5-81bd-5cc85bf47d8f"
            }
          }
        ]
      },
      {
        "id": "f2ff4bbc-4823-470b-b346-05fcf958d72a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "969289c6-fa90-4875-8614-039aed6f344e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "24bf45e4-2486-4ba5-9ce0-1c14b8a15478",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "27cc3963-9382-4359-abf9-4714b7084aea",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb0710a-4786-452f-ad6d-faa4d2ff7e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb6faf8-3e9c-40f4-92c9-83bb076dc5e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11c4527-91c8-4ef1-943b-4ee73ac53cd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb5fc9bd-b980-4088-8c97-27f6b33d0f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e1b099-20a0-4148-a675-5f4939e9ba02",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7b3f43-6ede-4622-bd17-fbac9d32955d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cac807c9-fd54-44d9-b785-03ddc09a83cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f306372e-fc4b-49c5-88e5-c2b79b1617be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3faf434-3ea9-4f34-ba73-9ba71c96e5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46703852-f9ae-4c13-9c20-88683ab852e6",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef5b708-5ee9-4a3a-b3e5-87e571f82a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a7dbb73-9254-4a19-8349-8ebb46ad49d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33dc3a46-516a-44e2-8332-a23f2d42b312",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0408aad1-f76d-48db-8a3f-56b9b6e1da6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f0861f-16fe-4e8a-868a-bb086da65cc9",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef55a9a-10b9-4086-a317-e304e113a01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f7f28a2-e820-42e9-901a-41a8d2b0b1b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a592a647-b2a4-4e50-aa73-339a2b4a97b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95d5e6bc-67fc-4576-ba0b-79fee0e3d04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15841de7-864f-4c08-bb7b-76e6fd6a0838",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b3460c-bedc-4a41-abb3-b882adc5e39e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4d886d-4c99-42b2-9726-117f667c9d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4da5e1-683b-4713-bb11-5332765493a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "810bd0bc-9ac9-496e-92b8-2ba7d25201d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27635db-fe3a-43cb-8e71-b707ed914154",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47d0f9e-bc0b-48a9-ae7b-ed8458791e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c41f5a0f-0579-4bfc-84a1-fc0637b61aaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0b6f1a-88e0-4f94-9daf-bce49d4b2b5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "870fa15b-253d-4329-9b61-97d3bc2feb6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600a668b-d8b1-4588-9053-1895a4d2fc27",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536d3ebb-db74-4a78-8a14-3d46bf56841d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6dfc99b-7735-4861-b80d-337ccab2f64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bfb9254-08cc-4674-8d5d-d0a728e84356",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12d74a95-c2ec-4e91-9d6f-874f4b6c8d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3b097f-ac57-4482-89d7-e1b623ece98f",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1530dd3-4a80-43e3-b224-6ae62eda7d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977ca4e7-d808-44f9-b6cf-1527d34c4d6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7197a907-ef09-4258-b62d-fca858642f8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8088b51-b0f7-4a83-bfae-053751fb2b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459e64c5-5c97-4633-bf9e-0b3a443dfdf9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98bf48a-640f-41d2-b2c6-125893e0fb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c498a1-07e1-4d3c-a69e-0c0c08304373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c0746d-186a-436d-b36f-281c82d31d54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca59226f-01d1-4af1-89e8-5e50c0847228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce213387-81c4-4669-9c88-81edb57c4bb7",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d17eaef-d2cb-45af-8857-33e843b073d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8527378-cae0-4136-8e19-41c0ba920110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3587aa6a-cee9-40a1-af9e-b90d9b0255ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d16efb4-aed8-4d13-8c83-5ec5dd72b196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1fdce5-e5f3-426d-96c1-c7b60a266f8d",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6d14a8-99e6-4bfd-a807-d5f77c1a28dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ed2960-9795-4522-abff-3cf5973e3c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46809e67-db87-4d3e-be48-07a61b06588b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "2e714642-1965-45d5-8bbc-47df33945ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed713331-bfa8-45a5-84b6-e36ffda86939",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329b8079-8bc0-458f-a8ac-f5f5c3393f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0705a8-71b8-4c7e-98b8-368d06470ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba12191a-eeea-4f01-9966-0ca3c38c3d1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "a4f6520a-56fa-46ac-bb4f-ef839112106a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa1142f-d090-4473-b117-f2c9394bf148",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ccc778-9f89-4c10-bfc3-eebec300bfbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46e85f7c-1626-45ee-b378-8059f5ad8a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362cd3ea-09fa-4266-ba3e-8fbb694aa654",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6712d8d7-3ab7-4e00-88ba-0b7c72e7664d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4491243-5148-462c-a7cf-6d9d7785c96d",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e39cfdd-152a-47cd-8ebb-be9552709f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40022f3e-698c-430c-9813-20a35bd95936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d60bbb-cfe9-4af8-97f0-43224f08d1ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e9fb881-be02-4743-89f4-08ebda28b750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490c2227-340c-415a-a6f3-01edc8a9e922",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d782be-5559-4c8e-919a-05400514969b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b98ca92-1bec-468e-9413-c8e2508b41a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72ccb3d-aebd-431c-932f-ad97f48e81d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "8df1d733-75ac-4ecd-91d9-2942c801f4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c572abe-d8cd-420c-8a87-15087fc3f1f1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adaa4ee9-6ed9-45ae-a983-551b50f478d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd73fe1-034a-4327-9b9f-74dcdce1229b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5784c53-25f0-4e6d-b080-e93a89fe8c17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "b61b8deb-3fdc-41bd-a7f7-4c322ee106e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f69a00-d39c-4140-afac-791fded8d787",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a957db-387c-4d53-b6d9-889ef22dbc3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecbe83d9-d242-407a-96ab-1e3176f1c85c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a47238-87cd-4454-9d4f-99d104e53cf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df85966f-34c7-45ae-a9a4-9d6eaa02e519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff87b61-9f93-4dec-8130-918e26d6c1e2",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "001d5abf-b0f4-4264-bf32-8bd3f38a87bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f16791-2529-43b9-9fc0-c7804b383468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5415fe-cbc0-41ac-b854-89505bddd689",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0680695-2d7b-4b2f-85ea-fb11864e44d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a814470b-4255-43e6-800b-11ecb055ca08",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "359b84f5-3c33-40ad-b0a6-eeea5a0d3c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5705bf01-d13e-44f8-9600-b5bcb320c2c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9915c9-5fa1-48e6-986a-b0e29916cc95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ea569fa-8012-4e2d-86fa-476f2016ae28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262ef677-6362-4c59-baf9-bc198e42088e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0c1d41-ff62-4d70-a69e-2d51a533ffc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f1f15e-ba1f-4e0d-9c8d-c16f5a28395f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d49de4-61fa-4939-9595-9510347efb30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63a6dbc8-37d9-493b-ae25-ef9baf939de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b795cb-829e-44ad-b0f8-3e17e6fa2ac4",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f060fdaf-e055-4b29-8177-b494a4899d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "283dddb7-e5e1-49fb-af86-48e910560c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f95ecb5-4221-49b2-9583-4bedbe5214f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1da33c3a-3568-4328-9758-bcc75b3a2a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423759df-6b7d-4d42-91d3-31c2637f73d0",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d3c8c1-b8f8-4f86-8025-37e27474d654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e117f2ca-18e2-4404-8bd2-e5ad21a5781f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08449bbb-f374-48ca-ace8-81b79fbd90d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74c3efaa-7c21-409f-b9a9-70d24b4f66e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41baccd0-a119-425a-af6c-7c980acd250f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "957de9c1-0be0-49c4-85f7-6210cca9dcd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feb7e471-dfad-475a-8952-6b6c7176aae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6139a837-848c-4e06-b29f-ede3c988e7f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1253100b-0a50-45bf-b3e8-ea86b3846156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072930f4-0ef4-4d00-b9cc-7c1f2acbdea8",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b87982-38d9-43c8-9ac9-287b180c55db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b407493f-4d0d-4c40-a989-134cd51b6492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f79cab1-41e5-4337-a75d-4cee31fa236e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8398c338-1aa7-4f82-ac38-c11539ac5905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c8afe2-257f-4937-8527-934f28b876c1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c283c097-ab35-47c0-bd85-a9b0f4db6586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b744f87-21cc-42ef-a79d-e2cf623ca326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6800aed-612c-458e-84ea-252edcc10f2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0d28244-0f55-40b9-bb85-4ba068946cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1621ce7a-b141-4ed0-a927-fdc6db2b2d06",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a04b7e-68bc-4df3-83f5-4b90fb2506fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ee3631-f329-45cf-98c2-95c71186c13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abd9ca7-d283-429a-a646-02041412d154",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3df81cf3-8099-4508-8a84-c4e8896b7bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd98e772-ccdc-44a1-8221-3ce486361691",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b471f6a-34d8-4b9d-94bf-f667c0baa2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0eeb48-edf4-49e4-a204-ef253637085c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35082805-2f1e-44b1-bef8-0c414a7e2377",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dae54268-8efd-4014-8caf-63285c27567a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e68e756-c71a-481a-a32f-3ac6d76cf141",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89a337a-247f-4d6b-8c5d-03dfb22c5370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb9f1bb1-9088-49cd-afca-45408320384e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ae55df-821e-4243-ad60-2a9bab41b5ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "116e1104-3ed3-43a0-8745-9d61e347dd10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82fc3fe8-69de-459a-bb25-f06be89a2af2",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8bf962-4640-48ac-81bd-3ef7588d8775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5b68b1-884e-4bfc-8a68-221a737db48d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdbfd5b0-ff7e-4c07-b71d-76ae3187eedd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38de535d-e0e2-47a9-8738-c05258c68eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3950c7a-f4b0-4fe4-8a8a-02937ea2c9bc",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331f8c98-070a-40b6-9f9f-4305f52aacd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc47201-27c1-4716-b368-8d1faad97266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ff95f0-150f-4959-bd18-9713265cec54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eaed5bd-13f2-4efb-9f75-e217bfec580a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f24e90a-ef91-4c54-a6b0-260e74468b4c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da791bfa-aa47-4166-9499-8dd2d7b80bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f8b4082d-d9e1-4cb5-961b-8e2a8f19228f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dea5b1e-762a-46e1-b821-2d734186ad8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e19450f-8b01-457e-948d-a87fcc7a1795"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e744994e-e40b-41b2-a0e4-0f3fdd68c7dd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5d8c7180-62c7-4515-b11d-1cae81298f23",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bc154c-a9b6-48b1-8a30-8f0b49d9f0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7105962e-5438-43be-9aef-1957b736dfcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d009690-eab3-4478-a3e3-cc6755e6c6b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "af55e1cc-12bd-4f9a-82e9-38ea1f4a8b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c57e11d-be0b-4f3c-a3ce-2a88d23f2d1c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9ca0d4-9ea2-49d9-b475-f1b0aebd87b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47a4d231-e237-4461-88ae-8c77beba4573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0d240c-16f3-461f-9380-16254e3c2d1a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8bbb5fe0-5c3c-4787-aa66-da8d12c56e1d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8e582eb-01e4-4b32-8a11-239ae8b260e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10adc319-1bf2-45a5-915e-ac573196929c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cffcd6c5-6e74-423b-a8ed-e94068714cff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b21c93d-1815-4fd5-9e14-7acb58275ed1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a7b80766-2c70-410f-b657-9f19764d2705",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8a379e10-7b38-49d9-9d52-566b0f93e820"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ed137d4b-f57e-4d8f-a82e-f680eda1ab69",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e3385c2-a4ad-443e-9700-094e36c56c3f"
                }
              }
            ]
          },
          {
            "id": "5ae97cdf-392f-436f-b71c-9ab130f12f53",
            "name": "Positive Testing",
            "item": [
              {
                "id": "36ee86b5-42fd-4cd1-bd9e-cc49ae409d27",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07a3ac65-01a2-4443-afb2-5a951d4c6479",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f921b474-ed47-4310-8a37-6cfe981abf8b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14807b8b-5f0f-465b-8839-82acbf48233b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7de18ded-4249-4b2f-b1d6-bbee699818a3"
                    }
                  }
                ]
              },
              {
                "id": "feeb2427-de01-4dbc-ab54-596c6fc42f82",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba6d2e0f-2470-4e64-86e9-5b664fd23c1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41887f99-ec5a-41b6-9844-8aa30b5d6f62"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd7e4b3b-54ca-434d-b7cd-fbadedb94b28",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "12424aca-7633-469e-834e-cb51496ce293"
                    }
                  }
                ]
              },
              {
                "id": "bdef3bdd-c5e7-4b6d-a3bc-f416a78a1432",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94f2e1c1-20f9-4f77-91f0-37c57183a6ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "07b8ef72-c102-4729-95e2-e7b0f4903f7c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "585627de-05a2-4d6e-b16b-94ba913bf541",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1f3ac84b-d5a6-476a-9044-ee3cdd3ae10b"
                    }
                  }
                ]
              },
              {
                "id": "f2c60942-dd13-48e4-899a-8a33f07df0b6",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60e895da-780d-49d5-b956-0f20858b6466",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b8550f3-6121-49df-aebb-60f572a2e2d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d07aa85-fca7-46fc-9a4e-a8cce51e8a38",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1427a562-1b7e-41dd-81e4-21c0d2c12b36"
                    }
                  }
                ]
              },
              {
                "id": "ec9882c5-3fb6-4f87-b4f5-2a0128a1ca83",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c13fa958-b260-401c-aedb-fef5b81fad41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5aeb35ac-3e20-4e18-9d84-68e084b9b781"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3bb548d-0415-4b62-810e-8d56fc9442ee",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2a298cf5-38d1-4bc7-b118-99e5715572ae"
                    }
                  }
                ]
              },
              {
                "id": "9bdc3681-d8b7-4716-9ecc-25845a6c3564",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33c5394c-c374-429d-bd9a-06da7c21c6ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db925ac4-f009-416c-9eb2-8a1f78702d07"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cf30a32-d25d-4f90-9e67-2475815c3649",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "116e32cb-f26d-4599-be15-76ed81508e1f"
                    }
                  }
                ]
              },
              {
                "id": "4520afd6-9754-40eb-88c0-a36d2476f973",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "89c09914-e755-4930-b5bf-daf0178329e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "179ef3a9-c52b-481a-b58f-7f7df17a552f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c5c7488-b60f-4bda-bb47-81790f112fd0",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7c3f2e41-b9e5-4cd1-a660-178cc8d4457e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cd5cf0f5-4bd5-4c50-9bbb-4d8eb3f27992",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "14fae73c-f860-4309-9082-3873549a0b9b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ee30d38c-abc2-4618-a78c-e470a579cc97",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a8b0fcf4-3ecb-4525-a96c-6e6ff3729748"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae4460f1-183c-4661-96fc-acb1d7684ab7",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "a44cadec-756f-4ae4-99ea-c4f9d098a92e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7d93923-0266-43d3-b860-061c5e1deb03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a9530bd6-d2cc-4b33-9a70-1930b5e7cfcd"
            }
          }
        ]
      },
      {
        "id": "9a759eeb-63f8-41f2-95cf-2e2f13d31c22",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d3d9d41b-e8b2-4b09-87d3-050464383665",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3f612796-df33-4819-8f9a-dc092c3b36e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fd702212-e706-451c-be0d-6296b4ce953c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61620e0-d761-4ed4-94f4-681c36fd2090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ead3a5e-8d76-4166-ad40-b75ed930cec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8762a30a-c212-4a28-b511-d10a5248a620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1272af2-d434-4d24-8e01-11265f06e40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c23cc609-a5b6-489e-8b9a-d28582c0d0d2",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a802ff8-2aed-40de-bb18-3b5b1afe7fda",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8bade6aa-d195-4a88-89bc-02434c303602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2946d1-d9e8-46e2-8bb4-3da0105a4918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3070a1f-f5f0-47e8-8092-44739413ff4a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b28e8abb-db79-4e6c-96a0-7303b3f87f8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dae58790-0b6a-4a6f-b013-6a01dfda7763"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6a31f52-e85f-4b6e-aec4-d73dad1d165b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68529bbb-1685-497b-ac3e-64abba6bba89"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e27b00f-5d06-4a53-8d44-c3d709a49c0a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "df915a06-5fcf-49af-b34a-176be75061fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9d8f65d-b1e0-4e1a-aaeb-8cf28511a760",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ec428ff-d711-471c-a839-8c61044d74d5"
            }
          }
        ]
      },
      {
        "id": "d4ffe957-5614-447a-9885-5df2755fecde",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9376aea2-c506-4b62-a7a7-0238916af0ba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d663dbcf-c1ce-4af5-bd04-f3ba16191c70",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a2e867f9-6fbc-459a-abea-e848ee205b22",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ffae957-a570-4e59-97de-95045090f291",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d196ef24-f121-4868-8c2b-172eee53441f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b36d9c7-9ee9-434a-970d-11a01e1e81c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a45c892c-00f9-4a1c-84d0-6f339b46779e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d203b042-9c4b-44de-88c3-474e026b727c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57969716-ce8a-4f45-aa22-32c69c796f42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b436cc2-2590-4ba8-9c21-cebb5d038ba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d19d80-71a0-4b06-9784-abfb316ce785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b80aed82-3bc3-4382-ab34-2575191c65b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a0d94e-d155-4240-a722-232e7a090550",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794dd202-f761-45ec-a58b-7b84a5f79f96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15cd0626-8301-4012-9c0c-1b2780957c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff02536-42a5-40b0-b37c-732a309fa814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ae2fe82-a816-4c58-84e2-5b32cb00e153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e1cb8d-7405-4344-b628-fcbece8431e1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fddff57-a9e9-4315-85a4-8033304d0b5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "179a71b8-0b18-4135-ba8a-ce280defb504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1696ab7f-f470-4b57-bf4b-a654fab41fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce3b1704-8525-4170-9df0-8589aaa6583c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62a61a6-58d2-4058-85d0-01d385d33cf2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83682e8-39a0-432b-9dc6-d02eae718287",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1643b0ce-6f2c-440f-b333-dab104190494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "097445f6-631f-4905-968e-46770367e726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d630251-344c-4f8e-a2d4-7d2d207aa9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54d99e7-40be-4025-bd8f-f3bb5da442ac",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a5fda9-a18a-4e1b-881e-28a9d265dde9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d08301b-174d-484d-8fbf-3fed420efd93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "404b515e-cfa2-4920-8833-c6092a411031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db0a4092-30d5-4330-a9c7-dfe82f761da4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e10c6144-9b50-4aa4-95ff-29af491efc75",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5812ff09-feda-4a67-b3d6-fac0c449e608",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575e8620-8d16-4eca-b9d9-7e66ce8c100f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "61ef5604-a53a-48b2-b3c0-367ac6f6e01c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9920e3ba-583e-4f04-a2b9-bde2d6ac796a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02ceb2fe-8d73-440d-89a7-ca93b228fc8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe1e9d3-4483-413e-a7f3-4067276ef1d3",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2cfbfee-08d6-40fb-b644-9a3c14a591c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "275f62e8-51a2-4271-b81a-15e20e3c23ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8803a06a-2fb5-4814-b76b-ec4d07fd531e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db936483-04d9-4b0b-8388-7dfa1f37c7dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69b99ad3-997c-4466-b1ab-2f0abe668fd2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4f649ff-f605-4142-8ed8-2659355fcbaa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "525703a8-24ee-48d4-8fbd-f3dee1d67b57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce5e6a3b-6699-425a-83c1-1b480cd2416a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f81336d-8454-43fb-8f58-845a5cc18171",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "155b61f3-d263-4d90-8b4e-0624a4dafad3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af95cadd-3fec-43c1-9f9d-580ca9daf8de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a81e90f3-352e-4ac1-8c4d-fc507bbdfea3"
            }
          }
        ]
      },
      {
        "id": "11ede247-ec79-425c-b5f2-d359669b4305",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1bf320ba-536d-43e0-b9e8-faeb56d606f3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32e10dbd-fce5-40a3-843e-fa1b3b72855f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a137eeff-ac94-4476-9d22-22a7804912fd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcae4633-ad33-443a-b2a0-b41f46a943f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb6f99f2-a138-47b5-bfda-3f8f43400c42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c3086a-d20d-4c14-9895-f57b3fff77b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ad80f19-1513-4648-9224-ff536b84840f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0847cb-d977-488d-80a0-cd57dd77ad8e",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0af46e-60ff-4d91-ae12-8bab4aa0ddb3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b6a6c509-a63d-47e2-8ade-ebb30de6adc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "832927cf-0095-45ef-a98f-8be038264da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5582032f-4e51-4945-b4b4-10446cfff011"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f939251-ec84-43b5-b65c-9cb6f5aa2cee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83510c5b-b3bc-4717-a929-87c04e63b2cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "67ab0d29-9cc1-437c-8bb5-4d64c06d907b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2b1081f-2ea6-44f1-bd25-13c0c84a2afc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe1a7dc5-f375-4b54-91fa-4ff4aa2636f3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "f11d8f52-9e83-4710-ac45-34914529be4a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bcb548fb-02d2-426c-8719-41534f1dfd1f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "25422bc0-ad7d-47c5-81e7-be0f42570072"
            }
          }
        ]
      },
      {
        "id": "9678b893-7bc4-4fef-94c8-df300d6cbe6a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6ae6e653-5538-418a-a586-859f43c29456",
            "name": "Negative Testing",
            "item": [
              {
                "id": "53b57bf3-7574-4cb5-9e54-503941a9e6bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fc5b8ae1-205f-484e-b202-55a7d4980500",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922cb7ab-f36c-4bee-87cc-c5e2d29f5183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4523baa2-12de-45d9-b75f-2be0dd4babf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac824da2-d9a1-4ad3-9828-1454d61b7c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1227a31-65ad-4c80-9b1c-03eac038668f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64893e14-e45f-48e2-877f-23d2fbb7da6d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d70438-f634-41e5-88b3-049a61eca597",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "715e4cba-6841-4162-a094-72333215d8aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "121bd5ff-7a44-44c6-bec8-c68dfa915f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "afe88117-1b3c-4236-8544-5ee4ba036b4e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93cbf61b-8434-4d26-9876-ec7a9f246d1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae2a7172-0571-4182-aa7b-3095d1db2bfd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "afabbd02-248a-4506-8ffa-ff7506030c20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6bb99da4-dd05-4ebe-ba16-7b65bd2f476a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7745b8a7-ff1f-4cda-ba7b-1af09e147a91",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "2442dbce-ce9b-400f-a403-582eec3c3fe1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00725d7e-8959-456c-bf0c-ee1eb77df9ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38a273fd-8ec9-4008-82bd-80c088f67562"
            }
          }
        ]
      },
      {
        "id": "a7ac0232-550e-4c28-913d-1e6eb65d88bf",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0b413f1e-c6c0-4d53-b5ff-5a7fdffa4e52",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d846e006-af8f-4822-b9a2-3f1ab3cb4b6d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ecb95a33-5787-4cb2-87f2-5ad8f97d2c2e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1991f373-fe57-4af5-b137-e03208d2be21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb0240a-f7da-42e1-bc5f-acd22cb50dd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8993f0c3-2089-4094-b516-12bc71a58265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f60b031d-2403-44f6-8c37-c56cc3bbc57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d33a3a7-906b-429e-9045-995d65aa25d3",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c28994-f76d-4b45-a3fa-c45bfe3c42c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "999da8b4-8151-41d4-aaa0-bc8b4d2dcd19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fbab5e-34c3-44f6-aca3-e50de6da54c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c525716-46df-4782-bb08-abcf37c4e6d3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03dc3631-fbb3-465b-8ecb-b4ef7872a5f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c154ccaa-153a-4882-a5ed-224a4371231b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a9f5004-da9a-4cdd-a634-29acff1f5922",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfdcecae-15fc-4b60-96c0-b1e1cdd5c836"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed212452-f49b-4b6e-96c1-acac4eb5bbcc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "a8ba9084-bb27-4a60-9dc4-363d4bb5f691"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62854b6f-6de5-404e-9a0f-834fcb543513",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dcfd1760-7faa-47dd-ae99-6e852bf5ce4e"
            }
          }
        ]
      },
      {
        "id": "3ddbca6c-a8cb-422c-88e3-98962166f569",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "d162c74d-7c26-4239-85b4-1739d2e94e69",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 9
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 42.027027027027,
      "responseMin": 4,
      "responseMax": 325,
      "responseSd": 80.76129429947984,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1663548711088,
      "completed": 1663548718822
    },
    "executions": [
      {
        "id": "1d227882-7e35-4461-b72a-09b671ae83ce",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0415ddde-ce72-4720-9668-c02129145e48",
          "httpRequestId": "797c53cb-7302-4f66-b8ab-6298155ec174"
        },
        "item": {
          "id": "1d227882-7e35-4461-b72a-09b671ae83ce",
          "name": "did_json"
        },
        "response": {
          "id": "b56733f8-591f-417b-98bf-b3ff5e317103",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 1289
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "8b59fd98-4ade-41bc-bd45-a4cbeecedbac",
        "cursor": {
          "ref": "08b65e6e-51f0-4070-8afa-07d1236c5760",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7fd3e622-802b-4a62-917c-7eccfcdfb5dd"
        },
        "item": {
          "id": "8b59fd98-4ade-41bc-bd45-a4cbeecedbac",
          "name": "did:invalid"
        },
        "response": {
          "id": "3dc843b4-4f0d-4bcd-bec0-3b59295816a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b59fd98-4ade-41bc-bd45-a4cbeecedbac",
        "cursor": {
          "ref": "08b65e6e-51f0-4070-8afa-07d1236c5760",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7fd3e622-802b-4a62-917c-7eccfcdfb5dd"
        },
        "item": {
          "id": "8b59fd98-4ade-41bc-bd45-a4cbeecedbac",
          "name": "did:invalid"
        },
        "response": {
          "id": "3dc843b4-4f0d-4bcd-bec0-3b59295816a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1af5ab5-f7d5-45f4-8f08-91e9df22bcf5",
        "cursor": {
          "ref": "6f82e804-8156-4e80-80f0-be77bb988187",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "88d81d70-9ee1-44ba-a0c6-f2984178c424"
        },
        "item": {
          "id": "e1af5ab5-f7d5-45f4-8f08-91e9df22bcf5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f700ed8f-23ce-4754-b8d6-5cf9c3e71b14",
          "status": "Not Found",
          "code": 404,
          "responseTime": 60,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb16476a-788e-442f-a27e-c1ce536e4030",
        "cursor": {
          "ref": "399fc2d0-3212-4e4f-95c1-5c8ef3954bb3",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3a6fd538-01fc-4755-9ed0-7b077208a226"
        },
        "item": {
          "id": "bb16476a-788e-442f-a27e-c1ce536e4030",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "563e7d09-9a66-4346-864c-1d59ca5e8628",
          "status": "Not Found",
          "code": 404,
          "responseTime": 7,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81e92d0a-e566-4fde-87c2-b23bfcb3e9cb",
        "cursor": {
          "ref": "3bf71aa9-4d64-4db1-bdd9-896d677d5a9b",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2a2b34f9-0dde-4114-87b0-3b2cce0e981e"
        },
        "item": {
          "id": "81e92d0a-e566-4fde-87c2-b23bfcb3e9cb",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7a7ab97e-0574-4f8c-9c9c-98d6407e92d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd3722b-d038-41a5-8652-f2d39d9ba1c7",
        "cursor": {
          "ref": "3d5dddc4-4bbd-41e5-8572-46db85e2b442",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "aaee6052-9b02-4d26-87d0-1e6e3b821b40"
        },
        "item": {
          "id": "ffd3722b-d038-41a5-8652-f2d39d9ba1c7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "964ff656-1716-4ae6-a353-ea73e1c91703",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd3722b-d038-41a5-8652-f2d39d9ba1c7",
        "cursor": {
          "ref": "3d5dddc4-4bbd-41e5-8572-46db85e2b442",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "aaee6052-9b02-4d26-87d0-1e6e3b821b40"
        },
        "item": {
          "id": "ffd3722b-d038-41a5-8652-f2d39d9ba1c7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "964ff656-1716-4ae6-a353-ea73e1c91703",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "467ecee6-4f54-44aa-8cf1-b56c5e667644",
        "cursor": {
          "ref": "9b8ef38b-0387-43cd-ab3d-e9c60327377a",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f5d62fce-343d-4269-a31f-30feb4c29406"
        },
        "item": {
          "id": "467ecee6-4f54-44aa-8cf1-b56c5e667644",
          "name": "identifiers"
        },
        "response": {
          "id": "150ae77f-923f-4b19-8171-7c4b85dd8d0b",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 1318
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27cc3963-9382-4359-abf9-4714b7084aea",
        "cursor": {
          "ref": "dbbda944-8222-4f66-9299-578969a07eb1",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ecac13d7-a0f7-4e40-ab44-aa759996734a"
        },
        "item": {
          "id": "27cc3963-9382-4359-abf9-4714b7084aea",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c559a5f4-cff5-4f5a-a583-d4fe3145bc09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27cc3963-9382-4359-abf9-4714b7084aea",
        "cursor": {
          "ref": "dbbda944-8222-4f66-9299-578969a07eb1",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ecac13d7-a0f7-4e40-ab44-aa759996734a"
        },
        "item": {
          "id": "27cc3963-9382-4359-abf9-4714b7084aea",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c559a5f4-cff5-4f5a-a583-d4fe3145bc09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27cc3963-9382-4359-abf9-4714b7084aea",
        "cursor": {
          "ref": "dbbda944-8222-4f66-9299-578969a07eb1",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ecac13d7-a0f7-4e40-ab44-aa759996734a"
        },
        "item": {
          "id": "27cc3963-9382-4359-abf9-4714b7084aea",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c559a5f4-cff5-4f5a-a583-d4fe3145bc09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e1b099-20a0-4148-a675-5f4939e9ba02",
        "cursor": {
          "ref": "6a09f2a2-1241-4e2c-91c9-89322e160d2a",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0eb2621c-a6e3-4623-9ec7-e7dc4d16833f"
        },
        "item": {
          "id": "e1e1b099-20a0-4148-a675-5f4939e9ba02",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dab5977f-896d-4a1c-ac85-438cce4e644c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e1b099-20a0-4148-a675-5f4939e9ba02",
        "cursor": {
          "ref": "6a09f2a2-1241-4e2c-91c9-89322e160d2a",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0eb2621c-a6e3-4623-9ec7-e7dc4d16833f"
        },
        "item": {
          "id": "e1e1b099-20a0-4148-a675-5f4939e9ba02",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dab5977f-896d-4a1c-ac85-438cce4e644c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46703852-f9ae-4c13-9c20-88683ab852e6",
        "cursor": {
          "ref": "68428ba0-e7fd-4d16-929b-4c7b291cf81f",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ff76d10d-fdd3-4ab3-b432-a5fbb6a03d00"
        },
        "item": {
          "id": "46703852-f9ae-4c13-9c20-88683ab852e6",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "fb9b0405-6ce1-4cd9-9852-a1b0c3add354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46703852-f9ae-4c13-9c20-88683ab852e6",
        "cursor": {
          "ref": "68428ba0-e7fd-4d16-929b-4c7b291cf81f",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ff76d10d-fdd3-4ab3-b432-a5fbb6a03d00"
        },
        "item": {
          "id": "46703852-f9ae-4c13-9c20-88683ab852e6",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "fb9b0405-6ce1-4cd9-9852-a1b0c3add354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f0861f-16fe-4e8a-868a-bb086da65cc9",
        "cursor": {
          "ref": "d5dc8d28-059f-49c9-9018-d3f55a14d2cf",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "da35f47b-e546-4dda-bc4b-6a8e22a12d53"
        },
        "item": {
          "id": "85f0861f-16fe-4e8a-868a-bb086da65cc9",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "8affa6b1-c8a2-4e27-bebe-6a0199692abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f0861f-16fe-4e8a-868a-bb086da65cc9",
        "cursor": {
          "ref": "d5dc8d28-059f-49c9-9018-d3f55a14d2cf",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "da35f47b-e546-4dda-bc4b-6a8e22a12d53"
        },
        "item": {
          "id": "85f0861f-16fe-4e8a-868a-bb086da65cc9",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "8affa6b1-c8a2-4e27-bebe-6a0199692abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15841de7-864f-4c08-bb7b-76e6fd6a0838",
        "cursor": {
          "ref": "beb7c341-82cd-448f-a5f0-6e0978c285f7",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "37003d27-91db-4f05-8a07-8165f2e5b156"
        },
        "item": {
          "id": "15841de7-864f-4c08-bb7b-76e6fd6a0838",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "be6905a5-f2b8-4373-9a5e-20a15ed12c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15841de7-864f-4c08-bb7b-76e6fd6a0838",
        "cursor": {
          "ref": "beb7c341-82cd-448f-a5f0-6e0978c285f7",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "37003d27-91db-4f05-8a07-8165f2e5b156"
        },
        "item": {
          "id": "15841de7-864f-4c08-bb7b-76e6fd6a0838",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "be6905a5-f2b8-4373-9a5e-20a15ed12c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27635db-fe3a-43cb-8e71-b707ed914154",
        "cursor": {
          "ref": "e70fc2ae-9eb6-409b-9a5f-1431e433faaa",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "597f6ad0-a10d-44c2-9374-e6d548b4115c"
        },
        "item": {
          "id": "b27635db-fe3a-43cb-8e71-b707ed914154",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "11b16119-647e-467c-af6c-048c68fbfbd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27635db-fe3a-43cb-8e71-b707ed914154",
        "cursor": {
          "ref": "e70fc2ae-9eb6-409b-9a5f-1431e433faaa",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "597f6ad0-a10d-44c2-9374-e6d548b4115c"
        },
        "item": {
          "id": "b27635db-fe3a-43cb-8e71-b707ed914154",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "11b16119-647e-467c-af6c-048c68fbfbd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600a668b-d8b1-4588-9053-1895a4d2fc27",
        "cursor": {
          "ref": "ee5f7fb2-1818-4e44-a109-f3791b92c41d",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "368a971d-e946-47a0-8cfa-8dae4a59e99b"
        },
        "item": {
          "id": "600a668b-d8b1-4588-9053-1895a4d2fc27",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "d1e81480-b7fc-4b0c-9bbe-4861a0764938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600a668b-d8b1-4588-9053-1895a4d2fc27",
        "cursor": {
          "ref": "ee5f7fb2-1818-4e44-a109-f3791b92c41d",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "368a971d-e946-47a0-8cfa-8dae4a59e99b"
        },
        "item": {
          "id": "600a668b-d8b1-4588-9053-1895a4d2fc27",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "d1e81480-b7fc-4b0c-9bbe-4861a0764938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3b097f-ac57-4482-89d7-e1b623ece98f",
        "cursor": {
          "ref": "2fae0805-81c7-48fc-84a8-6685ec45190f",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "86fb09bb-3ae1-4439-90fd-73b1f80dd535"
        },
        "item": {
          "id": "2d3b097f-ac57-4482-89d7-e1b623ece98f",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "46b8d4d5-408b-4f75-8228-012d3561a5c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3b097f-ac57-4482-89d7-e1b623ece98f",
        "cursor": {
          "ref": "2fae0805-81c7-48fc-84a8-6685ec45190f",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "86fb09bb-3ae1-4439-90fd-73b1f80dd535"
        },
        "item": {
          "id": "2d3b097f-ac57-4482-89d7-e1b623ece98f",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "46b8d4d5-408b-4f75-8228-012d3561a5c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459e64c5-5c97-4633-bf9e-0b3a443dfdf9",
        "cursor": {
          "ref": "2bbdd6d9-7d28-416d-922d-f2beb9e0fe68",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2f53be62-7eb8-4592-a40d-c2b2663eee9c"
        },
        "item": {
          "id": "459e64c5-5c97-4633-bf9e-0b3a443dfdf9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cc883f87-1980-4163-9b72-794babecdf48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459e64c5-5c97-4633-bf9e-0b3a443dfdf9",
        "cursor": {
          "ref": "2bbdd6d9-7d28-416d-922d-f2beb9e0fe68",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2f53be62-7eb8-4592-a40d-c2b2663eee9c"
        },
        "item": {
          "id": "459e64c5-5c97-4633-bf9e-0b3a443dfdf9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cc883f87-1980-4163-9b72-794babecdf48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce213387-81c4-4669-9c88-81edb57c4bb7",
        "cursor": {
          "ref": "3e569506-6e32-456b-86b7-e275a938b87e",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5db72c54-2e1f-4f6f-a19a-8f74e94f59db"
        },
        "item": {
          "id": "ce213387-81c4-4669-9c88-81edb57c4bb7",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "fb64f06f-90a9-484e-8c83-ce46bec3f461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce213387-81c4-4669-9c88-81edb57c4bb7",
        "cursor": {
          "ref": "3e569506-6e32-456b-86b7-e275a938b87e",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5db72c54-2e1f-4f6f-a19a-8f74e94f59db"
        },
        "item": {
          "id": "ce213387-81c4-4669-9c88-81edb57c4bb7",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "fb64f06f-90a9-484e-8c83-ce46bec3f461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1fdce5-e5f3-426d-96c1-c7b60a266f8d",
        "cursor": {
          "ref": "e0a078c2-2b6f-4917-a383-ac08ec0d2fb1",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "770f93a9-69ba-4257-8436-bc9dec03f9ed"
        },
        "item": {
          "id": "1f1fdce5-e5f3-426d-96c1-c7b60a266f8d",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "e79c5c03-15ce-41bc-9b79-a1ac899ac770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1fdce5-e5f3-426d-96c1-c7b60a266f8d",
        "cursor": {
          "ref": "e0a078c2-2b6f-4917-a383-ac08ec0d2fb1",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "770f93a9-69ba-4257-8436-bc9dec03f9ed"
        },
        "item": {
          "id": "1f1fdce5-e5f3-426d-96c1-c7b60a266f8d",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "e79c5c03-15ce-41bc-9b79-a1ac899ac770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed713331-bfa8-45a5-84b6-e36ffda86939",
        "cursor": {
          "ref": "be7829b8-5342-4c79-965e-62537ffbb08e",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "818dd9db-ad45-43da-bcfd-099e2f7b81cd"
        },
        "item": {
          "id": "ed713331-bfa8-45a5-84b6-e36ffda86939",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "45115d61-4479-4bf8-8645-c44d34f706b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 325,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed713331-bfa8-45a5-84b6-e36ffda86939",
        "cursor": {
          "ref": "be7829b8-5342-4c79-965e-62537ffbb08e",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "818dd9db-ad45-43da-bcfd-099e2f7b81cd"
        },
        "item": {
          "id": "ed713331-bfa8-45a5-84b6-e36ffda86939",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "45115d61-4479-4bf8-8645-c44d34f706b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 325,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa1142f-d090-4473-b117-f2c9394bf148",
        "cursor": {
          "ref": "bf6cdef1-d74e-48ef-bc8b-8a4942a282d4",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3b1913e5-b125-4b10-a550-6cf5de6693cf"
        },
        "item": {
          "id": "1fa1142f-d090-4473-b117-f2c9394bf148",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c9e1b156-5488-45c6-94e1-2161567361dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa1142f-d090-4473-b117-f2c9394bf148",
        "cursor": {
          "ref": "bf6cdef1-d74e-48ef-bc8b-8a4942a282d4",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3b1913e5-b125-4b10-a550-6cf5de6693cf"
        },
        "item": {
          "id": "1fa1142f-d090-4473-b117-f2c9394bf148",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c9e1b156-5488-45c6-94e1-2161567361dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4491243-5148-462c-a7cf-6d9d7785c96d",
        "cursor": {
          "ref": "bc72c569-bb61-4543-82a2-0252e8ca9560",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "55fa2d0d-67a8-4ab0-b680-c51aade1eedb"
        },
        "item": {
          "id": "f4491243-5148-462c-a7cf-6d9d7785c96d",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "c8979608-0410-42cd-9f32-722a261aface",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4491243-5148-462c-a7cf-6d9d7785c96d",
        "cursor": {
          "ref": "bc72c569-bb61-4543-82a2-0252e8ca9560",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "55fa2d0d-67a8-4ab0-b680-c51aade1eedb"
        },
        "item": {
          "id": "f4491243-5148-462c-a7cf-6d9d7785c96d",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "c8979608-0410-42cd-9f32-722a261aface",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490c2227-340c-415a-a6f3-01edc8a9e922",
        "cursor": {
          "ref": "35d0ce35-5132-46b4-b957-a713f9436f40",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bec3ccd1-895e-4c53-9104-4a373c06a18b"
        },
        "item": {
          "id": "490c2227-340c-415a-a6f3-01edc8a9e922",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "e12a161e-d1f7-4156-89d6-a2e5d51307eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490c2227-340c-415a-a6f3-01edc8a9e922",
        "cursor": {
          "ref": "35d0ce35-5132-46b4-b957-a713f9436f40",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bec3ccd1-895e-4c53-9104-4a373c06a18b"
        },
        "item": {
          "id": "490c2227-340c-415a-a6f3-01edc8a9e922",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "e12a161e-d1f7-4156-89d6-a2e5d51307eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c572abe-d8cd-420c-8a87-15087fc3f1f1",
        "cursor": {
          "ref": "c3657fa0-abb7-4625-9e9f-781c431aef86",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0aec17b0-6fb8-4626-b882-89c2b4f55394"
        },
        "item": {
          "id": "9c572abe-d8cd-420c-8a87-15087fc3f1f1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2016e674-1541-4432-bef3-c05f096ab26e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c572abe-d8cd-420c-8a87-15087fc3f1f1",
        "cursor": {
          "ref": "c3657fa0-abb7-4625-9e9f-781c431aef86",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0aec17b0-6fb8-4626-b882-89c2b4f55394"
        },
        "item": {
          "id": "9c572abe-d8cd-420c-8a87-15087fc3f1f1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2016e674-1541-4432-bef3-c05f096ab26e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f69a00-d39c-4140-afac-791fded8d787",
        "cursor": {
          "ref": "68eebeeb-2350-457e-87be-2a73df3b8d5f",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3a6bc731-90cf-4c64-8f6f-a0969cb40e15"
        },
        "item": {
          "id": "61f69a00-d39c-4140-afac-791fded8d787",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "40f97c3a-4732-4774-9662-252885720adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f69a00-d39c-4140-afac-791fded8d787",
        "cursor": {
          "ref": "68eebeeb-2350-457e-87be-2a73df3b8d5f",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3a6bc731-90cf-4c64-8f6f-a0969cb40e15"
        },
        "item": {
          "id": "61f69a00-d39c-4140-afac-791fded8d787",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "40f97c3a-4732-4774-9662-252885720adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff87b61-9f93-4dec-8130-918e26d6c1e2",
        "cursor": {
          "ref": "3d7b12b8-f43b-4536-b876-6ec8d486f4f3",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d60c166f-32e3-45f7-8872-71b0f9819c61"
        },
        "item": {
          "id": "5ff87b61-9f93-4dec-8130-918e26d6c1e2",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "f81d168a-54bb-4677-bf8c-6585e9725167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff87b61-9f93-4dec-8130-918e26d6c1e2",
        "cursor": {
          "ref": "3d7b12b8-f43b-4536-b876-6ec8d486f4f3",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d60c166f-32e3-45f7-8872-71b0f9819c61"
        },
        "item": {
          "id": "5ff87b61-9f93-4dec-8130-918e26d6c1e2",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "f81d168a-54bb-4677-bf8c-6585e9725167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a814470b-4255-43e6-800b-11ecb055ca08",
        "cursor": {
          "ref": "a49cffad-c4c2-4b3b-823a-9552cfb07163",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f2024dc9-80c8-4c63-aa5f-74e0a25e822b"
        },
        "item": {
          "id": "a814470b-4255-43e6-800b-11ecb055ca08",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "aefb7231-b708-4141-a3a7-79bb9750b443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a814470b-4255-43e6-800b-11ecb055ca08",
        "cursor": {
          "ref": "a49cffad-c4c2-4b3b-823a-9552cfb07163",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f2024dc9-80c8-4c63-aa5f-74e0a25e822b"
        },
        "item": {
          "id": "a814470b-4255-43e6-800b-11ecb055ca08",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "aefb7231-b708-4141-a3a7-79bb9750b443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262ef677-6362-4c59-baf9-bc198e42088e",
        "cursor": {
          "ref": "d2d6ab65-8650-45c8-9b25-df0ed6777007",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "208d6c0e-0f11-48ad-8893-6c42711dd04f"
        },
        "item": {
          "id": "262ef677-6362-4c59-baf9-bc198e42088e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "176aa5e0-543c-4014-a943-5964b3f4c929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262ef677-6362-4c59-baf9-bc198e42088e",
        "cursor": {
          "ref": "d2d6ab65-8650-45c8-9b25-df0ed6777007",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "208d6c0e-0f11-48ad-8893-6c42711dd04f"
        },
        "item": {
          "id": "262ef677-6362-4c59-baf9-bc198e42088e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "176aa5e0-543c-4014-a943-5964b3f4c929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b795cb-829e-44ad-b0f8-3e17e6fa2ac4",
        "cursor": {
          "ref": "b9f7035b-398c-4ea0-bc86-b17adea8323e",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "98195739-c189-434d-b017-6c107e68970c"
        },
        "item": {
          "id": "07b795cb-829e-44ad-b0f8-3e17e6fa2ac4",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "4114b737-73cd-4397-b2a3-3fbb755e0df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b795cb-829e-44ad-b0f8-3e17e6fa2ac4",
        "cursor": {
          "ref": "b9f7035b-398c-4ea0-bc86-b17adea8323e",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "98195739-c189-434d-b017-6c107e68970c"
        },
        "item": {
          "id": "07b795cb-829e-44ad-b0f8-3e17e6fa2ac4",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "4114b737-73cd-4397-b2a3-3fbb755e0df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423759df-6b7d-4d42-91d3-31c2637f73d0",
        "cursor": {
          "ref": "e0c63a87-93d5-4d3c-9df1-5bf38a5d5bc1",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7d5f0fa5-b969-4218-b6e1-34b104b5bb5f"
        },
        "item": {
          "id": "423759df-6b7d-4d42-91d3-31c2637f73d0",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "fad98aa3-e015-4698-a473-5eb533940f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423759df-6b7d-4d42-91d3-31c2637f73d0",
        "cursor": {
          "ref": "e0c63a87-93d5-4d3c-9df1-5bf38a5d5bc1",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7d5f0fa5-b969-4218-b6e1-34b104b5bb5f"
        },
        "item": {
          "id": "423759df-6b7d-4d42-91d3-31c2637f73d0",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "fad98aa3-e015-4698-a473-5eb533940f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41baccd0-a119-425a-af6c-7c980acd250f",
        "cursor": {
          "ref": "e5ff7ad3-fd90-46ab-b077-927020007015",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3242c079-e9ee-4e2e-aae4-a3ed72c570fd"
        },
        "item": {
          "id": "41baccd0-a119-425a-af6c-7c980acd250f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9f7834ac-89f7-4707-b50e-a27ded2e8517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41baccd0-a119-425a-af6c-7c980acd250f",
        "cursor": {
          "ref": "e5ff7ad3-fd90-46ab-b077-927020007015",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3242c079-e9ee-4e2e-aae4-a3ed72c570fd"
        },
        "item": {
          "id": "41baccd0-a119-425a-af6c-7c980acd250f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9f7834ac-89f7-4707-b50e-a27ded2e8517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072930f4-0ef4-4d00-b9cc-7c1f2acbdea8",
        "cursor": {
          "ref": "b6df952f-0ec1-46d7-bb6e-fb35cdf12ae8",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "71db7655-d4ac-4a0f-9195-5fd093a94e23"
        },
        "item": {
          "id": "072930f4-0ef4-4d00-b9cc-7c1f2acbdea8",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "ca505ad8-6a69-40c3-93eb-9492510041a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072930f4-0ef4-4d00-b9cc-7c1f2acbdea8",
        "cursor": {
          "ref": "b6df952f-0ec1-46d7-bb6e-fb35cdf12ae8",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "71db7655-d4ac-4a0f-9195-5fd093a94e23"
        },
        "item": {
          "id": "072930f4-0ef4-4d00-b9cc-7c1f2acbdea8",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "ca505ad8-6a69-40c3-93eb-9492510041a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c8afe2-257f-4937-8527-934f28b876c1",
        "cursor": {
          "ref": "564df17f-4983-4531-a70d-1b938a79a114",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2c7a7714-026e-4a85-b434-93a569c23430"
        },
        "item": {
          "id": "37c8afe2-257f-4937-8527-934f28b876c1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "27909ed3-6ed9-449a-add5-ba7401e2b18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c8afe2-257f-4937-8527-934f28b876c1",
        "cursor": {
          "ref": "564df17f-4983-4531-a70d-1b938a79a114",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2c7a7714-026e-4a85-b434-93a569c23430"
        },
        "item": {
          "id": "37c8afe2-257f-4937-8527-934f28b876c1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "27909ed3-6ed9-449a-add5-ba7401e2b18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1621ce7a-b141-4ed0-a927-fdc6db2b2d06",
        "cursor": {
          "ref": "bcc69466-a44c-4e01-a51e-df5189188a68",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "319eb64e-5ec4-4930-9f94-2c327c3d0752"
        },
        "item": {
          "id": "1621ce7a-b141-4ed0-a927-fdc6db2b2d06",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "96cf3cb5-f459-4e84-916d-2ea46b8fb776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1621ce7a-b141-4ed0-a927-fdc6db2b2d06",
        "cursor": {
          "ref": "bcc69466-a44c-4e01-a51e-df5189188a68",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "319eb64e-5ec4-4930-9f94-2c327c3d0752"
        },
        "item": {
          "id": "1621ce7a-b141-4ed0-a927-fdc6db2b2d06",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "96cf3cb5-f459-4e84-916d-2ea46b8fb776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd98e772-ccdc-44a1-8221-3ce486361691",
        "cursor": {
          "ref": "af68f7a9-4134-400e-bc64-7f89120af47b",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "eeb6445c-f4ff-42a4-af40-2c73df446c33"
        },
        "item": {
          "id": "dd98e772-ccdc-44a1-8221-3ce486361691",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d0ec3661-7063-4c7d-859b-ddca14426292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd98e772-ccdc-44a1-8221-3ce486361691",
        "cursor": {
          "ref": "af68f7a9-4134-400e-bc64-7f89120af47b",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "eeb6445c-f4ff-42a4-af40-2c73df446c33"
        },
        "item": {
          "id": "dd98e772-ccdc-44a1-8221-3ce486361691",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d0ec3661-7063-4c7d-859b-ddca14426292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e68e756-c71a-481a-a32f-3ac6d76cf141",
        "cursor": {
          "ref": "570b4981-8e03-4b07-b331-ac297e771772",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "846a9314-74f7-43cf-a24d-f8f249541070"
        },
        "item": {
          "id": "7e68e756-c71a-481a-a32f-3ac6d76cf141",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "5c48db80-9777-4d93-9df8-48ea7c04a52c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e68e756-c71a-481a-a32f-3ac6d76cf141",
        "cursor": {
          "ref": "570b4981-8e03-4b07-b331-ac297e771772",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "846a9314-74f7-43cf-a24d-f8f249541070"
        },
        "item": {
          "id": "7e68e756-c71a-481a-a32f-3ac6d76cf141",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "5c48db80-9777-4d93-9df8-48ea7c04a52c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82fc3fe8-69de-459a-bb25-f06be89a2af2",
        "cursor": {
          "ref": "fc7ac148-2d8b-4092-ae64-658b765c6b90",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a305776a-5664-4551-9a11-701f3bc56a0b"
        },
        "item": {
          "id": "82fc3fe8-69de-459a-bb25-f06be89a2af2",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "4b0c73bd-bfff-42b6-babe-769b8fb6ad1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82fc3fe8-69de-459a-bb25-f06be89a2af2",
        "cursor": {
          "ref": "fc7ac148-2d8b-4092-ae64-658b765c6b90",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a305776a-5664-4551-9a11-701f3bc56a0b"
        },
        "item": {
          "id": "82fc3fe8-69de-459a-bb25-f06be89a2af2",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "4b0c73bd-bfff-42b6-babe-769b8fb6ad1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3950c7a-f4b0-4fe4-8a8a-02937ea2c9bc",
        "cursor": {
          "ref": "8d71bca4-2e44-4ede-925c-d61ba0a6c783",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2aa4ffb8-961c-4f25-b76a-65a824163616"
        },
        "item": {
          "id": "e3950c7a-f4b0-4fe4-8a8a-02937ea2c9bc",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "1758e482-5ab8-4c89-9160-9afab80d02a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3950c7a-f4b0-4fe4-8a8a-02937ea2c9bc",
        "cursor": {
          "ref": "8d71bca4-2e44-4ede-925c-d61ba0a6c783",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2aa4ffb8-961c-4f25-b76a-65a824163616"
        },
        "item": {
          "id": "e3950c7a-f4b0-4fe4-8a8a-02937ea2c9bc",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "1758e482-5ab8-4c89-9160-9afab80d02a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f24e90a-ef91-4c54-a6b0-260e74468b4c",
        "cursor": {
          "ref": "06e943db-451d-432e-871d-77a4708ce1b4",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a5400da3-4463-4cac-83e0-fcb552b34086"
        },
        "item": {
          "id": "0f24e90a-ef91-4c54-a6b0-260e74468b4c",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "7afea265-1a82-41bf-8d44-c26cff1be48a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f24e90a-ef91-4c54-a6b0-260e74468b4c",
        "cursor": {
          "ref": "06e943db-451d-432e-871d-77a4708ce1b4",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a5400da3-4463-4cac-83e0-fcb552b34086"
        },
        "item": {
          "id": "0f24e90a-ef91-4c54-a6b0-260e74468b4c",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "7afea265-1a82-41bf-8d44-c26cff1be48a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8c7180-62c7-4515-b11d-1cae81298f23",
        "cursor": {
          "ref": "a4d6c5b4-3057-4233-8dcc-6a3e3353b89e",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f6153a21-d878-4502-8f3c-3268153bb3a2"
        },
        "item": {
          "id": "5d8c7180-62c7-4515-b11d-1cae81298f23",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d3a981f4-f49a-45cc-9db9-bf55b133164a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8c7180-62c7-4515-b11d-1cae81298f23",
        "cursor": {
          "ref": "a4d6c5b4-3057-4233-8dcc-6a3e3353b89e",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f6153a21-d878-4502-8f3c-3268153bb3a2"
        },
        "item": {
          "id": "5d8c7180-62c7-4515-b11d-1cae81298f23",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d3a981f4-f49a-45cc-9db9-bf55b133164a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c57e11d-be0b-4f3c-a3ce-2a88d23f2d1c",
        "cursor": {
          "ref": "de14432b-6a07-456c-838e-6036d044784e",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "bb9a82b5-a3d6-4867-bb64-629a2acdae6d"
        },
        "item": {
          "id": "7c57e11d-be0b-4f3c-a3ce-2a88d23f2d1c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "5182aed8-6c62-4e18-8c42-abd006eae78d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c57e11d-be0b-4f3c-a3ce-2a88d23f2d1c",
        "cursor": {
          "ref": "de14432b-6a07-456c-838e-6036d044784e",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "bb9a82b5-a3d6-4867-bb64-629a2acdae6d"
        },
        "item": {
          "id": "7c57e11d-be0b-4f3c-a3ce-2a88d23f2d1c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "5182aed8-6c62-4e18-8c42-abd006eae78d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ee86b5-42fd-4cd1-bd9e-cc49ae409d27",
        "cursor": {
          "ref": "2446a938-2544-44a4-b95f-798eb4bd24be",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "76408c03-c4b4-40d1-bdc9-3c8d270b8821"
        },
        "item": {
          "id": "36ee86b5-42fd-4cd1-bd9e-cc49ae409d27",
          "name": "credentials_issue"
        },
        "response": {
          "id": "eb3c4db8-4637-4e81-abf5-ddcedbc9c5a5",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ee86b5-42fd-4cd1-bd9e-cc49ae409d27",
        "cursor": {
          "ref": "2446a938-2544-44a4-b95f-798eb4bd24be",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "76408c03-c4b4-40d1-bdc9-3c8d270b8821"
        },
        "item": {
          "id": "36ee86b5-42fd-4cd1-bd9e-cc49ae409d27",
          "name": "credentials_issue"
        },
        "response": {
          "id": "eb3c4db8-4637-4e81-abf5-ddcedbc9c5a5",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "feeb2427-de01-4dbc-ab54-596c6fc42f82",
        "cursor": {
          "ref": "286bb642-5fc5-44bb-ae3f-c055d0a6d177",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c748cb41-5fc1-475d-ab1c-a8f4d8eebe34"
        },
        "item": {
          "id": "feeb2427-de01-4dbc-ab54-596c6fc42f82",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "c9552972-8f96-44df-baaf-635c0bc8980e",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feeb2427-de01-4dbc-ab54-596c6fc42f82",
        "cursor": {
          "ref": "286bb642-5fc5-44bb-ae3f-c055d0a6d177",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c748cb41-5fc1-475d-ab1c-a8f4d8eebe34"
        },
        "item": {
          "id": "feeb2427-de01-4dbc-ab54-596c6fc42f82",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "c9552972-8f96-44df-baaf-635c0bc8980e",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdef3bdd-c5e7-4b6d-a3bc-f416a78a1432",
        "cursor": {
          "ref": "cddb7a33-14cd-4941-9c23-d3b38f150a4d",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "02011eb6-92a6-4a8a-8044-8dc4cc959144"
        },
        "item": {
          "id": "bdef3bdd-c5e7-4b6d-a3bc-f416a78a1432",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c9c8f038-5033-45ea-95c8-3ab0de45305e",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdef3bdd-c5e7-4b6d-a3bc-f416a78a1432",
        "cursor": {
          "ref": "cddb7a33-14cd-4941-9c23-d3b38f150a4d",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "02011eb6-92a6-4a8a-8044-8dc4cc959144"
        },
        "item": {
          "id": "bdef3bdd-c5e7-4b6d-a3bc-f416a78a1432",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c9c8f038-5033-45ea-95c8-3ab0de45305e",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c60942-dd13-48e4-899a-8a33f07df0b6",
        "cursor": {
          "ref": "06143c01-bf72-45b9-9ba4-50c7ccd362f8",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5ac5e8d0-280e-4851-9e38-85706fb2608b"
        },
        "item": {
          "id": "f2c60942-dd13-48e4-899a-8a33f07df0b6",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5170961f-5511-4431-816a-4f8c50be171c",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c60942-dd13-48e4-899a-8a33f07df0b6",
        "cursor": {
          "ref": "06143c01-bf72-45b9-9ba4-50c7ccd362f8",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5ac5e8d0-280e-4851-9e38-85706fb2608b"
        },
        "item": {
          "id": "f2c60942-dd13-48e4-899a-8a33f07df0b6",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5170961f-5511-4431-816a-4f8c50be171c",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec9882c5-3fb6-4f87-b4f5-2a0128a1ca83",
        "cursor": {
          "ref": "12a801f8-7766-4a4c-a266-7f71d9f4c792",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "00fea4af-feae-4126-b723-ad438c0f8de7"
        },
        "item": {
          "id": "ec9882c5-3fb6-4f87-b4f5-2a0128a1ca83",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1aa53590-c892-465a-ba24-d30ae2e0b27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ec9882c5-3fb6-4f87-b4f5-2a0128a1ca83",
        "cursor": {
          "ref": "12a801f8-7766-4a4c-a266-7f71d9f4c792",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "00fea4af-feae-4126-b723-ad438c0f8de7"
        },
        "item": {
          "id": "ec9882c5-3fb6-4f87-b4f5-2a0128a1ca83",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1aa53590-c892-465a-ba24-d30ae2e0b27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9bdc3681-d8b7-4716-9ecc-25845a6c3564",
        "cursor": {
          "ref": "43b132da-e41d-4b51-9a90-da687af2829f",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f0a56c75-ada4-4304-a263-361204ccbfc8"
        },
        "item": {
          "id": "9bdc3681-d8b7-4716-9ecc-25845a6c3564",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "432bcd27-a7f0-4539-95ad-394085ff1e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9bdc3681-d8b7-4716-9ecc-25845a6c3564",
        "cursor": {
          "ref": "43b132da-e41d-4b51-9a90-da687af2829f",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f0a56c75-ada4-4304-a263-361204ccbfc8"
        },
        "item": {
          "id": "9bdc3681-d8b7-4716-9ecc-25845a6c3564",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "432bcd27-a7f0-4539-95ad-394085ff1e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4520afd6-9754-40eb-88c0-a36d2476f973",
        "cursor": {
          "ref": "3df5bf50-f35c-43be-b1b0-c8217a88e90f",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c6fad657-f47f-4759-82dc-ebc192daa97e"
        },
        "item": {
          "id": "4520afd6-9754-40eb-88c0-a36d2476f973",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "e5bed8a4-fdff-4e5d-8663-c444f8eb419f",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4520afd6-9754-40eb-88c0-a36d2476f973",
        "cursor": {
          "ref": "3df5bf50-f35c-43be-b1b0-c8217a88e90f",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c6fad657-f47f-4759-82dc-ebc192daa97e"
        },
        "item": {
          "id": "4520afd6-9754-40eb-88c0-a36d2476f973",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "e5bed8a4-fdff-4e5d-8663-c444f8eb419f",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd702212-e706-451c-be0d-6296b4ce953c",
        "cursor": {
          "ref": "a2bf3e46-d966-4663-aa51-5f906b044f74",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f4b2dfd2-b05c-44d1-860d-f4b3c95ac35b"
        },
        "item": {
          "id": "fd702212-e706-451c-be0d-6296b4ce953c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5fd7e028-8e0f-4935-b0d3-7ac5357e1aa3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd702212-e706-451c-be0d-6296b4ce953c",
        "cursor": {
          "ref": "a2bf3e46-d966-4663-aa51-5f906b044f74",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f4b2dfd2-b05c-44d1-860d-f4b3c95ac35b"
        },
        "item": {
          "id": "fd702212-e706-451c-be0d-6296b4ce953c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5fd7e028-8e0f-4935-b0d3-7ac5357e1aa3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23cc609-a5b6-489e-8b9a-d28582c0d0d2",
        "cursor": {
          "ref": "05dfe3f0-e63f-4f29-9c54-283de3457189",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a0ad19dd-4767-487a-80aa-7fc327acf4a9"
        },
        "item": {
          "id": "c23cc609-a5b6-489e-8b9a-d28582c0d0d2",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "fe200154-1c77-4d9a-ada2-df7f67b0be6f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e867f9-6fbc-459a-abea-e848ee205b22",
        "cursor": {
          "ref": "d3e2db98-8985-4d7f-a58f-0a9a9733cd9e",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "924c72b5-2a7e-4937-83f2-15a9c2a7b75d"
        },
        "item": {
          "id": "a2e867f9-6fbc-459a-abea-e848ee205b22",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7257abe7-f0cc-4626-a32e-16c4bca5674c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e867f9-6fbc-459a-abea-e848ee205b22",
        "cursor": {
          "ref": "d3e2db98-8985-4d7f-a58f-0a9a9733cd9e",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "924c72b5-2a7e-4937-83f2-15a9c2a7b75d"
        },
        "item": {
          "id": "a2e867f9-6fbc-459a-abea-e848ee205b22",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7257abe7-f0cc-4626-a32e-16c4bca5674c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d203b042-9c4b-44de-88c3-474e026b727c",
        "cursor": {
          "ref": "492d7e1c-7891-4a6a-893d-9e4347c327aa",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "04c3cf1d-3888-4346-a78c-d16c7dd01eca"
        },
        "item": {
          "id": "d203b042-9c4b-44de-88c3-474e026b727c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "58a3f92d-d326-4949-bc23-7ab1e3f3331c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a0d94e-d155-4240-a722-232e7a090550",
        "cursor": {
          "ref": "5044d26c-50f9-4590-a2d0-72d0bcbfbdf4",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4143bcc9-cfe9-43fd-9836-9c650de39010"
        },
        "item": {
          "id": "00a0d94e-d155-4240-a722-232e7a090550",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "fe82fc24-40f2-4691-b485-dc288b283d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e1cb8d-7405-4344-b628-fcbece8431e1",
        "cursor": {
          "ref": "55dbb999-3521-4bb2-a011-0b89281e0060",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3b14fb1d-279c-4034-b67e-2a849756372a"
        },
        "item": {
          "id": "86e1cb8d-7405-4344-b628-fcbece8431e1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5365c994-fc1a-468e-a415-085c0bd90fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62a61a6-58d2-4058-85d0-01d385d33cf2",
        "cursor": {
          "ref": "a62afe7c-6797-4815-a39b-ea7ece7531d6",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d4b18e0a-2403-4e60-9a2c-0d387cf35c67"
        },
        "item": {
          "id": "e62a61a6-58d2-4058-85d0-01d385d33cf2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e6be766d-314d-472a-8001-7b14f943dfa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54d99e7-40be-4025-bd8f-f3bb5da442ac",
        "cursor": {
          "ref": "83baa1f7-4890-4950-83fa-a0623d265633",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5ab48032-97d0-48e4-af6b-0d4569b13399"
        },
        "item": {
          "id": "a54d99e7-40be-4025-bd8f-f3bb5da442ac",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "261459e3-4dcc-4d8a-ad2a-99341084806c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 135
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5812ff09-feda-4a67-b3d6-fac0c449e608",
        "cursor": {
          "ref": "d6af7983-798e-4e6c-bef2-c3dd93138cf8",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "20959096-241d-44bb-8575-b033b0a1a522"
        },
        "item": {
          "id": "5812ff09-feda-4a67-b3d6-fac0c449e608",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6a80e49c-9dc3-49d2-b372-f0f85710f1ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe1e9d3-4483-413e-a7f3-4067276ef1d3",
        "cursor": {
          "ref": "f2a33a5f-734c-43b5-b30a-4c3d1e5b8043",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2fa76d30-d808-4876-ba6e-d3748b364c3f"
        },
        "item": {
          "id": "8fe1e9d3-4483-413e-a7f3-4067276ef1d3",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c2971441-d427-4b41-9268-9cb1813e2614",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a137eeff-ac94-4476-9d22-22a7804912fd",
        "cursor": {
          "ref": "85b7bd3e-2ccd-4490-954e-16dc19f5acbb",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "78e73990-9d08-40a9-9554-e0ce3099c4cb"
        },
        "item": {
          "id": "a137eeff-ac94-4476-9d22-22a7804912fd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "677906d9-1a3b-4fb2-bd80-1a09df628f83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a137eeff-ac94-4476-9d22-22a7804912fd",
        "cursor": {
          "ref": "85b7bd3e-2ccd-4490-954e-16dc19f5acbb",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "78e73990-9d08-40a9-9554-e0ce3099c4cb"
        },
        "item": {
          "id": "a137eeff-ac94-4476-9d22-22a7804912fd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "677906d9-1a3b-4fb2-bd80-1a09df628f83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0847cb-d977-488d-80a0-cd57dd77ad8e",
        "cursor": {
          "ref": "8bf200fc-d008-48b4-960d-bb4428aa17f8",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3ab8897a-bf95-46aa-89c9-5d23e17a4ece"
        },
        "item": {
          "id": "5b0847cb-d977-488d-80a0-cd57dd77ad8e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "c143a233-4b83-4534-a4e5-08c7e8edfbf3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5b8ae1-205f-484e-b202-55a7d4980500",
        "cursor": {
          "ref": "7b4f7cdc-da4d-4f70-a787-ca9daa24518e",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d947aae0-4fb8-4257-ac0a-12aa7928d57f"
        },
        "item": {
          "id": "fc5b8ae1-205f-484e-b202-55a7d4980500",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "225b2485-3a4f-41ac-a91e-e73cbb594e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "fc5b8ae1-205f-484e-b202-55a7d4980500",
        "cursor": {
          "ref": "7b4f7cdc-da4d-4f70-a787-ca9daa24518e",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d947aae0-4fb8-4257-ac0a-12aa7928d57f"
        },
        "item": {
          "id": "fc5b8ae1-205f-484e-b202-55a7d4980500",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "225b2485-3a4f-41ac-a91e-e73cbb594e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "64893e14-e45f-48e2-877f-23d2fbb7da6d",
        "cursor": {
          "ref": "c8e8c015-f881-45b4-9c9f-d16d98618155",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "485ac0fc-bfa4-4ba4-a61d-a6b53689401a"
        },
        "item": {
          "id": "64893e14-e45f-48e2-877f-23d2fbb7da6d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "a24996cd-6703-48dc-8c27-df4a8c27a6f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "ecb95a33-5787-4cb2-87f2-5ad8f97d2c2e",
        "cursor": {
          "ref": "37ce3701-c11b-4810-8f1d-7cb1969544ef",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d34c4fd0-1d7f-40b2-a206-9b70f57d9712"
        },
        "item": {
          "id": "ecb95a33-5787-4cb2-87f2-5ad8f97d2c2e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "60d853bb-9e95-4855-8fe4-c6668c732f80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb95a33-5787-4cb2-87f2-5ad8f97d2c2e",
        "cursor": {
          "ref": "37ce3701-c11b-4810-8f1d-7cb1969544ef",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d34c4fd0-1d7f-40b2-a206-9b70f57d9712"
        },
        "item": {
          "id": "ecb95a33-5787-4cb2-87f2-5ad8f97d2c2e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "60d853bb-9e95-4855-8fe4-c6668c732f80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d33a3a7-906b-429e-9045-995d65aa25d3",
        "cursor": {
          "ref": "211f6ada-8cda-47fe-8369-5c60038e529c",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c2921d3f-41db-4b00-b678-090b5d2c4215"
        },
        "item": {
          "id": "1d33a3a7-906b-429e-9045-995d65aa25d3",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "42db7f4f-f941-415d-ae94-1dc27f88450c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}