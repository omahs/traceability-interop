{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "10e72e1c-65bb-46da-89f2-97b7302a7efe",
        "name": "Clear Cache",
        "item": [
          {
            "id": "45a1e2f5-57d0-458e-9cce-40a01d2e99cb",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9b16be46-74dc-48f0-ab28-25c2ac7b9a63",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "52e2cffb-3e1d-4ef4-b2a2-9d8787de2ef8"
                }
              }
            ]
          },
          {
            "id": "bb07725f-4da2-4ce9-a145-df6c3c12fec4",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "95bb7630-cf5e-4e5f-8217-73689b146880",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "800520af-f7e4-4f0b-954f-3c84525e81c4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "410aa328-3d48-48ba-a09b-5faab544d94b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4b7a84f8-fc59-4dc2-b7f8-e68590deac00",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6b8e9693-5b46-4510-a1aa-9914c48bf164",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc581e38-ccc3-4b78-9a3f-d9eb98581c0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "243ea359-2c87-4752-a0b5-ac2336492094"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0d2932b4-d630-485d-8f41-ec3850764d8b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3ed9d67b-5259-4f35-8dcd-0205d74b96e0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "344d96a3-d017-4c3f-8302-f67ce28a272b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20968318-360e-4988-be86-b9e6c2bf5333"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dfe79911-5650-4e8b-ab56-3636b46e7511",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "30e0bc0d-f548-41e0-93e7-7111387d6de2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c657253c-bacb-4d3c-b835-57d7fd1e9dd8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b790ee5e-176b-4c65-9564-46237ff5443c"
            }
          }
        ]
      },
      {
        "id": "978c8e63-d900-4a4e-8e46-a61d53c09d21",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f5461a75-5493-48ef-9d1b-3a8f6525414e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a1f3b2be-027d-43ca-90ef-50f6f38153b4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d8c040e9-e38a-473a-af9b-8a1fe435faeb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b1d781-d454-4cf1-a28a-f2f2a8c44fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2116d23c-c5c9-4d73-9605-7c6381906e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ac8f6b-6127-49b3-8be6-f5ceaca788e0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba1d634-3bd9-4737-96bf-3d6d75a95121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4841db04-9898-43a3-bb62-1c20067230c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70d6d10-2e88-4834-bf5b-ff548e825208",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3455cde2-2639-493c-88c0-98cbdb18fa2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a147eed-5865-414d-9f07-bb3425142346"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0edbc5e9-ce9c-45c9-a0ba-b22156fea238",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b1c578f-fea2-4102-9f85-e22183d8c976",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979709c4-a9d3-4507-966f-cb279f3a1f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ee3b6fe-fe40-4780-bad0-17200ee7c2a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b432db5e-65f5-4719-b56c-9b2c697e1c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52215845-c620-4e60-83fc-3eb06c7c70e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81f7ab4-ce98-47ac-873f-af73df4470bc",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a023f7-8e0c-450a-9377-f98e0e4fa687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba2b4f35-bc25-44bd-be55-ef46c24ccb09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813e1e34-0fd1-4fce-b7a7-f97be45e1a62",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "43b381b0-5ff8-4f3f-98d0-283d061e5dcb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8370c655-403a-419d-aa2a-de2e7b22e842",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3fa7432a-2c63-485e-b52e-52b26df3ba84",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e25fd222-d6f3-4846-b3bb-f532391ff7de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "08f0bdc1-a0ad-4ef7-bdce-e19256de0ca1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5859f69-ae5a-467d-afc6-b0f265f32713",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "b1704570-3743-4c9a-9644-164ceb074fc6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a1f1f466-9315-42f4-8daa-56a6eab96d3a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8395655-25fe-4b34-b69a-47e879524c23"
            }
          }
        ]
      },
      {
        "id": "3bf378da-d500-4134-9395-bc6abfc24e76",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e29c2c94-8446-4a46-912c-9ea5011a3b9a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fc7b32b0-6522-4bd5-a4f4-6fdc18969602",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0396f413-ff02-4be5-b668-8933bb0ebef8",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3611a05c-2de9-40b1-959e-62a7e45b3bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2610991c-70da-4e2d-89e6-91268421fc4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0babe995-34e0-4fb4-b0e0-ad932817ff9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf2f90b1-39fd-4ee2-b7a7-05a550259a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa1439d-c9bd-4339-bb71-814d046ea8ec",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d6a2b8-6731-4c73-a267-3ed9eb53644b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337afc24-8398-49ad-b322-572890366f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06aaa7fa-9d6d-4970-8c4e-a3862e95c317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "892d78d1-1cf1-4b31-98fa-597a19351dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8bd104-f49d-4dd1-a2c2-298d8234f5e6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7cf2baf-2490-4291-b689-618aed005b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dae2381-3ffa-4e54-9bb2-77583763f5d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f16401c-05ff-4d90-9ca7-9dbdd3dae90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03f463fc-7094-4157-8ac4-815c1d16d7fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8659330c-4c45-4c48-bfd8-97935683faa9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0770435-4808-48e5-aed1-fa28f6922021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d2ef11-268b-4899-8b46-033c9ade5bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4c0292-d349-41a9-9dfa-97458ff7d6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72202bb4-e85f-40e7-9e1d-fded776f3d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464f9113-5c6e-435e-aad3-56f940e607e9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a5855b4-74bf-47ca-b814-55a72ac7e827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c72216d0-d0e9-49eb-a079-6986ae276576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdebb778-299a-4fcb-b013-a0319e29a7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb6276ee-deba-4b84-ab75-2d8c403ceba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00bf2a0-1512-4f5f-a002-3ad1dc32b05b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e0257d-1e1c-4192-8610-5eeb90ba9310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46127376-c261-4d1a-8450-c070d44b14ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d289912-c751-4b92-8ecf-e2b625137416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5912e982-54a0-4ae6-9ca2-36d236aaeb9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbb343a-2a16-41a0-ab2b-c6d66f44a21d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c475bc49-053c-4cdd-ac28-36b80c4a6c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "585d62e0-72cd-4341-abbd-60de0ee4469b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1e9a91-098f-47b6-9edc-05677ab3f88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "308913ba-8a56-4d27-a26f-bc2023ab7ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e7070b-eaba-41e1-b2ae-c769a638249c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd25de02-0d47-4985-9f51-5ca634c83a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73877349-2a0e-4a3f-8152-333771ba3aaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744a0b4d-d3e7-4c3e-be68-02fa5cea97e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e456a76e-57d0-4ac4-9a47-852faa5d4d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f0d055-f8a0-4606-b7de-4020db43cdd4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed86470-aad6-4613-9021-2ac5418c3b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b254c87-64a8-4963-908f-65d6a6938281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fda394f-871f-4427-995d-d518bebaedea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72d340e1-4577-4521-9cfe-6d29a2cea52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0759081e-5697-4902-987b-d8f19dce0e31",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099dd0a0-af42-41c6-9a18-30da5ad665ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f1abc4f-68f5-4495-8da5-06edb1020e50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb46c98-3dba-4b4a-8fd6-29fd806dbfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33a1111f-3824-487d-8534-a770f4d03f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43c1a8e-e24d-45a3-93ff-df9f15864781",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6aabc06-c2e3-45c1-a46e-4c7d51fa4665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e068a854-c617-4307-8df7-53b12c2509c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114b3c2e-e59b-4177-9a91-589cba940f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef57c4e3-1ecf-4f65-ab8d-4fe153d50d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef0b91d-a63c-4bca-b9f4-fb2719b3f21a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55ec774-8ef4-43fb-b2f9-f5d92dcafa82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd92ffdb-c032-4947-90e4-1a2e83717a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85738336-3b41-47c9-8966-9069064adadf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9691e1c7-9fd0-42c8-9411-88d7233a22f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe37289-7a93-4249-bc80-b4155b07ec1c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "730db867-99b0-4d2f-84dc-5458089e503a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a7d26d4-d120-49e2-8482-5adfd19a08e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4349a500-7f7c-4083-8e06-a7294c88f1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d07c9024-c8bf-45bf-85e0-9c12e2a24b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2daa7c3-b645-408f-b9ee-4e0d3c79d70a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec01ff9-10bd-49d6-bdf8-6f26704dfbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0100035a-7087-45c0-891f-88c8b0d693fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e017ce-1195-455e-acf8-45feb342166a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82226886-65e0-414e-8f76-fdeb2b2786b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c555e37-d68e-4f62-9c7d-8b25fc347e8d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1accdb-9263-45a6-8345-671fb984ac0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "260b7840-af67-4b66-a320-0c30020040c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd39a01-c428-4bf7-97be-6394c152bd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8da1da37-ec49-44bf-8c83-8118d33f9f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31dfa268-e6c4-488e-a895-8c0262ca511f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bec3516-04d6-411d-9089-d76ff78fe678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7436ba52-9abb-4209-82c7-804aac109574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064252f5-ccde-4a11-94a8-0f7e5a6057b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5ee8320-0854-46db-9b23-c29eee68b460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebfe1ef-1b82-4bab-8fce-1f159e735db8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e4231b-db7d-4aa4-97f7-d31afc7dafc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70c7d7e-bec3-4788-befb-4bce3b412309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d43da4-678c-441b-bbeb-86d67d4e8bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4590d7db-af96-4cb1-a729-0cf2173d26e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af638d8d-5c23-4b10-af75-2b6d9fbba327",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "561c75d0-1f07-457e-9697-da84ea149ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f75e7e5-65c8-4c36-b288-76bd730f49ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "000bab0b-abef-467a-b4ec-8298132a58e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "062f9fb4-a2c1-432d-aab8-ce40baa82b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547334e0-558f-4fba-98e4-3977832a5dcd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d06768-9c8e-4a0b-99bc-906f3fa3905c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05215a78-4ff2-4c07-a464-4e97d1367b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d68a6e-4f18-4523-9703-958e70a97c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45da8f3a-4ae4-4b77-ab3f-a093564963b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0319ef7-4aaa-442c-8c3d-e595e51445e4",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe69916-5a20-40d8-b92d-36ae9b91bfee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c9d1212-e2a0-4d7e-b41d-d4b8437d0024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0f1627-f75b-456f-97af-b563c4f03246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0867c051-2e88-4c54-b28e-cf7ebb27f323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db3652f-2882-45fa-81dc-de0f6c4c5531",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbbe9be-222e-4559-a0ff-8e470657bce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7e0dd10-bc8a-4a05-9d4f-fabb0d55d65c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7dd62b-8574-4725-b0be-5af4c6b71b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c90c36b-a25d-4806-9250-b44c45579105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec91c03-11b8-4324-a7d3-997f4a62765a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc578401-212b-4221-9022-1009b4747f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da4e23a4-8e09-4ecb-aff1-7d542a39ad8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77dfe8a-87b7-4621-80e6-03bcfa0993c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "67a52186-4ff8-476a-bc62-0a1d0a175404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eddfb51d-cede-45a4-988c-7e1f95421ade",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d203f2d7-58c7-48ed-b2c8-a99f6cf7875c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07c37456-da4e-4d77-a1d2-4f47d9d71eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f10505-d29a-4f4d-9af8-2005add29b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cae9c0b8-6c4f-4b40-9789-c7ecdc611b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd21c02-b953-4512-808b-1bf8074eb0af",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e22f1a3-106d-42df-a896-82528aebe4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b796f810-afd8-4569-8987-978a1b7e2f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88b4580-7b56-4eba-acaf-aef4adce1e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "52b0bf3e-dcd9-477f-8fcf-ba514b4088d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85ef136-f0b4-408e-9f30-a55abc364de9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a32957-f1eb-4564-ae0d-0fe3ee86676e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b114576-99c3-42b2-a536-94b61a24e65c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7f60e9-c429-4b49-a73e-b1d51b57abd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab85d09f-a85c-4719-bac7-23129b80bbe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1c355c-ac86-4b51-a424-1380f1825807",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39879187-c71d-4d3a-908f-38e59821af6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c70c86e8-97d8-4d1a-82f5-47eaa71bbc68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06b0cd8-df17-4c4b-9cf1-080b6174f66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3270bf-7111-432d-80b3-af481327f206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f47ea0-3798-4ba6-8962-a3b11f915d4b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4c27fe-069b-4ddc-987a-18a8dc08d514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a823a797-c726-4bcd-be73-5948591e8535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60bc1a11-aa45-4635-b05f-fb14fb9d8317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3dec0c8-3873-4fc9-8774-e7f47f3dbbeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f2caee-85ab-473e-8e1f-e113a13d3198",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd14010-424d-4523-9d69-56fa2cb3c412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac14d341-a9b3-4681-ac70-87eb6e5fb177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a92472b-72e9-45ec-ba79-eb0bd9e41363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "499659cb-1dcd-4c1f-b20e-3c5e323bb2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb14a39f-40a5-466d-88b7-ad10980a8432",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8667838-4c9e-43af-a35b-57e026ff6b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3a9b255-11db-400c-afda-a11faffa47f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75247e3e-461a-44c5-8535-accec2536b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "314824f9-72bb-4b16-9c73-62d0ef406ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf00ba2-28d3-434f-9d18-02e1cbca11d4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e604ba-e26f-4e31-aaab-ccd853e0efe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c8504d5-38b1-498c-986c-83a93bcd7209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a0cf30-759c-45e6-a086-f7609ece8b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "36b0a257-cf6f-46bc-b40b-969b506e1448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8084499c-df51-4734-a25b-1b3b400b901c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c695bb73-9426-421c-a3bd-0b516a86b1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb75660-d8eb-4b1d-98cd-68117f7f4bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f39241e7-2177-4b88-b633-3aea41636315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d87302cf-e12c-42ff-b48e-d9a8e692e618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10dbe886-56ea-4987-8fb1-36814ea8ff94",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019596df-9103-4f47-ae7a-33fb10f06b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1d184ba-9b9d-47a5-bb7e-121c8948cc6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e42128-56f5-4b7d-9fd9-5c38bbe6d2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5276941-a715-43b7-8d5e-6e26926741e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12c33fe-579e-4dea-84d7-9cd072eaba54",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3eae07c-aa93-4735-9c29-d3f1c7a10276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53dc8112-d84f-4a25-9cf2-eba690b8b49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3529ba-5a80-4538-b36f-703abe23e9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5e874ee-2569-4774-97ab-2fab23d54ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bcca2f-9e75-4e7c-8e71-88804b6f0f68",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8a720d-4fcc-40c0-9a96-954274512cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "234bbb55-095c-45cb-ae0e-b860b871c016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffb57ee-3ed0-41a0-9408-4935e4de7caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7abf077e-64c1-40ca-975d-ed1a2c045bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8304aa2a-9379-4353-b90c-16f506f21b4a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b14bcb-032b-4670-bc01-435b7862fb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b12ed774-cdc1-44a5-81c6-750035bf647f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640cd08f-3b57-43fb-963e-33b64ceb8bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0796d123-c656-4b48-8a86-1fb94206b53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674bd229-5d00-46c1-9cbc-c17c5b4839a4",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1098d1f-716f-4e64-b821-aad6b19feeeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b299b06f-b3cb-42ed-a176-126967f201a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d59e01-bf3a-4119-a50e-f3d6579651ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a593e67-faa9-46f7-9bb0-6452d7fe4858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37af4df-f18a-437e-b29f-26c3313175f1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0488caf-13aa-4fbb-9bd2-559219169ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc1a343-b886-4732-8ed7-7c3eeec4e0fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b3ea4a-d6bd-46f1-851a-615aae0887ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e33ea70-98e1-448d-bcf7-e5b726da18bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de31887-8d26-405f-9f7c-c482714d8cf1",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4643f6ce-253b-4731-92aa-078b348e7c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d882c987-b7a1-4f8a-8b5a-fa497b53f3bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21b77f9-b3fe-4ee5-9f50-21198b957b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b6de701-be9a-4643-b2bb-1d72638fcb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1305daa9-ea8a-463a-811a-e2e074b349e6",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114a4f14-bcf2-48d6-ac4d-5af51a99c1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fa13222-00d0-4fad-829a-b7fec37b8d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cfcca92-9d68-42ef-8eb7-307354b014ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9733fe3-587d-4f08-b09f-dff1de7ac945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae6ba5d-a72e-46ef-a918-e29e1ee95a3a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e478282-67c2-4f4f-9180-aa6365277f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b275a6-be32-4240-ba7b-ed1436092173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e66764f-8764-4a29-ae47-301ab67d14d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "68383079-91e8-4711-b728-67c2726c1cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9290ef08-c447-4d55-a293-a516d425cfde",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef857127-9540-44b0-ab67-7f93d15648c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be3e4ddd-4233-40a5-a2b6-7bdd82e00930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72c8ed2-6f46-430f-9f40-18553d389380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9df68320-aba8-44e1-aed3-cb0fc001bb61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7951397-9193-4ae7-ae38-bafd15f25ecd",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04293347-4cac-482c-90a6-3a7de4623270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e01ccf-3319-4dd8-a14b-730c7da2f757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbe121e-cf3c-4fd6-8bf1-a1a2f1b553ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b41fda57-1662-42c5-8fee-d14d19ea38ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524b5e40-08de-4ab5-92e2-0f57b2ea03fd",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5362f64b-7637-4f25-9f35-957937f05bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bf05b48-f256-4cd3-96f0-3f505d184a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac84473-ad66-4262-819a-5c5369d9d6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "774706a3-551f-407b-8764-3f1ed4c3650c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49664c7-4f06-4247-9f5e-7a65f11fa216",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "810c7bfd-d055-4bf6-b2b4-7a84915c4a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ca52a9-f750-4330-a325-c966f6ea61d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0accdb2a-cf47-4c25-9c7b-1c3d84f63585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d439cd0-0e2a-4c5a-aa46-d6a5a53f455e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b6a8f6-e9c2-40a5-8597-4e88df6b3fb0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7e5362-9414-4016-9fc7-20bbd9b52720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5839f0c0-441d-4bab-8d4e-ce4e567f15bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb93439-e6b3-43e1-ae84-31ac7a587154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b221e319-9f9e-472f-94bb-5b583cb54c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ecc8346-0c56-48c5-838d-7f82c76ad7dc",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28be8537-cd05-4409-a899-6ac509a8e6ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60add8cc-1e38-4c90-a2b4-13891de3e124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f886460f-cd55-4259-9c3d-7aaa58af9ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "847b96bc-8002-4ecf-869a-530447ea1e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c4e15a-3c74-4bdd-a3ce-0b92fd2e3810",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c7ba1b-2f69-47d4-b31d-ec7f945d4b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4844042-6056-497a-b960-1a96d25a7ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2fe044-d190-4f00-a98c-345461cb116d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a5134d-085d-4572-ab22-c8d3969bfd00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214b430a-827a-43bc-bff1-2b888e302cee",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e02e936-d23c-4f84-8f3d-f4cd6a5c25ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad5caf9-4254-4958-8bee-79a4333a43e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc52b24-8861-4501-9d75-1cb674ddd615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "678a4146-681b-46c8-84ef-d07b4b9d7d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8288868c-52e1-4ba4-a7bc-2fc5d63577af",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a24fb4f-da48-4f49-a173-dd2ac5a8baf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c8218d8-a584-423a-b921-dec43c2b7805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4a8fb7-50c4-4ca1-9d44-536c74e9769e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b4284c-c4fa-4900-9ffb-db465556efe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76c9c68-7c29-44a1-9467-b0856aa29d80",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57231e88-9a2a-4b30-a4eb-afe0e85fe10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d87ee2-14a0-45d8-bf24-ac998cbd435d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af35681-990d-4f88-ad5e-366af0780f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72b3fb04-7fce-4753-b254-98633b773b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6873b579-a9ed-48fc-83f8-9c3aef197b8d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18dfd35f-9e4d-4519-bbee-6ddb98c6ad2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34cca01d-3039-427f-b971-145f5fd58b8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd253dcc-1ade-4188-8751-50ae720d069e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e379d5ae-4285-4041-a1dd-92a942f6cea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6ce4b6-3621-4178-8931-74305f04ea3b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac408cc-3976-4f52-8b0d-4ff452f58eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "609bc0e8-00db-4d5f-9796-8ef23a4f8ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b0c533-53fe-4c02-9b6e-de734166c074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3742caf-ae63-45e5-b244-7e806a01cfb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9157591-755b-46ac-b797-a27aaf037808",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fbf12b-40ca-4a55-9179-bab849ff2c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146d9665-dedc-4cfe-bab3-6b0daf8ea8a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e39d5fe-4148-4e11-9030-bc1995593869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "57769926-c8c2-4e19-a637-a4286c805567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b853ff1-b9b9-4172-9c23-05747dcba6eb",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3361303-336d-4a3d-9b9b-d6e27913b085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5ee3e7e-4d43-4fdc-9b67-dc7c1be7f3d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67aada0-f837-40ed-b0cf-ab360638dab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a9fe87-4a5f-4562-b895-fc322107353c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ef7f1b-f53c-4d89-9daf-d5ab52393e26",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb4cfb8-028d-4369-b4b2-91e35c5a99b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a5dbc60-856b-4bdb-a982-c1f47d15c5bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb111a04-26e6-42a4-b15d-96d11815fc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "16eb1c1c-68a4-4e29-a1bf-6e53c2b9f6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51021b9-d743-4a21-aadc-5fa494b8de94",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f09c520-838b-4d34-9ae1-abfa95021d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3c6e92e-d984-463e-922f-ab7a0c6fa524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5141d6-5e8f-4c8b-9102-6f1152aa976b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9114fd38-9e7b-468c-b2be-6a2332d7a50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8bd108-8a82-4ebe-86ee-886ba51c97e2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42ae13a-b81c-4cdf-82d2-b6de23555069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a559bea-0e51-4e8b-9697-b15f387cdd03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8869e8-c374-4939-af0a-249e362b7b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "23acd7bf-04c9-48b0-8dcc-bcbcdfc7e315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35d764b-41c8-46d2-a1f5-8a8b8cf4ae20",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa793688-4f2e-400d-a7e1-6cfa1b3f3229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1625121d-5ca6-4408-82be-d136c0fd175e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357fc09b-0066-4204-a010-38571848b024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "02644116-bfde-4e88-bbfc-e950ad3d01d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e7bcb0-7142-4bb0-8b9e-3d8d7bfb52d1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea57b260-e8e2-4990-8d4a-f25fa0e4f6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bbf1a34-b407-42f8-adbc-79bd6ee8dd97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23fd46ea-2211-47b2-994b-4e3826a954a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c3eb3c3-db76-4e91-af53-5a2443d5e022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fdb3c18-6473-44d8-b349-1b0cfa04b055",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de68693-285e-46a4-918a-25872c140908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30eaa2e-1d3e-4690-9645-6a9036675048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1523e17a-5f52-4a7a-8f27-317d72db11a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f782b6-20b0-45f9-a9df-131f2ba48cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7546ac-e8f1-4e71-a350-bdc78056de8f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f68b146-c39a-4160-a01d-b1a830d2ee7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "651142d9-6db8-43e2-9e11-942d892f8072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e760d8f5-72b3-4352-a86e-1c2898f2347f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "15cce779-f3f8-4002-9a1f-64a0426fd85b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3c630f-84c0-4986-bd26-5eb0000610fb",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae444f27-a419-4442-91bb-8e3db0796b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd2cefab-762f-4e52-99c8-41a6809b81cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666cd7eb-f372-4f8d-a4a1-4d8c00464a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "05d058b3-424a-4722-b219-cfd3d991539a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbff9645-cbb0-4c3f-a5eb-26a11a61fb4c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4778ca-4b7f-4f58-a87b-061578688e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4ecfcfe-622c-40ce-b3e2-68c5976d13cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288e3941-67ee-458f-bd18-1b5010e76473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a576487e-08c9-432e-ae68-29453d6a68cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c216a08c-2272-43ec-b107-a6f9793bbc5e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fa66c2-d5a8-46b4-8a8c-c5a5a9ddb357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7021f2f7-b813-4461-a8b8-a84cfca37158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ef4e86-b413-499e-865b-7db9a6bdc939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ced888d9-4917-479f-9dc9-17ec849d2eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5aa42a-d9b3-41f0-9ec4-32453a341fda",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e9a46d3-5667-4d27-9198-0be75adaac05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f83a8b-623f-48a5-911f-103f151daa63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e28c03-0669-4862-98a3-0b80038ef1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74f11294-f321-407c-83a1-f685906c2575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014c0adf-c557-410a-b12b-0d287138f474",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ddbb52-1c71-4474-8927-e1454e505d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a4915d-2a0b-46a1-8895-0fc0ca43656f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f92b1fc-cf51-4dbc-8e2f-2173432e884d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "58682f86-d092-4bef-bdf8-1988f19702cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97efc56-6bdf-45b0-956b-5d3cdd5fb1af",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a15722-698c-43fa-9579-69fa299c89b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b61a4e-f3a7-45ae-84de-f1b5410cd120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9927a7-0296-4eab-9484-63bc423ea7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a8bb321d-5fd7-41da-b975-68abb0638c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a065959-bd6d-4f19-85a8-da3d571ae8ce",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9c6103-fb4e-43bb-95bf-92ad0fd5e90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27c0bd1-83db-4069-a900-4f2f8adfaa82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097228c8-9fec-49f3-967b-31153f9162bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3568d053-88c6-4985-b2f8-c9fd58015d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e918f8-62af-4af1-ba3e-477ad50a3e8c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1504b60b-78d9-43c7-84e7-67f3eb603a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c745ff20-ba06-45da-b8ec-d0fc17a87d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49822edd-3a73-470d-809f-e820bb562042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e267893a-f681-4088-83c3-b375bc25574b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b4aa3c-7ca7-41ba-8df8-216ae676f7c6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4bcf72-4185-4466-9be6-a682934d222e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02f78d67-b2c7-4055-8a80-e73052bd9242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c96491-818d-42b8-ab39-9c645b2861b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f82e50e-75e0-4a8a-8746-1f7e8772f90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "812b0c06-04a5-4d05-ac25-ec99ed945fcb",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e7c7ea-b203-4b93-a75f-215943ad2626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dec8969d-6e69-4e00-b727-a7b225f1b286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d5f148-a5c5-4e16-88b6-068268d4b674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ed466bf-453f-4fd2-8d56-f4ef5b4ead43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73867417-8917-4697-88cf-d2f81e8ba41f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7531be7e-2955-40ee-85be-3d9e85a095da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0fdf01-a284-4a51-818e-658fb245c8fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a808a762-4b18-417e-98d7-5454550adb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc49d61e-4ebf-4ddd-ad85-cfd83a8746b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45c9513-b406-4570-b85c-3490e5989b2f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a403e0d-e574-4e0d-bc66-70cefd50dfa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59e3df35-f5a1-48bd-b9de-cf8b53c359d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14235d0c-5f04-4c8c-9f43-798b7ee32dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe1f976-b4ec-4cd1-8b5f-034239d3971a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82d5c08-0078-4712-a0b7-5b5b718eccb5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6577cd79-c4f4-4978-b175-e94480d67e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55dd39b9-bc14-468c-9759-f91b99e726ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4afab6c-388b-4713-81b1-a5aeba3309c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "449987bf-ade1-413f-98a9-f47c5407190e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a6d2f5-33ec-453a-91b0-24083249825a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc48e95-f418-45e8-9b40-2ef87c4d1919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7c40f1-062d-401c-a223-f8aec96e09f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e9e6f5-09cd-479a-ad40-aecca3d14634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ffa0ef9-5712-4258-b37e-1e7353e38ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26913426-6a1c-41b3-9b39-80adf5a1e2c9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade6e551-052f-4637-bbcf-c127291a626e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a9fa7bd-510d-4443-8daf-19a017d02c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42e9474-947a-48da-ac4b-68aa01f03f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "99db3cff-d1c7-4d46-9bf2-35bb6acda28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c020ca02-4067-47e6-9c58-47daca71fb53",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "408463d8-b6e2-41e1-899b-14e53ee42035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304add2b-480e-4d27-aef4-14a59b8a00c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a9b61e-35b9-4980-ade4-93ee92eaef1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "390063b9-475d-4b4d-acfd-efca7686cfff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd37b547-d8a7-4d97-a5b3-f95146b131d4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783702a9-a1c0-49a0-b07f-71b15d726f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc867f7-d9d6-47f0-9bb9-f4dad38b477f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76beef74-ed41-4bb4-a5c7-051fcea6527d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a2b02e5-30af-4d9c-951b-20427b6ae16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5a2192-5854-4a4b-841d-61f6d6974425",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8195c07-ed11-408f-a7c0-a04df017c004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08223e4-c959-43b7-8afa-0588cbe0e181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a34b682-1f6c-49d2-9fde-8364f7b14d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c62fba95-50d3-406b-bfc4-f078e36f2e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1ea975-8f0e-4476-b18b-b3376199bb02",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f89959-e706-4ff1-972b-521e8b62d375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ee6da8f-c3dd-4280-a4eb-93ff4f0dd10e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2542250-1ac9-46c3-8672-07732b2ad213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "085192d6-9f5c-4b80-bde5-bfba5a3efc48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7dc53cd-509c-4a75-9461-4b859be5ba17",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f335da86-6cc6-4fb9-90e1-1d64845d0c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50d38661-c477-4b05-9aa0-2a7865568531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6625dc3f-024b-4218-a467-d1e5d66f5ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f90c77-0d36-4199-a518-aa363e3c3dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a0a751e-101e-4ae8-a624-4ce0b2373c8d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c252b99d-4d9a-429b-b163-4c73102c91c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0da1061-ce65-480a-a9b5-30d6b502cd12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c3c5e9-b9a4-463a-9b65-0db5871b4b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61e5f71b-7efb-46e5-940e-ad81a18372ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b781e28a-174d-4e6b-ae19-649fb15a2fe3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7381cee6-6ceb-4b03-ac64-515131d23fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c648ee4f-6acc-4a30-ac0c-690c377bde5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767ab30a-625c-43de-ade7-6f9c98919f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d453a352-a65f-4465-95ae-3e7e838301a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0847955-0018-469d-9eab-96c5118b85b7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43272992-8227-41ed-8e7d-7a962714d87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b267152-04d8-4277-9124-f6dd1f009604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd65933e-7f47-42ab-b5b9-cc56fc075704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77d30037-ec2d-46d2-8d73-aafe33a1d42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bf3272-7791-4b02-8175-350f89d3bb0f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3293d3a-c263-4d9c-afbf-5b2abe098ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "802732a0-cd38-4ba4-93c9-be173e9e1a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8087462-4cf6-4627-bd4f-ab9234350043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "38f6f75d-aa1f-433f-a255-a47a2ad98269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5afb65-bca8-454d-9fdd-16640e90e78f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca346ca-277b-471c-a3cb-574a22e289b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92e0231-a586-490c-954d-6e558689753e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d8b952-fb0f-4497-9f58-2aebf6d89755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da1e02b4-e8b4-4dd5-b243-6e010292b222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97baeee-61d8-462e-84f1-93a71d8209ec",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4985c465-225f-4480-8461-4dd5a0968ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60c87b24-69df-4ed3-9536-777b07ff5646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4902158-5c25-486f-a347-ff24d6561a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "10b8857a-58a7-4531-b165-e0993e63904d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b445b695-3408-4663-95fb-af43026d63d5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628b4588-0169-4db2-b8c6-ee04ef5462c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c1fefb-ba29-4796-9369-f8b10af256fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01185bb5-93bc-4e0a-9f9d-f392792e7b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "99c5e349-0b24-40ba-ae1b-53f70bd56f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b241d018-5494-4c97-b8f9-5f9e8851acaa",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ead612-083d-4afa-9642-c2288e336b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07bfe380-61bd-496c-8e4a-07691ba53c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c2d50f-eea0-4df6-b029-51dc830a48e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc7982f8-2519-49f3-8e44-d12d1627cced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b0f87d-27cb-4d20-a372-8d532be966fd",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03fdb03e-d4e3-4f51-8288-b6de92415c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a3dc99-283c-4f0d-a215-d0ffeabc6120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c512bd54-2efd-4daa-ba58-2a7b7e6c32a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a24ddef8-83e3-4b57-ada0-f90bd62e0b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5f4952-0580-40a7-a3b7-7fa14c08dfcf",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb03840a-83d8-443d-85c3-f21edc1305d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "702c68cb-7580-4077-8a36-966f2eabedb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91424723-69dd-4215-8735-fe3329ed9d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a488622-b514-42a8-b952-2b0a4dc810c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280a6d0b-46a2-4edc-a254-ec29a150c31f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a69847f-b47e-483d-92ec-33880737818e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "12c5d4aa-7f3d-4079-86ff-9358f9e8f4ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b8c9fe-c38d-496f-959f-73b8e61be6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "54251dd7-6d13-4bc0-8e1e-da79204dac63"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "986ac702-04ec-420b-84d2-97b76cbf14bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "356b5f06-05b0-457b-87cd-0284b73c152f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed30d8d9-0def-4b91-ac27-c6d385814842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82fe7041-ecef-430b-b75b-6b39627fed53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b30f6d-b5e9-41b4-8f52-b51b2b3718fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "953c741e-5c4c-401a-b4c2-257221468a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d027f6-65be-4783-bdb5-45de62950f8f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38f4451-d063-4cfc-9078-373334a844e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "603a3277-31f4-4186-897f-7e9918385436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e6faab-3db2-4314-bd09-245746d9f1a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f2760087-2c58-4efa-8718-b42954207ef1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "131033f8-cd90-4ad2-b0cd-12f67f7df647",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ab62b3b-56e3-4438-a325-032249dc0124"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d67450b6-e48d-401d-a52d-0e701e81bfa4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27575dc5-b064-4cf1-92e3-69cb74360e7a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ec4787a8-7c64-433c-91ae-8e65b1ca74ef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c9813495-22a4-4020-a059-b92f80b97b3a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bc37ad87-29ac-4e0b-844b-e21c435b37c1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8358cc7-f723-4cb7-94ba-df7825619914"
                }
              }
            ]
          },
          {
            "id": "44fc4679-7f42-4694-aea8-7aa5b6022bda",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a4398409-dd46-4cf6-83d1-6cdddacdd8d0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef912a8a-d6a7-458e-97cf-1a90072b76e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea0c6f20-3161-4041-b331-00d6a1896f01"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b04a3664-d282-44dd-b5be-414714362610",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "39c6a31d-6f5f-4b79-a783-617c3d60f3fb"
                    }
                  }
                ]
              },
              {
                "id": "353b3107-9587-4151-ab92-6203f35963bd",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b0d3ddb-8f6e-48d3-aa5f-a6e5197374da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e0a06ea2-f915-41f2-90ea-5c0d90ffc2d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57e809d6-afa2-4301-87ab-0b3726ab6e0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "139a6f2d-5d51-4a2c-8303-f8dc4d9c26cc"
                    }
                  }
                ]
              },
              {
                "id": "75079e5a-09b3-4358-aaa2-7d383da74124",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5d72522-6768-4e1a-8d2f-989340de72d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e33daa63-c985-4a6e-bf9f-ef3053fb625d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fae8f00a-bd8d-44b9-bfaa-c7be1f4d2053",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "30f61327-8e9c-477a-b823-5cc8cc44d8cb"
                    }
                  }
                ]
              },
              {
                "id": "c9a8af64-b6bb-450a-b269-183385df7304",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99bb0359-403b-4f3b-a7f3-50d7feb3c8eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4ef2607f-e07d-4f51-ac80-4016ba43b120"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6ff6d35-cee5-45be-9e58-8817487085e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e471ba15-e51d-468d-b769-9c841487631c"
                    }
                  }
                ]
              },
              {
                "id": "dfebaf3d-63ca-4729-8015-b8bd8f12f86e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c41d9ddf-5603-460d-9703-9a18a33bd550",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "44c01465-3851-4141-8d7f-615f1a6e9201"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f4b012f-17c5-4101-87e4-b63bb8060270",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "73c39dac-6a95-4526-9408-40e8317933e1"
                    }
                  }
                ]
              },
              {
                "id": "3b5005a8-190a-4acc-b373-6dfc2bdf4a3c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a66e7f1-4392-49b3-b1de-d4c4f09f8638",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "62f9cb8d-759a-4587-8f8e-3c40a6474a94"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "896903dc-d679-4f27-9096-ea62fc9bf23f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3a565a50-98b7-42ab-80d8-2f4b825b56aa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1e4b2731-b002-4528-8b61-622bbd940495",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cab3e7a4-655c-4953-9314-6d423282797b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "12af6c84-646b-4158-85f6-407e56210a75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b58cec4-6d00-49d3-9094-21d6ef9d1845"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e03f2a05-3467-47fe-ac92-621ec8f8f86b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1f1a4b81-2b6d-4cdf-a655-9c30291ca7e3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6aedcd26-9c58-4784-9f72-297f3a3279cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "34086042-34c9-4c93-bd62-e62118353c60"
            }
          }
        ]
      },
      {
        "id": "360381ee-27ea-452e-9c6b-665e4f0bc42d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f34e9f07-6f2c-45ef-9831-954daa848ac4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b56f97ba-0f40-475b-bb9a-306c4cc79226",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ffde0851-77f9-4dd9-b5f6-e5fdbd3230f3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5968b783-0c54-49b5-8835-bb48393568ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef4ce3bc-a97d-453c-bd65-b6ab6066d930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e26a93-920b-4c32-99af-99fe06869f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3cb2b83-78a8-4012-9193-78c4c7c50b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670db65b-d9bb-4733-8328-3a034d889565",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46607747-a034-48d2-9391-bb029615f0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a98559-be0b-41b4-b1f5-c84239bce91e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22e4d49-4450-4b06-922c-0061b5cc626c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "295f8e45-a407-4441-8343-eb9916c6c526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19311e6f-72fb-4047-9bb5-1ab2edf9415f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36ff522-ae30-4e45-b830-91c28b441774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e644f53c-f6bc-4f63-a0e7-270cf9d9370f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2d88ea-fe36-40d6-9843-e77d2e077afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87a5db2d-cfe7-42ff-8043-104e2ef1ef84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71157392-69cc-4653-8e98-beb0ca9182a0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbfd9bd4-0a0e-436d-8264-df542699fcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86267031-9b68-46d4-b56a-2fa5b46f2409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dea5a83-f156-4e57-92c6-5e0d077597c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee0d459c-54c3-4537-9e3a-4a8661005426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10bf608e-d436-42b2-94bb-f02c0db67183",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a37141-7d23-4b43-ba27-30d2bda7b320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad18c7b-134c-490a-89e8-787c1f03a68e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fe0dd7-63fa-44a1-b3f6-40bbf98f38da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0a2083a-a1ac-43b2-8797-04f9155fe180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72cd442-6f14-44f5-bbff-aa9050725e94",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548fb283-3db8-49e3-90fb-8b5a6b0754af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd18ea4-e8db-4152-91a7-6714a9fbb403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234d6348-9ff4-42c0-b51e-b2f3a2abb626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "508e0561-df9a-4d45-8698-e4326ca4ea1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae11c0e2-df3a-4da2-94d6-fef64f16acb8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad06765a-1b07-468f-ae77-8a363046cdf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1888528b-ba73-4b29-aa30-e39a9dcf7cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321e7dff-9f7b-4152-ac9b-82436a439b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d430de09-7ffa-481d-981b-a137d8e799b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9eaeeb-6526-4e36-8dbb-ec1d898d14cd",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3818bd-61b2-472a-a1a6-f001503c7c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c669bad6-6df0-4fe8-81df-1a96c4ada45f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a282f433-c099-4d12-b220-528dac91de2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6fcbd51-9072-4b82-b2cb-f570fe39d3dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a8d72d-e30d-406b-a82e-38b54de9efcb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f238a78b-6d11-4a8c-a019-9ccae421ed51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d965db-482e-43cb-8f75-218b6ee9ee3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a718f2-527a-4e1f-8b18-35f6d2fa7317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b6425e2-6d3d-49e3-8719-8cb85cbdd551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf0284c-daf2-4c3a-8daa-aa2d7ae8da3c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062547ac-9a25-4b42-815d-3cd94aafafa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d94ae8-73a8-4146-a401-2258418be610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6215cbb-4a35-48bb-9804-16aa378d7fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5625349e-a682-432b-a89d-09f741db77db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f45e13-5846-4302-bff7-fd5f426b3d15",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a6affe-62dd-447b-984e-26cf11f6b454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "865f4a65-5a85-487f-80aa-0fac3361a56f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a8d6cc-40ac-4535-afc5-e04ce379b819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "12ca92d8-4d25-4db5-b3d7-c3b45795ae71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc71fe66-7615-40db-aa0f-0db4484e8382",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d533ce-bada-413d-a215-3c86998e3387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54acd725-bf29-48a0-a789-6ac8d5a64fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6f6b3a-1c43-41a4-b8bd-a858844926c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9db221a4-cc78-4c94-a4fa-aa7bb30a32b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455a1a51-c816-4bdd-8115-d2c58984d2de",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "658571bb-6b9a-48b0-b44b-7e64ef8729bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2041af-14f6-44cf-bf40-53e4de889f2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcad0b92-792e-428b-81c4-6ef4721de6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "468d590e-5198-4b67-8461-b1587feb7b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65006ed3-9083-4f55-a635-b9d4bf4658dd",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "303ea943-6ac3-4fd6-af70-bd025506293f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a48821eb-cfeb-4a7f-aefb-1a579e700a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575310fa-74a9-409b-83f0-03b32dda5d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ad1d86d-af41-4912-ae08-18f969bcb3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5aa9390-90ad-49b1-bc86-d1a902a74dbe",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2312e38e-c46e-44cc-8783-3481628a1625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cef463c1-fba2-40be-9533-656bdbc2791b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0af203-3191-439b-80d3-635b9119f3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "710b16d9-e3a7-4fbb-b155-ca2543f9cc17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ed0364-2587-4dc2-8e03-a607de873b0b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edbf774-dc9b-4ddc-9395-6b771153b611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe4da5f-c2d8-4cf8-a956-f922623f5c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3309901-5586-4bae-88c6-90203e87a220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6221cc59-1b64-48b6-8314-784c4ceee6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5c9d3e-c573-405b-8fae-cd8f73bba10f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93787c2f-44ad-44c1-bc16-524180d36b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a767833-b5a2-4264-8fb3-7b406773c3c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15adde41-eb86-4497-ad4d-d9e0ae47f9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b98f101-7f63-4ff6-b2b3-39ceb4bc2c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85667e0-c459-44c2-9a44-d3e7d65d739a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d0c5bc-c435-4097-ac40-2ecb2a1b7e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b8b250-6dd8-4e8e-8989-0edc03becd8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328b5e6b-4f26-444e-ad60-87bcddf7d234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a455e52-1d56-4879-b54c-124cdeb15b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18468bf3-9684-4fe2-8e14-eb38e7fa735e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "344eda28-025f-45a5-85c2-3ba3893edcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cbade8d-3f01-4622-909b-669bd15d2ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ee501e-b8de-459b-8e55-88b90371cb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "068b6404-a1df-4ef9-836c-dae3d2e6197f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd981169-9cf4-43c6-81bf-1bf4e3b3302e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a328c2-4174-4ba0-9207-14f1973170e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ec0d74-f686-4993-84f1-141c806a9c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc74597d-6aa8-44bd-84f4-41ff1a9bbcc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1aa214eb-dd04-4b40-85b0-9923ad4bb122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62268db8-2154-4202-9930-1be445c46c80",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da48c9a8-475a-4684-9023-45ecc2867a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64d9601-3080-48db-9d8c-23f1de978741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c17285-b88e-422d-a2b7-6ebcdf5da7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "770b7001-a50e-425f-925c-b0cbf76110b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0800a7ae-e7fe-4a74-90b8-7752b4548acc",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc91c87-7745-40dd-be64-ef2eae179c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c45c2859-ee41-4821-bf9e-9d96ac8e12ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd19145-9274-4e7b-b7d2-a63fe2aef1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d842508-5266-4259-b8f5-a72a931010d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9addfcc1-2ab9-4620-8c1d-e9228546da08",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75c5731-470f-4907-8392-407b1bc3e24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "961ecb01-4d19-4711-9cd6-b4aeb5d2ee23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82dbf0d1-5751-4726-a3e4-c579d7f0dcdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4b2e2b9-6bb1-42d5-8083-2ef07ae43445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0843cfb-bbb3-44b4-a60f-134754ab27bb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1466e7f7-cbd0-4a07-beb6-9d59faa08604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "493a5e52-01e0-47f0-8da9-d1c18e7cb660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe6a720-2496-4588-99d0-ea71506559c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c44f2c-8d00-4bcb-970e-0f6eaca454d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a69fb6-fa9a-4032-96f6-075d3d5ee854",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a5aeda-e63f-4dfb-a1da-c3e51ee3a5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd51e43e-8e86-4469-8b0f-0e8321db56b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2a1ef6-aa45-4dbb-9a6e-47d8df8e1ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97a8fe98-1681-4b47-b4fc-9b61f47c242c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f40cfb62-7d9b-4ff2-9f1c-4de053f3329d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6b711f-ac09-41ed-8986-33f9c06a6528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76064754-0bad-4b42-8605-a911d298244f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c4b80c-6a95-4238-b558-15ae60b3babb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8bce2c6-46b4-4687-ba3e-201329a5e5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f631d3-4aaa-4905-9375-fefeab18793d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1b205d-d98e-43de-8520-386a5908cba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "868e10ae-52ee-4436-b375-ab370b72af8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a567a4c8-3b94-4581-bd6e-a6be1fc2fd0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f7658af-aabb-4882-b4fa-62c874c3abd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c762bd-c66f-4169-ba29-0607ff6ebf28",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ce6939-f472-42bf-9c1f-d901154e6d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f50cd96d-c762-434c-b174-db653789b992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343b8515-9827-45e8-99ec-5d42a2146834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98afbf3c-e739-4106-a8d3-809aef2ae038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367f1944-29fc-4cd3-a26d-9aeb9009e9af",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b187f7-a42a-4e9d-81d7-dd7b3e425ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "698dfe27-369c-4328-922c-dd75b8482d32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969e9a4a-8116-4585-ab22-2c748c4a0181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc7a6c5-e3ac-488c-9db9-e738401fd4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4aa03d-65f7-4f60-94fc-53ac3178119d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06e0067-9c2e-4c62-aa76-ee8aaae8357a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d46e1ae-709c-40eb-815f-f7ffd510697b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1bdf929-06b1-457e-b4c5-f6e9f2a54c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae679ff7-2791-483e-b170-db82de8650e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a9b0c6-c075-4fc4-b658-85b083315b45",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d824b4-2fbf-41b6-9096-6fd9b5647324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a29f02-032e-4750-9ddc-6e80c93c6c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2ce4d8-9e79-4d0c-a027-71d189df0e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e6ab5c-f43f-4357-8919-1a10d8d5d794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d99933e3-704e-44c2-afc5-9cbaef593353",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc26165b-9b47-468a-85e4-ecc58e4c6add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6af5f2fb-27df-4ca3-aec5-2425a68346fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45766b3-73b2-45cb-8e0f-b94032e5e920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8231001-cbca-4e70-bcb1-f782d155e97b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "96f3ce5e-943e-46cc-9910-ff8fbf33d227",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "83532533-6a92-48e0-8022-acc07832646b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b5177d-c73f-42ad-9bfc-1b9babe861a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c166784-f8f5-480a-8253-416e5b378515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e98021e-fc2e-43ae-926d-6478d7887ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73038eef-b42d-4c0b-911e-b97e1baf92df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa92d33-aa72-4256-b63f-eb02b62ed46e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b50d79-eddc-4abf-b134-ba571926b779",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "ee45af53-1a09-4f1b-a282-d10d26d29f5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "057e8c54-5621-439b-b2bd-705ed09126d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0759251c-8cb5-4f2e-b397-b2f47b4331a7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f5e8b54-9947-460f-98e1-93dd4cdf2982",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17994d48-8380-40e4-8313-c44bfcd1cec5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "269c6fab-914f-4882-81b4-f8835cc02b40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f05e850-976b-4e80-a9a1-b3ee61f5ce9d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d85e2a5-abd3-4731-89c3-5c59a19c8269",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f2329214-0bc3-43df-b50e-bbee21d95e9b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3eda7f98-2a71-4afe-828a-d8c976c28c09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "14ef656a-649d-4f4c-8438-2c6653db81aa"
            }
          }
        ]
      },
      {
        "id": "49510dcc-010a-4375-b689-206ab06aa365",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b4fe28d4-304b-4a0b-a9f9-ddb4e7afc863",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0d7467e8-6a01-4b05-b152-346b67c219be",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "33aea2b7-87ca-451a-a986-7c0d993b67a5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47955eb-e841-4a8a-801d-a0454ba725ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7eec98e-438c-4c97-8a29-9ad8060275a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4360c1d-7554-4599-8a0a-61b67a41cf8a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaad735b-9694-4881-b8e1-2ba7b2c29584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09727e04-2475-4af8-8fa4-aa4597c15179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d6ab77-60dd-4f0e-8517-790b59be632b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97edb421-b554-4c9b-bf5e-e399f78a56df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a96b90b-875a-4e25-a0f1-40e72cf80b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda36be1-519a-4c78-8697-e93ef71387b3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb6c39e-c9cd-4142-a71b-799b6fe961f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a4b090d-e6e1-459d-941c-1943041b7409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e74a45-317c-4683-b580-f543f38fad39",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a22746-9d4c-4e5e-b49a-c69f1c4f1570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c3f8014-0ea7-4bcd-898d-a99ca7b60d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf3a449-c4d7-4a12-b8ff-b2a4bbf1d4e5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "680a8500-f9a2-4798-a33e-a0f1fd56e2a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19f11f5-caec-4bf1-a3ac-0e555df8e9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d814cc4a-87bc-4ff2-8c6d-074febf5fe93",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe577c2-00d4-4c3a-9e19-ff2eb2145553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a346ba2-045d-42fb-97cd-5caf9a6530ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1dd5760-7d3d-42a5-a71d-a61c211567c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a89e87f-b38f-43c9-98b7-cf7937d7fccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4403aab-68db-45de-8109-bc7cd6943774",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d9922f-ce6b-4bef-859b-476ed75961eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9df48a26-1dee-4ede-b264-7910156504a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "712921f9-3a9c-4036-8288-80dedaf8d8c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de28f85f-3183-4646-8ee8-86c4b5955dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1e5671-2bb6-436e-bf1d-05d74dfe25b1",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c032af-47eb-4a6d-9821-97ba8306fe84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d08994cb-7f8e-4bfb-ac95-4208f8fae23d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d605e862-280f-4918-b039-8290f1068bf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eccebff9-6f90-4f0d-9e81-e5230bb886d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d558d1b0-3ff3-4c03-9c80-9c0be5536d70",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab95c0a9-9589-45bd-b148-da61d462f8ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b33b14df-cef7-458e-bd69-511a80febaa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7082c0b0-4d66-4407-b8cb-a6510c52f1a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced8ef2b-bcd7-426a-8949-874328b0fe6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "223c4cd1-0d14-4d83-ba89-4ccab6a6a718",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdd3239-21a3-49be-b547-0bd0491d8381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae7c16d4-3a23-457c-bcd4-18937ef0762b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e011cae-7677-4666-8c09-f18eaef178ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e3eea2-c71b-4158-9aba-c6e5f44847eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31e82a6-d991-4f59-b7b1-8143f9d6b229",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feaf68e6-803a-43b8-8afc-355bff368746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe4fc80-289d-476c-95a7-dee9767a38bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b58b33e9-7be4-4b9c-b516-7813bc4d7ab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c0a734c-317f-49d3-a9e8-15633ccbc63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb77b801-4002-4023-b434-284da204be39",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a555cc-7dfc-4520-8c77-ee0d4fe4df5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20b64daa-393d-47ca-8647-463ef6820ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7031fffc-b212-4411-9d94-30cfb15e47f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef2db93-1b7b-4b9b-bdb3-fea65498461a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8518b2-91d2-41f3-9f58-9b3267b98188",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d19324d-66f4-48ca-8f87-00c51186908d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "681cfca2-7e8a-43b5-84c3-baff9db5690f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b725b0c7-d281-4bd4-be4d-0629364953da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f6ba55-3d81-4325-b7e2-5bc870e2d9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27dc9eb7-d38e-444c-bf0c-8f25f07b1a60",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6deef08-3a22-4e38-9c6c-afbf334147ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5597867c-e7fc-4a0d-bae5-9b2d3bb2d945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ead2e2-34d9-4cc9-bdca-5e3796de2a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "418289aa-c06b-4801-b009-927632880438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7822633-349e-4fdb-b865-ffb25e1452ba",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23cffd27-4dcb-46fc-a578-66b7f6d65848",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "476e34e0-1ebd-45f6-92f9-f8013c5c8644"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46d531f-f1f1-49aa-918d-bf3b7204d10e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f681f291-507f-44f8-b03d-26e559a5e566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584845b0-2ce6-4aa9-a0fb-df5e11a747d1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de03ce7-0082-46cd-bd8e-d4f374212ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ffc14fa-e6f2-4a58-b6ea-0877052e6d26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4d6bce-cf02-4d1b-99e2-b3667db19b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b98f92-993e-41e1-95e8-c003d02b40d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c5ec6fb-1bff-4d8c-b11c-03da8485e96b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2e5cb4-f87a-403a-a807-b3ad566776b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acad9511-d102-4e9e-9e5b-b2547732f6d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc25de7-df53-4e04-b73d-a64944053ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed4cc2e-7247-4216-a318-f27b8d87d013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6c6173-9d1a-42e3-b35b-8cc5b7536248",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580424bf-69d6-47e8-a854-3ea1ae800b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b313df78-da1e-42f7-a0d3-9acbbafb947d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f34fa6-036d-4e89-afd8-2fdcf116eccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab56a72-90c3-412a-826e-534f960ab583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3142e0df-430d-45f8-a2ce-788150aec016",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52baa71c-eeb3-4d7c-8f91-292a73886fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6561317f-6f62-4aad-bc4e-4f93b80c4bb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcfcf367-5ce7-40df-bbbc-93b70d2aee70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8fb864-b4fd-4cae-a419-57ade26db43b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6513578a-e735-4b8a-a26e-14e8f0f40623",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6fe5a1-3773-4cc5-9f15-90b646616d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8fe2b19-a864-4ec1-8988-8e2f172345c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e9dc715-4662-4ad6-93cd-9c9ebbd7be33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aca75945-b803-4789-8ac9-4b011369244c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f868037-54dd-4a1d-ac6c-9a2bca903db4",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b821dca-26d5-485d-a367-fccee9a80747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f9c6371-6776-4798-a979-843d5da2fed9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d13d8cc-f63e-4a95-9978-ba5809fb5092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c38d4e-3ed9-4e2f-80cb-8e79d079be0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad9873f-14dd-4b6c-b09b-0b3212d51c14",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ed576a-09cc-4085-9025-c64f239dd67e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bc851c4-f6ad-4139-9c18-f6706aa8ee7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee93818-9e61-4a66-8155-db9b28026a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61d6094-1b10-4218-aace-795ee9c5a1b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27049b8-64af-417c-813b-e676c63de07c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7716692-7129-4e97-acf7-b72c0aa3cf47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf60033a-ac4b-4b86-a803-5fa2ace860f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc584136-4d5a-4614-a41f-b3380c615fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57fdd213-374b-4952-a09c-7c54c701758b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3700de4c-287b-4c72-b5d6-18f67d6bb607",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9959178-810c-43e3-836f-a98f1bd80a50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e66c15f-6a1b-4e24-a6c5-e9574b07f7b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1de3106-50eb-416d-8577-23a5a3b98fd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b976eae-00cb-420b-ab2d-1269f39dca32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb21c3dd-bde3-42bd-bc03-b84c615e2668",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5587ece0-f77a-4833-affa-1a8687c855cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9f88692-a4be-4f0d-a041-53d7ebcef281"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff7c586-52d3-4078-b9ca-f853eae83550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7a5a8d1-d9e4-4725-b8e7-96605c341385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a714ac9d-d4e5-44d5-911f-069b350d8612",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a54430d-5625-48c3-bf17-4210b7225b09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "503c2602-3a7d-4eea-bbf5-528c39367550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f82b7f-7713-4279-a139-b93621fbc72f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa740ec-aacd-4308-a13e-4d5d623144f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6726a93-796b-441a-9f3e-dedd16368f5c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11968851-09a5-4343-87ce-9a1e31641f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "611a8ce8-5f14-4805-8871-eeb67fafc8aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf4f4e4-5002-42d1-866a-639e219e809f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd46047-5926-414f-b6f0-b93e2ca286e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd91ede3-5ae1-4dc6-922c-7a3050089b32",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76fcb74-9161-41f2-b021-c8b615be01e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "777a3297-6366-4409-908e-6e5cd5833934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96988810-b6a3-48ec-ba5b-a9babbd3193b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "044ab600-1dc3-485c-a9a2-f88e2d635ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a9c2cd-87d0-4e4f-bf67-6e8e89d5ca42",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce6a77e-d765-4360-a8d9-1bb62d3f2237",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f051cef-ac0f-4f34-ba8d-3c0bf62a0ea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "981747cb-33ec-42f6-8b2d-2c6b797cc66e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5972cb7d-ac11-45f2-8199-7af7bbcff181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4327c7-e796-4ba6-8735-6e5dd2ebdae6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f4574c-9bf0-4f4c-b4ff-80db2bdbf326",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "380a8607-c9f4-4692-b143-c6ab5012a988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14ad9f2-5b02-454c-99bd-d31cd15cadfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a020dc59-24da-4c0e-b490-8e84fb24db2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "830aca62-2ca9-41c6-b270-22105291dac9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760d120f-442a-4270-9a89-f1c42a0783a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42ffe4c2-bf78-423e-896f-4a871fa60505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b931da38-0dfa-4479-b7e4-43e8b4828590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa701336-2e48-4ad0-b10a-9906c6b714ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc14c47-231d-4a36-b794-3407015319b0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d22825e-7242-4072-9cca-51a307deeae6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa8d7fa8-47d8-4196-85fc-ebe82d717231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3001338d-c79c-45b0-9ade-6bef92e2e465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf4f4d1-ddaf-4ede-a03f-cc7333f2928c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c84c99-4bf0-455c-ae7c-823a78d74214",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35471a12-ba31-4efd-9b39-69e3654e744d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b0d73ee-e705-4e5c-a5dc-e3a06766b7a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "655be4c4-2fb8-4c61-b160-5823220ff614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38908307-0660-4a0c-8962-bdbcf3072c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3ca205-cda0-433a-b084-b14f82a5942f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d539e65-e395-49c0-b798-17fd98b9f8a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab861f13-0d4d-4540-b721-fed6cf29d58e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3375dad-a23b-4f67-919e-64f0d45343f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b351fba7-a02b-4787-bdfc-a7475fd9f77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f599f4e-2996-437b-9439-06d4e36e44ec",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024ed1f0-cf09-4972-a6fb-5e2febecf2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ee4841-5891-4352-8ec5-52dc72f35e84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a56ddb-21cf-4c78-9345-caef984978a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93187c27-9dab-4ada-a613-f1d42544d5b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cefdf4-a035-44d8-a0f1-ce73e60473ed",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6295e9-f2f9-4a03-a147-bf2b864130c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f33df6-2e21-4faa-a6d8-64eeabd64266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a501fcc2-f3d7-4fb9-a41b-c5a34c9662f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73486abc-44da-445c-b707-a3636c446e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a115ecc-4a24-475c-933f-7934f112bdee",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef23a307-1745-45ca-acd8-56c4530f0dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac97b2b1-257d-4d5d-904e-906611d71964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "580b6ebb-4296-4c5a-96cd-db40a9cbf7c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36c1fb8b-cc1d-47ee-85aa-62dec0ab077e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87364a6-0318-44bf-88b5-1db7d4062ad6",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75dee2a-4c20-4199-b650-ce466408aed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f363704a-8442-4116-b58b-2d0ee78c9ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf2c0db-8033-4cee-a3b0-1a0394c492c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d3589d-b65d-450b-9e18-66940b7572ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0771ba-3694-41d8-b760-a5e02ee34629",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f40721-3bbd-4503-bc5a-bf27b44846c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c0ff0c-b64a-4d3b-b0e7-fd5fa3c5c831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c315822-c196-4201-95a8-7c44fc156cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c8a406b-b2e0-4979-84dd-ee3e07eaf4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebfe443c-068c-4022-a3e4-f549012f717d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6dcf606-dfe7-4bbd-88c7-e041908b04b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198350ef-42d2-415e-bd49-52759d568e0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cfc384-6029-4da0-8118-64b7d75e2927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d84ffc0-447e-4d5a-adba-a4b07bec3fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63732bcc-7975-48f6-a9f6-c165c2be74e4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1fe885-bd39-4525-98d5-e3fe74d3a926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "981ba9d7-0785-4001-935a-e01911a31d8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdaa342-16c6-4844-8283-00bd8b4fb437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3e72e04-8749-4308-8745-df32249c68f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb30015-03d0-488d-b368-355407f6157d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b2dbaf-6406-4cea-a47e-3e0880579dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c48fbaa8-115a-447c-8bed-3204252d37c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5dbfc9-9868-47f4-9f74-cb78a86a079b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bbcf757-61c9-4a26-83de-01841f54ca0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5d74d6-6b1d-4d24-a8dc-e316b8198f08",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caff857b-a252-480e-ab7a-f3d36024374f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b3fa6db-8050-4cc8-ae7b-3a9007436d70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d387cf6b-c30c-45c3-b153-bcddff306151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d20736-7643-4331-800c-787c2f26b4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124e29b7-e6ee-405a-9c64-f9450654e026",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cd50fb-96c6-427e-b72f-902e2d19a928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07f7ed5b-ce62-4a4c-92fd-15989651de4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac32eb46-6657-4039-b30b-84d81268973e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f1d97d-ebb0-4f50-a32e-5f2c99d97940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2cf279-20fa-4a80-89c9-ffa5032e9ff5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ffd58b-0caf-40f7-976f-5c2aae3af676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d69ee7c1-5c6d-4b87-bde6-83e6221c5759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f97f00-b626-443e-95ba-c5812d2c4d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a00b095f-3bbf-4e8d-b70a-4e7b664cbb1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb56b9a-5420-40a7-a36e-609d330f251e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351ff7e4-d0ba-454d-a005-ce652580b0b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d46fb749-c4c5-4137-9e3d-e1c6adc792f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a99afd-ce14-4c0d-b982-be6aaeca2356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fedfb293-8b8b-4ae7-8599-1c77e35eaa23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066cdb76-ca0d-4bdd-b121-4ebb6831ac32",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19721163-2e1c-4fb7-996c-234f7a6c7094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ef9cea-783a-4fc2-a152-6c39aaa85e26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfca689b-6d93-4bbc-b9c6-4297c16defe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96928f52-afaa-4915-af45-134f4b2bed7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca96580-3e81-4b75-ba4a-4c126c02a941",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d223ebb-6dfe-4320-bda7-26321cc740a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d76a4eb-52fa-4759-beda-f64c154b3c8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a03468-c2f9-444e-93bc-3ba8f03477a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc72b31-695c-47c8-8095-c9e326c2e6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec61f006-a5b2-4ce7-9aa9-b4305fd1c374",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bb8956-9743-44db-82a2-75731bbe97ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea40adf1-86fc-4cf8-84b9-1bc70615daf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7382f05-9c0a-4b2f-9ebc-ee83137e47bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e57984-3f47-4c38-a539-9b6725a67896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd13666-b273-4853-8d88-5cb4945a22da",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d9a2ac-e797-49da-9385-12ac0790d17e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dced234b-6334-41dd-b542-8e99a7ba541a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "188fae0b-3723-4153-a6f0-276c95388447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66d473a-cfca-4409-bd18-cffba5d5e636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "830cb140-c853-4712-81a2-d53ac358ae6c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c45570-5cd2-43e5-930d-fd98899c7ae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da04319-76c4-482b-91bb-b96b8cfa08eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "079646f3-59c4-40a9-a905-37eb9d9e05db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63f3e5b6-1e24-4bd6-81af-09b6801e892f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f90b86f-1dd3-4552-8d18-597016e2efcd",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea1d892-9c1d-4e8a-ac56-ad3c5cd20552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "472aec98-8e32-46bd-a772-4f0f3f016ede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f884390-e882-4c0f-8032-c537a692ac00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f67d41-91e7-47d8-8c64-7cc00c9eb091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb3c6da-5871-4d32-80fd-3dc618990b2e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5211877-b4ab-4699-bc3c-a446d2b9a19c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cce3fc14-1e87-46fb-aea1-e6dc24738a05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba76c8c-803f-495f-8e14-cc008c89c68b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5e7602c-1400-4458-8fa4-8a179678eff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b5150f-1889-428d-9a17-8f7e59b6cc92",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eaca8ef-19fa-40fb-beb9-312089205826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb90af00-140a-4200-b765-0c07597b4244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "331bf89d-2ff7-4db3-8caa-d1af6711e017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3358d50-aab0-4e07-94b8-304b34cae3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1aee93-766b-4002-87d0-583fb492c123",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74bfc13b-121f-4efd-914a-0e97ad70562a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73edb6c-c7f9-4968-8262-52161ba5580c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29db050a-f18d-440e-8c6c-e318cff87b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aab2fe9-63cb-467c-b998-a5589403f1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0656c85d-2655-487f-b2bd-81fec2ba94a9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2599d17c-7233-4749-9b53-432290c1345e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79994ca9-ff5e-49ac-b682-1d28246821c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8515d6f1-f7bc-4872-8647-886c3f3e9581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba1387a-b3d9-497e-97cb-f38bca9a09b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac0cab32-a17c-471b-ab43-1eef1692561e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b87d1fb-552a-423a-8899-11bff8bc9552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "419baf6c-2ab2-4b3b-b3e4-adbd0e66fd6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7f082d-86d7-4de0-b852-f843cc5a71b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf8e8ae-44e1-41bd-a27d-c9812d5885b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45917360-814a-4153-aecc-06d08727f5e7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd204ef-24c7-4cdc-a188-8614c37ff14c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de52b025-6518-498a-8fc0-564461e76b41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb64ff8-4287-4137-91d5-7126c547e400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "522101c0-58fd-48e3-b0cb-8af3adbeeeba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d6a6d9-6bb9-4ef2-8a60-5e9e59939afb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455f45ec-837e-447e-ac86-af4cde5dd1d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80cf8bd2-4fef-49ba-ad25-5b25743b344f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad441e5-8df1-44aa-b8f5-b8f81cf10a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3169dc14-98b0-4758-94fe-989aac176a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da9968cc-a533-4422-a986-77fe30a8abd6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96862592-a95f-4941-8b21-82e186e488c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb681164-fc96-47fb-b2f8-a427f510147d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e6ff65-6cb4-40f8-8eb9-5ce5cecf8512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71da97d9-c347-4499-9c4a-bc291315d490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1d1b2f-49f7-408d-95a5-388c0799c6b3",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7146938-0315-4601-bdd6-aeb58103c9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33cb9853-b615-474b-95a1-8946c8a0b46a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0300b80b-4dbf-4082-a84b-958525f6f06b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ce1615-f437-425f-96e9-2dd1cb5d9e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba7f8d98-fad5-4887-a41e-c428481755d3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dbbe51c-4e53-4691-805e-8ba72a130b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e351263-a4f1-4bed-a97f-2900ea7bc08b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b802566c-ad83-4353-ae79-7592ee912523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75fc2cfb-cb48-4a56-84f4-16708ee64759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279520da-2724-4aef-88f1-42380fd2448a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1252ae06-5613-4528-882a-8ba0e7ee2b64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd4cc27e-8c0f-4eea-bd47-8359639b595f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d937a5-ecad-40d9-92b4-f99d9ca90868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38503960-e20b-48a8-8ac4-21f70ec8f8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47ce998-b04f-4242-b8af-e2881fcafd07",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0111a8b6-06b1-4393-9c98-aa33d0481bca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb9b0253-57bf-4b9c-aba8-fe6615c76cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d18726-18c1-4ee7-9279-f0e8da523915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "261b3acd-afc4-4f67-b506-6104b6eb638b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64112a25-8781-48fc-87b4-9481d2a68506",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e440512f-177c-4d54-89d7-2ba03336953d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "978261eb-9d90-43d6-97af-9899ffdd0bb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59878ce9-28c2-4229-b3ac-9a5314c72cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97457bbc-b054-4176-a293-28f94ff783fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287627da-63e4-4aee-b5e2-53f6627e1044",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9995db6c-fee8-471a-85d8-50aaaacc7258",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04d56be9-f474-49f0-8a9d-7b05507983ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1580299c-32af-4b8f-8f43-23ddaf0938b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed8f518d-d7b8-4582-9704-a551dd29aedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a9c526-6524-4e7d-a85d-d86214800ecb",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef84860a-1516-4ca6-bb7d-51fde45f1675",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3169d219-f4dd-4523-a7b8-fb948dfc0206"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c529297-1013-4f33-aaad-9b4d492d98c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77ef6be7-d30b-42aa-917a-9ea15320f6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef222de5-0e20-4d13-8566-88e363a6a30f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca6190c-7c66-4e4a-a271-6cf45e13852c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88861607-ac48-4f0b-beb3-2e02f86c701f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c412d1d-3835-43db-b26a-b2b07c239965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "916971cd-fa4c-422e-9cf8-58562f0f49b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc87298-8507-4d4c-a83a-36d5839af7cd",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5972751-b4be-417c-97f0-4117857a5f15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0225ebe-06ae-44d9-ae20-42f529fe6b24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3927800b-41d2-4a14-93cc-b49b925d33d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "861a83cf-728c-4eaa-a7e9-d6e995d7c2b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287a1150-6d25-4036-9498-17fa5124e6c6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7723bf92-1638-4846-a7c7-3c057664a622",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d30c0dc0-4646-437f-b240-75b02e72f6dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9ae2bc-7ef4-48e2-a9ee-8ca1772e6a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f75df79c-8e41-4b95-b399-33c439f7b418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a85c8b9-8441-4147-b1b2-9216fe8dbb69",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a66d04-ccaf-4c79-83c6-f55a16cbf92a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94ccced2-c7f3-4c2a-98ab-0564d30f3444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b446d5-2d05-4c57-b343-930d30e0d325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7b2408-7477-484b-bc75-04174a27bfe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d358ef35-0382-42f3-82d8-0b9f5014743d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c52bc0-618d-4be7-b23a-4939b6acbd25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1428dd9-ca56-4d83-8bb4-1756796bd94e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a8e6ad-c261-487a-8004-c549d4b7cca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f4506a-b809-4351-b889-26156ba7070a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6d0044-0fb1-46a6-995b-716ab9742b6c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881e7566-c524-4edb-a7f3-a70827a1f14b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fb61a9e-81dd-4fe0-8b5c-8c9cc27e1a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6233573d-b7dd-4e51-9ece-b7d81f3ddd08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b86d08-287b-45cc-820c-0a5a24d8270e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6fc0259-4c12-45d5-87e3-4f3ceef67550",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5348bf-eaff-4e0c-b68e-b421b6f420a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b470ac4-ca7e-4b02-a8aa-2f06e9bb7d2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ee2b85-3db2-42e1-9cde-2856a5f05adb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "017c9179-a17e-4930-91a9-b663d93d5126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77de64a8-8bfb-46b9-9b46-2f762fc17bfe",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3307ba36-724c-4d44-a3a6-8cfec1ccce57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6bf811c-5811-48f0-b2d1-93d9e41a6c3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "693a89ea-22c9-4918-871e-e606fcf45298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d927116-7d53-4f07-8fac-32418ccea771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b9f5b20-89c2-44ff-9357-18f1701d83be",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c72a58-4449-4a1d-ae35-386fe2b79ac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b0aac11-e953-459e-9e3b-48b5c7fc17ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c09d4b-8a00-4886-9b15-1f34a0f57640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f122e740-da62-48b3-86e5-6f3099a1df1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f716db48-049e-4cc1-9f2b-3997eabd0032",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0334547-e42f-473b-a199-f84dab251598",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47986004-fd44-4fc1-b9a4-40ad9c7d3b29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08edcc7f-dfef-4e4b-b67a-30557c47d022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700f09a7-6359-49e7-8584-8d4614fd62ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9331e7d1-7748-4cbe-8b48-7b4e2142297c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751584ff-205b-476a-97b6-a0037d8ce057",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afab5a0a-17f5-4215-b1b2-4936552259a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9953f92e-3f73-49dd-8d39-f549d9353927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a865d9ab-b5cd-4483-b809-30003bd74502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab9e6d5-808c-4c1a-af60-fc0069e68b7d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762712aa-c5dd-4008-b74a-2943a5cfdc0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "306758c5-0520-46f9-a2ee-08bcca3976a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "191205e0-d36a-4d0f-99ce-8ea189d72a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e52a7025-a762-49df-b00a-142e2092852b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915bda68-d7ef-4142-9635-516df1287e03",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e18ea80-bda3-4f5b-9749-2743648b7d25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd3e7a67-b759-4cd0-9d35-90867300f7b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0f6d79-227a-4ac8-88e5-11ff8acfab93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "910b82f7-f6fd-410d-81d9-ec7e56b3bed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5fdd64a-f178-44e9-b3ff-02748622d788",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a291b69-9433-47c5-abfd-aba4d4baf252",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6875838f-cc89-41c9-964d-dc35a3136b2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ecb8210-ecc8-4429-8aba-b88a71dbecda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd80bfc3-1ac8-46d8-9bfb-ec4ffb8063f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c511db9-abdc-4408-bc90-c9dcb883a550",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8172669c-986a-4256-9582-be5548b40329",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c52ed8a-d4ae-40fd-8f93-38a466c21d8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c13545-a333-446b-a71f-273e7fd69bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee69e70e-dc03-4db0-a36f-3c3e5b3a124b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236d8c01-fe85-413d-a59c-3478beef04d3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6223691c-037c-4ebe-8dea-c15b9ff96637",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "284ae8c0-5c5e-47ec-ba42-f55f14144402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b781abd6-7a00-4181-aa60-b5bf31f5cac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad5a2fcc-5019-45f0-bf88-7d49b9913b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3b03d7-bbd4-42b5-8e83-4d63a81194f5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddfb7dd6-412e-4f37-a5d2-78b911bf0bce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98e86c5a-958f-405f-8f98-65139a1026df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89409e0e-9b1f-4a1d-9841-f58fa712e329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eeea6ec-228e-4ba9-ab07-0338798fa77a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc08a2e-c7e6-4be3-a7e7-e58d81ca50d3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2731a9-b96b-4323-a57f-aa1e2d650ba7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91960b21-738f-4921-acde-9a714f171193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32b8f07-33e4-42b3-9720-81fb72da1d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9ac020-0ed4-4b5a-a781-27b3a7d42fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89476ae-dc6c-43fc-8456-c3ca2880b91a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e3bca9-1e70-4876-a7b9-e9634911bafb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f34c2a13-6312-4c8c-9738-7664e2e1c6a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02db8234-e9db-4e6c-ac56-c6ee707f9794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d24812-bcfd-48f3-8a38-fb11878e3e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3997ccea-4ec1-402b-9428-476af74c44f2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c88638d9-e92f-47d1-97bf-45600940fa2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfa0fcf9-8d74-41b5-8009-ea603b235098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3a0cb8-dc92-473c-b96e-9cb249a1198a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "181ae658-48df-49f9-9bf1-59c3bee6c37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bcad943-86d9-4d98-b845-dd66dc8e4054",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37ead99-3478-4443-b886-2f45d9ede528",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6486ff2a-3fbf-4c83-818e-9acac4e218e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a5e6ba-5612-47c0-aa51-8d43f6cf90bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6690060-7be8-48c1-b924-930cb0a4aa00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5412b91a-813e-4bc5-a660-b7853ed00c59",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd2c164-c0d6-43e7-aa87-3bd826ef1ac7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3300952d-dee8-4056-8cfe-a18390379bee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d885f38a-13ae-48a0-8d75-b853fe4f7656",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5436b9f-04c3-4304-8f5e-bc0e0c262a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30640e90-db8f-43c8-9f25-1e51367ac074",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fbc490b-3a69-4112-b29d-4c3a06acfad7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a24a6405-87b9-417b-872a-375d7fd5a3a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcc7e78-ebdc-443b-9153-d1cb21540089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "687406b9-69c1-443e-b640-1d5ad9bd4132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60acac49-22d6-4ea9-885e-632b2c9d0b9e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be63a166-b95b-4d02-8cd3-5e2ef85095f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20bce160-a28f-42e5-9d30-95516032e8a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbfef6f4-700d-4d3c-abdb-ad1f2435bcfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf174f1d-a200-42fa-86e0-9d917eefe10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616fdc1b-e7e1-4fee-b715-2af2076498dc",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1393cc00-ca85-45cb-afd3-7d207ab79385",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "965fb209-14cc-499f-a47c-3fd705db460c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4278723e-333c-4b4a-92fa-2f6d73da7f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8e2ae53-b8c7-4f81-98b8-4f847ba6516f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9baf6ea8-5539-40c2-9092-4da732d21a05",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78fbab51-2f4b-4c5e-8411-ae87db1c6fd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca169b06-0231-4c54-8fe4-633a6aa5a61b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "056003ee-3102-4876-bf50-9977d7bf3373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88407379-429a-49d2-b1f8-450472bc9056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827c7cb3-e032-4697-b453-04af0193ac03",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8411e3f6-9001-405c-b156-654f43360368",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79d69ca3-68c7-4426-8fa5-9c01cf8ddb78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63515112-8146-48cc-81d5-6c058e5581cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d28f672-2fc1-4275-8746-5c937f95f1af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3842a334-4cb1-4685-bf28-525330d6adc5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912093f5-af85-40cc-ab65-7c39d5244712",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3aa55d6-e6ee-40d2-8ed6-32b66a2eb276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b222e2-9821-4495-b6f6-e67d4f364442",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a5f288-6b1c-48c7-bddc-7f1dd4b3b27c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24628f66-93cd-4476-afe1-01fdf204da8b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0400ac9c-78a9-4c41-be6e-9203bad24dbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dcc1d73-ac73-4a5b-a726-f537bfcf34e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "832b5749-8f23-43aa-ae4b-94e633eec680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e6147b-cf99-45e6-8f9b-58dfd753caa5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e8393db-c58d-424d-804c-ff8d4c5b2390",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c330a2e6-e202-4ed6-bcf0-79d991eca750"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b642210-2ce8-468c-80d2-29a719c92da0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8e70c75-245e-4a66-ab55-b937f59511a3"
                    }
                  }
                ]
              },
              {
                "id": "41b0908a-fca9-4f26-9262-455d57ca3043",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5be3af88-7679-419a-b46c-98194a0c87b1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7c65b4-5add-46c4-b0c8-f5f40ae54ec9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b4dd2195-1656-469c-b590-0a162b7bd66d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf056c2-3340-48f3-b6e1-50ebb5cc3a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33f3be47-b7f7-4b02-9266-eb90abc7e158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a400f4bd-4283-479f-bbad-49e3f4652a60",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdfb781-d82e-40d3-bedb-7a5099ed2e65",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cb84c4e0-87e9-44f0-bc96-9af485230359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba8e2bd-3333-4a50-a4e5-2d3665c6acff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3c365e5-a82c-45ae-ae61-eab4a7dbed32"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dac3266d-e1a8-4053-a51a-0c9649a63125",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "134ab846-835c-44cb-baae-c62a4d7e54a6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "385fff53-5093-4eab-bd57-ec02ecd56f13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "532ed062-25bb-40f7-8692-66f395597a98"
                    }
                  }
                ]
              },
              {
                "id": "f2b2aedb-ce89-4796-bf16-b631a18f6c67",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5f5b2f20-238f-4af3-96a0-70257b4b97aa",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500a6d68-58f4-4ea7-821b-3a8f8c32b5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c6725445-5499-4f00-b324-e924d7e1acba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da5f313-1681-405a-b867-57d033ce82e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2113b2b2-cfa3-4167-8d48-7203b6af204d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "35a7f42f-576a-4bc0-905e-f830fc32b19a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7ac0c741-8ea2-41a8-8259-4ec9434ab58c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "070c97d4-637b-472a-8048-822879e3ca47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "24c619e3-aa29-4b27-b167-06d406d4f530"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5b8934f-727f-4017-8c81-a06dcc088fce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1fa78a32-13c4-4aec-bb24-81d51d19f82c"
                    }
                  }
                ]
              },
              {
                "id": "99a7ea0d-7de0-4ac8-a322-64ec99927de5",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5cf7e914-9a4d-4936-8baa-c7ba7f702099",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0eb91252-4c4c-41db-8494-24fa2f84d20a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36ce9323-1da5-40bf-8b9f-0bf967f6239c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61af9845-9a50-4abf-851d-ff305fca00e0"
                    }
                  }
                ]
              },
              {
                "id": "8514576b-e120-499a-8172-e1c0f216ee5a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4623add4-109e-45bd-95cb-e38a72855808",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "34973c51-89ec-491e-be2b-ef6f510cb1be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77514f64-b3dd-4a1e-98e5-42b451a8a76a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fd72f03-da03-4a65-83ce-35e1d7c33f75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1eae641-358c-4f72-a58c-4c18b86e349b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2104083a-c41b-4112-b026-224da880ac95"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ca052bc-f27b-4b18-9eed-c9013bf6b5f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9861e8a7-8c99-4614-bd83-8a89e6dddb15"
            }
          }
        ]
      },
      {
        "id": "7553d7d1-3ccd-48d2-b634-3ebc5e8d1255",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "659b3252-4bb6-4477-b187-a502305fa384",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ae337da-d3ee-464f-b5b4-f9ffa15653e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b28292c-66b0-43d6-bf1f-28f84ac1c123",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa527f0-5c4b-4412-a754-e3f58a034aa3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "56fcba09-b1ef-4323-bc10-fa6ef59d44e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b56f784-5153-4d0a-a427-85a17b0a57b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8c0899b-3c2a-45d2-9d06-6f5e2e2c966b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aaa3396-18dd-4233-8550-70e7050eb91d",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69cf2b9f-7643-4d76-a6f0-286511244166",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5dee956a-83ba-4db1-bf7b-f78f001479b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168b5e94-3137-481f-8290-53c219881a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99e3e175-e722-44d7-aa0a-03e28263ecb9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8879f9a7-4ec4-40ee-92ce-bdd8f9853814",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86de1ec5-03ca-4dea-b416-6e5955835bae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f112ae5a-2472-42b8-b544-fedc04333906",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "818047bf-bb1b-4461-95d8-e9e972af3863"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5f8dbbe-d59c-421f-8c1d-5945b5782063",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e7be0019-88d0-4fe4-95ea-bdebca03defc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4212c7ff-2fb6-49c0-9d2b-3e8d0776ea61",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1feb25e4-1276-45e5-a45c-be39d76d9056"
            }
          }
        ]
      },
      {
        "id": "6a1c971d-3164-4132-80a7-724d8e8e0d07",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1ae9bbb5-4c9b-4cab-9464-16c34cfd32af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ce017b3-9de5-4d2d-8eb6-461a71646e11",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7f6ffb3e-b7cf-40d2-aab8-53ce2ba0a1d2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7866fde2-d5d5-4e4e-acf0-b64d9b19eb29",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4ed18124-7810-4667-a04b-2ec5cad417f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8462841-5f5e-4e83-b34e-9b69a6ac88ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17055f3d-1e30-4e14-ac57-8384097c0646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495bce24-2fe6-43ea-9b42-21810cba6b8d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ab7f58-7716-4728-8dbc-7588aefa004e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d8e57f5b-8bf0-467f-91f3-a229f9b088df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead23e99-78fb-4af3-8493-dffe20502fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe4d79d7-cfbd-4e18-b8b4-8c8be0d5aea4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84756896-f4b3-42a9-bc07-8b49a068f0e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90da6edb-badf-45f1-a72e-eeefd236bf38"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e12ab1c5-0531-433d-af71-2fea2bcc948f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4147082e-6f89-4263-951b-62f759ee6822"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8241da1f-054b-40b9-b66d-e696640408b5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8705f622-555d-4df1-a8cf-0fbad16aa225"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da82465c-6f1f-471f-8526-a473f4c5b121",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e158d64-694e-44b0-a762-602cd40fb96f"
            }
          }
        ]
      },
      {
        "id": "24bc599e-3d06-46a4-8a83-e72524556e9f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "232c8aaf-fa2a-4595-919b-bf0636255455",
            "name": "Negative Testing",
            "item": [
              {
                "id": "169d4987-57c8-48ef-b56d-d87da8255d0d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "502e2984-f7d5-4556-b2b7-43406e22fc64",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b9f98d-8cbe-4a07-b9d5-1a0b61172353",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "efcf0373-94da-4db6-9c25-0b1f288095d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e1d8d7-0b1b-46c5-bdbe-797c11dc0a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a134ec8-33a8-4a60-88a3-f9ad2a4150a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c719a2f-d0fe-45b5-a315-2097c092ce24",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6224fcf4-6317-4629-9fb4-977a33031548",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d6cc5528-129f-49ef-8d0a-cd3a318e688e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58db45d-622d-43bb-abf9-ed47f26d709c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78be36bc-f696-4aa5-972e-3743ef02407a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5392588f-a9a5-4900-ac0f-178e0242052a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d23b69af-96bb-4e71-94e1-3fb7500871ed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "51c08e61-44d1-4c6d-882a-52d3b21f23ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "852aecc1-a6d3-43b9-ad54-2c514360f022"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f4e7f674-6048-408d-8895-46a539ce731b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f512191b-86c9-491c-8193-8beec9db5f6b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c4ad1b1-3479-4c09-bf3a-6543da10b62f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d9ef957e-c2b1-4d98-ae65-162156aca607"
            }
          }
        ]
      },
      {
        "id": "69ae134e-6e0c-4bfe-b374-ebd7aecc2129",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f352059-e5f0-405f-998e-6474d71a8301",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f650f7f-09e6-4de3-8060-0534cc04cbb3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6bc2d745-3a64-407a-ae8c-360e387fbbbb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1d9744a-60bd-4bf0-86bb-58c7dd2b7f2d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "974e0801-e550-443e-835b-8d757c576b07",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 267
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 50.53639846743294,
      "responseMin": 9,
      "responseMax": 347,
      "responseSd": 45.769324340987346,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1670027783376,
      "completed": 1670027807588
    },
    "executions": [
      {
        "id": "45a1e2f5-57d0-458e-9cce-40a01d2e99cb",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "598ada95-e11e-4e10-b71c-baeae3d1e2da",
          "httpRequestId": "c1bf0aae-5705-48b0-9714-7c8dad710922"
        },
        "item": {
          "id": "45a1e2f5-57d0-458e-9cce-40a01d2e99cb",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "73488f01-8786-4fea-92d3-cba3f5627d86",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 0
        }
      },
      {
        "id": "bb07725f-4da2-4ce9-a145-df6c3c12fec4",
        "cursor": {
          "ref": "993dc706-cf01-4a81-9100-a8f40dc8066a",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c609db9a-b5b8-4d37-97ad-36d51331a0c9"
        },
        "item": {
          "id": "bb07725f-4da2-4ce9-a145-df6c3c12fec4",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d960e689-3283-4c31-a9b5-f40fccf44b1b",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "6b8e9693-5b46-4510-a1aa-9914c48bf164",
        "cursor": {
          "ref": "965771e6-6741-4109-8693-2c3314f1e421",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "57d2b40f-392e-4390-815a-ffca21a8408e"
        },
        "item": {
          "id": "6b8e9693-5b46-4510-a1aa-9914c48bf164",
          "name": "did_json"
        },
        "response": {
          "id": "f99eb7c1-c2e1-49fe-81ba-40fb42399cd6",
          "status": "OK",
          "code": 200,
          "responseTime": 251,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c040e9-e38a-473a-af9b-8a1fe435faeb",
        "cursor": {
          "ref": "9cf16073-8957-4449-9891-e80a45d3d707",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3bbd58ee-afa0-44a8-a9c7-8ab50b6c5246"
        },
        "item": {
          "id": "d8c040e9-e38a-473a-af9b-8a1fe435faeb",
          "name": "did:invalid"
        },
        "response": {
          "id": "bafe0e8c-5159-4e9c-9030-e0a057fa0b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c040e9-e38a-473a-af9b-8a1fe435faeb",
        "cursor": {
          "ref": "9cf16073-8957-4449-9891-e80a45d3d707",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3bbd58ee-afa0-44a8-a9c7-8ab50b6c5246"
        },
        "item": {
          "id": "d8c040e9-e38a-473a-af9b-8a1fe435faeb",
          "name": "did:invalid"
        },
        "response": {
          "id": "bafe0e8c-5159-4e9c-9030-e0a057fa0b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ac8f6b-6127-49b3-8be6-f5ceaca788e0",
        "cursor": {
          "ref": "d1ba14d5-c982-4cbd-ac47-df7f4c577795",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "865690e0-4811-4117-98c8-86542fd83fb3"
        },
        "item": {
          "id": "38ac8f6b-6127-49b3-8be6-f5ceaca788e0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4ff50ab6-7de6-4ecc-b49c-dea93dd27077",
          "status": "Not Found",
          "code": 404,
          "responseTime": 131,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70d6d10-2e88-4834-bf5b-ff548e825208",
        "cursor": {
          "ref": "aa53f088-c165-47d0-b95c-eda9e744001b",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "eccedcfc-585e-4c24-8bd7-9401c9f9383d"
        },
        "item": {
          "id": "a70d6d10-2e88-4834-bf5b-ff548e825208",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "fa7207a7-b541-46c9-8513-082ecd7f19bf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1c578f-fea2-4102-9f85-e22183d8c976",
        "cursor": {
          "ref": "2c3b133a-afd4-466a-b63c-aaeae7f10b0a",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3a1787a4-5817-409f-ba0d-978ca1d09ff1"
        },
        "item": {
          "id": "1b1c578f-fea2-4102-9f85-e22183d8c976",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "61be4ca1-42f3-4f15-bd7e-3bfaa314f791",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81f7ab4-ce98-47ac-873f-af73df4470bc",
        "cursor": {
          "ref": "1cc212ff-dfc7-4d03-b2f4-67cd81a2edfc",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "07e675dc-007a-489c-a48f-608f6029bfca"
        },
        "item": {
          "id": "f81f7ab4-ce98-47ac-873f-af73df4470bc",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "aeaf3cfb-cd77-446e-8dbf-4284a76991ba",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f81f7ab4-ce98-47ac-873f-af73df4470bc",
        "cursor": {
          "ref": "1cc212ff-dfc7-4d03-b2f4-67cd81a2edfc",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "07e675dc-007a-489c-a48f-608f6029bfca"
        },
        "item": {
          "id": "f81f7ab4-ce98-47ac-873f-af73df4470bc",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "aeaf3cfb-cd77-446e-8dbf-4284a76991ba",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "3fa7432a-2c63-485e-b52e-52b26df3ba84",
        "cursor": {
          "ref": "c63863f5-1d4d-451f-be4c-a66fd2400c4c",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5a6ebba5-01cd-4e5b-933e-2555e920e934"
        },
        "item": {
          "id": "3fa7432a-2c63-485e-b52e-52b26df3ba84",
          "name": "identifiers"
        },
        "response": {
          "id": "5521db97-d11f-4f57-8a79-c6ebaeb123c3",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0396f413-ff02-4be5-b668-8933bb0ebef8",
        "cursor": {
          "ref": "b9c72b83-978b-4e57-986c-447a0807a5ad",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "22d2d083-5ee9-4ff3-8c72-9aec8493e2d9"
        },
        "item": {
          "id": "0396f413-ff02-4be5-b668-8933bb0ebef8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "750d0184-1287-43c1-a9dc-4ef2254f1791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "0396f413-ff02-4be5-b668-8933bb0ebef8",
        "cursor": {
          "ref": "b9c72b83-978b-4e57-986c-447a0807a5ad",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "22d2d083-5ee9-4ff3-8c72-9aec8493e2d9"
        },
        "item": {
          "id": "0396f413-ff02-4be5-b668-8933bb0ebef8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "750d0184-1287-43c1-a9dc-4ef2254f1791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "4fa1439d-c9bd-4339-bb71-814d046ea8ec",
        "cursor": {
          "ref": "ded0d049-9bef-4739-b773-a98981cd7d85",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "42fdae46-5d22-4b3c-943b-b1f00e9f6da5"
        },
        "item": {
          "id": "4fa1439d-c9bd-4339-bb71-814d046ea8ec",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "344b2cf9-72bd-44b0-832b-310d1de3689e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "1c8bd104-f49d-4dd1-a2c2-298d8234f5e6",
        "cursor": {
          "ref": "10884288-0bea-4a4c-9698-ac981b187506",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b6abc539-54a5-4414-b561-2a85cd928045"
        },
        "item": {
          "id": "1c8bd104-f49d-4dd1-a2c2-298d8234f5e6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "03da2e8a-a4aa-44df-8e40-5b6b99c1b8c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "8659330c-4c45-4c48-bfd8-97935683faa9",
        "cursor": {
          "ref": "e0e635fc-a823-43c4-b142-6c600b3fbd9a",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0679b73c-f0c0-4bee-95a2-620abdc4aab0"
        },
        "item": {
          "id": "8659330c-4c45-4c48-bfd8-97935683faa9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a87e9a88-9f4d-428f-ac2f-06cb2f83026b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "464f9113-5c6e-435e-aad3-56f940e607e9",
        "cursor": {
          "ref": "5149cda5-d81b-47f0-b995-7fec9d67b7a4",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d2d6c408-46e8-4393-944d-09446f425088"
        },
        "item": {
          "id": "464f9113-5c6e-435e-aad3-56f940e607e9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fcb989e8-78db-4762-acfa-63a686a4592e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "b00bf2a0-1512-4f5f-a002-3ad1dc32b05b",
        "cursor": {
          "ref": "d3dee5e5-5ca6-42d5-b98d-c677f3341c28",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "02beac61-2f7d-41f7-97cf-0040ceb49435"
        },
        "item": {
          "id": "b00bf2a0-1512-4f5f-a002-3ad1dc32b05b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "805718a4-3dfc-4f4c-9177-aed9e216fd65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "3fbb343a-2a16-41a0-ab2b-c6d66f44a21d",
        "cursor": {
          "ref": "800c26c9-cd62-4afa-88e2-208fd4c5dc2c",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "787cb9ee-a165-4817-843e-2bc13aba52ef"
        },
        "item": {
          "id": "3fbb343a-2a16-41a0-ab2b-c6d66f44a21d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "18404171-ac1f-4dcf-bfe9-081f1b0107af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "61e7070b-eaba-41e1-b2ae-c769a638249c",
        "cursor": {
          "ref": "e3685626-bc4b-4553-85e3-860e4eb22661",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "04069ccd-90e1-45b1-9f7d-88b3a5cbde10"
        },
        "item": {
          "id": "61e7070b-eaba-41e1-b2ae-c769a638249c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a2447233-edd7-41eb-88d3-0ce0ce596c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "d5f0d055-f8a0-4606-b7de-4020db43cdd4",
        "cursor": {
          "ref": "6e4fa042-14a7-4871-94c8-81e018c5ca49",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2f20f195-5cfc-41a4-9e74-53b09ac9a980"
        },
        "item": {
          "id": "d5f0d055-f8a0-4606-b7de-4020db43cdd4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e0e5d5e6-7721-4b71-8f80-ed2df6190c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "0759081e-5697-4902-987b-d8f19dce0e31",
        "cursor": {
          "ref": "1ae06fbb-b5db-4d3e-a07e-5f2182000ae3",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "136f2744-5b77-4cfc-957d-f5a84549e066"
        },
        "item": {
          "id": "0759081e-5697-4902-987b-d8f19dce0e31",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a9bd7d57-f6f9-4556-9a36-fff65d15e873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "c43c1a8e-e24d-45a3-93ff-df9f15864781",
        "cursor": {
          "ref": "add1524d-0c6f-4640-a19c-de8bfa87b868",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "32266495-5d5a-455f-a581-b51faa6c2d2b"
        },
        "item": {
          "id": "c43c1a8e-e24d-45a3-93ff-df9f15864781",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1041e579-9d07-464e-a15e-82b525d22539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "0ef0b91d-a63c-4bca-b9f4-fb2719b3f21a",
        "cursor": {
          "ref": "f61e280d-8ff6-4437-b597-1f1a2f1d1a96",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9a4986ac-0936-4c04-b2d3-d4ae37e95605"
        },
        "item": {
          "id": "0ef0b91d-a63c-4bca-b9f4-fb2719b3f21a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d711ac35-d47d-45fb-8e36-b748907d693d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "dbe37289-7a93-4249-bc80-b4155b07ec1c",
        "cursor": {
          "ref": "0f7b0676-c7c2-49f2-b511-19f24ba16f06",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "df2baae0-e107-42a1-980e-c610e6d174fb"
        },
        "item": {
          "id": "dbe37289-7a93-4249-bc80-b4155b07ec1c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2a5615f0-73cb-4467-8d27-c97d2b309b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "c2daa7c3-b645-408f-b9ee-4e0d3c79d70a",
        "cursor": {
          "ref": "d77ef5a9-ad71-4514-9c56-6d668c6eb1ca",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0e61ac43-f48d-4dbb-80b5-cb6478220eba"
        },
        "item": {
          "id": "c2daa7c3-b645-408f-b9ee-4e0d3c79d70a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8c95c008-56bc-49be-add0-54b26b151e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5c555e37-d68e-4f62-9c7d-8b25fc347e8d",
        "cursor": {
          "ref": "07ce5ba6-2465-4832-8c1d-51a3ec4e4545",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "922b2a6d-b42b-4e03-b716-07f33f0ba5d0"
        },
        "item": {
          "id": "5c555e37-d68e-4f62-9c7d-8b25fc347e8d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f5787369-152f-4baa-a0c7-0abcc5e6215a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "31dfa268-e6c4-488e-a895-8c0262ca511f",
        "cursor": {
          "ref": "517dd7da-f54a-46d1-a0df-0440eca6b4d3",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d16a760b-6d2b-473f-a5f0-a9f5f778f6e9"
        },
        "item": {
          "id": "31dfa268-e6c4-488e-a895-8c0262ca511f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "177bead0-7931-4d02-ac0f-5d2425010e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "2ebfe1ef-1b82-4bab-8fce-1f159e735db8",
        "cursor": {
          "ref": "08cc8d0c-1a8e-4370-9978-3bc831760ac1",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "800e7d5c-5d1a-4315-8aa5-53dc0018f1b0"
        },
        "item": {
          "id": "2ebfe1ef-1b82-4bab-8fce-1f159e735db8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a1184d91-b3b8-493d-bdfd-3700957f1912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "af638d8d-5c23-4b10-af75-2b6d9fbba327",
        "cursor": {
          "ref": "80d60ecc-d532-4e1e-a35b-08b156400b81",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c136068e-5042-4518-9b59-cfe2923ee2ce"
        },
        "item": {
          "id": "af638d8d-5c23-4b10-af75-2b6d9fbba327",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e75ed2c2-453b-4617-b5d8-e039c83755d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "547334e0-558f-4fba-98e4-3977832a5dcd",
        "cursor": {
          "ref": "d01c9159-7529-45e1-bb5c-039f2f799993",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c37dbef7-f47d-41c5-aa8b-5c399facdd67"
        },
        "item": {
          "id": "547334e0-558f-4fba-98e4-3977832a5dcd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "12fc8545-bd1b-4bf3-bfbb-c4dfd7bc3b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "f0319ef7-4aaa-442c-8c3d-e595e51445e4",
        "cursor": {
          "ref": "8955b5de-9345-4e68-bacf-9b718356dac5",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9de8b0bf-1279-49e5-94a1-8392118c5806"
        },
        "item": {
          "id": "f0319ef7-4aaa-442c-8c3d-e595e51445e4",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dc328472-c775-4a4c-a707-1f85d237d81a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "0db3652f-2882-45fa-81dc-de0f6c4c5531",
        "cursor": {
          "ref": "3cc0f545-ee13-4c5e-93b0-4d6ba01e4b88",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "753c12c0-fb4f-4e51-a103-b4642490ecce"
        },
        "item": {
          "id": "0db3652f-2882-45fa-81dc-de0f6c4c5531",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1e4f8634-9545-4276-837d-647d495efbe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "9ec91c03-11b8-4324-a7d3-997f4a62765a",
        "cursor": {
          "ref": "6091d5a8-8cbd-45ea-8193-3107de1382d3",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6b33b946-4db1-4720-a7aa-d15320b9df6b"
        },
        "item": {
          "id": "9ec91c03-11b8-4324-a7d3-997f4a62765a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e9d1cfd6-437f-476a-aa2e-5f1e0e9cb47b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "eddfb51d-cede-45a4-988c-7e1f95421ade",
        "cursor": {
          "ref": "eba1ec7c-b0ff-48d0-b5f7-28546c1e8cbe",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d0fcff4c-cfd1-4760-bc02-8482b35b749a"
        },
        "item": {
          "id": "eddfb51d-cede-45a4-988c-7e1f95421ade",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d9dbde45-e9fc-4249-9d3d-40b0e1d29c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "9bd21c02-b953-4512-808b-1bf8074eb0af",
        "cursor": {
          "ref": "e5098819-8fa3-4a73-aa96-c380e296cf23",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "98116d93-2f8f-47d7-bac6-2db3f9123595"
        },
        "item": {
          "id": "9bd21c02-b953-4512-808b-1bf8074eb0af",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "df65903b-80b8-4659-accf-c8467f237508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "d85ef136-f0b4-408e-9f30-a55abc364de9",
        "cursor": {
          "ref": "c8c54573-caae-4650-bc3d-53d02c008f87",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1d0d0764-0e5b-4790-92f8-fa9754691c78"
        },
        "item": {
          "id": "d85ef136-f0b4-408e-9f30-a55abc364de9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6cf285c7-4ed1-47b1-818f-845b747ec2b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "2d1c355c-ac86-4b51-a424-1380f1825807",
        "cursor": {
          "ref": "c1b6e133-15c8-42ea-a73e-0f685c5971b4",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ff820bb5-9500-403a-ac59-920c9421541b"
        },
        "item": {
          "id": "2d1c355c-ac86-4b51-a424-1380f1825807",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a653fb57-abf1-4353-97b5-a7caca94feb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "59f47ea0-3798-4ba6-8962-a3b11f915d4b",
        "cursor": {
          "ref": "1e201ccf-7e19-4d1f-936b-638d07a8c4f1",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "88b6a139-877f-472c-84b1-5fbf1d1664fd"
        },
        "item": {
          "id": "59f47ea0-3798-4ba6-8962-a3b11f915d4b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "555a549e-8c6e-4c2d-ac1f-cb3b2abec1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "30f2caee-85ab-473e-8e1f-e113a13d3198",
        "cursor": {
          "ref": "052b1f5a-7d23-4fc9-8b4d-f0dadf8384ef",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6d6fa884-f8f1-45ee-967b-0f32972a78ec"
        },
        "item": {
          "id": "30f2caee-85ab-473e-8e1f-e113a13d3198",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f951f06a-1f03-4cad-942f-89a1c6643abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "bb14a39f-40a5-466d-88b7-ad10980a8432",
        "cursor": {
          "ref": "22abb3e8-7d13-4ff7-b282-ece1e620a441",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d24be071-18aa-4796-8295-70da201d6c23"
        },
        "item": {
          "id": "bb14a39f-40a5-466d-88b7-ad10980a8432",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a90386b1-afaf-4603-a742-d9a96a3af9b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "acf00ba2-28d3-434f-9d18-02e1cbca11d4",
        "cursor": {
          "ref": "2da5fdc5-936a-4c7e-9116-c1217be23733",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4e3ba0ce-7b56-4d8d-8fd6-b172c9e7f285"
        },
        "item": {
          "id": "acf00ba2-28d3-434f-9d18-02e1cbca11d4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ad7d66f9-5217-4cd2-a3d9-d7f38cfa6537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "8084499c-df51-4734-a25b-1b3b400b901c",
        "cursor": {
          "ref": "53b21c93-7413-4277-adfe-087b7777abb8",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6049b363-58af-4d38-99b9-d36cad1d9eaa"
        },
        "item": {
          "id": "8084499c-df51-4734-a25b-1b3b400b901c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "12a7deac-78c3-400b-b715-506aeb47498e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "10dbe886-56ea-4987-8fb1-36814ea8ff94",
        "cursor": {
          "ref": "01f545e3-18c7-4078-946d-e875248ef86c",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "216d42c4-d2a3-4338-9774-aec3d4cff40e"
        },
        "item": {
          "id": "10dbe886-56ea-4987-8fb1-36814ea8ff94",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a4ff278b-011b-40cc-a209-b0403b7de313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b12c33fe-579e-4dea-84d7-9cd072eaba54",
        "cursor": {
          "ref": "b4e6ad32-dce9-41bf-af0a-387e9cf11169",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8f801825-902a-493d-a5a5-dac8bcf09785"
        },
        "item": {
          "id": "b12c33fe-579e-4dea-84d7-9cd072eaba54",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "faf7eeb3-fe6b-4900-8ef3-260bd22f918f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "b6bcca2f-9e75-4e7c-8e71-88804b6f0f68",
        "cursor": {
          "ref": "77cfb1e7-31c8-45c7-8f15-1f2e860b949d",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4df0642c-3230-4115-b93c-76e3b17c738f"
        },
        "item": {
          "id": "b6bcca2f-9e75-4e7c-8e71-88804b6f0f68",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "51778c50-07fa-48d4-acc0-3d6c580bff8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8304aa2a-9379-4353-b90c-16f506f21b4a",
        "cursor": {
          "ref": "9555e853-fbcf-4709-9766-5530fbaf0407",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c8b8881e-6151-49e6-9756-f6708f41de88"
        },
        "item": {
          "id": "8304aa2a-9379-4353-b90c-16f506f21b4a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a7ffbfa4-118f-4a70-968e-2a36a8ea1437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "674bd229-5d00-46c1-9cbc-c17c5b4839a4",
        "cursor": {
          "ref": "ffc93384-0367-43d5-be16-d6845e34e3ab",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ca7e3d0d-97df-4550-85d8-1e0b8914e222"
        },
        "item": {
          "id": "674bd229-5d00-46c1-9cbc-c17c5b4839a4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a575f83e-b0b8-4381-83a6-94898c91c923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d37af4df-f18a-437e-b29f-26c3313175f1",
        "cursor": {
          "ref": "a8ad6fd9-5b6d-407e-a4be-550fc20baf61",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c594ec2d-9b25-4bac-a9d8-3fd88e0f72da"
        },
        "item": {
          "id": "d37af4df-f18a-437e-b29f-26c3313175f1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9667f295-c11e-45c8-85dd-f13ecc8f4b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 347,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0de31887-8d26-405f-9f7c-c482714d8cf1",
        "cursor": {
          "ref": "7d6cd574-9976-4475-80e2-9a2195895863",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ce783e23-cca1-41bc-aef3-b15e019f893f"
        },
        "item": {
          "id": "0de31887-8d26-405f-9f7c-c482714d8cf1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "edd91e76-d9e7-49fa-9045-7a3b21c7679f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1305daa9-ea8a-463a-811a-e2e074b349e6",
        "cursor": {
          "ref": "23793d4b-af4e-4c8e-9e0b-1cd6da1f75da",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "67b4ee7b-44eb-44a4-8fd5-0e79f8f791cf"
        },
        "item": {
          "id": "1305daa9-ea8a-463a-811a-e2e074b349e6",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c6fc9229-7d3b-4b8c-97ff-8abbeea3b3e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "4ae6ba5d-a72e-46ef-a918-e29e1ee95a3a",
        "cursor": {
          "ref": "117a6cd7-aef8-40a5-948a-dd175cf6b828",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "aa414451-edbd-411d-b11f-3540b5c130c1"
        },
        "item": {
          "id": "4ae6ba5d-a72e-46ef-a918-e29e1ee95a3a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e65880a8-22c2-43b3-88de-44375c7ee006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9290ef08-c447-4d55-a293-a516d425cfde",
        "cursor": {
          "ref": "dfbfec4e-d1fc-42e5-9a79-64b864730526",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e2434b7c-f624-4c64-99ad-e76c7d73a417"
        },
        "item": {
          "id": "9290ef08-c447-4d55-a293-a516d425cfde",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "35ff103f-cd21-45a6-941a-e87761151f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f7951397-9193-4ae7-ae38-bafd15f25ecd",
        "cursor": {
          "ref": "462871a8-8ac3-440a-96af-91b049d9fb5b",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "43316ae1-dfc9-4be8-8f45-dd45d719dca4"
        },
        "item": {
          "id": "f7951397-9193-4ae7-ae38-bafd15f25ecd",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bc2c98f7-52be-4d1a-b2c1-93be49fd5f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "524b5e40-08de-4ab5-92e2-0f57b2ea03fd",
        "cursor": {
          "ref": "b4d8f4af-0678-46e7-b7f1-aae5870826b1",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "375805fb-aee7-49c5-b2bb-50c77f9f4651"
        },
        "item": {
          "id": "524b5e40-08de-4ab5-92e2-0f57b2ea03fd",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "53bcc147-a4b9-4771-b403-fbd75f822129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "d49664c7-4f06-4247-9f5e-7a65f11fa216",
        "cursor": {
          "ref": "3b574524-002e-4baa-91e6-e1085ebb7583",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "98f59c15-6e7b-4f4e-8899-b9f66a37346f"
        },
        "item": {
          "id": "d49664c7-4f06-4247-9f5e-7a65f11fa216",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "30dcd800-ecc1-4193-9427-e588155deb02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "53b6a8f6-e9c2-40a5-8597-4e88df6b3fb0",
        "cursor": {
          "ref": "a657cdad-9a31-4ea4-a163-4ca1f2bdda46",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "cbbffb63-0ac0-45cb-8e41-2fd2321d00e3"
        },
        "item": {
          "id": "53b6a8f6-e9c2-40a5-8597-4e88df6b3fb0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "15c81f51-66ed-489d-bbfc-5c79c83d9206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "7ecc8346-0c56-48c5-838d-7f82c76ad7dc",
        "cursor": {
          "ref": "a539aa7b-c5b9-48be-80a8-dea27e93ade8",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "aa600c83-845a-495b-9dc8-0555515befaa"
        },
        "item": {
          "id": "7ecc8346-0c56-48c5-838d-7f82c76ad7dc",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "af21a655-efe1-4036-8f5c-afe071720a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "35c4e15a-3c74-4bdd-a3ce-0b92fd2e3810",
        "cursor": {
          "ref": "28521de4-0c69-4d14-8a61-75f596554aa7",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6f49569c-d511-4dab-ad60-8529fe04e6f9"
        },
        "item": {
          "id": "35c4e15a-3c74-4bdd-a3ce-0b92fd2e3810",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a734aec5-37df-4c6b-b24c-cac8dbfddf82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "214b430a-827a-43bc-bff1-2b888e302cee",
        "cursor": {
          "ref": "c404843e-49ae-49e7-96ce-edd60c2716cf",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d260d0de-6a3a-487b-b16c-fc09a575a2ed"
        },
        "item": {
          "id": "214b430a-827a-43bc-bff1-2b888e302cee",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cd765413-49a0-42f7-a8db-cb6c34f917f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "8288868c-52e1-4ba4-a7bc-2fc5d63577af",
        "cursor": {
          "ref": "5f085f57-1e01-4fe9-8e80-bc6cebabaf7a",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c46e333e-6cfc-4c4e-8d5b-a6e240da5b5d"
        },
        "item": {
          "id": "8288868c-52e1-4ba4-a7bc-2fc5d63577af",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "aebd6ab4-1806-40c5-acca-f4d1463f515a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "b76c9c68-7c29-44a1-9467-b0856aa29d80",
        "cursor": {
          "ref": "e107adf6-3e7a-47a4-a35a-95cfd31a8c48",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "cba3b5d5-095a-414f-8096-96d5705cb20c"
        },
        "item": {
          "id": "b76c9c68-7c29-44a1-9467-b0856aa29d80",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e6d57cd0-1ce7-4e15-9a05-fe83095132ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "6873b579-a9ed-48fc-83f8-9c3aef197b8d",
        "cursor": {
          "ref": "317180a7-a4df-4346-8ad8-d9c8ebe33e59",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9af95d20-da91-43d4-a193-f5250fbd83e0"
        },
        "item": {
          "id": "6873b579-a9ed-48fc-83f8-9c3aef197b8d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c2f6ea6b-f4a3-4b8a-9cdc-c0ccc3ea0aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "3f6ce4b6-3621-4178-8931-74305f04ea3b",
        "cursor": {
          "ref": "87f8341e-502c-44b2-9caf-deb7b73dd3e8",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "698dee43-a864-420c-8c2d-93f0e37ad8fc"
        },
        "item": {
          "id": "3f6ce4b6-3621-4178-8931-74305f04ea3b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0f42704e-661f-4410-90fd-aecb10827d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "f9157591-755b-46ac-b797-a27aaf037808",
        "cursor": {
          "ref": "f1e8a56b-41e2-4575-9083-3bb89296907e",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "26756312-318d-438a-9a3f-01bbc2e1e4e6"
        },
        "item": {
          "id": "f9157591-755b-46ac-b797-a27aaf037808",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fcfa71cd-6e37-4ae9-a137-f3cab2529ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "7b853ff1-b9b9-4172-9c23-05747dcba6eb",
        "cursor": {
          "ref": "ef87ff98-2294-41af-961b-a148d236aa9b",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0ea7991a-7a8c-4f2e-be16-4a255a17991f"
        },
        "item": {
          "id": "7b853ff1-b9b9-4172-9c23-05747dcba6eb",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2cba08da-6e62-4932-b9aa-2bc69b9662b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "f1ef7f1b-f53c-4d89-9daf-d5ab52393e26",
        "cursor": {
          "ref": "b16072a4-ccd1-4487-854f-68435b6d7bea",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "aa1926aa-5053-42a9-a4b7-f6496adf6c6b"
        },
        "item": {
          "id": "f1ef7f1b-f53c-4d89-9daf-d5ab52393e26",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5dbab588-7fda-45d3-a2e0-3fbea7e2e6a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "c51021b9-d743-4a21-aadc-5fa494b8de94",
        "cursor": {
          "ref": "784e8015-da74-4f21-929f-c37f4716c578",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e49f320b-8cac-4e23-93b1-dc792a67ee54"
        },
        "item": {
          "id": "c51021b9-d743-4a21-aadc-5fa494b8de94",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b36c9cf9-9796-424e-9d08-b32467367afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "9f8bd108-8a82-4ebe-86ee-886ba51c97e2",
        "cursor": {
          "ref": "069ccf5a-edf9-4eeb-a56b-8e6d29f8589f",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d1c2bccb-b8cf-42e2-a7e7-475cddb28ecc"
        },
        "item": {
          "id": "9f8bd108-8a82-4ebe-86ee-886ba51c97e2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d46d10cf-a302-45e6-bdb7-e2e51b7b6c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b35d764b-41c8-46d2-a1f5-8a8b8cf4ae20",
        "cursor": {
          "ref": "1a5727fe-80c1-4412-a1d4-46dd8a0deeea",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e0414931-f4cc-4240-91d3-dec5fce2fa0c"
        },
        "item": {
          "id": "b35d764b-41c8-46d2-a1f5-8a8b8cf4ae20",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "89b87449-8120-4740-a4d2-1a0c6ee2ce35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "40e7bcb0-7142-4bb0-8b9e-3d8d7bfb52d1",
        "cursor": {
          "ref": "5eb47488-e417-4cc6-9567-5ecc5df800af",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6c44e504-7b53-4271-a48a-21cbd1268b2d"
        },
        "item": {
          "id": "40e7bcb0-7142-4bb0-8b9e-3d8d7bfb52d1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "427c0b00-7b50-4838-ada8-f5fb62b41af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "8fdb3c18-6473-44d8-b349-1b0cfa04b055",
        "cursor": {
          "ref": "96497fd8-a28a-4c50-845d-7e29471a54d9",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0f2f416e-c6a7-4907-84b1-978dcfa8bb27"
        },
        "item": {
          "id": "8fdb3c18-6473-44d8-b349-1b0cfa04b055",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "54aa225b-f5db-4863-802d-1148d4a1c308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "3c7546ac-e8f1-4e71-a350-bdc78056de8f",
        "cursor": {
          "ref": "7e534293-7c69-45b7-a7db-6a87633f871c",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a46c72fe-b1f6-4961-ab3e-08c595145d0c"
        },
        "item": {
          "id": "3c7546ac-e8f1-4e71-a350-bdc78056de8f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b1ae1322-9f9f-498c-98ab-f594d7e69e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "3d3c630f-84c0-4986-bd26-5eb0000610fb",
        "cursor": {
          "ref": "0f76ed82-e4ce-44bb-b28d-e1c48b8f2a65",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a6091891-cf22-4e99-b9a9-20fadec15107"
        },
        "item": {
          "id": "3d3c630f-84c0-4986-bd26-5eb0000610fb",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d54f5d82-d3fa-42f2-a0df-70863a0676c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "cbff9645-cbb0-4c3f-a5eb-26a11a61fb4c",
        "cursor": {
          "ref": "54f5dc84-c2bb-48a6-896d-6aeffeaec3f2",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "defbca64-12c8-47e8-993b-815dc93c37ee"
        },
        "item": {
          "id": "cbff9645-cbb0-4c3f-a5eb-26a11a61fb4c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4c01bbb1-98e3-4b08-ab51-f13111a41d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "c216a08c-2272-43ec-b107-a6f9793bbc5e",
        "cursor": {
          "ref": "b7e5137f-2bbf-4c81-9257-5bc82f72c3ba",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6e0b4ff4-0e26-4166-8e47-56ae492b0017"
        },
        "item": {
          "id": "c216a08c-2272-43ec-b107-a6f9793bbc5e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fcb7253d-ae7e-4b6d-9c89-2016fee34374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "8a5aa42a-d9b3-41f0-9ec4-32453a341fda",
        "cursor": {
          "ref": "a3fe030e-dfba-4559-ae20-083ef58a4e5e",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "11b2c0a3-55ef-4294-b778-85eb9a60724b"
        },
        "item": {
          "id": "8a5aa42a-d9b3-41f0-9ec4-32453a341fda",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e336d13b-c51e-4824-9430-1d8d972fe04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "014c0adf-c557-410a-b12b-0d287138f474",
        "cursor": {
          "ref": "619d9cef-4b20-4dc8-a547-18f30d47c3d1",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9e270fef-4448-4cc2-a71d-bf0c736f2adf"
        },
        "item": {
          "id": "014c0adf-c557-410a-b12b-0d287138f474",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8e74cdf5-6618-4bb0-b423-48d0cb9aa03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "e97efc56-6bdf-45b0-956b-5d3cdd5fb1af",
        "cursor": {
          "ref": "41ac96a3-8e1e-4f79-abeb-9438f8a1756b",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "de0f5e85-ea1c-43fa-adde-61eec414f803"
        },
        "item": {
          "id": "e97efc56-6bdf-45b0-956b-5d3cdd5fb1af",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3677ba2e-3ef5-487c-86ff-71a48611628c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "8a065959-bd6d-4f19-85a8-da3d571ae8ce",
        "cursor": {
          "ref": "d41b5eb6-2006-4aff-9788-bd465cfd5c1f",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1b5fceb4-f5ea-4cda-840d-527d38de3755"
        },
        "item": {
          "id": "8a065959-bd6d-4f19-85a8-da3d571ae8ce",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8a39f834-01fe-4bb7-9a4e-54468bc314a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "43e918f8-62af-4af1-ba3e-477ad50a3e8c",
        "cursor": {
          "ref": "239bf46c-4b73-431c-84de-f6c9359f9201",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0e1d5f9d-edc4-4214-8ef5-224dc5dfbee5"
        },
        "item": {
          "id": "43e918f8-62af-4af1-ba3e-477ad50a3e8c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f05005ea-a1ce-4aa0-b6d4-d737c3b55f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "58b4aa3c-7ca7-41ba-8df8-216ae676f7c6",
        "cursor": {
          "ref": "b64a1da1-750b-457c-b035-53fdd2beb30c",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "39bfa5f5-d1ef-49ea-8ed3-fe111f4e1e87"
        },
        "item": {
          "id": "58b4aa3c-7ca7-41ba-8df8-216ae676f7c6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "035e4259-ac62-49cd-bd31-f4e6a5b08592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "812b0c06-04a5-4d05-ac25-ec99ed945fcb",
        "cursor": {
          "ref": "0590c50f-dcdf-4e69-9538-cf77c9054994",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "06c43cce-6cd6-4bc2-99da-4e454b0a0059"
        },
        "item": {
          "id": "812b0c06-04a5-4d05-ac25-ec99ed945fcb",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b35b7052-7ac7-40b2-847b-34ec29d391dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "73867417-8917-4697-88cf-d2f81e8ba41f",
        "cursor": {
          "ref": "969c3bbd-13d7-4f50-b339-544002fc193b",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6a724f36-44e3-4b4a-95f8-d133f8cadc91"
        },
        "item": {
          "id": "73867417-8917-4697-88cf-d2f81e8ba41f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "308aed0e-69d6-4589-9d37-f0ccfd4b78b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "b45c9513-b406-4570-b85c-3490e5989b2f",
        "cursor": {
          "ref": "5368f11a-6266-4fd7-957a-2e7b13f35a6f",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ac9b4546-cc67-46ba-a1ce-c87bcb2a1eac"
        },
        "item": {
          "id": "b45c9513-b406-4570-b85c-3490e5989b2f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8fcbe08a-00ae-42e8-94f1-accb4d34c416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "d82d5c08-0078-4712-a0b7-5b5b718eccb5",
        "cursor": {
          "ref": "0c8ed34f-560b-4a5d-905c-cbd9a01749a4",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2b415b5d-3807-4a14-88b4-01c0bb088ab9"
        },
        "item": {
          "id": "d82d5c08-0078-4712-a0b7-5b5b718eccb5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6fe37186-3ce4-439a-8d7b-75f9b3b295d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "68a6d2f5-33ec-453a-91b0-24083249825a",
        "cursor": {
          "ref": "442c49e0-06ac-4945-a90d-9071b41e17ee",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2f5a8914-a1c7-46b6-819b-4613ec87b9ad"
        },
        "item": {
          "id": "68a6d2f5-33ec-453a-91b0-24083249825a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "59aa6214-fadf-44e3-a099-e4144b2fa925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "26913426-6a1c-41b3-9b39-80adf5a1e2c9",
        "cursor": {
          "ref": "17b21af8-2b02-492a-aa6b-010156fe7cdc",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f70ae7f7-32ec-4cb3-b2fa-6171229ec69d"
        },
        "item": {
          "id": "26913426-6a1c-41b3-9b39-80adf5a1e2c9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f738de41-976e-4d7e-a49e-e0029ab28561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "c020ca02-4067-47e6-9c58-47daca71fb53",
        "cursor": {
          "ref": "58ec2d75-05b9-417e-9e48-b09b1b4416d5",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "39b5dcd9-d65d-4f8c-80c3-65737bb88885"
        },
        "item": {
          "id": "c020ca02-4067-47e6-9c58-47daca71fb53",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "82bf9f36-d238-48e5-851f-6ffcce7ce232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "dd37b547-d8a7-4d97-a5b3-f95146b131d4",
        "cursor": {
          "ref": "d129433a-71dc-44db-a70c-7d6d8117ba5a",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "577c8c9c-f089-404f-9741-129da2aec1ed"
        },
        "item": {
          "id": "dd37b547-d8a7-4d97-a5b3-f95146b131d4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8a930b7c-f1de-4faf-b847-01f8f4a34e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "ee5a2192-5854-4a4b-841d-61f6d6974425",
        "cursor": {
          "ref": "7a907c0b-7867-4e6d-bae2-cbb673cf73a9",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e29278a3-ba0d-4ff8-83d7-7c279ddbbe64"
        },
        "item": {
          "id": "ee5a2192-5854-4a4b-841d-61f6d6974425",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1ce7d864-b5bb-43aa-8cc6-83a44d73166d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "1a1ea975-8f0e-4476-b18b-b3376199bb02",
        "cursor": {
          "ref": "85ca0b36-5fd0-41ea-978a-0cf9fbabe2a6",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d57bf807-7e81-4dd3-8e57-29de308fb185"
        },
        "item": {
          "id": "1a1ea975-8f0e-4476-b18b-b3376199bb02",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "358aa125-b27d-48d5-8079-69f4d87141d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "a7dc53cd-509c-4a75-9461-4b859be5ba17",
        "cursor": {
          "ref": "d25e0549-a2b7-4b9a-b529-1a4ddd7528c8",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ccaf2b0a-ffb1-4ecc-ba78-50961aa66569"
        },
        "item": {
          "id": "a7dc53cd-509c-4a75-9461-4b859be5ba17",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ede27173-d89e-4fbb-99d8-04c3a6c5d0f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "0a0a751e-101e-4ae8-a624-4ce0b2373c8d",
        "cursor": {
          "ref": "8c04510f-d069-4e54-9ab9-2e0b42054c2f",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f9f7b8a8-373f-43ca-a2c6-72434d95c2ba"
        },
        "item": {
          "id": "0a0a751e-101e-4ae8-a624-4ce0b2373c8d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8d21a9f5-f4ba-4e4c-a96b-53e87511d1ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "b781e28a-174d-4e6b-ae19-649fb15a2fe3",
        "cursor": {
          "ref": "1d59a651-5b31-4d0c-b7a5-e11e5408f06c",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0a20bd39-61d5-4187-a23c-1ad8c7129953"
        },
        "item": {
          "id": "b781e28a-174d-4e6b-ae19-649fb15a2fe3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5c677746-7250-4773-b9b2-d231b8cd6213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "a0847955-0018-469d-9eab-96c5118b85b7",
        "cursor": {
          "ref": "cd26c28f-1506-4b0a-a423-2d35362f9b73",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d4e5c7cc-768e-46fd-afc2-ca742ef6959c"
        },
        "item": {
          "id": "a0847955-0018-469d-9eab-96c5118b85b7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4bd2d9db-65b3-43f7-beea-fe82c7522622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "b3bf3272-7791-4b02-8175-350f89d3bb0f",
        "cursor": {
          "ref": "e92db2ad-fb18-4d0a-97bc-063aa7d83655",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a02cb442-9246-44af-a597-1e8be1ab7601"
        },
        "item": {
          "id": "b3bf3272-7791-4b02-8175-350f89d3bb0f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "579942d8-2cf8-4c39-b624-0126f2b49667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "5e5afb65-bca8-454d-9fdd-16640e90e78f",
        "cursor": {
          "ref": "2e007079-b025-4eca-a31e-143e6c54f8cf",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d85bc4bd-2d31-4e86-81d2-037a2fe3dfd1"
        },
        "item": {
          "id": "5e5afb65-bca8-454d-9fdd-16640e90e78f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "62317e2a-1c1f-465c-aaf9-7f351416aab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "a97baeee-61d8-462e-84f1-93a71d8209ec",
        "cursor": {
          "ref": "7ebdf6fa-6e6c-4dcc-a1e2-1c0fd2d16210",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c1dbc0fd-16de-4ea8-85ac-bfacbff754e7"
        },
        "item": {
          "id": "a97baeee-61d8-462e-84f1-93a71d8209ec",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "73f3b0ac-997c-435a-a259-34e519459a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "b445b695-3408-4663-95fb-af43026d63d5",
        "cursor": {
          "ref": "586191be-1ec8-41c1-b5d8-749c4dbf078b",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "14f2fee1-8abc-42b7-9803-ef56fe5fff41"
        },
        "item": {
          "id": "b445b695-3408-4663-95fb-af43026d63d5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f60f0d9b-f2e7-439c-a46c-923506c5ca9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "b241d018-5494-4c97-b8f9-5f9e8851acaa",
        "cursor": {
          "ref": "ecc05f1d-399e-4848-895c-21375a77c015",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f2a9996c-7a7f-4853-b58f-8b862e3a8581"
        },
        "item": {
          "id": "b241d018-5494-4c97-b8f9-5f9e8851acaa",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1049da3b-45df-4238-8e95-3b0a06eb304f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "74b0f87d-27cb-4d20-a372-8d532be966fd",
        "cursor": {
          "ref": "3c3abcbb-2680-478c-85c6-450eb0c4536f",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "079b745d-7742-437b-b851-5796bc17c63f"
        },
        "item": {
          "id": "74b0f87d-27cb-4d20-a372-8d532be966fd",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6675b087-10fa-49ae-bd3c-4409aabea48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "3a5f4952-0580-40a7-a3b7-7fa14c08dfcf",
        "cursor": {
          "ref": "1700dc3f-9974-4b0a-9104-665ad8689c57",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ff249e55-0bba-462b-a17d-ff6c34ad1917"
        },
        "item": {
          "id": "3a5f4952-0580-40a7-a3b7-7fa14c08dfcf",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7c62c489-a79e-40e8-a200-006f91955173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "280a6d0b-46a2-4edc-a254-ec29a150c31f",
        "cursor": {
          "ref": "86f468ef-77e3-479f-8005-9007aa08eee1",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f4c47f87-b8f7-41df-aab2-496c5a901070"
        },
        "item": {
          "id": "280a6d0b-46a2-4edc-a254-ec29a150c31f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9e973e6d-7b19-42a3-ae06-6c8fb34441b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "356b5f06-05b0-457b-87cd-0284b73c152f",
        "cursor": {
          "ref": "a2f35664-2614-48d4-a595-53803e78cf81",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5b7d4481-3757-4f78-bfc0-4c0d89429689"
        },
        "item": {
          "id": "356b5f06-05b0-457b-87cd-0284b73c152f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "32c27b44-9c8e-4999-abc7-ee05bbdeda10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d027f6-65be-4783-bdb5-45de62950f8f",
        "cursor": {
          "ref": "3ee76164-4a46-4d24-aa4d-2519f5b1f643",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5b9784ec-670f-44e7-89fb-e7cecdca2e00"
        },
        "item": {
          "id": "55d027f6-65be-4783-bdb5-45de62950f8f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "371ea578-db31-4fed-9620-b7d13c9b2418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "a4398409-dd46-4cf6-83d1-6cdddacdd8d0",
        "cursor": {
          "ref": "a4898139-88a4-45f6-aab8-50839aa64298",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6d7ca80e-3fd8-443b-b7de-0192cff6ad81"
        },
        "item": {
          "id": "a4398409-dd46-4cf6-83d1-6cdddacdd8d0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2488a9d3-6a8b-4869-9914-3d3feac808e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:104)"
            }
          }
        ]
      },
      {
        "id": "353b3107-9587-4151-ab92-6203f35963bd",
        "cursor": {
          "ref": "5a1b10c8-63d1-41ce-bc57-bd5d83e3fd1c",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "84c31855-c710-4112-ba86-d3c6004a6215"
        },
        "item": {
          "id": "353b3107-9587-4151-ab92-6203f35963bd",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "356bb8ff-0c87-4c28-8ac8-431c62b688da",
          "status": "Created",
          "code": 201,
          "responseTime": 98,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "75079e5a-09b3-4358-aaa2-7d383da74124",
        "cursor": {
          "ref": "4298ebe0-6911-44e1-92c7-1ab8457cdde0",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5b14e2eb-e2c0-4a88-8565-0a95534a43c7"
        },
        "item": {
          "id": "75079e5a-09b3-4358-aaa2-7d383da74124",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0fcaa4f2-fb35-4094-ad72-1d454638fbc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "c9a8af64-b6bb-450a-b269-183385df7304",
        "cursor": {
          "ref": "da1750d7-5563-4abc-ba38-507f62c875e9",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8f1d0546-03ca-4835-a0c9-e0973cf0e467"
        },
        "item": {
          "id": "c9a8af64-b6bb-450a-b269-183385df7304",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3ce475b8-91e7-4069-94ee-1b6878136295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "dfebaf3d-63ca-4729-8015-b8bd8f12f86e",
        "cursor": {
          "ref": "de009b45-314d-48fb-92d4-89693cf54ca4",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7178938a-5a18-4db4-a7ae-41489189970b"
        },
        "item": {
          "id": "dfebaf3d-63ca-4729-8015-b8bd8f12f86e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "10d8ee1d-c49a-4b11-a9d8-ea96f69b60cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "3b5005a8-190a-4acc-b373-6dfc2bdf4a3c",
        "cursor": {
          "ref": "f06b85df-f452-41b2-8afb-0538c68823f6",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fb761e6a-688e-4d80-a029-68e58b308e06"
        },
        "item": {
          "id": "3b5005a8-190a-4acc-b373-6dfc2bdf4a3c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f507aea0-ad0e-4dd0-9389-a34136922c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "ffde0851-77f9-4dd9-b5f6-e5fdbd3230f3",
        "cursor": {
          "ref": "b860ac4d-fea2-4573-bd00-6ee8876a29b3",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "174955a6-2a73-4c69-b5ab-55ca52d50001"
        },
        "item": {
          "id": "ffde0851-77f9-4dd9-b5f6-e5fdbd3230f3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a2d53285-19be-40d5-a788-e0b027472b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "ffde0851-77f9-4dd9-b5f6-e5fdbd3230f3",
        "cursor": {
          "ref": "b860ac4d-fea2-4573-bd00-6ee8876a29b3",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "174955a6-2a73-4c69-b5ab-55ca52d50001"
        },
        "item": {
          "id": "ffde0851-77f9-4dd9-b5f6-e5fdbd3230f3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a2d53285-19be-40d5-a788-e0b027472b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "670db65b-d9bb-4733-8328-3a034d889565",
        "cursor": {
          "ref": "1237d07e-a96b-4fac-8066-d81c7f661fed",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8e8d4adb-ab7a-48f7-b02e-fa77cd15ffd2"
        },
        "item": {
          "id": "670db65b-d9bb-4733-8328-3a034d889565",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d4be2e9e-c808-4e74-85a9-b5eb12859f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "19311e6f-72fb-4047-9bb5-1ab2edf9415f",
        "cursor": {
          "ref": "383f6040-6038-4bc7-978d-871fbcea72a6",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "da67ce4c-6523-4dfd-b0bb-124a34c69cfe"
        },
        "item": {
          "id": "19311e6f-72fb-4047-9bb5-1ab2edf9415f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e8d3215d-7138-4421-8281-6fbe5608b3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "71157392-69cc-4653-8e98-beb0ca9182a0",
        "cursor": {
          "ref": "a2313ac0-7598-4206-8d14-463c7905eacb",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "298a2d11-b925-4808-b7d8-44f0041c3753"
        },
        "item": {
          "id": "71157392-69cc-4653-8e98-beb0ca9182a0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9e414b0e-240f-4f08-871d-96d324178b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "10bf608e-d436-42b2-94bb-f02c0db67183",
        "cursor": {
          "ref": "610c8f00-d209-4032-adb4-b549f2bc1fa6",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "71241128-52f2-490c-8764-27893ba10ef7"
        },
        "item": {
          "id": "10bf608e-d436-42b2-94bb-f02c0db67183",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4701104b-d984-4131-9d53-21bd68471082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "b72cd442-6f14-44f5-bbff-aa9050725e94",
        "cursor": {
          "ref": "98a24b1e-113f-4755-8259-0930a2f82727",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ba538141-5ace-40e1-b10c-f75661f6a691"
        },
        "item": {
          "id": "b72cd442-6f14-44f5-bbff-aa9050725e94",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b164d669-576b-495b-8550-63d417d9aa52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "ae11c0e2-df3a-4da2-94d6-fef64f16acb8",
        "cursor": {
          "ref": "48501cb3-3e17-4f80-ae94-99450ccab2e6",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "cd736d68-c435-4e0b-88fa-6946e0d260b4"
        },
        "item": {
          "id": "ae11c0e2-df3a-4da2-94d6-fef64f16acb8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a2730c5d-57c8-400f-86af-2fba738770f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "2b9eaeeb-6526-4e36-8dbb-ec1d898d14cd",
        "cursor": {
          "ref": "c196bfaa-70f6-4e4b-8593-459f3f6e4cd5",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bdb63c1f-48f7-4b6a-8aa7-eab57cdbabf3"
        },
        "item": {
          "id": "2b9eaeeb-6526-4e36-8dbb-ec1d898d14cd",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f909002e-0d7b-47c3-b749-2e9d288be8eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "73a8d72d-e30d-406b-a82e-38b54de9efcb",
        "cursor": {
          "ref": "14233468-92c4-4447-8704-f059503bceb6",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6e995e42-b3d9-4123-bf6f-d004b4b365e0"
        },
        "item": {
          "id": "73a8d72d-e30d-406b-a82e-38b54de9efcb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2ee58f1e-7041-4ca5-8a19-62e82a661fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "dcf0284c-daf2-4c3a-8daa-aa2d7ae8da3c",
        "cursor": {
          "ref": "c38bd45d-bf00-44b0-87f0-b9f948f2737b",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f368cafc-cdb0-47b6-af26-88afbb4f8034"
        },
        "item": {
          "id": "dcf0284c-daf2-4c3a-8daa-aa2d7ae8da3c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fd960d05-6384-4f31-9d26-6b8b8857a5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "c1f45e13-5846-4302-bff7-fd5f426b3d15",
        "cursor": {
          "ref": "8572c6b8-1571-4888-b6dd-f8d3f277d28d",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2432ea55-5aad-4f2d-ae5a-a8ca15d2938f"
        },
        "item": {
          "id": "c1f45e13-5846-4302-bff7-fd5f426b3d15",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "de45e26f-6354-4b83-9bd8-c9d18f3abf58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "fc71fe66-7615-40db-aa0f-0db4484e8382",
        "cursor": {
          "ref": "f89b5577-f920-461b-acae-750574e15404",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4decfd14-09b8-4f1d-bb0a-17adccfb1f85"
        },
        "item": {
          "id": "fc71fe66-7615-40db-aa0f-0db4484e8382",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "eee73609-863a-4d49-8352-b6960b160a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "455a1a51-c816-4bdd-8115-d2c58984d2de",
        "cursor": {
          "ref": "ad40c845-7129-488d-afae-ca8f772f2c99",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9674e18d-d2de-409a-b870-2187a22c3293"
        },
        "item": {
          "id": "455a1a51-c816-4bdd-8115-d2c58984d2de",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "04866e8a-2692-4cbb-8938-5d4e45103d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "65006ed3-9083-4f55-a635-b9d4bf4658dd",
        "cursor": {
          "ref": "922c1bcc-80c8-4809-9c8b-5991935ad517",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9eb252b9-3e66-4a35-a5ec-f1dc34526bba"
        },
        "item": {
          "id": "65006ed3-9083-4f55-a635-b9d4bf4658dd",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1ff195a8-6a98-4a24-86e2-b12287703098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "b5aa9390-90ad-49b1-bc86-d1a902a74dbe",
        "cursor": {
          "ref": "a8058450-90bb-4bf5-90b6-f5f9da0886ee",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0380415a-4e8c-4101-9370-bfd09015fd4c"
        },
        "item": {
          "id": "b5aa9390-90ad-49b1-bc86-d1a902a74dbe",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7aefe83d-69b4-4341-b26d-e870ad8525b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "66ed0364-2587-4dc2-8e03-a607de873b0b",
        "cursor": {
          "ref": "0b75f2dd-7743-46b9-8b18-8260a70e1941",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0be7760e-805c-4cb0-857a-c2fca4572f5a"
        },
        "item": {
          "id": "66ed0364-2587-4dc2-8e03-a607de873b0b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b93ad39c-6e88-466e-bd28-7290f1aaad23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "fd5c9d3e-c573-405b-8fae-cd8f73bba10f",
        "cursor": {
          "ref": "30aa7922-4d5e-457c-a9e6-f0a5a62b8192",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c997e1ef-1482-48c2-8e87-3e8f282d5fbc"
        },
        "item": {
          "id": "fd5c9d3e-c573-405b-8fae-cd8f73bba10f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8143662c-366b-432d-a92d-56914dd0a8b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "b85667e0-c459-44c2-9a44-d3e7d65d739a",
        "cursor": {
          "ref": "67228aa8-b59b-4838-850c-7f6fb02ffbcb",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4a67442c-4a5e-4a6d-8405-58d7db3343a2"
        },
        "item": {
          "id": "b85667e0-c459-44c2-9a44-d3e7d65d739a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "beeb7589-11e2-448a-af55-d02340c0fc49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "18468bf3-9684-4fe2-8e14-eb38e7fa735e",
        "cursor": {
          "ref": "b4e5c591-4725-4ad4-935e-fcb20af379b8",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0bf6354c-5386-490a-8ebe-199a1936315f"
        },
        "item": {
          "id": "18468bf3-9684-4fe2-8e14-eb38e7fa735e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3ebbbdd3-3e20-4b7c-8a39-d4620e42fe76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "fd981169-9cf4-43c6-81bf-1bf4e3b3302e",
        "cursor": {
          "ref": "f774601b-680c-4e9c-ab46-ddef70a7a499",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3eedfad6-f852-42e8-9ce1-4af095415c5e"
        },
        "item": {
          "id": "fd981169-9cf4-43c6-81bf-1bf4e3b3302e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7e03e120-707d-4ccb-b22c-3977068c6159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "62268db8-2154-4202-9930-1be445c46c80",
        "cursor": {
          "ref": "220ee725-8784-4ef6-8522-a43fb29e0fcb",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "febf1ffb-c2ad-4589-be5b-9e760fe5b7a4"
        },
        "item": {
          "id": "62268db8-2154-4202-9930-1be445c46c80",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cb69794a-5cb7-4eab-8818-0d12cd1d322c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "0800a7ae-e7fe-4a74-90b8-7752b4548acc",
        "cursor": {
          "ref": "0a329477-8953-4b73-bd26-1e2a0321dde2",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e1a36301-c9c7-4bcb-a499-d7670600ff54"
        },
        "item": {
          "id": "0800a7ae-e7fe-4a74-90b8-7752b4548acc",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c36909d7-5463-4f26-b710-37398596f168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "9addfcc1-2ab9-4620-8c1d-e9228546da08",
        "cursor": {
          "ref": "ccfd9c1a-3fdf-4b59-8221-e109ee48aa2b",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "cc3fd503-10fe-466b-a17c-c499da5c392c"
        },
        "item": {
          "id": "9addfcc1-2ab9-4620-8c1d-e9228546da08",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c3a08d2c-77c6-47c7-94f2-317640d2cade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "e0843cfb-bbb3-44b4-a60f-134754ab27bb",
        "cursor": {
          "ref": "14a20cfe-7772-45cb-b050-79a53c87147f",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0e60f5d1-f2f9-4434-9826-dfec306ab38d"
        },
        "item": {
          "id": "e0843cfb-bbb3-44b4-a60f-134754ab27bb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7b158dd7-9b23-45cf-ae58-ae5bdf8a9793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "08a69fb6-fa9a-4032-96f6-075d3d5ee854",
        "cursor": {
          "ref": "33f82ca6-683f-46bf-97a0-62acdf238c1e",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8600fe65-c2c9-4ae0-a876-0cfa91d14fc7"
        },
        "item": {
          "id": "08a69fb6-fa9a-4032-96f6-075d3d5ee854",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "337496b7-bc53-4655-b69f-b79d819dbbdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "f40cfb62-7d9b-4ff2-9f1c-4de053f3329d",
        "cursor": {
          "ref": "f005f608-89ab-4592-b7a7-a3dcbf6d37f3",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "01188418-cfae-4b6a-8963-8a2e11093234"
        },
        "item": {
          "id": "f40cfb62-7d9b-4ff2-9f1c-4de053f3329d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "193e724b-0de6-4253-b019-eeb1419a14fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "76f631d3-4aaa-4905-9375-fefeab18793d",
        "cursor": {
          "ref": "31c48370-9fd1-4482-9067-bad5bfbdedbe",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fc26d7f9-fd8c-4d34-979a-622208342745"
        },
        "item": {
          "id": "76f631d3-4aaa-4905-9375-fefeab18793d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d99b60e3-355d-4b52-9bf5-dd2e45c47cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "13c762bd-c66f-4169-ba29-0607ff6ebf28",
        "cursor": {
          "ref": "ad05e0dc-2e2f-4548-b54c-5d5a77b922ab",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2495990c-e7ca-4d6a-b437-ace4155297e3"
        },
        "item": {
          "id": "13c762bd-c66f-4169-ba29-0607ff6ebf28",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "11df5162-1bdc-4a85-a590-a1cecf7ab0a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "367f1944-29fc-4cd3-a26d-9aeb9009e9af",
        "cursor": {
          "ref": "3a303aa3-a4e8-4320-80cf-446ac2381d9e",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "26a52c7f-b385-4c37-8be4-93b4ccdf291f"
        },
        "item": {
          "id": "367f1944-29fc-4cd3-a26d-9aeb9009e9af",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5de61be0-bf44-4194-ba4c-e7f458b1ed42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "ac4aa03d-65f7-4f60-94fc-53ac3178119d",
        "cursor": {
          "ref": "9584c617-2953-4e2b-93c8-2e2a11d30d3d",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b815487d-d7b2-43ef-a3b2-8ccf4535023a"
        },
        "item": {
          "id": "ac4aa03d-65f7-4f60-94fc-53ac3178119d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9dd7e075-6dd7-422e-b0f5-8e504eb7dd32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "e8a9b0c6-c075-4fc4-b658-85b083315b45",
        "cursor": {
          "ref": "26c5d574-5d5e-4a03-a7d5-6394b949ef4a",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3891022f-1f6b-4823-87f5-82324e286435"
        },
        "item": {
          "id": "e8a9b0c6-c075-4fc4-b658-85b083315b45",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "090cb930-1f88-4f71-aae4-fc526bb861f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "d99933e3-704e-44c2-afc5-9cbaef593353",
        "cursor": {
          "ref": "8355d72e-d23c-436e-ad64-7218726256d3",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0b654154-464b-403d-95a0-38f36dda2cd1"
        },
        "item": {
          "id": "d99933e3-704e-44c2-afc5-9cbaef593353",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ae741166-d96f-4203-878a-8796595cbafa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "83532533-6a92-48e0-8022-acc07832646b",
        "cursor": {
          "ref": "7f7cebdc-396d-4db6-9b8a-73cf9bb3bfce",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8f37ee0e-0ff3-4e96-aae7-36465f445ea1"
        },
        "item": {
          "id": "83532533-6a92-48e0-8022-acc07832646b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "82761ab5-7a3c-496b-a63b-a7fdf0b28f02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa92d33-aa72-4256-b63f-eb02b62ed46e",
        "cursor": {
          "ref": "fcd7c233-cbbe-4641-920a-9a1e569d55e9",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1a735c07-9b69-40f8-a8f0-25aa1878de4f"
        },
        "item": {
          "id": "8fa92d33-aa72-4256-b63f-eb02b62ed46e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d65d9d5d-260f-4a75-9657-0bd8d0a32408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "33aea2b7-87ca-451a-a986-7c0d993b67a5",
        "cursor": {
          "ref": "ffc2dae9-c9af-4e51-96e6-f722c8a0b54b",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5d9453e3-6134-4c7b-b12b-325acfc2fe27"
        },
        "item": {
          "id": "33aea2b7-87ca-451a-a986-7c0d993b67a5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ad060f09-55e4-44ef-bec7-f6dc6b08733d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "33aea2b7-87ca-451a-a986-7c0d993b67a5",
        "cursor": {
          "ref": "ffc2dae9-c9af-4e51-96e6-f722c8a0b54b",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5d9453e3-6134-4c7b-b12b-325acfc2fe27"
        },
        "item": {
          "id": "33aea2b7-87ca-451a-a986-7c0d993b67a5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ad060f09-55e4-44ef-bec7-f6dc6b08733d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "c4360c1d-7554-4599-8a0a-61b67a41cf8a",
        "cursor": {
          "ref": "f2e90351-e263-452d-97db-7809bf5b15b1",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8d02a9d3-85ce-427a-8630-5aadfb9d9a82"
        },
        "item": {
          "id": "c4360c1d-7554-4599-8a0a-61b67a41cf8a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9a7def06-cb60-4f33-87e1-6e91d26fa7ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "e1d6ab77-60dd-4f0e-8517-790b59be632b",
        "cursor": {
          "ref": "6878535a-7a2d-4442-9e31-8f0daf511578",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "da695946-aeb0-4e8a-82ce-1e91aa0bc887"
        },
        "item": {
          "id": "e1d6ab77-60dd-4f0e-8517-790b59be632b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "75a1fe6c-5243-49d4-870a-a8ab16e4ca92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "eda36be1-519a-4c78-8697-e93ef71387b3",
        "cursor": {
          "ref": "f2ba54cf-253c-4442-a7af-39ea6da792b0",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "43341bb3-eb98-4ff3-9fd8-790a70f838a7"
        },
        "item": {
          "id": "eda36be1-519a-4c78-8697-e93ef71387b3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "be03e9be-3e0b-4d90-8e8c-b0e42033e9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "93e74a45-317c-4683-b580-f543f38fad39",
        "cursor": {
          "ref": "af4dcf19-8eb8-49b5-9cf5-ace99761dfce",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d662a851-2e12-41e1-b9a5-43de9ae0d5b3"
        },
        "item": {
          "id": "93e74a45-317c-4683-b580-f543f38fad39",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7e323cd9-7499-49a0-84fe-eaf1239a24c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "ecf3a449-c4d7-4a12-b8ff-b2a4bbf1d4e5",
        "cursor": {
          "ref": "e2039d46-aaa3-4eee-9e46-efd2bdd0f71c",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8542af70-0f64-413a-88d1-53eb273d9c40"
        },
        "item": {
          "id": "ecf3a449-c4d7-4a12-b8ff-b2a4bbf1d4e5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8d2f06fe-c5a9-4669-b030-772c24343f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "d814cc4a-87bc-4ff2-8c6d-074febf5fe93",
        "cursor": {
          "ref": "9f33190f-f22a-46ec-9c0a-c8ae4c17ef2b",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "51998afe-9b88-44d0-ac78-aa12b8c0dd93"
        },
        "item": {
          "id": "d814cc4a-87bc-4ff2-8c6d-074febf5fe93",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d6654176-fb79-47d2-8047-aada22b1b011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "e4403aab-68db-45de-8109-bc7cd6943774",
        "cursor": {
          "ref": "f51f7092-8073-42a5-9c23-cf60e4dee75f",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f091a070-85e0-4271-8e53-7eaca69682e9"
        },
        "item": {
          "id": "e4403aab-68db-45de-8109-bc7cd6943774",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ce4f1bef-7a23-4e5f-a8a4-074a8939c67c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "fa1e5671-2bb6-436e-bf1d-05d74dfe25b1",
        "cursor": {
          "ref": "0a1f80a7-98cd-4ad1-a5f1-22aaf440822d",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d0b63217-596d-4c4b-8600-d183604bec14"
        },
        "item": {
          "id": "fa1e5671-2bb6-436e-bf1d-05d74dfe25b1",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e7feac7c-4a99-48e8-99d4-1bf070f71566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "d558d1b0-3ff3-4c03-9c80-9c0be5536d70",
        "cursor": {
          "ref": "404dc026-22ea-43b6-979d-5402fc2005dd",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d80377e3-8710-49db-a356-462956cf9395"
        },
        "item": {
          "id": "d558d1b0-3ff3-4c03-9c80-9c0be5536d70",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ba8cb5d5-5c07-441d-a0f7-7985c867d639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "223c4cd1-0d14-4d83-ba89-4ccab6a6a718",
        "cursor": {
          "ref": "0c370976-c433-4f05-8be3-499e8a8cdf6c",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "48017d8c-743b-4b96-9019-cd23c30a4e4a"
        },
        "item": {
          "id": "223c4cd1-0d14-4d83-ba89-4ccab6a6a718",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "49c2c2d9-f8ac-4def-9414-83c63428d6f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "f31e82a6-d991-4f59-b7b1-8143f9d6b229",
        "cursor": {
          "ref": "0fd22643-56c6-4b40-a2e7-b94d3a75cf9b",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "04389623-8780-4c93-bf0e-76d2f2f2532c"
        },
        "item": {
          "id": "f31e82a6-d991-4f59-b7b1-8143f9d6b229",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "43bc0519-3e81-423d-911f-629f4befa0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "eb77b801-4002-4023-b434-284da204be39",
        "cursor": {
          "ref": "ec5705cd-8eaa-4965-9a9b-9f2927dabc5c",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8ffe5e40-6175-4cf6-a735-202183219455"
        },
        "item": {
          "id": "eb77b801-4002-4023-b434-284da204be39",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "03865b17-0814-4e4a-8597-aa75f2a97ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "1a8518b2-91d2-41f3-9f58-9b3267b98188",
        "cursor": {
          "ref": "b8e3fd1c-b12d-41ab-ad16-c72a11ef622f",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "829376df-3db3-4b0e-88fe-0c836822c88d"
        },
        "item": {
          "id": "1a8518b2-91d2-41f3-9f58-9b3267b98188",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "09eca779-97f0-42d1-b250-6f4cf5a8f2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "27dc9eb7-d38e-444c-bf0c-8f25f07b1a60",
        "cursor": {
          "ref": "312d1d3a-e100-441e-ac68-f054663eb268",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d8d8f279-9056-4f3f-b8de-66ebc59d45f3"
        },
        "item": {
          "id": "27dc9eb7-d38e-444c-bf0c-8f25f07b1a60",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a53ba55f-70b9-473d-90e1-f3e86144e19a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "c7822633-349e-4fdb-b865-ffb25e1452ba",
        "cursor": {
          "ref": "b8f92608-88dd-46d3-91f9-9899bd16e581",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9894c04f-fd2b-4a14-89ab-02c23ad4f384"
        },
        "item": {
          "id": "c7822633-349e-4fdb-b865-ffb25e1452ba",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "59f008ff-fa01-4a22-9d2c-38b841aa847b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "584845b0-2ce6-4aa9-a0fb-df5e11a747d1",
        "cursor": {
          "ref": "4e2c59b0-40f7-4551-b8c3-54bf881dd93f",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "82ee7a0f-6a28-418b-b71f-e746c7b5a52f"
        },
        "item": {
          "id": "584845b0-2ce6-4aa9-a0fb-df5e11a747d1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "12adc23d-f4d4-4131-92f4-1072367248dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "4c5ec6fb-1bff-4d8c-b11c-03da8485e96b",
        "cursor": {
          "ref": "c0eb50e9-9847-4d72-8448-4d9162f03e63",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "74807c75-5662-4eb8-8ce8-f61733b7cdfc"
        },
        "item": {
          "id": "4c5ec6fb-1bff-4d8c-b11c-03da8485e96b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7572517e-d062-448f-ad84-9ee95855ab96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "9d6c6173-9d1a-42e3-b35b-8cc5b7536248",
        "cursor": {
          "ref": "de31a0cf-4334-4e1d-89a0-dfd5b450f262",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9eccc8de-e14d-445f-8285-4ee50425c856"
        },
        "item": {
          "id": "9d6c6173-9d1a-42e3-b35b-8cc5b7536248",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8a2973df-d5ae-4e41-8b69-ead28a66af9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "3142e0df-430d-45f8-a2ce-788150aec016",
        "cursor": {
          "ref": "cc8d1d71-0654-4c60-805b-3c2548c7a3c1",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "77bd6149-3b36-4aed-a788-c234b22ac838"
        },
        "item": {
          "id": "3142e0df-430d-45f8-a2ce-788150aec016",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c61498f3-fe34-467f-97e9-8289096908a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "6513578a-e735-4b8a-a26e-14e8f0f40623",
        "cursor": {
          "ref": "e3273857-fc5d-4887-ab3f-dbaf9f43bdd2",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "34573fe1-bbc0-432c-aa01-c7668967c297"
        },
        "item": {
          "id": "6513578a-e735-4b8a-a26e-14e8f0f40623",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ce0a2b5e-7bb6-422c-99ba-afde0c2533ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "5f868037-54dd-4a1d-ac6c-9a2bca903db4",
        "cursor": {
          "ref": "df9fe057-5a33-4a1a-aa62-8e4ff6944ae1",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e7e1f199-45eb-4c4d-ac5e-4a8a5a785c22"
        },
        "item": {
          "id": "5f868037-54dd-4a1d-ac6c-9a2bca903db4",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "fa52f780-60da-47bc-a936-567c726b42ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "0ad9873f-14dd-4b6c-b09b-0b3212d51c14",
        "cursor": {
          "ref": "63dd836c-0a31-4826-a584-f5b3ae433b03",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9ab7c5f1-b969-4bcd-bf9a-ffd01f4983aa"
        },
        "item": {
          "id": "0ad9873f-14dd-4b6c-b09b-0b3212d51c14",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "df1616eb-a6aa-487f-89b1-74e4a1605487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "a27049b8-64af-417c-813b-e676c63de07c",
        "cursor": {
          "ref": "ad2db88b-19db-42e1-9894-351e8af345b6",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f6b09913-9d00-4d57-b0ab-7afb29ff3ec2"
        },
        "item": {
          "id": "a27049b8-64af-417c-813b-e676c63de07c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "db7a93c2-661c-4aaa-9dcb-6e8973414587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "3700de4c-287b-4c72-b5d6-18f67d6bb607",
        "cursor": {
          "ref": "c55da3dd-bd8d-43d6-976d-a942d72c7b39",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "731a9c69-65e9-482b-904e-69596e6d57f8"
        },
        "item": {
          "id": "3700de4c-287b-4c72-b5d6-18f67d6bb607",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "60e429eb-7a27-4f9e-95bb-f997c59b8379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "bb21c3dd-bde3-42bd-bc03-b84c615e2668",
        "cursor": {
          "ref": "ca3fe508-e431-4575-a380-0142463da5c8",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b0519bfe-bcf3-4b33-9b7f-4f0aafc423a1"
        },
        "item": {
          "id": "bb21c3dd-bde3-42bd-bc03-b84c615e2668",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d9023ccf-82b0-40a9-a211-7c158f511b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "a714ac9d-d4e5-44d5-911f-069b350d8612",
        "cursor": {
          "ref": "5a1e9d63-d4bc-444a-874b-519cec632652",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "fcb04f1d-1ccb-4316-9ae5-2a62a74e09ef"
        },
        "item": {
          "id": "a714ac9d-d4e5-44d5-911f-069b350d8612",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "96a19849-7eb4-4c63-9389-a7320fdaeb88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "d6726a93-796b-441a-9f3e-dedd16368f5c",
        "cursor": {
          "ref": "4a787d22-86b8-4802-9e35-9467461c6e82",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9072ba74-42b0-421d-b3b9-0156f029527d"
        },
        "item": {
          "id": "d6726a93-796b-441a-9f3e-dedd16368f5c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5418d959-ea8a-4f05-8cbf-8d49c8eb1d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "bd91ede3-5ae1-4dc6-922c-7a3050089b32",
        "cursor": {
          "ref": "b2352ed2-3a18-4e77-8fa9-07ba3432563b",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "287c9ef0-649a-480e-9120-5f94b2a47c8c"
        },
        "item": {
          "id": "bd91ede3-5ae1-4dc6-922c-7a3050089b32",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f3338275-8ed0-4892-928f-e272861c8cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "69a9c2cd-87d0-4e4f-bf67-6e8e89d5ca42",
        "cursor": {
          "ref": "7ecfc191-3b7d-4195-8e9a-2543e9c16500",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7da4bfd0-5a75-400b-a717-ada5111f7c78"
        },
        "item": {
          "id": "69a9c2cd-87d0-4e4f-bf67-6e8e89d5ca42",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "507cbc54-de05-486b-8422-3a2eb51c04af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "be4327c7-e796-4ba6-8735-6e5dd2ebdae6",
        "cursor": {
          "ref": "3f66f1e9-52c3-4e19-a1e4-810e3dde879a",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4c93b694-656a-4b0e-bfbc-738bfe2dd5ef"
        },
        "item": {
          "id": "be4327c7-e796-4ba6-8735-6e5dd2ebdae6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "23ae6e5b-83ea-4ac6-9c6f-8d537525d1b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "830aca62-2ca9-41c6-b270-22105291dac9",
        "cursor": {
          "ref": "ba4d38d7-8e90-43d2-8851-2f216f5a9a8a",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "faacf6d1-fd14-4c8e-984e-7777b7e85909"
        },
        "item": {
          "id": "830aca62-2ca9-41c6-b270-22105291dac9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ea5a6cc5-ecef-405a-89b7-31d914d326af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "adc14c47-231d-4a36-b794-3407015319b0",
        "cursor": {
          "ref": "39a30ad2-855c-48f5-b3d6-9f1083866cbc",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3653a88a-3793-4e65-9097-5538b6baf6b0"
        },
        "item": {
          "id": "adc14c47-231d-4a36-b794-3407015319b0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ebc002c0-21d8-46a3-aedb-f0157168ac79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "51c84c99-4bf0-455c-ae7c-823a78d74214",
        "cursor": {
          "ref": "b705074d-d4d8-41f5-bba8-a320e860bba1",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d56665c2-8f8d-4fa8-a5e3-203540858de5"
        },
        "item": {
          "id": "51c84c99-4bf0-455c-ae7c-823a78d74214",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4fc4204e-732c-4251-8844-70db1cbf7070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "8d3ca205-cda0-433a-b084-b14f82a5942f",
        "cursor": {
          "ref": "d99f81a7-6f2e-4104-8b43-d57bb2542a89",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3249ab54-df96-4af4-aeb9-14b4f7dcd2c6"
        },
        "item": {
          "id": "8d3ca205-cda0-433a-b084-b14f82a5942f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1017c8b9-5e90-4fda-a124-dde6a614658b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "5f599f4e-2996-437b-9439-06d4e36e44ec",
        "cursor": {
          "ref": "0342d31e-cc00-43cf-9d14-f9c6028ef779",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3bd4889d-166a-4534-936c-81d3031279ea"
        },
        "item": {
          "id": "5f599f4e-2996-437b-9439-06d4e36e44ec",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7983fa2d-f594-4482-8a78-e13744636432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "93cefdf4-a035-44d8-a0f1-ce73e60473ed",
        "cursor": {
          "ref": "7eb6e829-6ee3-40dc-84f9-d8e1af5e3aea",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "06a92cbc-f77f-4723-b487-fe11b60d10f9"
        },
        "item": {
          "id": "93cefdf4-a035-44d8-a0f1-ce73e60473ed",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2e05d7e8-2273-424c-923d-23fd45910533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "8a115ecc-4a24-475c-933f-7934f112bdee",
        "cursor": {
          "ref": "c483b642-6d28-459a-903c-ae72086885bb",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bf069901-9d85-40a0-ad3f-a3823534665f"
        },
        "item": {
          "id": "8a115ecc-4a24-475c-933f-7934f112bdee",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "37e46c0c-980b-4b01-93ca-be20eb38f495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "f87364a6-0318-44bf-88b5-1db7d4062ad6",
        "cursor": {
          "ref": "a8cd12ac-a8ef-45fe-a8f1-2e0e7992fdac",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "74242178-6385-479b-a8fb-715e9b44b22b"
        },
        "item": {
          "id": "f87364a6-0318-44bf-88b5-1db7d4062ad6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "cce0c408-9fc1-42f9-bb2a-d8f70803f805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "ab0771ba-3694-41d8-b760-a5e02ee34629",
        "cursor": {
          "ref": "ffc23102-a6f3-4e8c-ad79-b58578050f91",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3f4065f6-45b0-4d3f-9ca3-bc76362b0cbc"
        },
        "item": {
          "id": "ab0771ba-3694-41d8-b760-a5e02ee34629",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3791e540-fbba-43fa-b3b2-b2139f398fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "ebfe443c-068c-4022-a3e4-f549012f717d",
        "cursor": {
          "ref": "12bab9f7-fb2c-4829-b411-7484a52b7e2e",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "98ebb347-e864-4c4d-83fd-9adda014169d"
        },
        "item": {
          "id": "ebfe443c-068c-4022-a3e4-f549012f717d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b32f306d-c393-4a43-92f0-f11db86a92a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "63732bcc-7975-48f6-a9f6-c165c2be74e4",
        "cursor": {
          "ref": "aa09109e-dd84-433d-8fcd-b1f1ac3d98e2",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b43b3c6e-6376-4f70-ab4b-6e9b2c0b059f"
        },
        "item": {
          "id": "63732bcc-7975-48f6-a9f6-c165c2be74e4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ea60accf-9f5f-4a56-973b-a4fff1b0059f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "ceb30015-03d0-488d-b368-355407f6157d",
        "cursor": {
          "ref": "0632c5c2-1516-4a88-b39f-3fda963751be",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9f3be8d5-0de1-49f9-bd21-fdb27c800e1a"
        },
        "item": {
          "id": "ceb30015-03d0-488d-b368-355407f6157d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "fd05ebc5-d44e-4c96-9995-f769e13f3c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "de5d74d6-6b1d-4d24-a8dc-e316b8198f08",
        "cursor": {
          "ref": "1eb060f6-b7c4-4a19-9c9d-a9ef63b69e61",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c4b2e08a-d796-4eb6-986b-a8685512d9c2"
        },
        "item": {
          "id": "de5d74d6-6b1d-4d24-a8dc-e316b8198f08",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "44653f20-9d5e-4e07-98a3-661d38d01b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "124e29b7-e6ee-405a-9c64-f9450654e026",
        "cursor": {
          "ref": "2563d84e-4c24-4fa8-b91e-d9a02755e89d",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7f68ac96-8fc5-4501-be0e-84851c847567"
        },
        "item": {
          "id": "124e29b7-e6ee-405a-9c64-f9450654e026",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c45983bd-78fe-4ba3-978c-b9f1daa78a7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "ea2cf279-20fa-4a80-89c9-ffa5032e9ff5",
        "cursor": {
          "ref": "9f2c6dcd-3ccd-46d4-a280-af5e4be5aa45",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3717e713-e9ce-4f1b-8daa-066e2861dcc6"
        },
        "item": {
          "id": "ea2cf279-20fa-4a80-89c9-ffa5032e9ff5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8e3baeb4-51b0-4e83-a4e4-f01fc1370878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "0cb56b9a-5420-40a7-a36e-609d330f251e",
        "cursor": {
          "ref": "50b1a725-c56e-49db-97ab-c8ee90ad4d8f",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c2c75726-bc66-445d-be61-f932ae1131b9"
        },
        "item": {
          "id": "0cb56b9a-5420-40a7-a36e-609d330f251e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "239b3b50-5067-4a00-8719-92b1077e5a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "066cdb76-ca0d-4bdd-b121-4ebb6831ac32",
        "cursor": {
          "ref": "b202f09a-4c73-415c-bb64-c719a2596b64",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "363e577f-fc69-403e-90a1-839163982908"
        },
        "item": {
          "id": "066cdb76-ca0d-4bdd-b121-4ebb6831ac32",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c69875c2-08f8-4196-be04-0f47150058cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "3ca96580-3e81-4b75-ba4a-4c126c02a941",
        "cursor": {
          "ref": "5781cfef-e1a0-4b8e-936a-25d499bb1837",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2bac209c-bdda-41d7-b366-e9f4bc212c2f"
        },
        "item": {
          "id": "3ca96580-3e81-4b75-ba4a-4c126c02a941",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8a982c1b-63ba-4687-8bcd-0c4b1cf4a492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "ec61f006-a5b2-4ce7-9aa9-b4305fd1c374",
        "cursor": {
          "ref": "1d79958e-9e9b-4b02-b568-fa0e4f0a394b",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "050fba6e-5692-47a8-9cea-251dab135fff"
        },
        "item": {
          "id": "ec61f006-a5b2-4ce7-9aa9-b4305fd1c374",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f0e57f34-60f3-4ed2-a480-4fba16352cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "6cd13666-b273-4853-8d88-5cb4945a22da",
        "cursor": {
          "ref": "037bb001-4609-4d32-ae00-bda750587ae0",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4ca1cad1-c599-4bfb-b307-cfda87ff7a11"
        },
        "item": {
          "id": "6cd13666-b273-4853-8d88-5cb4945a22da",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "addfc039-aab3-426e-9c6a-2c7a9b06456e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "830cb140-c853-4712-81a2-d53ac358ae6c",
        "cursor": {
          "ref": "cdb5c121-a64e-424f-b548-fb077cb2ec1e",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "bfec373a-9d30-4839-852b-801daef4538b"
        },
        "item": {
          "id": "830cb140-c853-4712-81a2-d53ac358ae6c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5c00c6ea-6817-4aab-addc-41f20aa61456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "4f90b86f-1dd3-4552-8d18-597016e2efcd",
        "cursor": {
          "ref": "c9c6ac1e-a043-43bd-b126-bcaeccf95a04",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f2170649-33bc-45b1-8eff-bcc4ac643b43"
        },
        "item": {
          "id": "4f90b86f-1dd3-4552-8d18-597016e2efcd",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1ad3f85f-14c4-44dc-8150-a70eb9838483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "1fb3c6da-5871-4d32-80fd-3dc618990b2e",
        "cursor": {
          "ref": "b3da8def-9db0-4d86-be9c-019f6897054f",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e15ce3bf-f4b8-469f-85e2-df1e7367584f"
        },
        "item": {
          "id": "1fb3c6da-5871-4d32-80fd-3dc618990b2e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b357d781-28af-4dc6-a816-02f6864cd14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "f3b5150f-1889-428d-9a17-8f7e59b6cc92",
        "cursor": {
          "ref": "096b5324-7a8c-4d07-a339-c8cb62c38f65",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b7e53f26-c605-48d1-a16d-90ac53ee3924"
        },
        "item": {
          "id": "f3b5150f-1889-428d-9a17-8f7e59b6cc92",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "dd170840-21ab-4016-97b3-3ec10889d6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "7a1aee93-766b-4002-87d0-583fb492c123",
        "cursor": {
          "ref": "8263e5b2-1316-44f0-a486-e18343f01149",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "db62ab81-6950-4b4b-ba1a-0e761b577837"
        },
        "item": {
          "id": "7a1aee93-766b-4002-87d0-583fb492c123",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fbeb18b6-9045-4f8b-9489-c9ae0f3757fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "0656c85d-2655-487f-b2bd-81fec2ba94a9",
        "cursor": {
          "ref": "e66d4703-1574-4d0d-94bf-3bc355c8bfc4",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0b124620-449e-4d09-b9e6-0029c99056c4"
        },
        "item": {
          "id": "0656c85d-2655-487f-b2bd-81fec2ba94a9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c81b2d33-c9e2-4fe0-8ca4-f889258a8bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "ac0cab32-a17c-471b-ab43-1eef1692561e",
        "cursor": {
          "ref": "5000e186-2b6e-4a6e-9557-627138f7ddf9",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e9dc2c50-b7dd-45e3-9a39-188e04c96748"
        },
        "item": {
          "id": "ac0cab32-a17c-471b-ab43-1eef1692561e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a51e2d04-a3f4-42ad-bdc7-75e9b933e7ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "45917360-814a-4153-aecc-06d08727f5e7",
        "cursor": {
          "ref": "243de3e1-06b8-43a1-b2d3-edc771d88b66",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d161ee5b-ab18-4a9d-abe7-db9e2b6d59dc"
        },
        "item": {
          "id": "45917360-814a-4153-aecc-06d08727f5e7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f4821eea-7703-4673-bddf-6d41700dae4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "e2d6a6d9-6bb9-4ef2-8a60-5e9e59939afb",
        "cursor": {
          "ref": "e9d43097-23a4-4641-9dd8-0c71021eeb03",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a41a0967-d81c-4750-a58d-24db0cce5b39"
        },
        "item": {
          "id": "e2d6a6d9-6bb9-4ef2-8a60-5e9e59939afb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6a9f9f3c-e393-4677-af5b-0432f9a66081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "da9968cc-a533-4422-a986-77fe30a8abd6",
        "cursor": {
          "ref": "819cccc9-770a-4875-bc33-e06f4a150a2a",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c1ab4b9a-9676-4110-9a92-711ec8426fef"
        },
        "item": {
          "id": "da9968cc-a533-4422-a986-77fe30a8abd6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b010442e-bb94-4d18-96cb-39474a515530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "be1d1b2f-49f7-408d-95a5-388c0799c6b3",
        "cursor": {
          "ref": "fbefb272-8ea2-480d-89dc-2f7544527c6a",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e8590272-a6a1-431c-87df-738a22d96c88"
        },
        "item": {
          "id": "be1d1b2f-49f7-408d-95a5-388c0799c6b3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "14452bb6-7bd4-450e-92a1-b8d2cb6ad054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "ba7f8d98-fad5-4887-a41e-c428481755d3",
        "cursor": {
          "ref": "cdc4d508-94ad-4164-882d-1a0783827612",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1c7f20a8-a20d-4311-a17e-e378149cdb9e"
        },
        "item": {
          "id": "ba7f8d98-fad5-4887-a41e-c428481755d3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9cb7ec7b-751b-44b1-bf16-c42a53385e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "279520da-2724-4aef-88f1-42380fd2448a",
        "cursor": {
          "ref": "0a9c6042-46be-4bdd-a2f3-c0fda59e893c",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6546c631-5368-49f7-9eb8-b169c0674218"
        },
        "item": {
          "id": "279520da-2724-4aef-88f1-42380fd2448a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fc44dc43-6f21-4fb7-bf50-93ec8809ce64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "c47ce998-b04f-4242-b8af-e2881fcafd07",
        "cursor": {
          "ref": "3df90120-c42a-4ac3-98d4-f4180039d275",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6c70cd8a-920b-4d5d-9556-db28dfa34430"
        },
        "item": {
          "id": "c47ce998-b04f-4242-b8af-e2881fcafd07",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9112f09a-33ca-4b32-837a-53960b94851b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "64112a25-8781-48fc-87b4-9481d2a68506",
        "cursor": {
          "ref": "205151c5-96af-4946-8eef-ab3a5d9eacd9",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f5f63dfd-c5a0-420e-8cbf-373afe1aba29"
        },
        "item": {
          "id": "64112a25-8781-48fc-87b4-9481d2a68506",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0b7dd5ac-5e08-450b-aec3-d55a30c10af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "287627da-63e4-4aee-b5e2-53f6627e1044",
        "cursor": {
          "ref": "64d54407-75fe-4728-a98d-8bf186c55eda",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2e80b7d7-efa6-48c1-9baa-4347bd5749cd"
        },
        "item": {
          "id": "287627da-63e4-4aee-b5e2-53f6627e1044",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "55ba18f9-e5d7-472e-a375-e825a52027f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "80a9c526-6524-4e7d-a85d-d86214800ecb",
        "cursor": {
          "ref": "a16b105e-2531-4eab-8f57-cc9f7aad4576",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2fb13ae4-1534-4fbe-99ca-5abd33daad88"
        },
        "item": {
          "id": "80a9c526-6524-4e7d-a85d-d86214800ecb",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7a86d32c-dfbc-4baa-94cc-cf12aa362b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "ef222de5-0e20-4d13-8566-88e363a6a30f",
        "cursor": {
          "ref": "e34d8447-5f8e-41b9-8a7d-18a2652c4840",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3ed73ffd-8905-4373-8057-c3b07a9b1e1d"
        },
        "item": {
          "id": "ef222de5-0e20-4d13-8566-88e363a6a30f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3cd0694a-c997-4bbb-9e08-1701777ad198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "0fc87298-8507-4d4c-a83a-36d5839af7cd",
        "cursor": {
          "ref": "041f0da7-589d-46c5-be99-34d930d270c7",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "078a2bd9-b649-452b-bdb1-3151903de8fb"
        },
        "item": {
          "id": "0fc87298-8507-4d4c-a83a-36d5839af7cd",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "406c4e38-4a17-44bb-9e12-3ab41e178fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "287a1150-6d25-4036-9498-17fa5124e6c6",
        "cursor": {
          "ref": "a8c5a27a-96fa-43de-aa19-f8f5cf978a0c",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2f8bf622-9150-40ef-9253-abf3bf9f8997"
        },
        "item": {
          "id": "287a1150-6d25-4036-9498-17fa5124e6c6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1e62d95d-c31b-46d6-a161-f06f1cb65769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "4a85c8b9-8441-4147-b1b2-9216fe8dbb69",
        "cursor": {
          "ref": "4db92430-9bbb-4978-82e4-b2c3262e22f3",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e4b64a0a-658e-412f-9625-425acec2504a"
        },
        "item": {
          "id": "4a85c8b9-8441-4147-b1b2-9216fe8dbb69",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "90781d3f-6e24-498a-afa0-792154956caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d358ef35-0382-42f3-82d8-0b9f5014743d",
        "cursor": {
          "ref": "4cf741b7-9ae2-4016-976e-756834314570",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1d17940d-73c0-4959-bf44-f91d516e1eb1"
        },
        "item": {
          "id": "d358ef35-0382-42f3-82d8-0b9f5014743d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a45626d0-274f-4bd3-a643-0457c08e724e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "9a6d0044-0fb1-46a6-995b-716ab9742b6c",
        "cursor": {
          "ref": "17970dec-aeb1-4021-a5e7-ca81ad4955a7",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "694d21ad-4537-46ec-beb8-5e47caa1e055"
        },
        "item": {
          "id": "9a6d0044-0fb1-46a6-995b-716ab9742b6c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3935c51e-c564-4b45-b9a6-dec347a8d8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "c6fc0259-4c12-45d5-87e3-4f3ceef67550",
        "cursor": {
          "ref": "7020343a-6c37-4838-bcd4-7f7553562206",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ba5a668d-d76b-4a32-8663-6c1fadef66a7"
        },
        "item": {
          "id": "c6fc0259-4c12-45d5-87e3-4f3ceef67550",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "daa7c7d2-86f8-4212-bae0-f0702f9a25a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "77de64a8-8bfb-46b9-9b46-2f762fc17bfe",
        "cursor": {
          "ref": "f39b4cf4-d0d7-41c1-8fa5-3c75001ee892",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "455cae84-9af3-43fd-8924-5e933f882514"
        },
        "item": {
          "id": "77de64a8-8bfb-46b9-9b46-2f762fc17bfe",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "627d4009-1876-4452-a92d-370d437dba63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "7b9f5b20-89c2-44ff-9357-18f1701d83be",
        "cursor": {
          "ref": "f3a34902-46f5-45a4-9357-bf17b481775f",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3ccde0f2-c67b-41f7-a78d-cc5a53746098"
        },
        "item": {
          "id": "7b9f5b20-89c2-44ff-9357-18f1701d83be",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6418d50e-d25c-4f6a-b800-de78180e3c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "f716db48-049e-4cc1-9f2b-3997eabd0032",
        "cursor": {
          "ref": "9df5a2ba-e393-4a92-9423-14d903919c9c",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b3d310f2-8f16-4294-bc0d-3ce41f4fc137"
        },
        "item": {
          "id": "f716db48-049e-4cc1-9f2b-3997eabd0032",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4fd2e080-2c83-492a-b496-3d399c5cb11a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "9331e7d1-7748-4cbe-8b48-7b4e2142297c",
        "cursor": {
          "ref": "0f26a144-4733-4e3b-b2d5-6c4ecfbdca4e",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7aa430e0-6659-4d0c-9c60-7b484261040d"
        },
        "item": {
          "id": "9331e7d1-7748-4cbe-8b48-7b4e2142297c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5006a782-ac6b-4801-94d6-66fa1d607861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "dab9e6d5-808c-4c1a-af60-fc0069e68b7d",
        "cursor": {
          "ref": "e53a96e5-c0d3-464a-906d-711ffc366134",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "624e990e-7db0-4b19-afb7-8ac076b4707d"
        },
        "item": {
          "id": "dab9e6d5-808c-4c1a-af60-fc0069e68b7d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "103a455f-9e96-46f6-864b-3e4c37d1d58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "915bda68-d7ef-4142-9635-516df1287e03",
        "cursor": {
          "ref": "cf29c3eb-902a-4b98-ab67-64e73f097a4a",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "084c52bf-7953-426b-bca8-87e898adfa13"
        },
        "item": {
          "id": "915bda68-d7ef-4142-9635-516df1287e03",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "52d63b87-260a-48f8-bbc2-2029fac355c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "c5fdd64a-f178-44e9-b3ff-02748622d788",
        "cursor": {
          "ref": "e0da77e5-e502-4249-aea5-03f9b587d2ba",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "37e780c9-2fdc-4864-a0c3-a782505efe7a"
        },
        "item": {
          "id": "c5fdd64a-f178-44e9-b3ff-02748622d788",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f53b3fe1-6629-4b0c-a163-c6a032b6810c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "0c511db9-abdc-4408-bc90-c9dcb883a550",
        "cursor": {
          "ref": "af0fffd5-c716-45fc-9082-3a0533363145",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "fa0b2758-0f65-4c81-92ce-6c52bd14bbef"
        },
        "item": {
          "id": "0c511db9-abdc-4408-bc90-c9dcb883a550",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "988beb1e-96e9-495b-a0ec-c6e4842ba51f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "236d8c01-fe85-413d-a59c-3478beef04d3",
        "cursor": {
          "ref": "859d47b1-e76a-479e-9fb1-f8ef701b9c78",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5564678e-9014-4ef7-b235-a1338dfd5ad0"
        },
        "item": {
          "id": "236d8c01-fe85-413d-a59c-3478beef04d3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c902b313-071e-48c6-a49a-b1e5600378c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "9d3b03d7-bbd4-42b5-8e83-4d63a81194f5",
        "cursor": {
          "ref": "a786dd5b-5322-4e14-a5b2-1cfca77238e2",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9efe88b1-1b0d-4543-80a3-542359ec7690"
        },
        "item": {
          "id": "9d3b03d7-bbd4-42b5-8e83-4d63a81194f5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "98813284-6c10-41d9-92d1-06fc802cbd60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "6cc08a2e-c7e6-4be3-a7e7-e58d81ca50d3",
        "cursor": {
          "ref": "599bbb6e-3951-4d8f-8d0b-3888eecd7be9",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "93569c65-9c2c-4b52-9676-8c600b4cd11d"
        },
        "item": {
          "id": "6cc08a2e-c7e6-4be3-a7e7-e58d81ca50d3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9195b18e-d284-4195-9b94-ddbfde5f2090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "a89476ae-dc6c-43fc-8456-c3ca2880b91a",
        "cursor": {
          "ref": "31e4cf73-89fc-44ab-b0d7-ce7995c52d3b",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bec5d540-9fb2-47fa-b643-709f3b6fa17a"
        },
        "item": {
          "id": "a89476ae-dc6c-43fc-8456-c3ca2880b91a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d98e0b69-3ae0-4868-8106-ea6787dfb44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "3997ccea-4ec1-402b-9428-476af74c44f2",
        "cursor": {
          "ref": "eb867a89-54ff-4021-b451-8c1477f0562a",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "90ff2fc9-158c-4097-93d2-e57db7346ca8"
        },
        "item": {
          "id": "3997ccea-4ec1-402b-9428-476af74c44f2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "df35fc98-4f02-434d-8edb-4344e1190c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "7bcad943-86d9-4d98-b845-dd66dc8e4054",
        "cursor": {
          "ref": "ea2d4f81-ae05-4b64-90f9-36fa16e72192",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d84964c8-03e8-4626-9507-d394a9666153"
        },
        "item": {
          "id": "7bcad943-86d9-4d98-b845-dd66dc8e4054",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "22f31378-cabe-4c3d-bd9a-7d1af8fea977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "5412b91a-813e-4bc5-a660-b7853ed00c59",
        "cursor": {
          "ref": "25ea3802-843c-4358-b0ce-04ed3e02c391",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b86c9bac-1c87-4455-87d9-29542709d15f"
        },
        "item": {
          "id": "5412b91a-813e-4bc5-a660-b7853ed00c59",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d48865fc-a30c-4ec6-a3b2-da9fc42469d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "30640e90-db8f-43c8-9f25-1e51367ac074",
        "cursor": {
          "ref": "d18ea482-1ffb-4170-ae52-c8c49f216d12",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0d92506a-291b-473a-8847-12b59eda0cdb"
        },
        "item": {
          "id": "30640e90-db8f-43c8-9f25-1e51367ac074",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "88bd73d6-997f-4f46-b0ba-19cf10be51c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "60acac49-22d6-4ea9-885e-632b2c9d0b9e",
        "cursor": {
          "ref": "e92b76ba-898f-4230-91c3-52328fb06332",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e35ee31f-69ae-46fe-b6bc-e47aafff60a7"
        },
        "item": {
          "id": "60acac49-22d6-4ea9-885e-632b2c9d0b9e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ee59e893-2ade-4706-9f6a-33d15f94a3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "616fdc1b-e7e1-4fee-b715-2af2076498dc",
        "cursor": {
          "ref": "36ff6f09-ae73-4140-8c5b-0307e498eb15",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d3907425-5815-465b-841a-8453a03ac94f"
        },
        "item": {
          "id": "616fdc1b-e7e1-4fee-b715-2af2076498dc",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "64ff3412-0c13-43e0-a315-00880b11add0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "9baf6ea8-5539-40c2-9092-4da732d21a05",
        "cursor": {
          "ref": "9c8eccfa-bbd3-46ee-920f-0ca7eef23658",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bf3ecf18-f5b2-4b70-8318-38df1a934bb5"
        },
        "item": {
          "id": "9baf6ea8-5539-40c2-9092-4da732d21a05",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "30088985-8196-4776-a72b-e319cbc40c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "827c7cb3-e032-4697-b453-04af0193ac03",
        "cursor": {
          "ref": "c63576b5-a563-41de-8a95-ad77b87cb491",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fd41b046-1201-4c98-8b32-63926449c6f3"
        },
        "item": {
          "id": "827c7cb3-e032-4697-b453-04af0193ac03",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e92a1c65-8039-4890-bca6-b6a560cb971f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "3842a334-4cb1-4685-bf28-525330d6adc5",
        "cursor": {
          "ref": "295e1315-ef5d-45b4-b4b3-40eebf0501c6",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "cfc0ee39-8742-480f-956e-baec141b2317"
        },
        "item": {
          "id": "3842a334-4cb1-4685-bf28-525330d6adc5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "77ff1ff1-043b-4145-8367-587923e28c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "24628f66-93cd-4476-afe1-01fdf204da8b",
        "cursor": {
          "ref": "1f9c6616-562b-4fd6-ab6f-04dbb15ffdf3",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5e8ef10c-9c3b-487e-9189-50bdfc3fc4b0"
        },
        "item": {
          "id": "24628f66-93cd-4476-afe1-01fdf204da8b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7a2ca603-bff7-4aed-a9cd-19747b1ba9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "5be3af88-7679-419a-b46c-98194a0c87b1",
        "cursor": {
          "ref": "fe94f050-11b9-4a46-9c81-901ef8cc2715",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6c633400-6d60-401e-8981-7f6c23312395"
        },
        "item": {
          "id": "5be3af88-7679-419a-b46c-98194a0c87b1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "cc143a32-7b0b-442a-a093-a73839069dca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a400f4bd-4283-479f-bbad-49e3f4652a60",
        "cursor": {
          "ref": "0cbfb3f4-ab9f-45d3-a9a9-6585bfaa5edd",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8853657b-9eff-4dfd-9b89-b520311b9ecc"
        },
        "item": {
          "id": "a400f4bd-4283-479f-bbad-49e3f4652a60",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "15f1a232-fc69-4887-aa5f-5a8ef680fcc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "5f5b2f20-238f-4af3-96a0-70257b4b97aa",
        "cursor": {
          "ref": "512a6a22-28ca-457e-848e-b63ca3651758",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ec963980-0886-4b5a-8fdb-8ff2a8aeb01c"
        },
        "item": {
          "id": "5f5b2f20-238f-4af3-96a0-70257b4b97aa",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0e73b3a2-527d-4b6a-961a-1c3694d75bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "7ac0c741-8ea2-41a8-8259-4ec9434ab58c",
        "cursor": {
          "ref": "9d1d345b-550b-453e-8160-67ad96283010",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ea78ae99-371a-46c2-afdf-8aa603735b57"
        },
        "item": {
          "id": "7ac0c741-8ea2-41a8-8259-4ec9434ab58c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0a7977a9-2645-44ed-b89e-95f71ca9e2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "99a7ea0d-7de0-4ac8-a322-64ec99927de5",
        "cursor": {
          "ref": "31ca9c22-8819-46f2-85e5-49cc73bba16d",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "34e1d856-3e06-4de2-b375-b8f02811d3dd"
        },
        "item": {
          "id": "99a7ea0d-7de0-4ac8-a322-64ec99927de5",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "d89c1984-9115-4fc9-9888-e845b209df24",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8514576b-e120-499a-8172-e1c0f216ee5a",
        "cursor": {
          "ref": "a020694c-c5e4-4e22-bcf4-7241a20cee84",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f94b741f-12d3-4589-b1e1-7ab8338b2001"
        },
        "item": {
          "id": "8514576b-e120-499a-8172-e1c0f216ee5a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3bb2bc6c-5a10-4378-b365-57f70b7029eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "6b28292c-66b0-43d6-bf1f-28f84ac1c123",
        "cursor": {
          "ref": "ed6dddad-ca39-4ce4-adb6-c0560f58d762",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4d00a155-3e77-4e1e-a922-d04fbcf809f6"
        },
        "item": {
          "id": "6b28292c-66b0-43d6-bf1f-28f84ac1c123",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ccfb13f9-d366-4ae8-b16f-17363c8de062",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "6b28292c-66b0-43d6-bf1f-28f84ac1c123",
        "cursor": {
          "ref": "ed6dddad-ca39-4ce4-adb6-c0560f58d762",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4d00a155-3e77-4e1e-a922-d04fbcf809f6"
        },
        "item": {
          "id": "6b28292c-66b0-43d6-bf1f-28f84ac1c123",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ccfb13f9-d366-4ae8-b16f-17363c8de062",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "6b28292c-66b0-43d6-bf1f-28f84ac1c123",
        "cursor": {
          "ref": "ed6dddad-ca39-4ce4-adb6-c0560f58d762",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4d00a155-3e77-4e1e-a922-d04fbcf809f6"
        },
        "item": {
          "id": "6b28292c-66b0-43d6-bf1f-28f84ac1c123",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ccfb13f9-d366-4ae8-b16f-17363c8de062",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "0aaa3396-18dd-4233-8550-70e7050eb91d",
        "cursor": {
          "ref": "6ae468c1-c24f-4c49-8a91-817f6e7b7983",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4140aa69-b6c6-4a47-9f4d-6644ae53bcfa"
        },
        "item": {
          "id": "0aaa3396-18dd-4233-8550-70e7050eb91d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "81d6f10f-44ce-46cd-99be-4e2f98e1b129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7f6ffb3e-b7cf-40d2-aab8-53ce2ba0a1d2",
        "cursor": {
          "ref": "17c5d265-dced-40f2-b0d2-b671cbe5ec66",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "23fc35cc-83bc-48da-932f-827e9d4392e2"
        },
        "item": {
          "id": "7f6ffb3e-b7cf-40d2-aab8-53ce2ba0a1d2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ab716e10-3d89-449c-958c-d75ac2e2d15e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "7f6ffb3e-b7cf-40d2-aab8-53ce2ba0a1d2",
        "cursor": {
          "ref": "17c5d265-dced-40f2-b0d2-b671cbe5ec66",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "23fc35cc-83bc-48da-932f-827e9d4392e2"
        },
        "item": {
          "id": "7f6ffb3e-b7cf-40d2-aab8-53ce2ba0a1d2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ab716e10-3d89-449c-958c-d75ac2e2d15e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "495bce24-2fe6-43ea-9b42-21810cba6b8d",
        "cursor": {
          "ref": "2da97ff2-c1e7-4f7e-b179-eb61fd5f0de5",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "071875f7-46d1-42a5-866d-1118ec0d6a93"
        },
        "item": {
          "id": "495bce24-2fe6-43ea-9b42-21810cba6b8d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "593ba76d-7ebf-4110-9e59-686bcdcd8eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 87
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "502e2984-f7d5-4556-b2b7-43406e22fc64",
        "cursor": {
          "ref": "b4199026-6398-43fb-89d4-2278a107de23",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "390a61df-9614-4cfe-94fb-14fea95eaf2a"
        },
        "item": {
          "id": "502e2984-f7d5-4556-b2b7-43406e22fc64",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9f7a9af2-8e6c-4e5f-8459-83725399d162",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "502e2984-f7d5-4556-b2b7-43406e22fc64",
        "cursor": {
          "ref": "b4199026-6398-43fb-89d4-2278a107de23",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "390a61df-9614-4cfe-94fb-14fea95eaf2a"
        },
        "item": {
          "id": "502e2984-f7d5-4556-b2b7-43406e22fc64",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9f7a9af2-8e6c-4e5f-8459-83725399d162",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "1c719a2f-d0fe-45b5-a315-2097c092ce24",
        "cursor": {
          "ref": "6c720209-bcab-4869-a78c-aed2088b2f3a",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ea9d7393-506c-4af1-a0af-8c968a083a8b"
        },
        "item": {
          "id": "1c719a2f-d0fe-45b5-a315-2097c092ce24",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "7fc6a12a-1fd4-4586-aa1b-61c84aaab0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 97
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}