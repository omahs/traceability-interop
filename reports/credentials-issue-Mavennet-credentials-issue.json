{
  "collection": {
    "info": {
      "_postman_id": "a5159284-61bd-4327-aef6-c953ade4b078",
      "name": "Credentials Issue Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "582b90a0-ccc0-419a-9e63-b8bedbbc0f41",
        "name": "Get Access Token",
        "request": {
          "url": {
            "host": [
              "{{TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"audience\": \"{{TOKEN_AUDIENCE}}\",\n    \"client_id\": \"{{CLIENT_ID}}\",\n    \"client_secret\": \"{{CLIENT_SECRET}}\",\n    \"grant_type\": \"client_credentials\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "6c0dcfbd-49cb-4199-a105-8f5c44efbcb0",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "})",
                "",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.not.be.empty;",
                "});",
                "",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "})",
                "",
                "// Access token must be made available to later requests",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"access_token\", access_token);",
                "})"
              ],
              "_lastExecutionId": "fefaf986-dd45-401d-a091-713b84f45640"
            }
          }
        ]
      },
      {
        "id": "5e7523aa-7257-4e80-ba2a-a14251e0b82f",
        "name": "Get Organization DIDs",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "138b8993-d060-4677-aafd-fc45f87c59e6",
              "type": "text/javascript",
              "exec": [
                "// Some tests are skipped unless prerequisite tests pass and",
                "// update these variables to `pm.test`.",
                "var whenHaveAccessToken = pm.test.skip;",
                "var whenResponseIsOk = pm.test.skip;",
                "var whenJsonIsValid = pm.test.skip;",
                "var whenDidDocumentIsPresent = pm.test.skip;",
                "var whenHasAlsoKnownAs = pm.test.skip;",
                "var whenAlsoKnownAsIsArray = pm.test.skip;",
                "",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "    whenHaveAccessToken = pm.test;",
                "});",
                "",
                "whenHaveAccessToken(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "    whenResponseIsOk = pm.test;",
                "});",
                "",
                "whenResponseIsOk(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "    whenJsonIsValid = pm.test;",
                "});",
                "",
                "whenJsonIsValid(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    console.log(jsonData);",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "    whenDidDocumentIsPresent = pm.test;",
                "});",
                "",
                "whenDidDocumentIsPresent(\"alsoKnownAs MUST be present\", function () {",
                "    const { didDocument } = pm.response.json();",
                "    pm.expect(didDocument).to.have.property('alsoKnownAs');",
                "    whenHasAlsoKnownAs = pm.test;",
                "});",
                "",
                "whenHasAlsoKnownAs(\"alsoKnownAs MUST be an array\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs).to.be.an('array');",
                "    whenAlsoKnownAsIsArray = pm.test;",
                "});",
                "",
                "whenAlsoKnownAsIsArray(\"alsoKnownAs values MUST be unique\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "whenAlsoKnownAsIsArray(\"alsoKnownAs[0] must match API_BASE_URL\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "whenAlsoKnownAsIsArray(\"alsoKnownAs[1] must be present\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "whenDidDocumentIsPresent(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// Credential Issuer ID must be made available to later requests",
                "pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.collectionVariables.set(\"credential_issuer_id\", alsoKnownAs[1]);",
                "})",
                ""
              ],
              "_lastExecutionId": "a70feb8d-dd5b-4de5-812a-1a5b1f221963"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "c89c80eb-9490-40bd-929f-fd0e67454f96",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{credential_issuer_id}}\",\n        \"issuanceDate\": \"2010-01-01T19:23:24Z\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"2020-04-02T18:48:36Z\"\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "7984220b-698e-4679-a567-182c715d65e1",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"credential_issuer_id\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"must return `201 Created` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});"
              ],
              "_lastExecutionId": "195294e6-80e6-460c-9c06-025830425d89"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "ca7fb160-d3d1-4078-a4c0-13ce01a96e9f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ccf3599-52b7-4386-a77f-aefeb425d537"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 19,
        "pending": 0,
        "failed": 4
      },
      "testScripts": {
        "total": 3,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 423.3333333333333,
      "responseMin": 306,
      "responseMax": 628,
      "responseSd": 145.2385011703929,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1649268157850,
      "completed": 1649268159223
    },
    "executions": [
      {
        "id": "582b90a0-ccc0-419a-9e63-b8bedbbc0f41",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 3,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4a8bb3ab-c7db-48d7-beab-4bd8b8e88243",
          "httpRequestId": "a96fe570-ce41-448a-8a05-95d96f4a99f0"
        },
        "item": {
          "id": "582b90a0-ccc0-419a-9e63-b8bedbbc0f41",
          "name": "Get Access Token"
        },
        "response": {
          "id": "72c49af0-8448-4305-81dd-cd7e247414b8",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "must return `200 Success` status",
              "message": "expected response to have status code 200 but got 201",
              "stack": "AssertionError: expected response to have status code 200 but got 201\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7523aa-7257-4e80-ba2a-a14251e0b82f",
        "cursor": {
          "ref": "a8563603-07c6-4790-9930-02eec6d658e8",
          "length": 3,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d80486ae-f840-44fb-b504-512bacffd923"
        },
        "item": {
          "id": "5e7523aa-7257-4e80-ba2a-a14251e0b82f",
          "name": "Get Organization DIDs"
        },
        "response": {
          "id": "d75e84b7-face-40c7-933f-3816617e7fa4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 306,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": true
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": true
          },
          {
            "assertion": "alsoKnownAs MUST be present",
            "skipped": true
          },
          {
            "assertion": "alsoKnownAs MUST be an array",
            "skipped": true
          },
          {
            "assertion": "alsoKnownAs values MUST be unique",
            "skipped": true
          },
          {
            "assertion": "alsoKnownAs[0] must match API_BASE_URL",
            "skipped": true
          },
          {
            "assertion": "alsoKnownAs[1] must be present",
            "skipped": true
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": true
          },
          {
            "assertion": "`credential_issuer_id` persisted to collectionVariables",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 10,
              "test": "`credential_issuer_id` persisted to collectionVariables",
              "message": "Cannot destructure property 'alsoKnownAs' of 'pm.response.json(...).didDocument' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'alsoKnownAs' of 'pm.response.json(...).didDocument' as it is undefined.\n   at Object.eval sandbox-script.js:11:2)"
            }
          }
        ]
      },
      {
        "id": "c89c80eb-9490-40bd-929f-fd0e67454f96",
        "cursor": {
          "ref": "ae50c311-3d3a-4e81-8986-685353fd2ec2",
          "length": 3,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1626a853-8568-4f96-8341-04bc69aec211"
        },
        "item": {
          "id": "c89c80eb-9490-40bd-929f-fd0e67454f96",
          "name": "Issue Credential"
        },
        "response": {
          "id": "3b91c370-584a-4c5e-9cc2-0ac9ae693d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 628,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Created` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `201 Created` status",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:3:3)"
            }
          }
        ]
      }
    ]
  }
}