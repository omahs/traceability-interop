{
  "collection": {
    "info": {
      "_postman_id": "579652ac-2c81-465a-9843-e0d10843dee7",
      "name": "Credentials Verify Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "605d1f9e-fdd6-4ffd-b06f-ef660ff8002c",
        "name": "Get Access Token",
        "request": {
          "url": {
            "host": [
              "{{TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"audience\": \"{{TOKEN_AUDIENCE}}\",\n    \"client_id\": \"{{CLIENT_ID}}\",\n    \"client_secret\": \"{{CLIENT_SECRET}}\",\n    \"grant_type\": \"client_credentials\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3676942f-04a7-42a7-b899-2f1707b9a15f",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "})",
                "",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.not.be.empty;",
                "});",
                "",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "})",
                "",
                "// Access token must be made available to later requests",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"access_token\", access_token);",
                "})"
              ],
              "_lastExecutionId": "06051b68-13e1-4ed7-965b-d7b69d8532ea"
            }
          }
        ]
      },
      {
        "id": "5c19cf8f-f368-4da7-b5aa-619d2bf63665",
        "name": "Get Organization DIDs",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "95273708-aebc-4850-9c15-336574b1200f",
              "type": "text/javascript",
              "exec": [
                "// Some tests are skipped unless prerequisite tests pass and",
                "// update these variables to `pm.test`.",
                "var whenHaveAccessToken = pm.test.skip;",
                "var whenResponseIsOk = pm.test.skip;",
                "var whenJsonIsValid = pm.test.skip;",
                "var whenDidDocumentIsPresent = pm.test.skip;",
                "var whenHasAlsoKnownAs = pm.test.skip;",
                "var whenAlsoKnownAsIsArray = pm.test.skip;",
                "",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "    whenHaveAccessToken = pm.test;",
                "});",
                "",
                "whenHaveAccessToken(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "    whenResponseIsOk = pm.test;",
                "});",
                "",
                "whenResponseIsOk(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "    whenJsonIsValid = pm.test;",
                "});",
                "",
                "whenJsonIsValid(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "    whenDidDocumentIsPresent = pm.test;",
                "});",
                "",
                "whenDidDocumentIsPresent(\"alsoKnownAs MUST be present\", function () {",
                "    const { didDocument } = pm.response.json();",
                "    pm.expect(didDocument).to.have.property('alsoKnownAs');",
                "    whenHasAlsoKnownAs = pm.test;",
                "});",
                "",
                "whenHasAlsoKnownAs(\"alsoKnownAs MUST be an array\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(alsoKnownAs).to.be.an('array');",
                "    whenAlsoKnownAsIsArray = pm.test;",
                "});",
                "",
                "whenAlsoKnownAsIsArray(\"alsoKnownAs values MUST be unique\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "whenAlsoKnownAsIsArray(\"alsoKnownAs[0] must match API_BASE_URL\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "whenAlsoKnownAsIsArray(\"alsoKnownAs[1] must be present\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.expect(new Set(alsoKnownAs)).to.have.lengthOf(alsoKnownAs.length);",
                "});",
                "",
                "whenDidDocumentIsPresent(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// Credential Issuer ID must be made available to later requests",
                "pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
                "    const { alsoKnownAs } = pm.response.json().didDocument;",
                "    pm.collectionVariables.set(\"credential_issuer_id\", alsoKnownAs[1]);",
                "})",
                ""
              ],
              "_lastExecutionId": "42df4465-1089-42b6-a523-40de99874265"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "64f9376a-106a-45c3-80b0-d528c4c50695",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{credential_issuer_id}}\",\n        \"issuanceDate\": \"2010-01-01T19:23:24Z\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"2020-04-02T18:48:36Z\",\n        \"credentialStatus\": {\n            \"type\": \"RevocationList2020Status\"\n        }\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "ac90e8c4-78ef-4b1b-b9aa-c927331e2d7c",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"credential_issuer_id\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"must return `201 Created` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable credential must be made available to later requests",
                "pm.test(\"`verifiable_credential` persisted to collectionVariables\", function() {",
                "    const verifiable_credential = JSON.stringify(pm.response.json());",
                "    pm.collectionVariables.set(\"verifiable_credential\", verifiable_credential);",
                "})",
                ""
              ],
              "_lastExecutionId": "98b35ba8-9dbd-4ff1-8dd5-4ac6b44d5930"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "3bad7ff2-3a93-4272-846d-760ba8359d28",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ac38c468-d872-4bfb-9116-aa6eb55996d7"
            }
          }
        ]
      },
      {
        "id": "5eb8ea43-af25-405f-afd4-8a4e088b59db",
        "name": "Verify Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "verify"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"verifiableCredential\": {{verifiable_credential}}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "d5f1e52e-45f8-41e1-a7a0-b7f2756ead63",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/verify` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// The `verifiable_credential` from the \"Credentials Issue\" request is used to",
                "// populate part of the request body. If this collection variable is missing,",
                "// the request will not be prevented, but this test will raise an error that",
                "// will help to identify the problem.",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"verifiable_credential\")).to.not.be.undefined;",
                "});",
                "",
                "// The expected response code for a \"Credentials Verify\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response body must include a \"verified\" property indicating whether or",
                "// not the verification was successful.",
                "pm.test(\"response must include 'verified' property\", function() {",
                "    const { verified } = pm.response.json()",
                "    pm.expect(verified).to.not.be.undefined;",
                "});",
                "",
                "// The verification should succeed.",
                "pm.test(\"verification should be successful\", function() {",
                "    const { verified } = pm.response.json()",
                "    pm.expect(verified).to.be.true;",
                "});",
                ""
              ],
              "_lastExecutionId": "de50435d-421a-4654-a985-787f0fb78af0"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 25,
        "pending": 0,
        "failed": 4
      },
      "testScripts": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 271,
      "responseMin": 106,
      "responseMax": 581,
      "responseSd": 189.40564933496572,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1649279157686,
      "completed": 1649279158961
    },
    "executions": [
      {
        "id": "605d1f9e-fdd6-4ffd-b06f-ef660ff8002c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 4,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1d91dfcb-a5a3-48ae-bdf1-bd5dec8ea1e8",
          "httpRequestId": "c1d69d2c-2302-430f-864f-7068bfc3dd4a"
        },
        "item": {
          "id": "605d1f9e-fdd6-4ffd-b06f-ef660ff8002c",
          "name": "Get Access Token"
        },
        "response": {
          "id": "bca6dc30-c8a8-4128-b68f-4b5e541cb639",
          "status": "OK",
          "code": 200,
          "responseTime": 581,
          "responseSize": 812
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c19cf8f-f368-4da7-b5aa-619d2bf63665",
        "cursor": {
          "ref": "eb7c60ad-a0e3-4a53-bdc5-13df3a2356ab",
          "length": 4,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3fd51957-52a2-4998-92f6-7cc54d348217"
        },
        "item": {
          "id": "5c19cf8f-f368-4da7-b5aa-619d2bf63665",
          "name": "Get Organization DIDs"
        },
        "response": {
          "id": "29f38a87-0415-4d3d-b567-2c838fadcf5d",
          "status": "OK",
          "code": 200,
          "responseTime": 268,
          "responseSize": 1450
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be present",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs MUST be an array",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs values MUST be unique",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs[0] must match API_BASE_URL",
            "skipped": false
          },
          {
            "assertion": "alsoKnownAs[1] must be present",
            "skipped": false
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 9,
              "test": "verification method controller must match did subject",
              "message": "expected 'did:key:z6Mki93tJ2rwrDaWTMZcdMShk4xLWf75Fu559dAapKe8pdmX' to equal 'did:web:vc.mesur.io:next'",
              "stack": "AssertionError: expected 'did:key:z6Mki93tJ2rwrDaWTMZcdMShk4xLWf75Fu559dAapKe8pdmX' to equal 'did:web:vc.mesur.io:next'\n   at Object.eval sandbox-script.js:10:2)"
            }
          },
          {
            "assertion": "`credential_issuer_id` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f9376a-106a-45c3-80b0-d528c4c50695",
        "cursor": {
          "ref": "06ee6637-a81a-4153-8cb6-a9c8af63ac74",
          "length": 4,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "78511ca0-b475-4b0d-8ddc-d2b043476dbc"
        },
        "item": {
          "id": "64f9376a-106a-45c3-80b0-d528c4c50695",
          "name": "Issue Credential"
        },
        "response": {
          "id": "e778a47a-d0b0-4bf9-88ad-b767c2bfc1aa",
          "status": "Created",
          "code": 201,
          "responseTime": 106,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Created` status",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb8ea43-af25-405f-afd4-8a4e088b59db",
        "cursor": {
          "ref": "c6ae48ab-868b-42b8-9245-8b3f79e0f171",
          "length": 4,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d1669a44-a5e9-4aef-9861-18b40dc678b2"
        },
        "item": {
          "id": "5eb8ea43-af25-405f-afd4-8a4e088b59db",
          "name": "Verify Credential"
        },
        "response": {
          "id": "27d34161-c895-43e2-b581-5ca1896b71e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 129,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `200 Success` status",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:3:4)"
            }
          },
          {
            "assertion": "response must include 'verified' property",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response must include 'verified' property",
              "message": "expected undefined not to be undefined",
              "stack": "AssertionError: expected undefined not to be undefined\n   at Object.eval sandbox-script.js:4:4)"
            }
          },
          {
            "assertion": "verification should be successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "verification should be successful",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:5:4)"
            }
          }
        ]
      }
    ]
  }
}