{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "212c67a1-5d65-44f1-93be-1aeac76ecbe3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a7fb423d-e2e5-48b4-b307-4df8d9885f25",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "39cc6cd5-e36b-4117-99da-ec9c0b0b81b0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4e58a8db-0799-4706-85f0-204892bf9a82"
                }
              }
            ]
          },
          {
            "id": "562cb98d-8118-4523-ab25-1755b92ed4d3",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d727baa0-09d1-45e9-ade1-b9d468a908ca",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "74b360b5-cda7-4523-91f5-725055e9dc3d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e9b29dc6-ebac-4d7e-86ea-77e075ec2bbe",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "889f2077-2814-40c3-903e-bb0b519bf65d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6f3a2899-e130-47d7-95d3-4e21f425ec74",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5e69699-8e9f-40f7-b175-e50c3264a08a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "770d5cb0-0e37-407e-882c-27d036bc089b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "86d3008a-05fa-423b-8314-ee774d5023ab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f7ec21ba-26bf-4766-be6e-e39114519edb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4ead2c23-3183-46e2-86bc-cba4e0596f8f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d44b82c5-72d7-44b2-8cdc-01410c8fd0b8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e002b5cd-cf65-4eeb-a9e4-5b2c3250114c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1c4d2154-f507-484d-9adc-e5967851daa1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc3a52ca-54e1-4a01-b6f7-e7cbf1161aaa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "78cd87ab-d522-4bed-8106-b6ccfefc5e7d"
            }
          }
        ]
      },
      {
        "id": "23dcfe49-220d-4769-9979-ea7cc5c036a7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6b288565-45f0-43ec-bcf2-fc7ed49b8546",
            "name": "Negative Testing",
            "item": [
              {
                "id": "08794207-b521-40d1-917f-e382cc65f778",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "aa1e30a6-ef48-4821-be91-3c476f3fa3af",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dff3c9a-6c65-437b-91bd-bf86495556c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb4d5def-e268-45c7-b03c-5ba0acea68be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf37642d-d4dc-4e8c-8751-5338b2df95d7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11277ed5-e6db-4774-817d-e3219fdc9321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d72ae63-5127-42be-b4c7-4131bbac14d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd22745-c4fd-456e-b9b3-22af06b05cb4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ebada3-7c4f-476b-98cd-f9d6691ad66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "035612d8-64f1-46d1-a50f-18c26048f0b6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d9622957-fa0f-4ee2-9608-e62f447782f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b31422fa-dd51-41a5-b6e2-746aa17a1491",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ac7780-a168-44aa-b928-f502a441e14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "648f3f81-d2b0-4bbe-9659-089a72c388b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb159dc-94ce-4fc1-b68b-4511ff7ffe7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2c7b04d-6bc3-4a7e-a3da-b80f95cc3b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c1ef11-1d0c-443b-953e-b04c6dbb1f14",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dda9f86-8d20-4648-93da-ed8105c16980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d0c6c52-610e-4a76-9963-f6e4993cad9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06daed02-a770-4db0-a6c6-c1fb934f158e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "1bd49e0b-40e5-48d9-be90-dd6fa0a26190"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9505679b-c7c4-4447-8bff-6fd986dbfb8c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "26aac7bf-3987-4896-8732-1bb3e6f229b9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a3d4585-7a23-4d3a-a700-98edfe2943f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "63bd0272-ac36-49d5-9ab8-d0c32f2b92e9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba9d7635-9cc3-42e9-be62-d499297dcc5f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "656bb966-a25e-4ec3-9f7f-0f3ec7031df1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5ac28966-8ceb-4f83-bdc1-360fdb511716",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e9234d3-26a0-4313-aa8b-9ef9ad9dc55b"
            }
          }
        ]
      },
      {
        "id": "57585369-4c2b-4a44-a0ec-c754c37bb61b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2747d8f5-b41f-42de-8eb4-2287a05a3fef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6658fcc6-e18f-4bda-95a9-d4e1e03231cc",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ef10fd88-579a-4572-9ec6-c30e66ffd724",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf099a5-e87c-44f9-b717-7ff561c17dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03af7ae9-c037-4c9e-8b4d-35bcaa48ea8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e6c0b3-d119-4e47-8b5c-cd3505f4d560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "765ad7e3-e0f4-42de-9719-06cb87382932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15877371-2d83-42bb-a8c3-8b05e9d4b68f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88b0325-90fc-4ce3-93a7-ee1b7c9f4a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c5e98d-e1b3-412a-8d78-41f5dfdd812e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5e4b0f-de6f-4f31-9a27-c97d8baa7f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f264fc8-0cc6-49b6-accd-eec2bc638fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c50eb6-6bca-444a-8a12-dc28e4e9321a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa42f17b-912d-403e-83c6-810175853fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b7d467-c61d-46c7-aec2-4b38bd1850d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3baa0c2f-8373-4d45-a595-ccddad7d935a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bfea11b-96be-4a70-9c82-0b651b266cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0b46c0-70ea-49b9-b976-7e3afed38372",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b80d8f5-2a13-43f2-99bb-623ba491c392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc02ec47-4128-4552-87bc-e7c904a7e877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87ffa57-fb4b-4136-9169-dd4c7dc0e00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e5b7782-1247-463c-bef8-f4f4eeab1539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef15682-6a89-4b53-a70d-5d3a0a70bd87",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5db054-f1c2-4a60-b0ba-5f911fc32728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07226928-d5d0-4af2-a8a7-7b7d23a6bad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490499bb-04f7-460b-b40e-908d980dba5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c66f099-42b0-4eae-a2b1-f788ed055389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6092b6-c28c-4f33-a2ac-222ffb95b72a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e66271-9fad-4e11-a7f3-eccaeb3d7b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4758f78-b59f-40ae-9563-4d030f5dc101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc33bd9c-1deb-4923-a13c-f728867dfe7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0351b17-690c-425a-be0f-fc8d5758f30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0fb099-05bd-4a75-b95f-35886992d6b7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "793180b3-0df1-454b-8e01-f044e4d8bacd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a32bf75a-c5c5-4c73-b28b-e34cc59fab90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4997f96-8a87-4551-ac3d-5db18ec54870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2eee7573-5991-4279-b6e9-c093e4f13f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3b97b1-458b-4489-a6d4-e17f0db80808",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "988bbb07-9da9-4887-af75-244cb29f7888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6618e98-316c-4502-8ff3-b5e9e9b2c3fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bcd2e88-f13e-474d-bd9c-856b58b3221a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7abee41-2d0a-47bf-a7c8-7cbce9c23dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946c03e4-1c20-452a-b547-a1b750df62a7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f3cf02-d8cc-4e93-ab93-a2eabd29f087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f062b36-a92b-4fc9-9cae-66f58ba3e2a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ff167d-4367-4891-b7d3-2a642cd2af03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0dad272a-4f13-4490-883f-0385509ca968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ede2f69-fc66-4bed-964a-604fa8c773ee",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca4d2de-94f7-4a57-8cb4-5920f8bd6f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912a550b-463a-4764-b171-20a5219ddead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2881187c-b832-425b-be20-745756419557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2d39eee-a60b-4c7c-aa0f-5d99d2432a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5340c4b3-21b6-4ccf-a250-b50838a4854d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011cceb8-21f0-4874-adb7-783ae335567c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc5f62a0-30d8-4833-8008-9b141cf606b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f2326d-84d3-466d-8bcf-6276e6379dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc5f191b-e98c-4dda-80fe-99873c359019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e82c0d5-238c-42c5-8639-eff8d63d5405",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe78711-e4d9-41a4-942f-7e9a2168f235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba0b7598-f526-432f-a411-862df3a903b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62e7524-a74f-49dd-9769-1722a8f010e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed25888a-0e8a-44fc-9a85-79d4469e60e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c0d0de-b3c0-4ead-b8ec-b9f07807a32c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa86def-1fd0-4d21-b2ea-02ae606f8a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df2758fc-e7bb-4936-abf5-2b502f9e70f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8bcb58-93d5-4d77-8227-c0077837a91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d895423-4198-485a-a34f-126b58b0b9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9e032a-9ba5-46bd-9c23-4dea832d6345",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79e7f3f-6fd9-411a-9684-e06404891cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f76a4c-937b-46a1-aded-44b3673462eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a28e08f-6390-48af-bb47-0ec349ad71d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f936366-23cd-4ca2-94c2-90717a907649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017d419d-4896-46b2-b550-c48922b244e3",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab59f83-f5d0-4523-8298-7cd8e9cd899b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f9502da-aee1-40c8-91cb-39ab450dd19f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096536d8-dc11-4d5f-8558-baf7b101ee37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "810255f9-b188-4b36-8712-29a66ffbe08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd28816-f3f1-4739-9dc1-079c65c7b8c9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5a08b3-e8d5-4bf5-aabf-82eae2c116ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944972bd-9a5b-4309-a445-e56ffec47510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4cdb8b0-15c1-4f60-a8df-3045c58134b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f32b6db3-2faf-41f2-8d23-40c4fa4512f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa5b3a6-b2e4-4f9a-a57c-7e1aecdaecae",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfa168f-0593-442d-96e5-9e119b399190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59228da5-98e2-4055-bbcf-4b1bea5d2abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b859d11-7e7f-44d2-a23b-6c2277e1de5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8df5c7d4-1051-4b4a-8b5c-adf8e9309151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8218c7fc-3f7b-411e-b742-3f86dd27a9c2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "234768bd-e596-4098-b192-7520b890990c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5e30db4-c4ab-4d99-ae28-43ad112cf09b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bf42ea-43d3-4a89-bd0f-584829aae27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef259e2a-dbb0-47dd-a74b-bf3e6a25907b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00793cfc-c951-4f94-9e6e-7714db1638b6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42e9eb7-edb6-43d2-801c-3108f5160a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efdc344-6ce1-4b29-82a7-8ed91ea135c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ce5032-a5ff-408a-8a93-74dd9091e218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c13cbd68-d0f3-4007-ba5e-db7e18b4f07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f39af64-84dc-4830-bc58-964a21f0824d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd3a6ba-fc5f-4b50-813d-413068e00fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7537a224-4455-4e27-bdf5-a29959191902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907f4004-af79-4e2f-a0ba-cc42f50c0c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b29253f-1f51-4b6c-b822-934be8702e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631393fc-ba68-4d49-a0d4-3f1a10d80083",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e256e1-5637-49ee-baf5-64d421d090dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b79e51c-96d9-4714-86fc-d4566611617c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12143d14-7c95-4b33-b19b-c625d8257308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "222a6601-b667-4f04-a064-6db4e2f6758f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97d88e1-0ee5-4ca9-b894-4e84e73ba8ae",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7898cdf2-3ca5-45f8-9716-2c2f52e086d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b0e6190-c77d-45cb-a826-4e05210a95e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61e7a45-1fee-4e5b-a42f-9683ddee1024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86068927-d970-445d-bb83-1ca3c65e6d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ee7a50-9fb6-4dbb-9112-1e73a43c3a02",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48095339-9949-4787-a56b-8e5f7093fec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "323cd657-fe9a-4177-a4e5-d5fb8b56a151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28eb58b-c160-4ee4-9d79-9c8f1d956174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ecff9b-dd04-480f-b65c-3688b732ce0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44568459-0161-4741-a41f-eece1434349f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76053d40-7489-448d-9ddb-4d7c198ed3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "895c2e75-87b6-42be-a4d6-76de878b7808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483e4213-ffd7-447a-bbd5-0066761a23cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "45b53d2f-2d1f-43c8-a803-199ee2497bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163e72af-f66d-4dc3-9a1e-247975163e19",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a907fd16-9c8b-4c4b-b9df-df49c0273668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad769d1f-6576-40b9-88d6-c5dac5dc6674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a43a260-bb82-4c29-92ae-b044797ecde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "296c115a-4e85-4e28-ab2d-0f18737ed1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75f3ff5-149a-49b9-832f-94fe7bd61eae",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "134d9a7f-244c-4e93-bf0b-25b5015733d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3961dfe-7838-4740-907e-65540d4d3dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85e2927-1bb0-47aa-88a9-7f77ab14aba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a8d04eb-fcb3-4fc2-aa15-73b54d516d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e34178-f47f-41fc-8484-14dec954e34c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a943e9-4215-43ab-afb4-365a1e261765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12241ddd-eec2-498b-a612-b5cae9439d1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a67a68-1fc3-463f-bc1f-7d61b5161833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "af94ab5b-a65a-479f-be83-82cf902c6715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6aba78-a744-4bb0-b5d4-5f4b5ed6e4f9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f80d13-577e-42c0-8cf5-3989002ece29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b294c71-01e5-46d1-8791-f5a7d65d9d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a527ed-ede2-43cf-a9be-17cb52243fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d644b3db-da2d-4f3c-84af-1a8f2826ecf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f4c12f-18e6-48f8-8f63-9f9b80ab24a1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09317917-9a30-4806-a8a8-3b6a95150c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eecd66b-2ec0-4f69-a861-a1edab48bd66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45fe032f-6169-4e7e-addd-0a69654bcb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dfcdb23-3032-4902-a0c5-4dca9680f2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0374577-a88d-4fe4-8d97-1a5d7b3392a5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33044913-f201-4fe1-8472-b119c711af58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85135056-4371-437b-bbc1-c9e0ef1fea5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc7663b-69a7-4fd7-b502-9251cfe25983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b464c17b-9291-42c6-9c11-61cd5bed55c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa09341-cd5b-451d-89b4-50740e7af805",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379ffae4-455b-4302-9183-3dd1963aadf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1923c745-0ee5-446f-8f46-48c18ed357bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa60d34-cf9f-403f-990e-00869ff6b1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "86d94387-081e-4774-b2b9-b5912796219b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8215a50-6770-40be-8b1a-8dbf217a6538",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8c2e85-53f1-4759-8038-dc87784c1526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e49193-7e44-4fd4-9a0d-ca1f5de8e1de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de80fc9-b51d-4951-b19c-b49a65a83686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "119b6285-e7dd-44eb-8aaa-f24773b4eaee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f87f9ca-2ed4-425f-ad2c-23b021cd1fca",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b27ea2-6218-4948-8c4f-3c81ebdecd47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "275817b6-3d33-4ecb-9900-e3a91cd4e471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e363d31-59dc-448d-93ca-200c7091e126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b54fc8ca-b2e2-4d42-aad3-5116cde7684e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5843890-a5bd-46b7-8e0d-0dec2682fa33",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "060707cf-dad9-4af9-a950-cf243718ab6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfaab262-1916-4844-8732-1aaccc95f2cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0d6441-0168-4a2c-a146-dc3b44ae4f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "717d32d6-3801-4893-b02a-ea9f75e9ccb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca5a6e7-cccc-4351-a89a-f5b427e6fbeb",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "677f14bc-3514-414b-9b26-c049afb8aa2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c7e594-d469-4c48-a982-e6e8f713a254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbf58a1-935e-4328-8926-c7a9d24a9526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0dabaf35-c7ba-4669-9f6f-80aa13e1467d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd4b706-97b1-4da5-8fd3-e6f5fe551aa2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41aa6b2d-84be-473e-a7aa-c80cbc69910a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f470072-f977-4b4b-b0b9-f0e83505df2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19648ff4-d599-4ee1-b609-e5107bced882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e51804-b456-4942-bf14-d5c858038f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6978526f-f6be-4c61-add5-4a3783e865ad",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc70ef8f-db8c-4781-82ec-de3b22b29d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "348e9d12-c883-4659-8bc1-f2a968243d71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c9417b-30f7-43fa-b6d7-38bfd7178c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fef904b-5d28-43c7-82e5-86cd40496ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bac28ef-8f77-46dc-8841-18e2fc2e8a43",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16adadd-bed2-4acf-9dc7-dae76ee2b98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b42f11b-178f-4073-88ae-9ec9eb7f6c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a597ca1-9795-447f-a810-460918409a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b963c801-c4c7-490a-8c25-08431232b327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9d76d0-7f2c-4af3-8caa-99f32fc0c68b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa7ba97-87c8-4e0e-8077-930108ea073e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c71495c-6a61-42d2-978f-40867a524a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2813324d-eca8-471c-a344-46c3a88b8656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6156316-8889-4c52-b468-ec0230196e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133eaec3-63a5-42c4-bdc1-2be05dbcc840",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b218f4ac-250a-49aa-a555-4faad61a0786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f78c1aa8-afca-4035-95d0-034c91769745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1644abc0-19d6-45ad-9b9e-86a1444fd2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "97f9c4fe-f99e-4194-8b47-e637f8d268c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05673d18-ea60-4353-b18e-12c9a33b1124",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31db51a6-d14a-48d9-846e-b80578ba837f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d6b39b-35ea-4205-a492-93140ed445da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8f43c8-4bdd-4beb-a1d1-26fdcb041273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "84ae15e8-99a9-4770-acdb-076aceba6c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de349ce-5af3-4c96-acde-4e9e7dc96930",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10de22c3-a01a-420e-9681-151e958f65ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100ed50e-bf90-4815-868f-2fd35718301b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7757fc64-2e0f-471f-866b-63bddde8d2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e5b11d60-b2e6-483f-82e1-e599fbdc6b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691a289a-ef45-4777-9851-25c22cf8fae8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95dc9fe-286a-4257-85a8-6bf1e14aff3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e8d34bc-169d-438f-b205-8b5d1d4eda04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c462ef73-6edc-4d4c-ac4a-9d1d84366d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "36217a54-235d-4266-bdc6-b1d77be00d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35e6fb0-c02c-4961-9af4-8ecb5c3812a6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb76802-4274-43e8-9bcd-6fcb01a0ad31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b20f1975-0772-4e65-b62a-774c7e30ac5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f203246-c713-4337-b3ef-48108be7d0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8d27f98-45b1-4a99-afa4-1a1edc7e8aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d38d8c-d98b-44cf-a791-697433efb3ff",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "204a50f3-1ed1-49d9-ba29-be2f08e81b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326462fc-9232-4299-b165-780ea9fd201a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43051722-8b42-4eef-8aba-479ab4058935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "576e3616-d821-441a-ab62-c7a859b6dd9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680ea3c9-5c76-4595-83a2-32e3614085e7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c68cf7-478f-441c-a43e-529ac1df1086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbf06114-f9a0-452a-b0cc-a2487ddff4bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6cfd264-8d3a-406d-989b-d59018ed14a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c1ae4d-1c6f-4889-894e-39ad3e8a5fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202c1e4b-d48a-4b1d-b3bf-ed42d7f4c693",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2500855-812b-404d-8492-359358b6937e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c72a7b0-3e78-4c5a-88a0-1e5f626461f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d42574-7ea1-4e2f-bc3c-a7f55a6cfe92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63d0cb97-adf5-4fef-9456-3c482368f5b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50adba83-223d-44cc-923c-1310fb23a5f2",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87aefeba-9cf8-4087-819d-a69757942bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a91bad2-081a-469a-bde3-82d79fdf71f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0248e534-a1a2-4cb8-a9c5-c2f011bfce74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0a3dbe5-9310-4e07-bcb2-afc7cbef57b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8877d6d0-602b-498b-8aea-96b555d715ff",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a280939-71bb-4219-9f1a-c92709e6bee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89fd630-db88-46d8-aa63-24895df57746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580effd9-31a7-43f7-a08b-c820447a992a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f32d58d7-7437-4717-8cc0-7dd839a60cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2233fbe-1302-429f-8b02-142717584d9b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "951279cc-37d4-4d2b-af75-589b6243df11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b409dad6-4ee1-4180-9ea2-9798e6c0b243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d5566b-1013-48a1-8556-3405480aef05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ecbab6e5-55c2-4734-8b43-9d4d6f76112b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97900a8-5f80-467d-91f2-d8d395b8e228",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "926f68f3-165a-4452-aef1-6a2c3cb4a5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "688b1ea2-a977-4b1b-80cf-794581f26c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e87645-3ea7-47b3-b4a0-c13443812528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dad02ee-f50d-4021-8562-7cf228a55000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24fc23c-7f43-43bd-9147-058d07510cea",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3bdf17-0690-4599-b9b5-9f9893cadf75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7981a575-619a-4706-acd7-9c66c9bccec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04c177d-f56c-4a67-ba9c-44e47cf2eb80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "31cf37c0-2523-4274-af64-cb4ce762d96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ecead4-f0e6-414b-b160-a04cb163f08f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf59130-57cd-4241-bced-4bf41c63c07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920effa7-332f-41bc-8b93-81f159eac8fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076e1786-4466-4f8c-ab00-e00578d836df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "829343c5-7926-45c1-81dc-11d73401be00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8619d4-56cc-4ca2-befa-6c41cb375ee4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74827bb-7ae9-4cf9-ac8c-f9e24834fa2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "703fb0cb-4575-4637-80d5-4263944815bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1af83e-741c-4381-a4d7-b61e0065c527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43d171a6-7f34-419a-8ebc-4b5f87a36017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5e5865-7502-4d4a-afd9-2b7af7468771",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1063faa4-efd2-44e1-8fa8-7d670950cdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01fdd25c-b626-45c3-9566-f1289c6241a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70907ba1-cd9a-461e-95d0-e1e2a31ae054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e113d7b1-2760-49c3-beea-1c21c93fe074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292bb29a-8197-4d01-be59-969f167f006b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a972efea-f45e-4654-b3c6-fcbd62fc79fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608852bf-7376-47a5-8377-29ca7e4d9c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29570f6d-1337-4a3d-9eba-b8d2eee5f9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "39f3be6b-f958-4551-ab81-b9b2a614a80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a8e8f7-8eb0-4303-bb01-1aebebfb84df",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baff6e76-02a3-4bfc-b9cf-55e242b9b17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b8206c-6919-472f-9f15-4724c88ddc9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f778a9a6-5c22-4be3-bb42-3df84572d583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9617eb11-39b1-4368-a678-ab212b7b71a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7ebf66-b1dc-45f0-b4a8-eb30d8aa78c0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd0d49b-797c-4f07-a7f1-9e8cd73e2388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "723ead7f-5436-416b-9c18-dc84bc012938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9345bb4a-c500-4b71-953d-9865cc912d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c3233a1-9bee-4d22-b550-02f0207cf92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08e5f89-e915-4e78-885a-865d7ea13519",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9dd37a-b073-46b5-a02d-f385cb83b7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b4c2b3c-e130-477f-80e2-28a563c4b911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a4cf88-1645-4292-a9eb-ec6e626c4385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc9471d-9fdc-484f-8263-03cd930a2232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcae6f02-891f-4198-b3d1-3f97fae843d3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6a4a10-87cc-4fb4-ad8e-bafd3949ef6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deeec0a9-cba2-45d5-b3ca-98c7dc7c823a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1be32a-d50d-4fb4-b95c-8798bf770b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a162bae-3e6d-4002-8528-3e422d0a1ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6ac227-6b57-410d-80de-59b7f0972222",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69cef844-3520-4650-8d2e-ae834a3e1da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f33eb2-1ed5-4d75-9dea-087dc84dcaba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb48723e-a6e5-4088-b74d-2744af821342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "693af2ca-d223-4345-9fd1-597dc3fd0243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27985ae0-26a7-48fa-bd73-75a0554143fd",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a002e08-da04-4e72-93a8-874899444dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06659ec3-c725-4b6a-b6af-d466f87703b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811eb05d-6677-499f-aa3e-8d7ffc30bdce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f2cfbda-5a9b-4d0b-aaa1-b2034d1fd47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d42230b-0182-41f3-8f83-cabf4822e107",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa0aa44-deca-429d-9f42-5f8559128a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea0d3c10-cb3d-43c3-a922-63c6e08524c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d3b065-e2d4-4135-8e1f-99c6dc7e9c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e281c9d9-01db-49e6-99c8-81d99e73d0fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79af4f5-e2a2-4758-993d-5c6f8f120638",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2768ecc4-3630-4a28-b833-61edf46d5e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db2405bd-67b0-4087-9bf2-dfc9316fc0cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28adb6b-abcf-424d-904d-b05606896574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e368feb4-96f9-4a9f-939c-0c5eae2131b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555841fa-899d-4e86-96c8-cb6e16d3ba11",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0f8636-5da7-4127-afea-ca8026336ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a033f728-ddee-4946-aa88-b6d4fca8992e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d78c00b5-fe25-4670-ad27-9b868d8402f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb413307-7b22-47f6-8956-d46eb3825848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35449020-3814-40d6-8677-007159c3b093",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a664e1b-6cfc-4980-9d87-74d4e095c479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e2204e-d058-4b65-af2c-3d9f0bb323ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e5eaf1-e416-4f20-812e-d39f64e82a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ae9a260-0476-4e75-9417-844284310ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc739db0-18bc-4aac-9642-86b60c751707",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "106746fc-9d09-4ee5-ba64-3a56b73b24ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "767ba764-4dd7-4588-9daf-055e8a1281c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea07bec1-8f3b-4bc5-a78f-aac2e4a1db18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26d9554b-6e14-4ecd-9ea8-277a57245fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbe59a7-64a5-4ef1-9933-60aa24095187",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d72eac-7818-4ff1-8dcb-2b99eeab1fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4755ab-7d6a-4ccd-92d3-6cff374a264c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b762a033-94cf-44ee-bfb9-5ab94c962119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "74b32b74-2f40-4425-b4d1-c5928541fba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8906ad4-23fd-4d88-b170-215d481fcc2a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da419095-c9cc-4c1f-9f80-ffe1f7060fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea50eee1-4c1c-4e60-87b7-553dcf8ea434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294cfaca-7ee4-49f8-9ec1-c8c616189a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f814c0f-5c97-4baf-a02d-47d8e1b0d4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1db8663-1afa-46eb-abc8-69ce60189160",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ed8db0-c584-4690-a2b0-0b4ebc5a0800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1feb7fb6-7a34-4971-ae39-fba932fade2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947cca0c-0e31-4a77-9df6-f98f3503c15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13c03116-d8ce-4018-9aa5-489193cba150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57efeaa8-bcc0-4843-9dc2-e18d03c8c4b6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b71d8b-16ff-4c15-88d9-f2f4fa658ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8016ae07-cf4e-48ef-bc4d-edbd39b85361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4734a997-62ca-451c-8820-bf1d4d78953b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "851d01b8-f35a-463a-addf-ce063ebd8518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4369b1d4-866b-4ed5-b8e6-6a2fb132179b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f5b540-b3fd-4816-a316-43c74cffb487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b46e350-1a7a-4daa-a355-e3e374accf25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11311742-d56c-456b-8aff-b0f7e9e84867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b7282db-458f-40da-abc5-3f30942c0b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac1bb8c-4706-4e34-a22d-22646cda4012",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a98dd9-b765-4abe-8c45-1ec013f04839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cfdc4fe-525d-46c3-aefe-5abc9b9f0c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769f9a7c-78a5-4357-897a-b42e1505af4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "584c8949-4c0a-460c-b501-918e6ca0231f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac352e5-3bd9-4a20-acb9-16c1a48e2abf",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49399b2-77b4-413e-bfe6-cb842fbae280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ceb6e8-29aa-4c75-92bc-daa788390575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf2816a-7633-4ec1-98d5-3fee379c798f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f6dc0477-c367-4209-aea5-1b597a0ba960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e91e046-0370-4021-8dbe-8d22773f0359",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4856769-dbef-4e7e-854e-f0cf7011737a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfb7b2dd-903c-40b3-b77c-f3e6e6c5ff13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88598cd3-1218-4bea-9cd4-02a54e0200cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "daa836fe-38b6-4897-89c6-2c6ace9247e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e33fff-821e-4ca3-9c80-a0dc088e22a5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "941f17f2-a575-474e-b0dc-4373857b2eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b4a553a-0950-4b14-b504-b3e4b1f13326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7014ca52-0de8-4287-a8ec-2a1cb4e79249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddce0c66-c2dd-4548-a244-2d5502bd5172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b8e509-2741-4b89-b65a-6efad08a2117",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e2f960-8f9f-468f-a5be-f9b3dff28e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df871f7d-77ae-439e-9ca5-e24614d60ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b228a90d-c1e1-42c0-9120-1e04c3d079b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "accb5e3b-44e9-45db-9314-05a0e551ff15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e781437b-7a2b-4706-ad94-3987f267b3c0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92db663c-270f-46d8-94fd-7ab9e713653f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64d2d668-8d96-4fd1-86cd-56a037aa151e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e78bf7-6c9b-4a33-a955-1b4e08705bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "956c30a5-56f6-4959-860b-b9b1c56d1ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc38a566-ca01-47e8-af47-8e3984067017",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fba944-4c18-40d3-8d90-f85631d064c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f72c931e-55c9-4188-b5fd-6abbf7cb80fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880537f4-eacc-4be6-bf34-0b37f4b6e824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "673fd667-2157-4a13-8d6d-abf3ecc23e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f77a88-d1c3-4fb3-9455-f66089a10fd8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c0369b-5ab6-465b-9ebb-e1f4d4397816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc49389f-396f-4920-9435-c1eb67fe5a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbcc093b-1b3f-4020-8635-e5d117f6a294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5509dd3e-a5f4-4f12-ba6a-d5276c426334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b91a22-a08b-4af9-aa55-5ffc00043d54",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f9f077-0e6f-4a2f-bed1-1316395620be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57556c04-8c15-4a01-b3bb-af3b2b9fefdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e53b8d-995c-470e-8fd3-29331cd56bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b272bf8f-4fb3-4838-9bf9-3955aa5105e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c90127-0f6b-4b05-9d2b-d546dc795659",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a7c2f3-7e4c-41ba-ba40-dfaa1c0b3aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a646eda4-c921-4404-b5c3-85d62d241ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02fa8da-43a7-4370-a579-eeb0b123dd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5e2cdd-a308-4534-a493-8528cdaa797b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d410a9-a354-4fc5-b810-11a45043c87e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9916802a-2403-4568-ab34-ef9d944db8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12824ba0-4a7f-43dd-984d-47e7674f4f5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823bc2b4-e61d-4375-a470-d5c8810aca50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7f5e38-5b3b-422a-9b7d-53a5a0493063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5acb20-b51a-421a-ae1b-f9416f10fc7f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90668c7c-dc26-4dcd-ae07-9d84bf8db2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e289eb4d-248a-49b0-b659-dd2f8c3dc11a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0077114c-438d-4e83-89b7-717e2c8bfc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c9484c-d20c-439a-ae3c-54fb6e5e220f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4448d19f-341a-4303-b55c-695aa637d6de",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88929a6f-a6f1-496a-81e9-413427c1e8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7431ada-2c9e-4fa2-a738-0234fd1ef4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6dfe12-86b6-4fc5-af33-12051a38527f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb29065-1421-428a-8ce6-268cd2185dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de663d37-3a4c-49e0-bc16-512e85a82541",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c7d5b1-7853-44bc-acba-2e7b537400cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c4f69ac-2e10-47a5-ad0e-1befad5aab07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1774490c-fe3a-443c-824e-e6c14dd4b199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c51494b-285b-47ef-8fca-6c034491f1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092cbcf2-d2c7-4a1d-acc2-d9d17eb62b21",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84ad400-6916-4633-a8bc-57631535e7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05680454-88df-4f68-8a80-d58f68d38426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cd5bbb-4c4b-4799-836e-547ac5181c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "84a8601a-aa66-4125-a229-55d01c23b00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847ce642-4ac7-4615-90b0-f8508ab2163b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cab024-5102-448e-a0fa-a9f64515fd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4682ec7a-ec26-4861-ad4e-d240d6c2d8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b701204-6ee0-4844-844a-27311c3958f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "52a0198c-70bf-429b-a976-56cd0a9aa888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1d68ed-42ef-42b9-b4cc-753cf1fa3c45",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f85c6f1-1f0c-4c5f-91f8-564ba8c67bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38b0d490-d344-48ca-b02b-45fed64ea737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fdf76c2-187b-4bc7-b6c6-9b92d810a626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d170b41e-5681-4b60-ab53-f206e92dbf81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f88043-e0d5-4cb7-869c-dc647d8020df",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d11219-172a-46b7-a4d7-5bcb1918e4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2eaa9c-3f71-4feb-aa24-f876ba0bf77b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4487955-846c-4a36-b516-ac5ac9a8cc53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ffb88eb-8fbc-48c2-810e-1b42c3266659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9299648e-7562-48ef-8c12-cfe30ce5b6ee",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef24d7ef-4b09-446d-9146-c56a5799e17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "901026fe-f139-4990-bd37-a05d2187eb69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbdef222-da94-4d58-9226-8694ebd8efa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "86e77c83-67cf-4984-932c-b21cf212bf8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782e6d4f-1d96-4cb7-94be-97aed5b5e7dc",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c38d97-3860-4e5f-93ea-91e68336a41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fa1d5159-a701-4c03-8221-be4ff894b3d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7143cbd3-6b40-4b0a-9ec9-c0f1a433a4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b073ee7-c6de-49c8-be4d-cc8fbc504b79"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1de50552-5bae-4ba1-af09-3a5c061abfa0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b08270f9-72a4-4527-85ac-5092f1d7a375",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eadd9ff-cde8-429c-b762-87f3d6980866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48f22c5e-d229-46de-ac52-d70d5e76acbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28166e9-9881-4007-a60c-ce1d771afd27",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2a0d1abd-74d5-4e98-8f82-d1060dc87469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab891eaa-ec7a-493d-a26d-4f924051a515",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79737dcb-ea27-4d1d-81b7-b65c8212c0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "087ce1db-6a59-4b95-8534-9ca1056a2524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19bb1171-c3f0-45a1-a534-0502362a1d35",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "21ceb826-855b-40a9-9126-69e2113d17c6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "887edfc7-15e0-4662-81cd-7acfbe89f2c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c947aab5-6ad1-462a-830e-8c6eccf91b74"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2d0ea75-c7b2-4b86-8374-5d6d35b2fe4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a74031d0-03fb-4445-b17d-f7c8ac7ced72"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30f947c2-ffdd-41ea-81d2-2a836ca54853",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bcb1603f-8378-4e5e-892d-0a5ca6e2519e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3a61fb3f-c55b-4928-a38b-4d6c49809ae4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a378714c-26de-4c4c-a53b-722c8c744d04"
                }
              }
            ]
          },
          {
            "id": "a9c925f2-670b-42a0-ba9e-17ed1d7e1f49",
            "name": "Positive Testing",
            "item": [
              {
                "id": "13facfc8-e6b8-4754-bc1e-0c874060b7ff",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c943fbf6-f98f-4bdc-b473-099c36884af4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "555dc410-3165-401a-a540-cc32ddd526d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1f0bb3b-27ab-45cd-b9d3-4feb3592be53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "89bacf11-675a-401e-a2cd-1b7b8fad9c86"
                    }
                  }
                ]
              },
              {
                "id": "797910f1-c75f-49df-b705-fa013aec1ce4",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a0eed43-57c8-43b4-a5a8-09b3eed2adfd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8ce9873f-5580-45aa-b19c-599808b9c181"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7040c142-e6d8-4e06-b6f7-eddc7914d0a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5d0068c6-c697-49c5-9b72-4ef14c01c41f"
                    }
                  }
                ]
              },
              {
                "id": "4e38f71e-5409-460f-8b37-0c8b9fb9a4e3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "afc9b8f2-49fc-41c5-b5b3-49d11cabf3ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e16b3f70-1424-4d32-b924-c963a048b91c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b2b36eb-b0bf-4532-b00b-09295bb261bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6074cfb4-7790-47cd-be53-83033f8b08c7"
                    }
                  }
                ]
              },
              {
                "id": "d1de9a5f-be47-44ea-9e36-c6275a76683c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efd4467b-8ee5-4308-93e5-b8b95cc60f46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7dfa76a1-c953-4aa2-be0c-b64894f1a28e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6fa846b-8e62-4634-8c03-3aabb4fb5a37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8e366495-6b94-46dc-a904-14683b239cd0"
                    }
                  }
                ]
              },
              {
                "id": "721a46d6-050a-459f-91f7-01da42e139f4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7d33221-a49e-4738-94df-17d6e1b28117",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1af3cfc8-4a27-4a10-b68e-9f65f8927788"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21519dae-2506-4047-a7cd-1920a7d544b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3157eecd-671d-45f8-a07e-fe7db37423d1"
                    }
                  }
                ]
              },
              {
                "id": "60d899a0-4902-477c-a7b4-52b7222f3572",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "665ef069-960b-48da-bbfc-edb296531005",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "211badf6-e24a-409d-8ba2-1cf49fe33df0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35b74693-a1b3-4adb-883e-17fafe0f9858",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2a4cfc55-f2cb-4ea7-932b-4f4b70ff9014"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5ad31f8b-d821-4aab-9656-a2f2041d136d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eb04a203-aeee-4af8-96ba-045e751c9fc8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5c8028be-ee52-443a-b4ee-499abd07aba0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "be519dfe-e698-4d46-8453-0db6bd34bbff"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d2be100-dede-4bb6-8699-2d54058a0f11",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b3345458-137c-4b21-9feb-52a00488ad00"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "32d38ec5-ab4a-41b9-ba3f-51d2d043e4d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37011185-cdd5-42be-8a9d-b55f774c3558"
            }
          }
        ]
      },
      {
        "id": "b015382d-aa8e-4a1f-a604-149315ecc2ad",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bbfa3663-e533-4804-9ba1-12e8e68142b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fbabdd86-a8f2-49f6-9b57-10796f4c0502",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "46eb57dc-b4d1-45c7-8d9a-b0c2f6cc9cba",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2636d3f1-60df-483c-ae51-0cd6415883df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9de2731-8c93-4a6d-8a4d-5d45f33381c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6620b65-b0d0-4444-87ed-af20b8046c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "12e04910-406f-4a23-8067-4f84a5920089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01265b2c-b5d1-43d3-ab5d-b46ba54265be",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a2e2a0-79f9-408b-af1a-58d5fd3307d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5c9132c-a73b-4a56-a7b5-bd393bd7266b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64f5015-21dd-42ff-85ba-25f45c1ef2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa003c7a-a8cc-421c-a75b-ba3c9d9f8aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04a12b6-b2f2-4eb5-ac6f-36614d49b400",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef7eeea-0854-40fd-b5d8-df61f21bd0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00492336-fbe8-4518-b62e-20e3bf2a114a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef43584-211c-4b8a-a872-dd5cc8b51a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2595fb1-efd2-4cf2-a976-3e11935bab00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689b2812-a212-44af-aa7d-a1ec542bcced",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb39b79d-f2f1-4d1f-94db-8a2d0320c9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e058a076-d751-4b62-948b-8782d142ed62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b6dd7b-1bbd-4015-a6f0-47001ab64473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82525718-c7ad-4828-938a-66a35a1327b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce939df8-15cf-4042-84ba-174119eb119f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac51d15-6529-493e-a684-f10e2f5c456b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdc5d6e3-6ca0-4aae-b785-7551d1334324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09bdcd0-3907-4067-99ce-e86598a42b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c2f59dc-a5c6-4a3b-b066-6d00f2e3b506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db6c4ef1-f088-4556-b22c-8cccd3f3e3ee",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ecaacb-1054-4ccb-b6ab-c1f6d162d413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca68dc8-30b9-4f5a-9e40-b66ce1b2d476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7805267d-d0d1-4075-9ce4-6fa276ef1947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "675f173e-e64c-40f7-ae6f-83729035f686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac5f5f0-d5b3-4eb7-bd29-596a76e191df",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3228c4df-6539-4ec8-8aa8-c37578ae5518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211eb780-61b3-4389-b7c9-a42b73889a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde664b1-9319-427a-bfcf-49136ba1a909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "53b64359-f0e4-4fb2-b9be-cc425a85e0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010cd0e9-3e27-4fb2-8069-df47d05eba1d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2925bb02-e787-4bad-b0f0-509d051d7071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad518ba8-4ae3-4a6c-89b9-56d5130fee1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b98c18-2f1a-4d26-9c8d-ccbb64e3192a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe3df26-ba4c-4966-8665-9fbafc66beed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a2afe1-397d-4531-ae15-6213f48c35f9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6718fcec-9667-48f2-9834-742a4fd26497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "504cd980-ac50-4c4c-9e3d-427e5fc98a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3688618a-38cd-4300-9901-d0237e7ce822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa70441f-c53a-47a1-a0e5-9f5498029794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80475388-7515-42cd-85c2-506408c8f609",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b070728-5c29-41ea-b8c3-8f81dca0f8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe6196b-c45b-4b4b-9f73-4ecc8166bc07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc9cff6-1fcb-4cdf-b314-395f7fc13ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf877488-23aa-4bb3-81b1-6221fbe2b9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae446bf-4b82-485e-9729-775f4e3319c4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c34e87-a279-485f-a67c-06f309a55905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a912f97-74a9-4bce-8c97-230473107de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c736bbd-aa68-4ddf-b7c8-159eee4eba4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "08ff4636-c030-4206-aa8f-1b7f30f11070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0155c2b-5ac2-4346-b9c8-2e522c478e99",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae4bc85-4ff3-400d-b737-1da9bfc50643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b33316-5140-4205-99f7-c8abe7bdfcc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043762c0-09c0-409c-b6cd-1e94ab4a8e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41c4ea22-2baf-4258-93c0-8603fa988cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07c97e6-faac-4d71-912b-ee503dd689ab",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c514eb31-fc14-4d24-aeb1-0b3602fbe012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a74b9ae-ec4e-477d-93a7-825fddb603d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c67dc3-e60b-4863-a02b-3a14d129705a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "96f09648-1af6-4f81-bd43-1f7664a5258d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8956e51-2222-424b-8b86-0aaea7b85a83",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9932c0-2fc1-41be-896e-7c99257e1cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10eb6e5b-4da8-40ed-a88b-4a1eaa195aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89aa7d3-c56e-4921-85c6-e9d41025442d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4427091e-91d1-4b44-b70f-e735701d0dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4253186-6eb4-43d1-8de1-f98237c004bc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35133fdf-a4d5-4060-959d-0d4fd9fd8dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c1ca6b-3ec6-49ea-9cd3-57472449012f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f822b4ef-fb5d-4d14-918a-819e60a29099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a41d3d0-1006-4250-a404-00482aede72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ee179e-488c-4fe0-b2c9-681bafaa0ee8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9d1f41-1d64-4edb-b234-d51cdcf63a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3864b525-5d9a-4dc9-81ff-edd94b3710fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580624e8-b1e0-4b22-99b9-1b72e5ad7ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5174cac-299c-4641-ac1d-c684e250ebd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d264cf6-95b5-4150-84ca-3a8cf9c5837a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272153a4-05d6-48ce-8d5b-9fb583845a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c3bc17f-b547-43d9-97f9-fd5718daed7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769bb51f-05b2-428a-b32f-9223cab4af3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b8b9c6e-996f-493b-96da-a9fae9a3d87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a121ed1-d117-4e6d-8fd2-fbd8ced66a6e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abe18ca-e570-40b9-825d-c60b10874e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3fb2bf-4e59-495a-a934-f11507d259e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80139d6d-7898-46a9-929c-c85113ee22cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3809e4f-3d66-45f5-916f-7343aa43d08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948ba30b-9200-4bed-9780-d7ce56a34490",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6032b9-4dde-408b-9207-d2e964e1b6fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6802a010-b4f6-4076-81d7-a0ee08cd0f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7abc805-7701-45a4-880e-cc6db52a5ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41360056-6e98-4cb1-8264-be2e138d00ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8544cb55-6dfa-4d47-a0ce-d1e28373355f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920c75b5-45da-4f46-b5cb-7a813e637cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b1da4d-d784-4af9-9aa2-21f096d14d32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15eee4c1-38d2-46f5-9e81-c1907fd640e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7da0ca6-8bee-4ee3-99c1-66a340fe2a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73508264-c095-4daf-82d3-ca866204158d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54af799-c5f0-4350-a11a-58348d911a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "313575e9-bf83-4f97-8e94-4c391f3de060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca04131d-122b-4e4d-87b3-6829e3e7378c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b74b0703-3844-4787-9b5c-b022eb0beaca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b45e4b4-2feb-4121-94a8-47d8f321fffc",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bedbf72e-55b5-43ba-84c2-65342bd5e51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a08bbb-3a1f-4ab8-84ce-147672900a27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38bfb2ef-33c1-4130-800d-1ab79dc8b244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53671627-740d-48bc-b528-026479d45bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38326659-b056-4b87-8bb1-f6f38f57e584",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac2513a-8ad7-4205-9ad4-3b07dad06441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f39f233-4bfe-415a-bab7-fe4853edd5b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5289df1-c2f8-4b93-8477-c73daddfc08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11449f2f-30c1-4d28-bf03-81208c121eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25dafddc-5e2f-4dc8-94b2-481adc92fc0e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2cbbdc-3ae5-4e85-bdd1-203afdeb0ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3764cb44-59f7-45eb-bf4b-6601b861c4c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8d90c5-aa3a-4866-90af-65fa54bc17ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1da0e56-61c6-4103-b98d-f1900f3d34ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836b1de9-e2c8-45f7-885e-4eb34e138b3e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "719cf5b4-1d1d-44d8-9bab-e3b852ec710a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64af22be-0bfb-4eca-9413-b50ce29e620f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e672c0-829a-418b-9619-8188befc8ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61a6be90-41f5-49d8-af0a-28c5b04f732a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a18879-54b5-4525-9745-7a2f7a140005",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72f39de-fb83-41dd-972a-a1114d0e1bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ddc2ff-7e5b-436b-93a8-1b715b4abc5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049a198b-97f3-4cdd-888f-a0eabfc16d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bcf2bdd-559e-47e6-b62c-4d0db44de68a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded985f9-c0c4-40dc-b199-35f36f53268f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e61a6ad-9380-48e9-bd7d-e225775d8347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e3a05e-148a-4a5d-b66a-605ae90e91f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc99f29-9ead-484a-ba87-7492e94e0e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3eaca55f-f987-4c33-ab97-eeb29a2ae443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c134aa-e981-4100-a712-512000a08934",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2f9e32-3702-4938-8629-13e20b9b8b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c539884-c2fe-47f4-beeb-da7c05670542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab18ae7b-bdf8-4b1d-ab66-36528d560d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db3494f4-140e-499e-ae43-dbbc87024a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a83281a-89de-4371-9058-f3561cf17622",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "397b6ac1-5cf8-4046-8ebd-a1421226cbbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4369d1-8c1e-4155-9d18-587e8b8fd9b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2edc9fd1-3b60-47ce-a653-1abda63eebe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df5dd585-618b-4e78-89c5-3cb35bc558f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b939994d-9dad-4ba3-9b81-6168b3643c58",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51939f9d-3267-4d57-bf3f-e1e6803ba56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a6d079-67b6-492e-9660-3bdd372255b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a79d06-9bfe-4e48-a502-c7ff4113fd2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a9d890b-e823-40ca-8210-f692add24a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02d8a58-a635-483a-8472-2c68d5aaae51",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc864e9-b690-4c5b-bfaf-0ec9770417e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a7ed00-0cf3-4079-a02c-f7d9b0aebbf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b7c7c7-9d5d-477c-80f0-2c7d91f832ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3e4fd52-d92e-4aa4-9a42-68db00e5368f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8b6aa0-834c-433f-876e-0096b868bb6c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5765ccb-c6cf-4788-b221-fe50d1a9d4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "091eb0b5-28b9-4fee-b759-0ffa9ecb446c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e02492-aa81-4ab3-b3df-7a114c1869b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08a03a72-4117-44ea-b4e1-7706048383ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aa6ed935-accc-40fa-9909-59f193b50eda",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba2a74e4-8416-4e31-ae98-e8260953b636",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcb104b-c31f-4968-91e5-e7725bb6676a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e661b073-6251-4f2f-af32-c9f0a11af149"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78abcdad-aecc-4cbc-b30a-5ae5440e077f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f77fda7a-f6b2-46a0-b7b5-e4d83fe83352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7befd436-41b7-4655-b352-1fcbaf17d422",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6569a3-28e7-4776-942b-8dbe61a969f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c76125b6-357a-4b49-bec9-f502911b7769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3cd128e-992f-405b-a771-5a75d68e8560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48dbfd81-6580-4e54-af10-23655c59c295"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "720c81c0-8455-48a6-a046-1751f03e8f88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9162016c-f969-4963-8ce1-a8a72023e0dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf188f34-6f74-4aba-8602-bbc524213d81",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4699435-48a5-4477-8d6a-819c223f5157"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "74d3b12b-0ec4-4e60-8fd3-3b931a29aca8",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "72f0067a-eb05-4631-aab0-cfef21f7c677"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "16c93e69-7add-42c1-a809-9c94f8f5124d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b5328460-f4e1-4863-9629-213ffafbcffc"
            }
          }
        ]
      },
      {
        "id": "3023159a-e784-4fd2-9882-3182064a815f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ea87b65c-e696-4fb7-aa8a-83c0c094fbfa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7505cad3-6e66-4267-ab06-0c24f47915f0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6536d469-bde8-4c29-bb1b-a53857cc5708",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d18675-dc80-44b0-a04c-2f7c3f9a46ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa9184f-35d3-4ae6-b674-20d0a0d4ee28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1ab3b0-d614-4c52-bffb-d6f94e8fe131",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc5ef15-ff7b-4705-a8dc-ca89e43de640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebc30ee4-c00f-4e3c-8e3c-cf5f37395a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f90cca-4663-4fb9-8619-668eb2a87a25",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ad62c1-62f1-4730-92ac-0918306bed09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f455ff5-6de2-412b-8145-4977324f3bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7021fae-648a-4863-8ef6-521763343cce",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ba4412-e75f-4096-9e20-5e564be4ca8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402e7bc5-0ac9-4eb3-a469-a454e80c175a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd4209d-8fb0-4a08-8d2b-4c25775f913b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c91b3b-e21c-49ae-a5eb-d62ca3fb1c8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "627bbc3d-d8b6-4b8d-9937-379dc24fa886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62a4714-59db-45ad-925c-0cd000644cfa",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527376dd-eecc-4c7d-af88-966429d1c436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd3547b-3c97-4e62-beb3-ad2a42f90489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c7f0fd-375b-4b9b-8641-0de24a64b51e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5181d91a-182b-42d2-b359-25368f8b7648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2aee79f-aea3-43af-becb-4db8dd82fa36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c6e624-eb49-48f3-8d84-2038a1b7ab25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "576fcd37-193d-4510-ad0a-901273eafa13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce08d50-21bf-4049-9992-ab341ea281db",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f3b436-6bda-40d8-a465-fe31b60986f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d7a2b82-dc11-4e97-a399-027de62f4205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fda4d61-ebea-405b-8b1a-f850264cebc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a48f617a-efc1-469e-8634-a857204f99e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf964fd-edcb-468a-97a5-ba20f2f9c3f1",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad228478-03ff-4c7d-a669-700857bebddb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9878993-1f6e-4526-b24e-6588bbcdb6b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84192282-6604-4133-a363-7b96d4466bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517b2063-80e5-4e34-88b2-75b50ecccaaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4950aa8a-f824-468b-9c6d-0e24dd4db7f0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f09b6b-3aa2-406d-9b74-8556b6f5f14b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3a0d5e2-5a60-41fd-9518-f087cdfbc39e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d35c474-17f5-449b-98cd-ef2b32ff251c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a74ef7-3c72-42e3-9338-cc6c4df3fe31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec0f0ec-0440-4ad4-8fe3-615c9af62a09",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70503a63-fd62-4d3d-90a5-d17c3b616159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28476e36-9829-4dae-9d35-c3a727c69083"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56218a3-5094-47e5-934b-bf18b88757cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0efc9b4-7c83-4c31-a3f0-457438d309db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c03865-dcea-4d6f-8837-1a1969f62aaa",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b7c680-fbb0-44ce-a0fa-e5b01970f8f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20f42d4d-494a-47f6-be54-bf6d12b55a61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56523510-077a-452f-83f5-dd466490c2d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9359a39-94c5-4165-9252-587044b3c0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb22f72-8cd0-487f-be61-887f9ce630e3",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca3356f-1cb5-4110-bdd7-8baeaea74828",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c480e3ee-6aab-484c-9cf6-2849fd4ff682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7ff45d-6898-4464-9dbd-be4372e0b8e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c19989-4472-4fba-90bf-233d1f7f9aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e73e4f-8ef3-4c69-a787-e99ce9ece8b7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4222fc92-c8b2-4e2d-a815-5555a9d8bc39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09048cdc-3ee1-42e1-8229-bd547927f8a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7591564-3364-4dee-9389-4eb5901de807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7abd8868-b94b-42e8-bf74-4d0914620e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a012420-de6e-4fc4-9e80-0ed964361213",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0bfb9f-efab-40d0-a381-1ee7b80da813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "743f8a5c-ee3e-4fc5-861a-57c70eba48d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93c36b3-93d5-46b4-bb37-61e06aedb8c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d91065d2-577f-4714-9b85-efafa5c8c6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53814462-951f-4d83-afb1-7f12eab44394",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a12e9c5-fcb6-4fe5-9a79-b2c5c5bb9e8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cf5f50a-7cff-4377-9976-591d56542810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58b0c49-d7e0-451f-b346-cf7231d60225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec09dfc8-f5c6-4ee2-83d9-7a2e7186d1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e3a95f-70e9-44cd-ac19-76e733737ca9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "160aa764-7a85-4f58-8690-e1b7b0bc29a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42b1db51-c8bb-4809-9d18-a90cc0e2ccd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc0e32e-9dd2-44c6-8b92-6b79dbe4e9c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0f837a0-b2eb-46be-9d66-edf49922d12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e9ec9b-fe1e-4085-8555-d422853dd9cc",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873714c1-9292-47dc-b02a-a83d834308fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46772e64-f9f4-40dd-beb0-bfdb849664a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e82951-5e59-473c-aed2-96a6399ce3de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80451946-228f-4119-8eee-b92ec8d5e88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2a13f2-934b-4e1c-98ad-e75cdcbe5b56",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a36fe16-7fe7-46a5-91c8-01f8fe608f94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "893558db-8a4c-419f-bc98-fcd643761f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d2f3d3-ea99-4403-8cf7-1212a2c7d670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4069383-e082-4021-ba27-b42330e8b3e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6582ef47-c68b-43ce-8755-ee7097107a0e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1540ed-b7b0-4374-b2d7-348dcf0956bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e30777-ef2a-439e-9e60-47cc3ce14178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a7db69-c33a-48f4-9630-e03ae047444a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6053c41-cdbd-48c1-b2aa-7e03c47ca609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9061c213-6fa9-40ea-9598-ab1935aaf094",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90e54e4-79ff-47d6-9aa8-b867c19af94b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e46f9a-a807-4280-8e15-ab7ceba6e06d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba01b260-10b5-4024-b52e-b811fa6b57fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f0eadc-dbc4-44e5-9e79-de020cb18b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa45236b-ee4d-43ee-98ff-081cebc7148e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db90c50-7a96-4a11-b30a-09f729751f54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceaacd49-4339-47c5-9804-c377915c147d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cd1f5b-aa47-4213-b168-d6dbf01dfd87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd0ff00-040c-4de0-a9ce-cd7ad8892b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9d383c-7e96-4ef2-af51-63d9d53bf363",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc864405-922c-4eb3-82b0-85fa833b14a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f44428-339c-45b8-9c6e-2d1186f819e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "789344dd-a5b8-4e5b-a4b8-af8f272b4802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c2ded2-a7ca-4425-82cd-8e1dd7878302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce23cb89-bb04-4af4-a4b5-6d6ebb47cf54",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212950bd-b802-4847-b63b-d62b649ffdff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "054fedd9-7a76-453e-aca3-d1058f67bb84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20272cb-6401-4b2d-b11d-f2b2703fc76c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8842d37-2a6e-490e-85ce-930a325ad196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd277b1-c063-40b5-80d6-646005cc5515",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ebeb92b-3dc6-48bb-a962-6bea8e8f639a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f07544d-cea2-49a1-9e26-0d4781696ffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf65256-7fd3-4fc2-83be-aa6596a4a691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e396d0a2-33f1-4eee-885c-f179e0eac9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3dd69a1-4b77-49e1-8b48-3515994d3ba7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d549bc-2e5a-4e5b-b61e-20a1db1511c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61070c32-f3e9-44c7-a558-285b4390fabb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60cdcace-d506-41e4-9b6a-707eba64e42a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "affee2af-3392-4c14-a77d-a6849c91956b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48917462-d4b7-4e99-bb3f-5541ca10a712",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6e99be-10c7-4c2a-bc27-d93b000aa68b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "435acefc-7b11-47b0-8b24-fdf55e855e2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a57271b-b73a-4e28-ace9-45d382b19aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97477afc-3f9b-4ac5-b0c0-148bfb10bf73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf91b65-29db-4c59-9a6c-5d4d9314744a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9998b744-5399-4956-9447-68036597daf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd7303f-f727-4417-9757-de588958f00f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9165b391-152b-460a-9d7c-c6a4ea8e4694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c8a4ff-7409-4708-9018-7aa2db0405dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6599e3a3-6db5-4631-9e4b-cd6fa0facc92",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c904abb-3bba-471a-8004-50ba65f862b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aa43a5c-ebdc-414c-b99e-464cf08561a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19cdf54-2750-4612-a4b6-f8ebdcdb9771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f1ffc7d-c4cd-40cc-bd46-18f8f9ef878d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181b73a2-fc7c-41f9-b1aa-a508243a3352",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60c3359-90ad-45cd-8e99-b27967d17072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2731faa1-53ae-47d8-9a49-0ecbd6da7176"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7a2a6b-7a8b-49e1-88d7-b29662a80e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3be146f2-cc41-4e9b-be50-d112fce9caaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5e799f-13ba-4a8d-9776-dbcd38955ba3",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c51342-f576-4817-9816-7826a340caa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a99dbb4-91d0-46f5-81e1-9ef07734199b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d54de7-bfaf-4dbf-82f9-4e888c2c43cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "964e2c89-6f34-451e-a700-dff4a2d89b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3fcc372-2e22-4881-80c3-a17022b06b21",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81afdeff-3b3e-4703-81dd-d574a3a66126",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca2c0803-85ac-4a03-bdb9-40c18970c79b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1485b1-96c5-4d66-85e6-9306324e8a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ae88cdb-2ad8-4b9a-884b-c519c3709a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80cc448-080a-42c7-99c1-0dc696a24fd7",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6aad60-bedb-4c08-bc3c-7d5ddd77cf44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e96c696e-01ed-4a17-bac8-cc03cd794123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d058c46-1a5e-494d-a986-2d3140bb16c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8201e0b5-ff1f-437d-ba3f-74ea81e18ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ead504-5b3e-44a3-9444-ae02657d10fe",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20692c8-eac0-4d98-b190-68a88cfe4c67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc5d1a14-ecd5-4d82-b008-5fdb2e4ff780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57874b6a-f48c-4d80-8fc0-6c648fdc5ac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c417feb-efc3-4030-a974-811a9ad26c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ffe0ba0-12e4-4fce-be95-d54c593a7f35",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e50e13-a84d-4d72-818e-c663b8472c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c21894d9-cf9a-4f03-b964-63540fdd25d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d63111-f639-408f-b799-953ec15f4a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e91e55-3c0d-4ccb-aca2-b746f079a6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc86737-cd9d-484d-aad5-2ba0b3e6db99",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4307a4bd-1364-4f58-8656-fc9e5211d695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba44c4aa-f036-4b43-b6da-f2dc8a274ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8404932-b345-47ad-9a87-bada779327d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f86e7a5-03e3-4d94-8c74-128ff9819703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9333ee34-419c-4cab-976a-c1a46ce41be2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39998cf2-5dc8-4130-8b67-020b3ce2c9ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b394181-ca25-4349-8d97-0e2506831bfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "846fe6fb-81c9-4a80-bed4-23405bb6072d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e49af735-26d7-4721-aec6-26595046c3bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88334e21-8ef7-4a8d-80c0-aca5337409a1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322e264a-1e95-4835-a6fc-9db4978d79d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00947c94-c152-418a-a493-2d15282eaa78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "207f87c0-3b5b-4b62-bddd-6810c2d84f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e9d05b-35a3-4023-9efd-2234aea12ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bda18c8-cfdc-403b-961b-bb12de2a0d4f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c4a3cb-5f9c-49f9-a918-f76e340ed04d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9bd4d2b-73d6-4744-8fd0-e0d7fdb919c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02cd5135-12c5-4178-9a22-7857fbe20596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "990463cf-6fd3-4fd6-ad90-6dddb0b2bfe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec397576-275c-42d0-9bca-1ebf775e20de",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36796d2-3d59-4bcf-a584-fcda51512fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9bcae0d-b782-4748-9ffd-ce21a8fb3909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba92efa-8eff-46bf-9e2d-434301bd5cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd5b317-d7bf-440d-8251-83fc2a7eb6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8808dbc4-fe93-4ed0-8b18-39145e996fae",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd521f8-cf1d-4ee7-9dff-596dfa78b56b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d824a7bb-9b91-49b6-bacb-8bb5476558e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9235802d-569b-4de0-b227-3688861ac07a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91ddb747-4001-4f7b-b7a4-3244d94973a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5304dc67-cd69-4def-9a77-efe8054f457e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83fe20a-f70a-4c6c-830e-3ceb6ac77758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf6577b-7ec2-4f0e-8626-e39bb1e284a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb63e9b-07dc-4057-b8f6-a02bd25af66c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9af4fd0-f680-468f-b2f1-036029a39170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ca064b-50aa-448c-9452-06f1450ce4ca",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd6d2cd-c676-47d6-8381-64899b2e49df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30418e04-76f8-4b65-80ec-07b1015918c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf0ccc5-fb65-4c30-83d6-1f737cbd1a1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f90bd011-722f-4591-b642-0e30b55e44ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902a07f3-a005-4bff-9806-5fda98a4349c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17bd212f-015e-4ba7-b010-17877a0b4afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caebcc68-4ec9-47c1-998a-d154e255000c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d3e4fb-e223-462a-8b61-52b54f0eecbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd30a49-7629-4a60-ad5f-10e8523dc6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0c0c6e-f061-4ff8-963f-9649876e728d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f668628-accc-4224-91fd-222589f5c899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfbad442-dba2-4afb-8210-4531fb66650b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf40127a-64e4-4b5b-8e6b-33646c1fc9c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3edd31a1-e915-41c8-a252-4589f7d9327a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea5f04e-53b3-4ab7-8a0d-bdd0a7217493",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97060aef-28ab-4b80-9655-1fb72571ab11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15cf1097-bcc9-4d27-b650-0667fd29cc4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5596d22-809d-4623-a2af-eba7c594b119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6428aa82-d6d2-4771-99fb-bd0938febb9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c86941-e158-4984-902d-4dab2b599805",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a318ff-f6fa-4a6a-bb0d-99f1dfe63683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea9ba06e-7480-47f6-b233-a629a377fa26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60eaf889-f0fe-413b-84d4-2133e712c11c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54ef08a-29dc-4222-940b-4206f84f79e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef5f2e4-01c2-4715-bfc6-b9c2628e2fb2",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176269e3-0601-47e4-8b9a-2266f93a4c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f3c662a-1c76-40d2-924e-f45664046c3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "144007c5-0d8e-42a6-9092-6dc7ede9980e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5bb1b64-ea4b-4c5e-8b80-ddcb9ae2d7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe93769-fa70-4bcc-a6a6-ca79bc93088f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f268b1-6114-4294-aa2d-df40abc18d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d7ebcf5-40e0-4560-88c6-2a4f6284106b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e25f0b3-14f1-46bd-9df5-538c95149314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59240d4d-c44c-4ad2-bd3a-0ef1afaab123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351f2756-7f16-45e2-a4b7-da68c178a328",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e649a4f-1526-419f-862d-8f5c567d6efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ceee525-2a84-4339-b366-e00918a6b000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "077e2c58-f524-4ced-a6af-abb10dc863f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154452ae-8d28-4817-a187-d00231f35d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb6a81c-5022-4d51-98dc-bc16bd2b2e6f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff8c92b9-9a7a-4463-80c7-ef5e5a0dbaad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b05b542-8c83-4604-acff-4df712d93278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "887b52a2-0694-4e38-a326-6a7d2814255b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41b19cbc-9ea6-4caf-a46f-4b56d22b3c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919a134f-2c68-4c3d-9aad-eb58e79c2f11",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3640cdae-144c-4039-a3aa-ec09ff3b9d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3cd1c2b-e975-4478-887f-7352c6da5021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37697a44-39ba-4141-81ff-30c1bacaebfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f08b8f1a-3596-490e-a585-08f3c7f14a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c6eee2-f69f-4ee1-85a2-c09751661674",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22558767-fad2-4758-a052-c8732ab933fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7126ad80-5561-46ed-a0b1-33592a63f957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e32ff6-7fce-4287-841e-72ad712b66b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5865d33b-4519-4f3a-a89b-9053ef1e8e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabf128f-1af9-43e3-a798-5bf912bcb512",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573bf912-f356-444d-b3ac-719d11b2fe50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f02412f8-595b-40d8-b06e-d35d651f81fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ac3145-7a4b-40d9-9f56-59f4947e2275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab819063-110f-4d3a-a814-94bb9c7389e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09dee563-af86-458e-99c7-4f6368b24b1a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e7eac8-c981-4768-a53b-513c538514e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df067883-6c17-4cdd-8c26-235d2ac1f996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e187680c-913e-4d52-b44e-f631159038df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "002344db-ba01-4b72-9212-876167453028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0eb381-3f99-46ae-b16e-7b8212644676",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d383430-490b-4eaa-b533-c3f5f52e5814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1326e536-052e-4f10-a772-07a86e993cd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbda6a5-fe13-4c3e-a6b0-4645dfa80808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b05062c5-4b94-4ceb-9a81-f22dd2191558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d3363b-1bf6-44cb-bcca-09fbe2d87211",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e605bf2c-e87b-4b59-b386-3fb234df12ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b2b4b9-bc6b-4892-8699-f42681446cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1648aa2d-4623-48ac-835a-7caad545c6e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc22a3e3-cad8-4f6f-a151-4b91231f593e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786533f5-85a5-4ec8-806e-c7a1af7863bf",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3695ed2d-7860-4fd8-a0b5-c85605eacad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceef132b-b12e-42b2-8eee-00880e33172b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "948ba489-14a9-4126-bb0d-b95729782c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffdfccba-4850-4583-940c-fb00f1f99f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118554b5-cc5e-4c6d-87df-d2aeb592eb63",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917b85c5-b77c-454b-afdb-da38dac53a55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d15f9b44-2da6-4bf6-9932-c1e48b60d15d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b4f359-3189-4e82-86fd-c533e067c084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a76dd50-3fde-434a-bcbd-b6c7af055210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58bb2193-620f-48b6-a3f1-aba6a54d1451",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8267519b-74a6-463c-8d6d-525772206097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "932f0e33-89aa-4e59-b690-75c93b528532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c595aa7-2d63-4ed4-ba78-35140af6193a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b409aa-e29b-4617-8a6d-227a7e7e28fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfdcf2f-afeb-405e-8f39-d89d15291e18",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece68808-d99c-4df4-a8ef-11cd8ffb4b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "730860a3-e49e-4e3d-9562-594755aa62f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e547bc6-a190-41e0-8e13-e50f8a9e4a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f013afa-47e2-4a6b-a06f-46fd11f89bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b0cc06-0ef0-4d7c-9ec2-3866dde9d80c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef120ff4-46eb-4eb0-8f4d-c13c57e34878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b32597-c09f-4b4b-8352-4df57889ff2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be87ab59-92ce-4c87-bd53-629de67cd1f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5110c0-f5fb-459a-a579-ef0b4b01bcd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb3fcb6-31d5-4e25-8887-3f10e4870fc3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28665c4f-c81e-42af-bdb7-b4c6c6060ccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e1afd8-1bce-4fa5-936e-ea732db6d430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec1755e-893a-4885-84db-467bf6ea1ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48cf6417-898d-4bb0-94f0-356be386c025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e5225d-45b6-4f79-ae51-4aea912d4f99",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c4eccc-bfc7-42b2-b2db-6320c6d741fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5f76bfa-7949-4744-802d-b6c85ba56104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f642bb-33f5-45a0-a9a2-7f7de8fd321f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a34517cf-0dcf-43d8-9c2d-7db38cbd11b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bff734-ca38-4b7f-ae00-db756caed2b7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f39c2484-03f3-430d-9485-45823147a1f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "021daad0-3150-4b70-a5b4-fce9840cf1c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "189134f9-2710-44ca-bcda-937f31f395bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c21cb96-9962-41fa-acf3-c3ce6409c191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51dd0517-9aa0-4ac4-867a-399ac71e0734",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36be973-a71b-4ce1-a906-f321eae5e581",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9325a44e-b695-4116-8424-78b8f204e0c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2093bf04-7684-4529-973c-424dc6c7cfd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "668569b5-85cf-4386-86d6-5d44b284c1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5742aa-3c8b-4e9d-8831-3a0b7d0354e4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d516c6bc-d259-4d19-973e-a7dce00f1367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "defb9c4a-02f4-4090-96c4-2763b320bb2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2326bd49-e3b2-49cf-aff8-e39e9b53fd51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed3b5d6f-32cb-4f91-9c99-07ff6381fbca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd7dcc5-fd01-4118-aeb1-3639343a7803",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ec04e2-72c7-4f19-964d-889ad6f620fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a181c5c8-049f-4850-a574-fdbe6bc227b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ce9fef-429d-48f2-95c4-c46f41cd6213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa09bd30-fa69-4a4f-9a80-481f31489d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7adc4f-dd55-46fd-9180-6cc8edc60c25",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237329c7-9cb6-43b8-aa3a-a29f24bff09e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e3495c2-a34e-400d-a47f-ddbebb66b6e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a04d0d-9227-4439-ab38-71e362af6a7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4953b028-f648-4f5a-bd0d-7425c25bb7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c01567-04a5-4fa3-87bc-dae881186814",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9939587e-6b13-4ab5-b753-d0963a1827cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0893fe7c-9996-4eab-b5cd-e8bacfad0d36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4d56bd-6596-4969-b999-c4969ffb4acb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73b6439c-620f-4aac-8629-bb04a4f264c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a1bc5bc-c3d4-439c-8809-5bea014dbd78",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3988d5-fe16-4e4c-a85a-50e017cd647d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6358b76a-01a2-412b-a6dd-de401321cfe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "930b9adf-bece-4551-a0e3-bae3fc4402b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d02071bd-f707-41a2-9c99-38a8727d2523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2486058-2a7b-4f10-94f4-9cb8bcf20c7d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1b9da2-855f-42aa-bc0b-ff6506795515",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ba330aa-b1e8-462b-9ad0-d30ad169eaf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1079aa3-00a6-4bd3-82a4-7919dcda5aba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebceec78-973f-4f9d-a3a3-cc9bba44163f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdbc71b-edba-4278-8ab7-08791d29f872",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbeb268-34b3-43f8-9cd0-6eb97b7fb024",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca96180e-bfb0-4d84-a125-f17333143863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "764d1fcf-3a55-494f-9c16-1e1d04a799ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5106827d-6335-4688-a833-2d4d7d7f4ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23ca391-7233-4fa6-aece-9dc3be67c477",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee6872f-13b9-41e3-a5f1-88420266c722",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee17085e-8669-4fb5-a343-074222d7b814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7d94c7-83e3-40c4-8642-b60a34e5168c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af793883-70bf-48a3-8c0c-07d003e73624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25f3dcb-a6f9-4c99-b3fe-f7f38c49954a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6acbb027-9cbd-456b-b797-9563c18e2101",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd385bd9-2048-408c-a424-ce35f4dff135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a5d52c-f94d-46a5-a60a-e7f2bbf3ba77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d172ac8-8d59-4824-930e-607b6cd22ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91f3178-2829-4bfc-bf54-73d7cbb8a4a4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0bbaf9-c676-468d-b9a4-c020dc6c4d58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c55db977-dee6-4c98-b065-b96afa98d498"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca15f55f-396d-4e7e-be37-ec7cedc0bc7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0936312-324f-452d-a047-7a35a8069892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4caa0f0c-09b4-4c5d-a86f-c99991b71e41",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5456e2a-9fe7-4ad4-a70b-16ac511865cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92d4c431-36e7-4b9c-bb78-0dfe4d281f15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "749652b9-cc87-4a39-b169-4280f3611001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e67c6e0-0c42-4798-857b-23eacc959f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772a1a4d-804d-44a3-9368-30a447523c1e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9463ec42-9614-4ef8-abf0-7e1ceb6b3e06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "407c414e-9faf-4ca0-a818-1fc1f28ba9d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19dd991-bc16-4908-8153-78d6e9ed3882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d02a55c8-24fc-475e-8158-c0fd53d837dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09157ef7-5e26-4c6b-90ce-be8f1abfd357",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1b6779-0898-4345-8bbe-cd000c6138dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1049e9a3-c033-4828-820e-8da31adfbc01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd4cbf7-a8d9-4d67-ae97-5e3f2831069e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a92860-d1ff-4d23-b698-13473d76e17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbba8f61-20be-4c33-8a31-45285bd45af1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d878d5cc-f690-49f2-89f6-51890e92623c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07f6f5dc-bb1d-4856-a952-b5e9f37359b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97be521b-6932-462d-9188-eabb1687bf15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed1ae88-4b5f-46a5-9fb7-8857fb70ff02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d750b7-8c2a-473e-9e07-c9af0b0dab95",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5fdc28-a16d-4147-a873-fbb5ab0acbb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e11fed1-f1db-479b-8209-f3380e3b9dc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5361aec7-4836-42f2-b139-5c1547e0a4d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0526495f-23ec-464f-9df0-d2314100a25b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3624fe4d-1524-446c-82cf-4914094e3a1e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0f7444-b5b4-47c8-b1dd-0ca06d1e5cbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cf39f23-5228-4c5b-8602-5b8b222ebd56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff39989-3cc6-4d65-9c68-69a11bea9c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "695b407d-6234-4991-a9d8-7f119e4dbfb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a69a5bb-2ff3-4cbf-b6c0-888e5111fb29",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2c4220-ff04-43b2-b710-f7e2ed385f94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74ac5419-9155-4ce8-8d78-b8dd673498e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a958fb36-4fb2-4255-bb70-26bc8d80a50b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57804c35-f86f-44db-b44b-28b733aadc7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac037d0-fc92-4224-9f25-170a363abb0b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f86d16f6-cf10-429d-8ec7-953350a11392",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "139a24f7-75fc-4a8e-8fd0-a05b9a7fe622"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22319745-644f-4d6e-8b95-e33e83c8cc2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15d86e56-99bc-43dd-94a0-06495d280229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe2d7d6-5441-4ca5-8d81-6e1a5b2647c7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e520a82f-7f6a-4433-8254-9b189b190c1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c68d122-61dc-4597-ab50-2b5b9d0ec4fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d75159-b035-4073-b31a-789999c34b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b93545-5137-4c0e-952f-3f2582f871bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2341751-23bd-4f9c-b258-c41affc0371f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989db621-dff9-4d83-a97f-fd1ce565c0b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55c51b80-83b7-4a58-a43b-99e06d56337b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61b6818-5b46-43e2-971d-0fae9bdae3a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff316741-f66a-400e-bb4d-1830f0ed0e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec41948-eb80-4dfc-8ac3-0694a92e6496",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c321fe-dbfc-46be-a500-d17a1b8eb606",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c97f94e-2957-4c62-8c5e-80f829fb7a86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2567b8-ccac-466a-97b0-671b6467df6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28145911-c04c-4f79-b2f8-a4e592fd27c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb267190-f115-4539-a008-092fd183f846",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c53081-50c3-4029-b553-e9639bb22f00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b5a3f67-2576-44e2-a993-f0014eeef60d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b415305c-4bd4-40d2-a520-5561bda317f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ab57af-32e1-4f29-a508-ef5966af6633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f837065e-89da-4565-b05c-06782ccb31b3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbc481d-5b1c-47a1-8240-b2c128039d83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28e122ba-aaa1-4f0c-bbfc-46da84457906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46db1135-1bd8-40ae-83a9-048d259c73af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f088425c-bd56-4a8e-a7e7-1e354fc5f450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ff973c-f94c-4abe-99da-2e4aee12f34e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70cbda4b-d2c1-4218-8d91-cdec3440dfff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f279e5c1-eb31-4d63-8234-226254fedc3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0e899c-fb5b-40a9-8fe6-5bc206ea4e5c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c6589e-a0e5-4f7a-a604-342523e55ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4175d664-26a5-45d6-85f3-7d106b9260bb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db38a50-542c-44c7-9834-2457bbd70f4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cd97670-bf9f-4b46-bd5f-4597066ccd49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08aff3e-27d2-4132-893c-e71a3edad552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "049349c9-3fee-470f-a4e1-d96fb150f43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5ccb6f-2555-4ec3-baa5-b70baa7beaee",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbeedf4e-7139-4f2e-954f-7585bd333865",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43ae390b-13e5-4931-bc25-e9f160d9f4a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9fb945-2ca4-4ee2-92cc-6ed1f6baeec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad5cc8f-53a6-4f90-9a4f-a59f9d954931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ba7332-1a10-4c1b-a12a-6514176ae043",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020a9aac-bbf6-45b7-8987-c444b497700c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c6e2b03-2b5c-460c-a9ae-64a918131599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbebaa2a-4823-4aab-bb6d-18095163629a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3fe1fa4-3b31-4e65-8c5d-758c6279462e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b726ddee-6ac8-46d5-8ce1-ebe989e82e67",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869f9cef-2e80-4695-8a40-794eda91c0a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08486f80-302c-4281-89b5-67829737aa03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee08daf-c31d-4ca8-a500-22e07e9a97c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eba9f97-8aee-4af6-9f3f-685d77af01c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de13993-11d4-45ea-a966-d05b7376ece8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf4bcd6-65a8-4bed-9604-1c28cba65f62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53de9944-a23d-4ece-9561-e496e398b68f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b021850c-9c19-4ef4-834c-39098e8bf92d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec7dd79c-d92c-4024-9aad-bdc6d96bb086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5bb91f7-db84-4b61-81c6-ed76b4c0c46b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80130ec5-ac80-45a1-a0b8-59c3b70cee7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4599048a-ed6f-4d64-aa89-e6b0cc16015d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec53d0a1-90b4-4e61-854f-2f88c2955f5c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e1b125-9c02-40b5-838f-b1dc1722f2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4723d05d-2546-4415-b4f9-23bd68549de0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9dbd7ca-5a22-40be-bb84-e868d46e5d6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "744ccd6b-3174-4489-bbbc-f24ca734bf92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ef5da4-fc93-44db-ab0e-6344192f6dbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cab4c611-6d19-4159-82bc-edbea40ee016"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0f0e4c8-c491-4608-acef-f29e48bf813e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "782b0257-dbde-4a5d-a2ed-477df5ac14c5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a863431-e847-4462-962e-62a0da005ea8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2fae2d7b-1433-49c2-aa9a-fffddec8b777"
                    }
                  }
                ]
              },
              {
                "id": "a5292cc9-3204-44f4-8b01-7ea049c9002c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dcc9d627-05fc-4c16-877d-bab5c54e5c3c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bca8a14-610a-41b1-bf82-9eb569ef0872",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3066d7f0-9e36-4404-be12-8bdf8f7749bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d415299-723d-46b3-bd1c-f1083b58cac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "261545c3-5478-4ad2-af64-4ca1a08c7a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff32198-9f76-46fd-94a8-95a6dd9fda2a",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67980079-37a8-46e9-b6cf-0021ea14b8a7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0ae58ac7-ec10-4349-b451-755c6dc4b893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f5525e-ee02-4951-a405-b45142fbd398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6697c604-da98-4975-814b-df8eec69a3aa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee1f15e3-e667-4fe0-ade3-1eedbe088c64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1160180a-28b6-4d89-a5d9-042be2f7c939"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc4cb161-800a-476d-8746-672a33c706bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "096600de-4cfa-4908-bff5-ccb864887417"
                    }
                  }
                ]
              },
              {
                "id": "c3dac6b6-4802-460c-8436-2c0a1d5bb4c3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "48f822c6-c6c1-4b30-8256-238d8c1643f7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3179b13-9218-4c29-817e-4a0240908c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "aa8dd7ff-cd38-4240-a2c3-27941a0c3b63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a8eecd-bda7-47b6-8c0b-69cca741b280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "badf1727-be72-497b-9bc7-482d6d0f0912"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cd1c1725-b70d-4868-97e7-9a1dc5a9acc4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eb34d591-9c96-4c27-8d18-1efead6cf53b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "213372f3-56aa-4ff8-a1b9-0e2f2488ff4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "44b4f672-c229-48f8-b612-8cc0fa1e094a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad7a03c2-b07c-46f5-a49e-204dce33c3db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8359c98f-f252-42a8-9301-cfb3df7c0928"
                    }
                  }
                ]
              },
              {
                "id": "f333a7ae-8542-41a2-b814-b06173d75fa0",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7451a7e5-8714-4e6b-b119-956116c3d828",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8f0f236b-ce8d-4928-b9b8-2cd23408c636"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54b361d7-c2f0-41e3-b805-658e801d11db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74d67df4-da74-431e-b964-57ea11a6f1a7"
                    }
                  }
                ]
              },
              {
                "id": "081ca6c4-46f0-4183-b8af-fc5160297ac6",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e8374a2-fbaa-47c3-9fe4-5df90c23a9e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a37b1aa2-cb77-4c58-a2a7-3ce5e6fefc4e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65d377c7-eabc-40cc-a5be-fa5b2613dbfa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "693e1ed6-2883-4b28-84d1-ce79a3599bc7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48bd8ca2-5014-44c9-8d68-f87f63b84e46",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "80a8cab6-988a-459e-b9c6-780dd2df69c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8cbcbc8-0207-4768-ab06-3d6e4f080e8e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "875bc56b-2780-477c-8833-4940a600c7e1"
            }
          }
        ]
      },
      {
        "id": "65adcd6b-6518-4d2d-a529-640870db4cef",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "76fd0dda-4f74-4df4-a3e0-aa1ed8e4271e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b413a908-03d5-4a48-9565-df444da96409",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3b9a813-d0ae-4887-b577-e3adf2dc100b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eae0cd4-2eb9-4a04-90e1-a68b21feefbd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cb890417-a619-46e5-829b-12a0469ff2b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd66d43-7239-4363-9e06-2b31bc7af1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb17164a-c17d-4f4e-a377-f70beeed57b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd122be4-2883-40ab-9aa9-6744e2e55a87",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f03e20-8194-4409-84b7-92f710c9565b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2c765518-6624-4e39-9d71-7d5a801c35ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44f5627-8a31-42ca-9af4-575bb48d5a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d4d0119-4e60-400e-83d4-41ee5c2bad02"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7ef3f76-987f-49e5-88e1-09b1ad5236a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "065095e0-ac81-4f6c-9d9c-6389e188be2f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "daf53525-c7d9-40de-b951-521de45df2f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7823960c-50cc-4f74-aae8-9c3ce71bf059"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0f794a5-8bf5-490e-8f80-a278037aa850",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "de3b76e3-581d-4d8c-835d-898a097d00e7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e109c616-3d20-4ec2-a7be-b5d1d487ffbc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d524d75-b179-49b8-9d21-c31054a63b3d"
            }
          }
        ]
      },
      {
        "id": "fb582fe9-3088-4902-b87c-f4ce20b1c6ca",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9f6b2bb5-e053-4126-b571-7b822e9ecf68",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8903e655-96a8-424d-8ca6-a4cb7490ec07",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bf2cfa21-df99-4648-a8d6-ed97225137a3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd645411-e010-4ccf-93e0-5c6a96a094ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1e915666-fb88-4e2f-ad86-1f4037a36bcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "692e395a-27bc-4b13-a995-8bbfbd9bee3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7422a765-0afd-49ef-a501-679fdcd6a902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3520a6c1-cb93-4363-bff5-87b792273ab8",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac7ca1b-0f47-4345-89fe-1895e9eaba6a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0b951030-c550-4d07-89d8-8c23b512fd42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "977a32de-c2de-46e5-9652-c0274f985ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28c94862-723d-466e-bb84-bc2283859536"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "339fcd8c-10ba-4c52-8229-747fd717b652",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f17bfb0-0043-439e-8e62-5d7389b4c64e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a355628-4210-42da-9821-8785cdf2e63d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e56bb90-f2cc-46f8-bd50-a978c9514182"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "36f06652-6387-4ffa-b1e3-8c7f4dc9cd19",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "44a4cf29-b2f1-448a-9767-3d856a1db5d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6624cb00-5bca-4572-b8e4-9f51354a2805",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "50d9c612-5e57-431a-900b-7df39ff253ec"
            }
          }
        ]
      },
      {
        "id": "bbaca9d2-aae4-45c3-9cdc-2a7bb825a6a4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8f5e7f93-bcf7-49d6-8d26-4f99a2ec89fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b05d1aaf-336d-421e-b5b5-ec435c78756e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b29b08fe-4df3-43cf-9f75-4273d2b5fce5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae8dd4d-c15b-4cc7-b806-997110ab112e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ac3203fa-8418-451c-bd5e-2c165ba18740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7d60a0-4e8c-4543-a61a-7545b3993cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5d19f21-376f-4257-b6fe-f4ad8bcf2bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02de5358-6020-4310-9fa0-96a83f15747c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7cc7b05-cdcc-4442-be23-d90e6fc4f56f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4dda4a0f-82e7-4b86-9098-d92bb87da203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c67ccb-f12c-45fa-a049-ae66a1daf630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fae587e5-f00e-4ab6-8a07-cb91863a5b36"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a34b9f13-8d54-4853-a094-2b21dd9d6880",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b255d78-9284-4411-be0b-38c051b6defd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "238bd699-a6f6-4c0a-8b4f-ddd4e46e3048",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5c9e624-9ad1-43e8-905e-469ddcf9073d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "964faa38-86f5-4e94-a3e5-19b192b403f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3774a752-6093-4796-92b4-074a9601bbe9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "675a22d7-869a-4958-8292-de837e51d698",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "60fed743-961f-4b3b-ac48-4886e9093c66"
            }
          }
        ]
      },
      {
        "id": "b1fe9adf-9e29-4d4b-bd66-9f50e3003dfe",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c2ec6e4-6cfa-48aa-91fe-89e20a221570",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d50152bd-3a94-41ac-afdd-eb82f9a1abf5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ad12f10f-0723-4c05-96e0-e409c1efe291",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b6f2cb56-b930-423e-945f-05a0367f5737",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8aa0a598-756e-4c14-aa4d-f7ab9eb3a7e7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 98.86590038314176,
      "responseMin": 18,
      "responseMax": 1052,
      "responseSd": 130.42506849677525,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1670373567454,
      "completed": 1670373604463
    },
    "executions": [
      {
        "id": "a7fb423d-e2e5-48b4-b307-4df8d9885f25",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "28480ced-4b5b-40d9-8cdc-b04320c5e7f0",
          "httpRequestId": "0f254b67-fcee-4647-8174-9261e64dd70d"
        },
        "item": {
          "id": "a7fb423d-e2e5-48b4-b307-4df8d9885f25",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d33be090-9311-4264-bd74-bd791840eb23",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 0
        }
      },
      {
        "id": "562cb98d-8118-4523-ab25-1755b92ed4d3",
        "cursor": {
          "ref": "55428647-96ab-4bb6-86eb-2893a2661946",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "81fda6bb-6202-410f-8418-988f92fd2672"
        },
        "item": {
          "id": "562cb98d-8118-4523-ab25-1755b92ed4d3",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "dba75473-a796-45c4-90b2-ad72a5a7f258",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "6f3a2899-e130-47d7-95d3-4e21f425ec74",
        "cursor": {
          "ref": "120b46c2-496f-4772-90c3-9eb307f578eb",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e5568ba7-a7f4-448c-bb8a-3a0c92727a71"
        },
        "item": {
          "id": "6f3a2899-e130-47d7-95d3-4e21f425ec74",
          "name": "did_json"
        },
        "response": {
          "id": "5845f954-85a7-4634-bd35-52594aceaa43",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa1e30a6-ef48-4821-be91-3c476f3fa3af",
        "cursor": {
          "ref": "a860a67c-6772-43d1-80ec-a6ce69bc98e0",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "34610cd9-8394-48de-8856-142a13805132"
        },
        "item": {
          "id": "aa1e30a6-ef48-4821-be91-3c476f3fa3af",
          "name": "did:invalid"
        },
        "response": {
          "id": "ae048a5c-7fc5-4647-a04f-34d86c90e782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa1e30a6-ef48-4821-be91-3c476f3fa3af",
        "cursor": {
          "ref": "a860a67c-6772-43d1-80ec-a6ce69bc98e0",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "34610cd9-8394-48de-8856-142a13805132"
        },
        "item": {
          "id": "aa1e30a6-ef48-4821-be91-3c476f3fa3af",
          "name": "did:invalid"
        },
        "response": {
          "id": "ae048a5c-7fc5-4647-a04f-34d86c90e782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf37642d-d4dc-4e8c-8751-5338b2df95d7",
        "cursor": {
          "ref": "4862cdb7-ab08-4ace-a424-4b9c0cd1ee98",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1fcd0680-136f-448a-ba83-635a6f3deb49"
        },
        "item": {
          "id": "bf37642d-d4dc-4e8c-8751-5338b2df95d7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "dac7ed67-04ba-4c59-9b92-53ed59c52a19",
          "status": "Not Found",
          "code": 404,
          "responseTime": 151,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd22745-c4fd-456e-b9b3-22af06b05cb4",
        "cursor": {
          "ref": "af2019b1-d986-4e6b-bc4a-6f8833671572",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "537406df-3d95-47f2-8b3f-2ac114a07871"
        },
        "item": {
          "id": "1fd22745-c4fd-456e-b9b3-22af06b05cb4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f9639e46-2dab-4ce5-890c-54568293ed07",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31422fa-dd51-41a5-b6e2-746aa17a1491",
        "cursor": {
          "ref": "143906d8-2395-4539-a2a0-de0257935282",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "86631866-e7f7-4fe2-8e32-4f44734b35c2"
        },
        "item": {
          "id": "b31422fa-dd51-41a5-b6e2-746aa17a1491",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cf194430-ebc6-4e3b-851c-fc770fa2d6fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c1ef11-1d0c-443b-953e-b04c6dbb1f14",
        "cursor": {
          "ref": "f90c5548-a762-4d8f-bbf8-5a093cc21b04",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5fd9ca87-63b6-4059-b043-350cd69900b6"
        },
        "item": {
          "id": "17c1ef11-1d0c-443b-953e-b04c6dbb1f14",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a186c513-cd67-4dbb-9f10-c616a0af19b1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c1ef11-1d0c-443b-953e-b04c6dbb1f14",
        "cursor": {
          "ref": "f90c5548-a762-4d8f-bbf8-5a093cc21b04",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5fd9ca87-63b6-4059-b043-350cd69900b6"
        },
        "item": {
          "id": "17c1ef11-1d0c-443b-953e-b04c6dbb1f14",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a186c513-cd67-4dbb-9f10-c616a0af19b1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26aac7bf-3987-4896-8732-1bb3e6f229b9",
        "cursor": {
          "ref": "e99f62b1-e9b4-4078-bb2d-e90c2556bdf5",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d296ec28-534a-4a3b-af5f-95ed5d847805"
        },
        "item": {
          "id": "26aac7bf-3987-4896-8732-1bb3e6f229b9",
          "name": "identifiers"
        },
        "response": {
          "id": "81cb2910-1b67-4ad3-85a5-b9eb1713cf5b",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef10fd88-579a-4572-9ec6-c30e66ffd724",
        "cursor": {
          "ref": "9073ccb0-405b-4320-9b2c-0e9bfb81b134",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c815395b-7a41-4719-a936-604d04e38134"
        },
        "item": {
          "id": "ef10fd88-579a-4572-9ec6-c30e66ffd724",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7c7bbc0b-0581-4a55-8227-eebe1bb88e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef10fd88-579a-4572-9ec6-c30e66ffd724",
        "cursor": {
          "ref": "9073ccb0-405b-4320-9b2c-0e9bfb81b134",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c815395b-7a41-4719-a936-604d04e38134"
        },
        "item": {
          "id": "ef10fd88-579a-4572-9ec6-c30e66ffd724",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7c7bbc0b-0581-4a55-8227-eebe1bb88e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15877371-2d83-42bb-a8c3-8b05e9d4b68f",
        "cursor": {
          "ref": "8fbd2d80-e1b8-476d-b3c4-4d35a0f73214",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4ed9d57d-e663-4997-8b8e-1a41d81011b2"
        },
        "item": {
          "id": "15877371-2d83-42bb-a8c3-8b05e9d4b68f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3e4fde75-2c49-4600-965f-8dbcc2d9247f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c50eb6-6bca-444a-8a12-dc28e4e9321a",
        "cursor": {
          "ref": "15bd91f4-5b6f-44ee-a7f9-1b9e22f980f1",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "80a569d6-6b80-4854-9013-ab8ad7c5ecfa"
        },
        "item": {
          "id": "47c50eb6-6bca-444a-8a12-dc28e4e9321a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "55250479-08f6-40dd-bf76-0e6acfea2e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0b46c0-70ea-49b9-b976-7e3afed38372",
        "cursor": {
          "ref": "61b6e24e-7cc5-4a49-97d0-9188092d9669",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fb080c97-06fd-400a-aea0-feace301e4e9"
        },
        "item": {
          "id": "5e0b46c0-70ea-49b9-b976-7e3afed38372",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "68f3edfd-1b13-4488-8caf-bce55aec3459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef15682-6a89-4b53-a70d-5d3a0a70bd87",
        "cursor": {
          "ref": "08d64690-77d7-48f3-a051-1883da3f2060",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8a00662b-5e26-4185-adff-a2279c389a78"
        },
        "item": {
          "id": "aef15682-6a89-4b53-a70d-5d3a0a70bd87",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "da274c28-dea0-4e2c-b73d-01c1fbe51afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6092b6-c28c-4f33-a2ac-222ffb95b72a",
        "cursor": {
          "ref": "cc0866f3-4a93-44ea-92f1-889de25de8d8",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7d08c1c8-7eeb-48aa-80f4-f3af85033c22"
        },
        "item": {
          "id": "ea6092b6-c28c-4f33-a2ac-222ffb95b72a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9ce0c5d1-aeae-4873-a2ce-51e178a9766e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b0fb099-05bd-4a75-b95f-35886992d6b7",
        "cursor": {
          "ref": "269874d4-48bb-4306-bf2c-e3cf6176f6be",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0132ffdb-0cb2-46d0-b5da-4405a17ebe80"
        },
        "item": {
          "id": "7b0fb099-05bd-4a75-b95f-35886992d6b7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "33d1e2f1-869c-43d5-a5eb-6d6ca4bb230a",
          "status": "Created",
          "code": 201,
          "responseTime": 1052,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "6a3b97b1-458b-4489-a6d4-e17f0db80808",
        "cursor": {
          "ref": "f280c1d2-42ea-418a-b15c-63aefcc86896",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a336625a-a464-45d0-b984-a45e0971099a"
        },
        "item": {
          "id": "6a3b97b1-458b-4489-a6d4-e17f0db80808",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "25f03131-d6fe-49a4-bc96-d7969c537290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946c03e4-1c20-452a-b547-a1b750df62a7",
        "cursor": {
          "ref": "e88e5ab5-542d-45b9-b867-10b4e87758c0",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ad02588d-3991-434e-b426-5147c593a30f"
        },
        "item": {
          "id": "946c03e4-1c20-452a-b547-a1b750df62a7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3d374374-7a83-4ec2-9a2b-3b1be1e98fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ede2f69-fc66-4bed-964a-604fa8c773ee",
        "cursor": {
          "ref": "2bc74119-ec15-4f84-b32e-859fb62b7d21",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9ea3e7b3-ee57-4c4b-b523-1adcb3772d21"
        },
        "item": {
          "id": "8ede2f69-fc66-4bed-964a-604fa8c773ee",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "63ebf490-aae3-434e-a824-c0fd36813c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5340c4b3-21b6-4ccf-a250-b50838a4854d",
        "cursor": {
          "ref": "3ed221fe-d67e-431d-bce6-67708178ac8a",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a1c5d359-0e14-4622-b133-a71b2efa2c0a"
        },
        "item": {
          "id": "5340c4b3-21b6-4ccf-a250-b50838a4854d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "29a63431-9cc1-4988-be13-b5a0a573a3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e82c0d5-238c-42c5-8639-eff8d63d5405",
        "cursor": {
          "ref": "775d725e-b06a-491f-b33c-fda2f8db7b33",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "11a31f74-3b93-417a-a9ae-f9ed3f6c9413"
        },
        "item": {
          "id": "1e82c0d5-238c-42c5-8639-eff8d63d5405",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4ede8c88-f980-4012-b71f-0da39e8a7a80",
          "status": "Created",
          "code": 201,
          "responseTime": 387,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "79c0d0de-b3c0-4ead-b8ec-b9f07807a32c",
        "cursor": {
          "ref": "19ce3e6b-f30e-4153-b22b-55a7144923a7",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6d1c0bb4-d3ab-4281-b7cf-9fa1d4e7b622"
        },
        "item": {
          "id": "79c0d0de-b3c0-4ead-b8ec-b9f07807a32c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "18e9e89c-b76d-4eeb-b6d3-77a47d9cd1b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9e032a-9ba5-46bd-9c23-4dea832d6345",
        "cursor": {
          "ref": "f7ebf334-b82b-4134-a7a6-78cbc72ba6d8",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5e615028-8e1b-4a0e-8b39-344508bf1787"
        },
        "item": {
          "id": "1f9e032a-9ba5-46bd-9c23-4dea832d6345",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "cfbcf849-89a9-40e4-85b9-1290006d151a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017d419d-4896-46b2-b550-c48922b244e3",
        "cursor": {
          "ref": "ae1cb892-29d8-49ff-a060-3a0084c9c239",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0c58c14b-f0a6-4103-a5bd-59be2b3c2189"
        },
        "item": {
          "id": "017d419d-4896-46b2-b550-c48922b244e3",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "42d96931-bb4d-4479-9415-da8d1d330267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd28816-f3f1-4739-9dc1-079c65c7b8c9",
        "cursor": {
          "ref": "796d316a-d930-4197-be2c-49333de585b4",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cb0e125f-4047-463a-b637-8da88d878bc2"
        },
        "item": {
          "id": "afd28816-f3f1-4739-9dc1-079c65c7b8c9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ed61639b-330f-4e98-a2f1-7d8036e42b82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa5b3a6-b2e4-4f9a-a57c-7e1aecdaecae",
        "cursor": {
          "ref": "38a748da-f549-4e13-9039-2b6b614a5892",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "86bf28ff-17d2-44cc-8570-c4a7ff97812c"
        },
        "item": {
          "id": "5fa5b3a6-b2e4-4f9a-a57c-7e1aecdaecae",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "34c77b9e-d93b-488e-9ddd-f51472db6ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8218c7fc-3f7b-411e-b742-3f86dd27a9c2",
        "cursor": {
          "ref": "280016b8-6468-4ea2-9a81-1ad83e60afd0",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "04a42539-b9ee-4309-8b8d-1533330d40b5"
        },
        "item": {
          "id": "8218c7fc-3f7b-411e-b742-3f86dd27a9c2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6d663fba-f4a2-4078-b094-9ffe3b1b93ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00793cfc-c951-4f94-9e6e-7714db1638b6",
        "cursor": {
          "ref": "956fb9d9-48ec-4884-bb07-ae8e310d75c5",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f9dfce14-7138-4b8b-8fa5-6c7bca36e05d"
        },
        "item": {
          "id": "00793cfc-c951-4f94-9e6e-7714db1638b6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e0f7c6a8-8304-4a0b-b5c0-7f3f8067be4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f39af64-84dc-4830-bc58-964a21f0824d",
        "cursor": {
          "ref": "60f0f6c1-0a7a-4e6c-b7a9-d8c87257d777",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "68c113e2-0717-4ee1-9774-a47ff125bdaf"
        },
        "item": {
          "id": "4f39af64-84dc-4830-bc58-964a21f0824d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "367d0cf5-927d-4860-9630-bb95f88dcf63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631393fc-ba68-4d49-a0d4-3f1a10d80083",
        "cursor": {
          "ref": "e02983a8-e62d-40d2-873b-234758912175",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4c22757b-24c7-4169-8fae-99dfd970d794"
        },
        "item": {
          "id": "631393fc-ba68-4d49-a0d4-3f1a10d80083",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ec4462cf-f228-428e-abe9-9231fe7d1cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97d88e1-0ee5-4ca9-b894-4e84e73ba8ae",
        "cursor": {
          "ref": "ce8348db-ed2d-4e8e-8a4f-ba6dfd1cf5e3",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "496194d8-f11e-4568-a452-b26869643cef"
        },
        "item": {
          "id": "a97d88e1-0ee5-4ca9-b894-4e84e73ba8ae",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c96b5a3d-ea5e-4f93-aa37-ac542ae2f3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ee7a50-9fb6-4dbb-9112-1e73a43c3a02",
        "cursor": {
          "ref": "9d9002f3-c1f2-48de-acc5-862fe0cbb83e",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "aecf39fb-8730-437e-bea5-f5313bf11415"
        },
        "item": {
          "id": "e5ee7a50-9fb6-4dbb-9112-1e73a43c3a02",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "31d8dc9c-07be-4260-ad93-06e8a8ce7f43",
          "status": "Created",
          "code": 201,
          "responseTime": 484,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "44568459-0161-4741-a41f-eece1434349f",
        "cursor": {
          "ref": "c645716b-f4ca-4d52-a068-414c4de3cc74",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "60dc2492-76e6-4a0f-9f65-074e89b4bf61"
        },
        "item": {
          "id": "44568459-0161-4741-a41f-eece1434349f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7b013a94-5d05-49bc-bdae-6e8b75a6fd18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163e72af-f66d-4dc3-9a1e-247975163e19",
        "cursor": {
          "ref": "c060ec56-bcf8-49bd-8b0d-783a2f144e0a",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d571ea76-786a-4e2b-99d2-07a3c0a4906c"
        },
        "item": {
          "id": "163e72af-f66d-4dc3-9a1e-247975163e19",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0ee091ff-c11c-4ad0-be00-ced5d6b52ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75f3ff5-149a-49b9-832f-94fe7bd61eae",
        "cursor": {
          "ref": "5073eecc-7d9e-44b2-afe5-d621bcdc6527",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "db8452fe-dc57-444f-8304-c92d1e9ef952"
        },
        "item": {
          "id": "e75f3ff5-149a-49b9-832f-94fe7bd61eae",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b2a25044-c90c-466d-a580-8af32fa5fef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e34178-f47f-41fc-8484-14dec954e34c",
        "cursor": {
          "ref": "9907d358-7b1c-4fd2-9337-ef3acdd61f18",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3c6c6938-a9a1-4cf7-b12b-e4a848e73606"
        },
        "item": {
          "id": "64e34178-f47f-41fc-8484-14dec954e34c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "066454ce-f124-4bbb-b445-00d3a88c48c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a6aba78-a744-4bb0-b5d4-5f4b5ed6e4f9",
        "cursor": {
          "ref": "ffa5210d-5218-42cd-8ea7-750617878517",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "355b9dfd-5b7a-4d3d-8c63-21d5c611fd74"
        },
        "item": {
          "id": "6a6aba78-a744-4bb0-b5d4-5f4b5ed6e4f9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f8f2ba41-3f79-44b7-9848-d7965d420bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f4c12f-18e6-48f8-8f63-9f9b80ab24a1",
        "cursor": {
          "ref": "b264085d-886b-4c03-aa52-2fbf93712b53",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "49d305ab-b914-4b03-bdce-482a69051e1f"
        },
        "item": {
          "id": "d9f4c12f-18e6-48f8-8f63-9f9b80ab24a1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e91eb0e5-c88a-4f65-889f-81befd5e5299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0374577-a88d-4fe4-8d97-1a5d7b3392a5",
        "cursor": {
          "ref": "c6cc69da-507f-4c2d-b92f-8c3e1f085e80",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b2492eff-c278-4136-9ff1-d4dd62dea6d9"
        },
        "item": {
          "id": "d0374577-a88d-4fe4-8d97-1a5d7b3392a5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "dc231767-ad9d-45fc-8a2b-00d4ab2d477a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa09341-cd5b-451d-89b4-50740e7af805",
        "cursor": {
          "ref": "54441b8f-fcd7-46ca-9636-289898bcd754",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "50fcec42-2a6b-48ab-bc09-ae384de7443a"
        },
        "item": {
          "id": "0fa09341-cd5b-451d-89b4-50740e7af805",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c0067b06-7dd9-4b12-a5d8-ca03d44de074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8215a50-6770-40be-8b1a-8dbf217a6538",
        "cursor": {
          "ref": "6d25d38c-a4d2-443f-8985-76a236d35a98",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0c39dffc-3be9-4580-a46a-7c03869f5acf"
        },
        "item": {
          "id": "a8215a50-6770-40be-8b1a-8dbf217a6538",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8879b70e-0a06-40a2-b975-18628ebd7e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f87f9ca-2ed4-425f-ad2c-23b021cd1fca",
        "cursor": {
          "ref": "fe30d5d1-5f77-45ca-b719-7020f1f9ed6b",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "59f18859-798c-4e07-9241-cf529391f8f0"
        },
        "item": {
          "id": "2f87f9ca-2ed4-425f-ad2c-23b021cd1fca",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "83ae3063-0fcf-420d-86d8-af5c55f6b53f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5843890-a5bd-46b7-8e0d-0dec2682fa33",
        "cursor": {
          "ref": "fd2288bd-5809-4c14-9cb3-ccb105bed25e",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "957eb5a7-799a-4e60-9515-e18fbf23a030"
        },
        "item": {
          "id": "b5843890-a5bd-46b7-8e0d-0dec2682fa33",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6df1c46d-31f7-4726-9c17-b8c55a29ef12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca5a6e7-cccc-4351-a89a-f5b427e6fbeb",
        "cursor": {
          "ref": "1c6ee941-d0f0-415b-a09a-9cb57cecbea3",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "dc7b23e6-28fb-420b-8567-dfab73763573"
        },
        "item": {
          "id": "eca5a6e7-cccc-4351-a89a-f5b427e6fbeb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "76253e82-962d-4e24-8190-d22dc855b44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd4b706-97b1-4da5-8fd3-e6f5fe551aa2",
        "cursor": {
          "ref": "8bc44384-bcf5-45c6-9157-d8685879c8de",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1f88cdd1-1311-4440-b7fc-b086ea12feca"
        },
        "item": {
          "id": "bbd4b706-97b1-4da5-8fd3-e6f5fe551aa2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8add1df7-0ce4-4f5a-86eb-d3e945dea521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6978526f-f6be-4c61-add5-4a3783e865ad",
        "cursor": {
          "ref": "a5270e24-17a7-4e6d-8bf6-a9e7963c2804",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3b91a889-9e18-4d57-843d-8d2596eb6c0d"
        },
        "item": {
          "id": "6978526f-f6be-4c61-add5-4a3783e865ad",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2953634f-59bf-488b-ba6d-97fa976abd12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bac28ef-8f77-46dc-8841-18e2fc2e8a43",
        "cursor": {
          "ref": "46e5dc8f-f799-4b88-b85d-8da29859bb84",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c74c8303-4b82-4a53-a20e-365b2b10123a"
        },
        "item": {
          "id": "2bac28ef-8f77-46dc-8841-18e2fc2e8a43",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "274d1606-c598-4c88-94d8-7eac34f6c192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9d76d0-7f2c-4af3-8caa-99f32fc0c68b",
        "cursor": {
          "ref": "60f695e0-32a0-4868-8015-2a083eb59454",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c81ef825-e811-4d1b-95b3-9d158a8c404d"
        },
        "item": {
          "id": "1c9d76d0-7f2c-4af3-8caa-99f32fc0c68b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ae2a12f8-55ff-481f-8fcb-342c5ff4e68b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133eaec3-63a5-42c4-bdc1-2be05dbcc840",
        "cursor": {
          "ref": "7d49340f-1663-4363-af91-90580412ddb6",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c02162ea-767e-4f99-8e56-05ad27835462"
        },
        "item": {
          "id": "133eaec3-63a5-42c4-bdc1-2be05dbcc840",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "dea2fe14-be7a-4902-9af9-27193e89884c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05673d18-ea60-4353-b18e-12c9a33b1124",
        "cursor": {
          "ref": "ad95cb3c-3a3c-49d6-b8fd-d1dc44e9a946",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c50c5c4c-44cc-47d4-9ab2-a66bfd5eb06f"
        },
        "item": {
          "id": "05673d18-ea60-4353-b18e-12c9a33b1124",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fef43b55-54ed-4e3d-884a-77d745b366f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de349ce-5af3-4c96-acde-4e9e7dc96930",
        "cursor": {
          "ref": "e877834a-e5bd-4c34-b200-7ab0621159b9",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f26f5930-1b37-47d0-87d8-d52d7e9e8514"
        },
        "item": {
          "id": "8de349ce-5af3-4c96-acde-4e9e7dc96930",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ed6e10fc-02c9-4e3e-90d9-356a05a35793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691a289a-ef45-4777-9851-25c22cf8fae8",
        "cursor": {
          "ref": "5a3735be-4bef-465c-933b-e948133c1f72",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "dc652ef2-c6b3-4298-b01b-6354a4c1eeb6"
        },
        "item": {
          "id": "691a289a-ef45-4777-9851-25c22cf8fae8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2f2e3306-0db7-420a-b17d-042963ab5cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e35e6fb0-c02c-4961-9af4-8ecb5c3812a6",
        "cursor": {
          "ref": "b11f468c-3854-4a94-8c7f-c2bb2173f78e",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5407e2f7-86d8-4d50-8f19-2bd7a60422ff"
        },
        "item": {
          "id": "e35e6fb0-c02c-4961-9af4-8ecb5c3812a6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2330ff6a-5a50-42f3-a4fd-9bcf77475a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d38d8c-d98b-44cf-a791-697433efb3ff",
        "cursor": {
          "ref": "7fb9d1f5-4e62-41d2-a5ef-74d3209ab4ec",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c5eced49-b94f-4dcc-8171-964343fb462c"
        },
        "item": {
          "id": "e7d38d8c-d98b-44cf-a791-697433efb3ff",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "92c872e4-4742-4b52-85c5-e68f0382006a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680ea3c9-5c76-4595-83a2-32e3614085e7",
        "cursor": {
          "ref": "b3ae19c2-8065-4be2-a25c-f4bf740431c8",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8263573f-b64c-4ffa-bd26-117a2a7c2f68"
        },
        "item": {
          "id": "680ea3c9-5c76-4595-83a2-32e3614085e7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "962d1b7a-8a18-4779-b112-aaeafe994371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202c1e4b-d48a-4b1d-b3bf-ed42d7f4c693",
        "cursor": {
          "ref": "3ea2c45b-af08-416b-8ee5-9ca4a2170fa8",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fe050b90-e104-43ce-9efc-463fc116a631"
        },
        "item": {
          "id": "202c1e4b-d48a-4b1d-b3bf-ed42d7f4c693",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4ad4db13-a813-4ad5-9824-cc31aabac1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50adba83-223d-44cc-923c-1310fb23a5f2",
        "cursor": {
          "ref": "2928a3bb-1174-4a5d-b09a-ff81d81ddd9a",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c5aca1dd-801b-44fc-90aa-2a88aa5ed14b"
        },
        "item": {
          "id": "50adba83-223d-44cc-923c-1310fb23a5f2",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6970b519-05d1-4273-a1e8-9a7b9e815f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8877d6d0-602b-498b-8aea-96b555d715ff",
        "cursor": {
          "ref": "c21b5770-5ca6-4fce-b3f4-25fbacf782a2",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1fa4c8fc-9f81-408d-87d9-c4948a038ddb"
        },
        "item": {
          "id": "8877d6d0-602b-498b-8aea-96b555d715ff",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "caf419eb-0535-49ee-9fb2-808b7369c53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2233fbe-1302-429f-8b02-142717584d9b",
        "cursor": {
          "ref": "d76ee7ce-4063-4eb7-aec1-d9d800cb7831",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f6e066e1-e39d-4a5d-b5e1-d5d3df3bd545"
        },
        "item": {
          "id": "f2233fbe-1302-429f-8b02-142717584d9b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2ec1a0a8-9090-46e8-9c4d-bc032c970913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97900a8-5f80-467d-91f2-d8d395b8e228",
        "cursor": {
          "ref": "b0c35ea2-df75-4647-af14-59896b3f3e21",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b2e47526-c2d0-4a96-aa83-2820ba0ad983"
        },
        "item": {
          "id": "d97900a8-5f80-467d-91f2-d8d395b8e228",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b2ee516e-93d0-4868-80e0-ff2947238502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24fc23c-7f43-43bd-9147-058d07510cea",
        "cursor": {
          "ref": "94780af6-e5e4-4b93-a9d9-f2aacc56ad03",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7840e444-c48a-4ea8-aa5f-71483d3e71e7"
        },
        "item": {
          "id": "f24fc23c-7f43-43bd-9147-058d07510cea",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "054905ae-8342-481a-a3c7-b21f91d90c9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ecead4-f0e6-414b-b160-a04cb163f08f",
        "cursor": {
          "ref": "1e0a3840-0529-4c4f-8dba-74c069a31a9a",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "aa2cb378-d80d-4f4b-962c-2ca5c70a66e7"
        },
        "item": {
          "id": "10ecead4-f0e6-414b-b160-a04cb163f08f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3ee6fff7-b630-42a3-a5c8-2aab2fe4ae85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8619d4-56cc-4ca2-befa-6c41cb375ee4",
        "cursor": {
          "ref": "fde94f02-97e4-434d-a90b-9ddf707a87f8",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a1231f98-b9a1-45c6-b2c2-8c6ddcb2b8c2"
        },
        "item": {
          "id": "ad8619d4-56cc-4ca2-befa-6c41cb375ee4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7bdca585-ad85-4948-8891-21c1c85eb576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5e5865-7502-4d4a-afd9-2b7af7468771",
        "cursor": {
          "ref": "227b24b7-c6bf-4024-a382-cbae65b88c65",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "db6396e1-b1d9-442d-8a59-112d98209b10"
        },
        "item": {
          "id": "eb5e5865-7502-4d4a-afd9-2b7af7468771",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9862bfd3-3cf8-46f4-aecd-c46de17cf591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292bb29a-8197-4d01-be59-969f167f006b",
        "cursor": {
          "ref": "b65b9c66-786d-40bb-b4b0-65050ba8957f",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1dc2f8fa-6011-4718-a6ee-6cca7995cd21"
        },
        "item": {
          "id": "292bb29a-8197-4d01-be59-969f167f006b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2eb21fdb-194b-4daf-9ba2-bf468d19d01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a8e8f7-8eb0-4303-bb01-1aebebfb84df",
        "cursor": {
          "ref": "eca22153-12e5-43d7-9676-d680d9e8d060",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d9ddf92b-7920-4186-b0c2-22257ffdbba7"
        },
        "item": {
          "id": "72a8e8f7-8eb0-4303-bb01-1aebebfb84df",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2c7cca51-6b78-457d-9217-ff76d00f59fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7ebf66-b1dc-45f0-b4a8-eb30d8aa78c0",
        "cursor": {
          "ref": "1957f4b2-a669-42ed-9839-556135ba15fd",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "775cbd87-8086-45b8-934b-27753d1c8755"
        },
        "item": {
          "id": "ec7ebf66-b1dc-45f0-b4a8-eb30d8aa78c0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d36369a1-6fd9-4759-b009-530b91aa85f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08e5f89-e915-4e78-885a-865d7ea13519",
        "cursor": {
          "ref": "664eb2a7-3fef-4413-b324-480f7a5b1685",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "70bacd91-d28e-47de-bba8-8f3b786ce84a"
        },
        "item": {
          "id": "f08e5f89-e915-4e78-885a-865d7ea13519",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "31eea89d-6cc3-4a24-8390-6912832c2f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcae6f02-891f-4198-b3d1-3f97fae843d3",
        "cursor": {
          "ref": "5ae924a6-8f9b-4330-bf67-2b7cbf374263",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fd2286c7-1952-4751-b5a0-69c4a32153d2"
        },
        "item": {
          "id": "bcae6f02-891f-4198-b3d1-3f97fae843d3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3e8ca1f9-1640-4864-9022-7d8b162fcc7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6ac227-6b57-410d-80de-59b7f0972222",
        "cursor": {
          "ref": "25650992-13bf-40bc-b4e6-2b6fec3081ed",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e7cf7a52-0762-48b7-bf14-3d591eda81b0"
        },
        "item": {
          "id": "9b6ac227-6b57-410d-80de-59b7f0972222",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "faa2b058-b51f-4046-8460-b5bd82107366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27985ae0-26a7-48fa-bd73-75a0554143fd",
        "cursor": {
          "ref": "f7817a3c-1327-44c1-bed0-ee119f845a68",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9e8eab3b-d18d-4b10-9dfd-02df3664527d"
        },
        "item": {
          "id": "27985ae0-26a7-48fa-bd73-75a0554143fd",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "733ae6ca-1962-4878-8b27-aa9b557c3ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d42230b-0182-41f3-8f83-cabf4822e107",
        "cursor": {
          "ref": "6e6096ac-20f2-4cd7-a424-28b82c401ed7",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "34054fed-a6d2-44a6-a0e2-806f3e4633b8"
        },
        "item": {
          "id": "4d42230b-0182-41f3-8f83-cabf4822e107",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d8a09ee5-3591-42d1-90f6-ba06296be148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79af4f5-e2a2-4758-993d-5c6f8f120638",
        "cursor": {
          "ref": "d3eb59aa-ec63-46b2-85aa-aa4c254784c7",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f1d054ab-9023-45a7-ae4a-abca546016e2"
        },
        "item": {
          "id": "b79af4f5-e2a2-4758-993d-5c6f8f120638",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7207741a-cbb9-4f00-9b02-d7dc663a3ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555841fa-899d-4e86-96c8-cb6e16d3ba11",
        "cursor": {
          "ref": "b081cc32-4518-4e38-a7ab-684cc4b45913",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9f71ef78-4331-4952-9989-3403961fc3e8"
        },
        "item": {
          "id": "555841fa-899d-4e86-96c8-cb6e16d3ba11",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "355a3836-68dc-47f9-8aff-42314369abc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35449020-3814-40d6-8677-007159c3b093",
        "cursor": {
          "ref": "0d2a05ed-e031-4af2-a65f-926835a0aade",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "24255e5f-a44b-47de-b236-a820b3cc4b1f"
        },
        "item": {
          "id": "35449020-3814-40d6-8677-007159c3b093",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "910f57b3-7f2e-44e7-a85d-7577fbf4817b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc739db0-18bc-4aac-9642-86b60c751707",
        "cursor": {
          "ref": "9cd022a9-58a2-489a-a7db-702f8dea7908",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "416c9a52-b173-4c01-a045-7838deffab81"
        },
        "item": {
          "id": "dc739db0-18bc-4aac-9642-86b60c751707",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "226f367d-e81e-420f-bbfe-339e8ab33801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dbe59a7-64a5-4ef1-9933-60aa24095187",
        "cursor": {
          "ref": "83ec4c15-e33a-41b1-bcda-c2d5ebada4d2",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2ceda171-d8e0-4d5d-a8f6-6c0a22f9f132"
        },
        "item": {
          "id": "2dbe59a7-64a5-4ef1-9933-60aa24095187",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d3e2d112-430a-4d2a-93b1-1342da6189ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8906ad4-23fd-4d88-b170-215d481fcc2a",
        "cursor": {
          "ref": "2fc10f44-82ad-4255-9bc1-4cf10c552e2e",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1aa83097-8cbe-4af6-bd94-d148bf0ad982"
        },
        "item": {
          "id": "d8906ad4-23fd-4d88-b170-215d481fcc2a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0c0ae3cb-9856-4d8c-a42f-a568ed4cd64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1db8663-1afa-46eb-abc8-69ce60189160",
        "cursor": {
          "ref": "4f011e36-8ba2-4d57-aeca-866dd744d9d9",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bdabc954-dbcc-4548-81d9-799ea4190cfe"
        },
        "item": {
          "id": "e1db8663-1afa-46eb-abc8-69ce60189160",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "399f0696-4d57-48a8-9eb0-5fc63a0b5249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57efeaa8-bcc0-4843-9dc2-e18d03c8c4b6",
        "cursor": {
          "ref": "2a1ab606-1ec8-4459-95cc-7624c4cae858",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5ae75517-4d29-4fc5-8ff1-9e3547155a67"
        },
        "item": {
          "id": "57efeaa8-bcc0-4843-9dc2-e18d03c8c4b6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e3b363e9-2510-4f01-a9f1-9cab209525ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4369b1d4-866b-4ed5-b8e6-6a2fb132179b",
        "cursor": {
          "ref": "8cbfa3de-715e-41bd-bb30-bdd0b445c7db",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c316040a-38cb-4aa3-ba65-be4c88fbd7ac"
        },
        "item": {
          "id": "4369b1d4-866b-4ed5-b8e6-6a2fb132179b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "713863df-0929-4ee1-99b1-1a40a89c974b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac1bb8c-4706-4e34-a22d-22646cda4012",
        "cursor": {
          "ref": "fca1e57b-aba8-4bad-bb81-2fe2724b97cc",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3c33a964-9d96-4b09-b098-374c0ae34ecb"
        },
        "item": {
          "id": "7ac1bb8c-4706-4e34-a22d-22646cda4012",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "95ce07bc-0a08-43ec-9a4e-8586dae65d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac352e5-3bd9-4a20-acb9-16c1a48e2abf",
        "cursor": {
          "ref": "dfd152a4-dba8-425f-b077-1950e1042e82",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f91e20da-2666-4619-a7c6-a756205da64b"
        },
        "item": {
          "id": "aac352e5-3bd9-4a20-acb9-16c1a48e2abf",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "82aa460d-5b43-42bf-970b-2e3f44088c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e91e046-0370-4021-8dbe-8d22773f0359",
        "cursor": {
          "ref": "2f4aec99-cc58-4ffb-b1c3-6f4054693508",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1f24db50-eda4-4d69-a9bf-07fbd087d82f"
        },
        "item": {
          "id": "7e91e046-0370-4021-8dbe-8d22773f0359",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "716c3834-f7c4-4bde-aa2d-1ea15c04e756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e33fff-821e-4ca3-9c80-a0dc088e22a5",
        "cursor": {
          "ref": "05c8d31b-8490-46c9-a22b-c224d56cbb87",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f7ac2419-38ac-433e-b444-f8aee8770c75"
        },
        "item": {
          "id": "74e33fff-821e-4ca3-9c80-a0dc088e22a5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "62232142-3a5b-4538-bce3-53f001bbcb7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b8e509-2741-4b89-b65a-6efad08a2117",
        "cursor": {
          "ref": "a48742c8-796f-4194-8dab-bc6c4bc3c89c",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0574e609-2956-4d33-8a10-e3b51bda8613"
        },
        "item": {
          "id": "76b8e509-2741-4b89-b65a-6efad08a2117",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2852c5e5-c3de-4c7c-8f33-99b768803869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e781437b-7a2b-4706-ad94-3987f267b3c0",
        "cursor": {
          "ref": "ff1d230b-d217-44c1-ab0b-b4ea0d6dcc61",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "41b783fa-b3e9-4dbd-a8fb-a9c54ce29841"
        },
        "item": {
          "id": "e781437b-7a2b-4706-ad94-3987f267b3c0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "6e882eb2-785a-4404-bbec-e30c7d0c0eac",
          "status": "Created",
          "code": 201,
          "responseTime": 443,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "dc38a566-ca01-47e8-af47-8e3984067017",
        "cursor": {
          "ref": "1c1580fe-a166-4def-b04d-5938721840f8",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8fda1d58-93ec-4bd1-b63c-ce5569884018"
        },
        "item": {
          "id": "dc38a566-ca01-47e8-af47-8e3984067017",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "700a3658-d765-4e7f-92ee-978c2d64b82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f77a88-d1c3-4fb3-9455-f66089a10fd8",
        "cursor": {
          "ref": "879d3ed2-980c-4161-a3cf-6b5eab8374e6",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "88e01cce-bfd9-4fb0-a5bd-c0b6778a0193"
        },
        "item": {
          "id": "63f77a88-d1c3-4fb3-9455-f66089a10fd8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4b22fe05-3e38-42bc-80e4-2f2e8af36e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b91a22-a08b-4af9-aa55-5ffc00043d54",
        "cursor": {
          "ref": "47497293-253d-40a7-9399-0c6160986117",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5a218fd4-1a79-4f8b-94ff-73d5641b6b43"
        },
        "item": {
          "id": "b6b91a22-a08b-4af9-aa55-5ffc00043d54",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "31651de8-5c90-4b09-b3de-f316a829f5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c90127-0f6b-4b05-9d2b-d546dc795659",
        "cursor": {
          "ref": "ea26806e-d08b-49af-9a01-86a21b143fed",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "74940e37-268d-4139-b366-d6302184f222"
        },
        "item": {
          "id": "36c90127-0f6b-4b05-9d2b-d546dc795659",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3c4dfc06-5d4a-4593-beac-caf99417b128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d410a9-a354-4fc5-b810-11a45043c87e",
        "cursor": {
          "ref": "a4525b8c-2454-445f-8992-f7152b45ad8e",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "37c20d9c-7e02-47ac-91b7-059dc86004ca"
        },
        "item": {
          "id": "b2d410a9-a354-4fc5-b810-11a45043c87e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c3ee0840-94b8-4a85-90fc-ea7f1506fafd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa5acb20-b51a-421a-ae1b-f9416f10fc7f",
        "cursor": {
          "ref": "b75834f8-80b7-430a-a10f-bb918ec16ea5",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "80eac14d-956f-4fda-8fc4-3100ddc1fd81"
        },
        "item": {
          "id": "fa5acb20-b51a-421a-ae1b-f9416f10fc7f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6117c774-7639-4f5c-b4a4-bc0785a5217b",
          "status": "Created",
          "code": 201,
          "responseTime": 397,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "4448d19f-341a-4303-b55c-695aa637d6de",
        "cursor": {
          "ref": "c008112f-a2e9-44ad-8acc-46ee06326623",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "359d152d-65ce-4d04-866c-c87221798780"
        },
        "item": {
          "id": "4448d19f-341a-4303-b55c-695aa637d6de",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7cb1d681-ae1e-4c4f-9049-c863c7be153a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de663d37-3a4c-49e0-bc16-512e85a82541",
        "cursor": {
          "ref": "88a02e4f-0218-4b49-9fdb-1873edceec20",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7fdd9009-b988-49ba-8ea6-8f83d2f1876c"
        },
        "item": {
          "id": "de663d37-3a4c-49e0-bc16-512e85a82541",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7eebc3ae-f1ad-4f1d-95f3-c17a259d9e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092cbcf2-d2c7-4a1d-acc2-d9d17eb62b21",
        "cursor": {
          "ref": "82ebcf13-4cf8-4e9b-a55e-be2929f29cbd",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a07c90a4-6abb-4e0b-a4c3-2805a6e6f16c"
        },
        "item": {
          "id": "092cbcf2-d2c7-4a1d-acc2-d9d17eb62b21",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "96e40198-17de-46e8-895f-4a0a8af49642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "847ce642-4ac7-4615-90b0-f8508ab2163b",
        "cursor": {
          "ref": "b4cbed3e-f886-4e13-a505-a47325e50b8b",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8f7ce26f-7d3b-46f1-8b47-817d1058809b"
        },
        "item": {
          "id": "847ce642-4ac7-4615-90b0-f8508ab2163b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1a1d0984-6267-4a1b-953f-b27330193228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1d68ed-42ef-42b9-b4cc-753cf1fa3c45",
        "cursor": {
          "ref": "f7530663-b592-40f3-a2c9-9fdc4539a6aa",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4693694d-118c-4ab9-9803-e282fd3cb0fd"
        },
        "item": {
          "id": "3e1d68ed-42ef-42b9-b4cc-753cf1fa3c45",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9ccf4c45-57c5-43ae-8109-5bc01c45b380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f88043-e0d5-4cb7-869c-dc647d8020df",
        "cursor": {
          "ref": "b18c0af3-50e6-4b9c-b5fc-9997149c3bc8",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2418dc56-2892-4a7e-8ac3-0670f1b579f5"
        },
        "item": {
          "id": "b4f88043-e0d5-4cb7-869c-dc647d8020df",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "71d384a9-83aa-402d-aabd-be5ea45cb624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9299648e-7562-48ef-8c12-cfe30ce5b6ee",
        "cursor": {
          "ref": "8b007a2b-9981-4c59-9604-934dafeae3a1",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "03e19b1a-1e95-49ce-ad6f-9c780b5e0227"
        },
        "item": {
          "id": "9299648e-7562-48ef-8c12-cfe30ce5b6ee",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3335bbf4-1912-466e-bd07-63cba91b71fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782e6d4f-1d96-4cb7-94be-97aed5b5e7dc",
        "cursor": {
          "ref": "9c850752-cfee-474b-b0a3-f85e6d25a5fe",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7414fc48-eb2d-43ea-87ed-547f9279652b"
        },
        "item": {
          "id": "782e6d4f-1d96-4cb7-94be-97aed5b5e7dc",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6396a7ba-019c-4908-832b-1ed79e068ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08270f9-72a4-4527-85ac-5092f1d7a375",
        "cursor": {
          "ref": "4fd8a674-3e06-4799-b607-fa584f4cdaca",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "bbe982de-5f61-4e1f-92e3-8adf75433fd0"
        },
        "item": {
          "id": "b08270f9-72a4-4527-85ac-5092f1d7a375",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e1e4c732-a316-46af-835d-052620bd4dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "ab891eaa-ec7a-493d-a26d-4f924051a515",
        "cursor": {
          "ref": "4d405080-5d93-4c87-b455-0ac0547b1225",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "577a5ea2-8afa-44bc-93d2-d1e75ca1a6a5"
        },
        "item": {
          "id": "ab891eaa-ec7a-493d-a26d-4f924051a515",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "03fa3aac-b584-4216-a203-dd70fadb6743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "13facfc8-e6b8-4754-bc1e-0c874060b7ff",
        "cursor": {
          "ref": "c9542660-54c1-485f-8bbb-6f7768f0e079",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "65bc3172-1407-47a9-82f2-50faad5b0cd0"
        },
        "item": {
          "id": "13facfc8-e6b8-4754-bc1e-0c874060b7ff",
          "name": "credentials_issue"
        },
        "response": {
          "id": "970b832c-1d74-4d2f-9c4c-8fc53cd281af",
          "status": "Created",
          "code": 201,
          "responseTime": 390,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "797910f1-c75f-49df-b705-fa013aec1ce4",
        "cursor": {
          "ref": "6ac86c59-9bc4-4c40-9064-9b54cf14c3b7",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7f82f028-dafe-468c-9868-6c087994b181"
        },
        "item": {
          "id": "797910f1-c75f-49df-b705-fa013aec1ce4",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "23dde7fa-2588-4aa9-8701-e03731963136",
          "status": "Created",
          "code": 201,
          "responseTime": 374,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e38f71e-5409-460f-8b37-0c8b9fb9a4e3",
        "cursor": {
          "ref": "0674b51e-0ba7-4597-a1c1-994f2ec8e35a",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "790b85f2-b4d2-46ca-aaf1-bd8d8aa22fba"
        },
        "item": {
          "id": "4e38f71e-5409-460f-8b37-0c8b9fb9a4e3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "bbf05104-2cbb-44f1-a011-e6c86bd14183",
          "status": "Created",
          "code": 201,
          "responseTime": 400,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1de9a5f-be47-44ea-9e36-c6275a76683c",
        "cursor": {
          "ref": "ba09b2ce-6f87-48a7-ae5b-00878b59c258",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c6f0639d-00ed-4ea4-a555-8b06bf5d6713"
        },
        "item": {
          "id": "d1de9a5f-be47-44ea-9e36-c6275a76683c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3e0ed934-adb1-4a5d-8d98-3362c9a92d73",
          "status": "Created",
          "code": 201,
          "responseTime": 383,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "721a46d6-050a-459f-91f7-01da42e139f4",
        "cursor": {
          "ref": "e212d980-b278-4086-92ed-461669e77e2f",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7d8541bf-87ba-4c2e-a3ce-af714091995a"
        },
        "item": {
          "id": "721a46d6-050a-459f-91f7-01da42e139f4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d1962d8a-a972-4992-bbb5-1acbf7ef5a50",
          "status": "Created",
          "code": 201,
          "responseTime": 411,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d899a0-4902-477c-a7b4-52b7222f3572",
        "cursor": {
          "ref": "26b3429b-835f-405d-9035-6ca6c74757c3",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "91101d70-c0cf-4c31-a410-5ce6ee4e722d"
        },
        "item": {
          "id": "60d899a0-4902-477c-a7b4-52b7222f3572",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "474f5a45-1986-4169-b70a-4e61ea19f335",
          "status": "Created",
          "code": 201,
          "responseTime": 417,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46eb57dc-b4d1-45c7-8d9a-b0c2f6cc9cba",
        "cursor": {
          "ref": "f0b7eb67-eb91-4af8-9e37-d3b8acb016c7",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "43cb1e81-c040-40d6-83ba-411e10a3b11f"
        },
        "item": {
          "id": "46eb57dc-b4d1-45c7-8d9a-b0c2f6cc9cba",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e28cacff-7d4f-4337-aa55-cbb2426bcb11",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "46eb57dc-b4d1-45c7-8d9a-b0c2f6cc9cba",
        "cursor": {
          "ref": "f0b7eb67-eb91-4af8-9e37-d3b8acb016c7",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "43cb1e81-c040-40d6-83ba-411e10a3b11f"
        },
        "item": {
          "id": "46eb57dc-b4d1-45c7-8d9a-b0c2f6cc9cba",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e28cacff-7d4f-4337-aa55-cbb2426bcb11",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "01265b2c-b5d1-43d3-ab5d-b46ba54265be",
        "cursor": {
          "ref": "3a889337-b6ae-4c2d-bac9-5bc1c743fdaf",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b5db90e2-ccca-44a7-9796-04144d3463b1"
        },
        "item": {
          "id": "01265b2c-b5d1-43d3-ab5d-b46ba54265be",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0b5b2fa4-a31f-40aa-a819-a67a9643f898",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "d04a12b6-b2f2-4eb5-ac6f-36614d49b400",
        "cursor": {
          "ref": "249f5a86-56bc-4ff0-bac6-9dd09f071a3d",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c492aed8-8d7d-49f0-a9f7-2006171d4a5c"
        },
        "item": {
          "id": "d04a12b6-b2f2-4eb5-ac6f-36614d49b400",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "de8125cc-7e83-4b45-90e8-51fa07874d67",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "689b2812-a212-44af-aa7d-a1ec542bcced",
        "cursor": {
          "ref": "2e153bba-fc64-4a5c-add4-453107680feb",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "acf3d4d6-f531-4ecb-9552-694d964e8c31"
        },
        "item": {
          "id": "689b2812-a212-44af-aa7d-a1ec542bcced",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1dfd701f-41fd-4bd0-8700-53fd6c3e670b",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "ce939df8-15cf-4042-84ba-174119eb119f",
        "cursor": {
          "ref": "d70e8801-425a-4448-aeb4-e0a8009df884",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8b87f5f8-e421-433e-9dc3-c9a2695bb149"
        },
        "item": {
          "id": "ce939df8-15cf-4042-84ba-174119eb119f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "551cb5c0-844c-4662-a63b-fa15cb7b6b3c",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "db6c4ef1-f088-4556-b22c-8cccd3f3e3ee",
        "cursor": {
          "ref": "526a5b9f-4bd5-408f-911a-47969f3812e4",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6d546d89-589b-477a-828b-c508352a8e7e"
        },
        "item": {
          "id": "db6c4ef1-f088-4556-b22c-8cccd3f3e3ee",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6fa5e797-42b0-4edb-8585-0d6c2517a341",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "8ac5f5f0-d5b3-4eb7-bd29-596a76e191df",
        "cursor": {
          "ref": "2bdee00f-205f-4d02-be52-a1fb229411f3",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6ce00563-6725-4ac4-b56e-537193101374"
        },
        "item": {
          "id": "8ac5f5f0-d5b3-4eb7-bd29-596a76e191df",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ed37bd57-8dfc-407c-bad0-e81b599e839d",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "010cd0e9-3e27-4fb2-8069-df47d05eba1d",
        "cursor": {
          "ref": "5c4561d6-caec-4e36-8678-1b3f84e08814",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1de3cd93-e4b6-4014-8f54-866a37484d2a"
        },
        "item": {
          "id": "010cd0e9-3e27-4fb2-8069-df47d05eba1d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "64f8d6e3-6fa0-4e9c-9d6d-4e0bf65638a3",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "49a2afe1-397d-4531-ae15-6213f48c35f9",
        "cursor": {
          "ref": "f1dfdfff-e42b-4f4d-a4d9-e7ab1652c486",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3a0dee0b-8930-4f0c-a3c8-3722125d57a9"
        },
        "item": {
          "id": "49a2afe1-397d-4531-ae15-6213f48c35f9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "05ac32f4-7842-46a4-a5d8-7148f7285344",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "80475388-7515-42cd-85c2-506408c8f609",
        "cursor": {
          "ref": "ba43ac5f-f14e-4cda-a707-094f7533854f",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "734dbc7b-e262-4bef-864b-9b19cc2334d7"
        },
        "item": {
          "id": "80475388-7515-42cd-85c2-506408c8f609",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a0f08158-f5c3-4380-9869-47ddd17e8ca3",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "5ae446bf-4b82-485e-9729-775f4e3319c4",
        "cursor": {
          "ref": "62bc86f0-e572-49c8-bea9-a923cd7796c1",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "94c74d5d-0132-4d5c-9760-82be076c6671"
        },
        "item": {
          "id": "5ae446bf-4b82-485e-9729-775f4e3319c4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "388ceaa5-dcbb-40e8-8c27-9c45c823aba8",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "d0155c2b-5ac2-4346-b9c8-2e522c478e99",
        "cursor": {
          "ref": "f0adec0d-dcf0-43be-8714-897e9a97e432",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1f08c5b1-a0d3-4d88-a3aa-c31812d6f2d5"
        },
        "item": {
          "id": "d0155c2b-5ac2-4346-b9c8-2e522c478e99",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4c24850f-08e0-4e67-86e0-fc7976b19ecf",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "d07c97e6-faac-4d71-912b-ee503dd689ab",
        "cursor": {
          "ref": "1e1f49d2-2867-46b4-96d1-8c87ce99784c",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5005af50-cb3f-49d8-9c37-36254bd04e2b"
        },
        "item": {
          "id": "d07c97e6-faac-4d71-912b-ee503dd689ab",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c69de192-5e2d-4371-aa72-6f65390c33af",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "d8956e51-2222-424b-8b86-0aaea7b85a83",
        "cursor": {
          "ref": "f9af1bbb-e1cf-4b58-9a73-0accc2177c20",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0e5f9ffd-020f-4d9c-8742-68c1b56c711d"
        },
        "item": {
          "id": "d8956e51-2222-424b-8b86-0aaea7b85a83",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "60f780de-dbd1-4541-a688-0263bed93806",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "f4253186-6eb4-43d1-8de1-f98237c004bc",
        "cursor": {
          "ref": "0eb42d36-a0f9-4593-af65-e538dbc0a7ac",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5b65abf8-ace9-42eb-8e70-d1e1c21ec631"
        },
        "item": {
          "id": "f4253186-6eb4-43d1-8de1-f98237c004bc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2ba7e766-df53-4069-8497-797cc9e3e183",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "08ee179e-488c-4fe0-b2c9-681bafaa0ee8",
        "cursor": {
          "ref": "d8313ac0-fafa-4467-a7a0-b69b60f5cb0f",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "faa6e37a-26fa-407f-b0bf-4ebd460ed67d"
        },
        "item": {
          "id": "08ee179e-488c-4fe0-b2c9-681bafaa0ee8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "18d86d58-3840-46d8-9f2d-652ca48afab7",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "3d264cf6-95b5-4150-84ca-3a8cf9c5837a",
        "cursor": {
          "ref": "89e41076-1758-441c-b12e-cae7c7e4e116",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "76aae545-ec90-48cf-903b-a9303e53fa4c"
        },
        "item": {
          "id": "3d264cf6-95b5-4150-84ca-3a8cf9c5837a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0412de24-786d-4a5a-9e59-73e70fdbe35c",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "3a121ed1-d117-4e6d-8fd2-fbd8ced66a6e",
        "cursor": {
          "ref": "19efe97b-6b74-4fbb-98c9-341aae1e022e",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "efbc83cc-5be3-450c-a403-f3cb7dd02542"
        },
        "item": {
          "id": "3a121ed1-d117-4e6d-8fd2-fbd8ced66a6e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d6accb4d-2cca-4a08-b610-9c2fc51bf0ca",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "948ba30b-9200-4bed-9780-d7ce56a34490",
        "cursor": {
          "ref": "26683aae-df43-4448-a631-b7974bd67037",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "715b46c2-c3c1-4aa4-a8a2-adce92b6ba0e"
        },
        "item": {
          "id": "948ba30b-9200-4bed-9780-d7ce56a34490",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3138ddeb-2a5e-4b05-a56f-b324f311f083",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "8544cb55-6dfa-4d47-a0ce-d1e28373355f",
        "cursor": {
          "ref": "8e3ac12a-198e-4d40-9182-9152d2f0666a",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fada74d1-b140-411b-bfa9-916a1fd2ca30"
        },
        "item": {
          "id": "8544cb55-6dfa-4d47-a0ce-d1e28373355f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fa4e86c5-caaa-4e91-b941-6a17ee38903d",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "73508264-c095-4daf-82d3-ca866204158d",
        "cursor": {
          "ref": "40f474d1-0267-48de-b38c-4b1fe4120cdd",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "65a6982d-60a7-45f4-a56d-fc3563abe152"
        },
        "item": {
          "id": "73508264-c095-4daf-82d3-ca866204158d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2589eef5-642e-4b2b-b82e-6a0c48793758",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "7b45e4b4-2feb-4121-94a8-47d8f321fffc",
        "cursor": {
          "ref": "2e2a491d-1bc3-4b22-a910-b79d9c14af22",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "673ee85c-f3b9-4adb-b16a-1f77a7cb98c2"
        },
        "item": {
          "id": "7b45e4b4-2feb-4121-94a8-47d8f321fffc",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7cc16be3-1a5c-4d08-8bf6-a143c1fddd47",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "38326659-b056-4b87-8bb1-f6f38f57e584",
        "cursor": {
          "ref": "e0775da8-4181-4d77-81b1-585d93087b06",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d5624c5c-60b8-4f1e-99cd-f3dafb6818d6"
        },
        "item": {
          "id": "38326659-b056-4b87-8bb1-f6f38f57e584",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6ddf4b10-41fc-495f-a487-2730c76f1fbd",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "25dafddc-5e2f-4dc8-94b2-481adc92fc0e",
        "cursor": {
          "ref": "7d8deea5-5412-4eaf-8346-07ddf6764e29",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ab2af9e5-7196-49c4-8c25-1d7f945995c5"
        },
        "item": {
          "id": "25dafddc-5e2f-4dc8-94b2-481adc92fc0e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "eb61ae97-9efb-4011-acb5-9bd358046748",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "836b1de9-e2c8-45f7-885e-4eb34e138b3e",
        "cursor": {
          "ref": "424d1cd7-c63d-4dd2-90c1-729529c86567",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1b8cc8a1-bba0-4c72-a49c-83124cc515fb"
        },
        "item": {
          "id": "836b1de9-e2c8-45f7-885e-4eb34e138b3e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0202e84b-89d9-42bf-bab9-5a10794d3dee",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "78a18879-54b5-4525-9745-7a2f7a140005",
        "cursor": {
          "ref": "16978e79-4cc0-4595-985b-90168cd2a752",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "14a9ab6d-27d4-474d-82fd-3bab72ccbb6b"
        },
        "item": {
          "id": "78a18879-54b5-4525-9745-7a2f7a140005",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b62ba8e1-adf1-43a5-a0d4-93301f7c9f2f",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "ded985f9-c0c4-40dc-b199-35f36f53268f",
        "cursor": {
          "ref": "dbbf9229-4902-476a-948c-154b32a731e8",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "baf10f11-20df-4c1f-bc24-96bbcd5566a9"
        },
        "item": {
          "id": "ded985f9-c0c4-40dc-b199-35f36f53268f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1de2693f-27d4-4316-92a6-3483aa378c65",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "20c134aa-e981-4100-a712-512000a08934",
        "cursor": {
          "ref": "44bb50ff-5335-4961-8a25-f3550ed12361",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "696938d3-659f-401c-be72-290af69904d4"
        },
        "item": {
          "id": "20c134aa-e981-4100-a712-512000a08934",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f71cd829-1af9-43f5-8040-4aa72b100925",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "0a83281a-89de-4371-9058-f3561cf17622",
        "cursor": {
          "ref": "b28bddfc-84c0-43a4-8b3f-2b95e1beb7c2",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "001b5c25-bac1-4229-b2e1-daa368a37081"
        },
        "item": {
          "id": "0a83281a-89de-4371-9058-f3561cf17622",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3dafe723-7900-49d6-b85c-e2e19d69cdd8",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "b939994d-9dad-4ba3-9b81-6168b3643c58",
        "cursor": {
          "ref": "e8dac879-e2b7-4263-86c4-b2d5537bbbf9",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1cfe26f8-2ab9-4da0-822b-633d780c828a"
        },
        "item": {
          "id": "b939994d-9dad-4ba3-9b81-6168b3643c58",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2645eca5-dd7a-47af-9378-3dd029d99efe",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "b02d8a58-a635-483a-8472-2c68d5aaae51",
        "cursor": {
          "ref": "1dd955f9-9550-49cf-aee2-2dc7bc8c550c",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7b785719-72d4-4da1-8eb9-d545310c9407"
        },
        "item": {
          "id": "b02d8a58-a635-483a-8472-2c68d5aaae51",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c2a8bb78-d344-4af4-8e31-c11b878b4c03",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "bf8b6aa0-834c-433f-876e-0096b868bb6c",
        "cursor": {
          "ref": "b2e69e48-b039-4dca-951e-30b1445bfd98",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "28ad4c36-c633-4526-8b6a-e2af24f5c494"
        },
        "item": {
          "id": "bf8b6aa0-834c-433f-876e-0096b868bb6c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6a743e67-16f6-4b8c-a3a5-4a9485e6754b",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "ba2a74e4-8416-4e31-ae98-e8260953b636",
        "cursor": {
          "ref": "beeaa198-cdca-4781-b6cf-f7e79787b8b5",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1870607b-2b1b-447f-b97f-b64411fcb3cf"
        },
        "item": {
          "id": "ba2a74e4-8416-4e31-ae98-e8260953b636",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "36242e45-1e6b-4e9d-a8f3-313d830c15cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7befd436-41b7-4655-b352-1fcbaf17d422",
        "cursor": {
          "ref": "137f7dab-eed4-4520-8cb8-59438c17ce1a",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b30a4231-1566-43c1-8dfd-26952f354649"
        },
        "item": {
          "id": "7befd436-41b7-4655-b352-1fcbaf17d422",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "44e51016-d27c-45bb-8419-ef963db52fe4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 45,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6536d469-bde8-4c29-bb1b-a53857cc5708",
        "cursor": {
          "ref": "d198ce9c-ebef-4020-bba0-f1acc5cda0d3",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f46ad013-b888-4516-847a-fd615f6dbda0"
        },
        "item": {
          "id": "6536d469-bde8-4c29-bb1b-a53857cc5708",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b569c688-cb5c-4c65-9c74-cc84f72fcd5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6536d469-bde8-4c29-bb1b-a53857cc5708",
        "cursor": {
          "ref": "d198ce9c-ebef-4020-bba0-f1acc5cda0d3",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f46ad013-b888-4516-847a-fd615f6dbda0"
        },
        "item": {
          "id": "6536d469-bde8-4c29-bb1b-a53857cc5708",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b569c688-cb5c-4c65-9c74-cc84f72fcd5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1ab3b0-d614-4c52-bffb-d6f94e8fe131",
        "cursor": {
          "ref": "68aec2f9-fde5-444d-9464-4f56f78f4d75",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ec23f777-f33c-4d6f-b6b6-69f45f46c468"
        },
        "item": {
          "id": "cf1ab3b0-d614-4c52-bffb-d6f94e8fe131",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9df36263-bbbb-4f26-be36-00ec45ca18e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f90cca-4663-4fb9-8619-668eb2a87a25",
        "cursor": {
          "ref": "2c353315-3808-4309-8a47-7b80467ac651",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2aef354b-9cf8-40c7-8c30-d9bd084735db"
        },
        "item": {
          "id": "a7f90cca-4663-4fb9-8619-668eb2a87a25",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4beab764-42bb-4ca9-8748-1a5987ed97f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7021fae-648a-4863-8ef6-521763343cce",
        "cursor": {
          "ref": "817b3d56-c862-4e17-95a1-63550d8e129c",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b9bc6a04-3fd8-4f91-90f7-34bc6b60629c"
        },
        "item": {
          "id": "b7021fae-648a-4863-8ef6-521763343cce",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6665db6c-795a-4dc6-871a-f40d197d0c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd4209d-8fb0-4a08-8d2b-4c25775f913b",
        "cursor": {
          "ref": "85430cef-3aab-4cf6-ab3f-6b764199e824",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "579141e9-3b38-400d-adc6-b0cb1c3cee8c"
        },
        "item": {
          "id": "acd4209d-8fb0-4a08-8d2b-4c25775f913b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "534eaf74-056a-4618-9366-b2645b1e032b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62a4714-59db-45ad-925c-0cd000644cfa",
        "cursor": {
          "ref": "bbac0eb5-e48f-4ee0-b5f8-72c46d889534",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9cf074e8-51e4-441b-ad00-a5a54c7e93e0"
        },
        "item": {
          "id": "c62a4714-59db-45ad-925c-0cd000644cfa",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "955f1de4-0fca-45de-92ce-52e67b4b6a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c7f0fd-375b-4b9b-8641-0de24a64b51e",
        "cursor": {
          "ref": "432465f0-1e6b-4214-94e2-fd8b4086decb",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ea983450-4269-4c68-8297-82079e2647a5"
        },
        "item": {
          "id": "b1c7f0fd-375b-4b9b-8641-0de24a64b51e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6e064866-5133-4cad-835f-c1cdc6769fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 715,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce08d50-21bf-4049-9992-ab341ea281db",
        "cursor": {
          "ref": "ac1900b8-6ee1-4da3-81d9-49f5e147b2d2",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "616210a3-26ef-4bdc-9347-3f9d208248a7"
        },
        "item": {
          "id": "bce08d50-21bf-4049-9992-ab341ea281db",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1c943dfe-23ab-440b-bbfb-47fc5ec01b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf964fd-edcb-468a-97a5-ba20f2f9c3f1",
        "cursor": {
          "ref": "7038e3ef-cbba-4423-9072-79edf72a5b55",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1db4d9b6-a00b-4ed5-8801-4e186b354613"
        },
        "item": {
          "id": "caf964fd-edcb-468a-97a5-ba20f2f9c3f1",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "848aa83a-7396-4278-bc41-74c455d813a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4950aa8a-f824-468b-9c6d-0e24dd4db7f0",
        "cursor": {
          "ref": "de70d4bc-0de2-49b9-bb43-0fa6ad25865a",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9aa3ad02-97af-494d-82c4-b2ddf7327eb0"
        },
        "item": {
          "id": "4950aa8a-f824-468b-9c6d-0e24dd4db7f0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7e4977a3-b108-4e55-84af-edfbd7bf3284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec0f0ec-0440-4ad4-8fe3-615c9af62a09",
        "cursor": {
          "ref": "ded78d0c-a37a-4d78-a3a0-17208c69ed7a",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8679ab6b-a900-406d-be93-af3298e79f5b"
        },
        "item": {
          "id": "4ec0f0ec-0440-4ad4-8fe3-615c9af62a09",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "13a1ce69-5887-4967-b70e-bf6ec32ec829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c03865-dcea-4d6f-8837-1a1969f62aaa",
        "cursor": {
          "ref": "430562fd-7721-4d3c-a10d-5bbc1658b9ac",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "62738b57-529a-4fd1-8d21-1e94bd7670cd"
        },
        "item": {
          "id": "45c03865-dcea-4d6f-8837-1a1969f62aaa",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b4a615ae-aafc-471e-8aac-fbfbf9c8ba53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb22f72-8cd0-487f-be61-887f9ce630e3",
        "cursor": {
          "ref": "f1eddafb-4402-4288-8aa2-d4fe88ca162f",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6fe26014-012b-45c8-addc-806b0f723ea7"
        },
        "item": {
          "id": "eeb22f72-8cd0-487f-be61-887f9ce630e3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2e0fff51-6ce7-456c-8c6a-fba4d91f1fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e73e4f-8ef3-4c69-a787-e99ce9ece8b7",
        "cursor": {
          "ref": "519ac0fb-3aa4-490f-b44b-28094c14f6b7",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3c036a0c-e871-4e6c-985e-981eb155e5fc"
        },
        "item": {
          "id": "00e73e4f-8ef3-4c69-a787-e99ce9ece8b7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "076858ed-c363-4600-99bf-c401bdd36274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a012420-de6e-4fc4-9e80-0ed964361213",
        "cursor": {
          "ref": "0472c7ad-4ba8-48c3-81d2-c6d28546b728",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7a14576d-62a6-479f-845e-e5daf186c86b"
        },
        "item": {
          "id": "9a012420-de6e-4fc4-9e80-0ed964361213",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "132e07ac-50f8-475f-8f55-d61d13d8f154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53814462-951f-4d83-afb1-7f12eab44394",
        "cursor": {
          "ref": "837191d6-b8dd-4ac2-b42e-74c14b20aacb",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6efd7ed9-f91c-4306-9335-e90f13634334"
        },
        "item": {
          "id": "53814462-951f-4d83-afb1-7f12eab44394",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1c79b61f-a1b9-40c3-92f4-c8b81601d84c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e3a95f-70e9-44cd-ac19-76e733737ca9",
        "cursor": {
          "ref": "f0600ef6-e4de-4835-9d8a-0833cf2da4da",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2c425c28-191a-4ddc-8ebf-b01747e9d5c8"
        },
        "item": {
          "id": "40e3a95f-70e9-44cd-ac19-76e733737ca9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "08764af7-eb7c-4e07-8db1-0ab4894e2f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e9ec9b-fe1e-4085-8555-d422853dd9cc",
        "cursor": {
          "ref": "26562d4f-b51f-43d7-bdb6-4909a18b1039",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "db6d863b-cf94-4d4d-a0a3-a946f2d30539"
        },
        "item": {
          "id": "e5e9ec9b-fe1e-4085-8555-d422853dd9cc",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "611a9745-9272-4dc6-837b-cc7b84e4fd07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2a13f2-934b-4e1c-98ad-e75cdcbe5b56",
        "cursor": {
          "ref": "1bbaa258-e84c-4ab6-9251-d79651418cc7",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "974c3ffa-b904-43ce-a789-f1fc00aa69f2"
        },
        "item": {
          "id": "7f2a13f2-934b-4e1c-98ad-e75cdcbe5b56",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e8623010-f334-46f3-8391-ccae5a06a1b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6582ef47-c68b-43ce-8755-ee7097107a0e",
        "cursor": {
          "ref": "ea313be4-a8a6-4260-b597-5778f486f15a",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c925fa73-dccb-4ffc-a745-934f38a1e9b8"
        },
        "item": {
          "id": "6582ef47-c68b-43ce-8755-ee7097107a0e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "145bdd9f-f602-405c-b24a-b73ce657fec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9061c213-6fa9-40ea-9598-ab1935aaf094",
        "cursor": {
          "ref": "9d248755-67bd-429f-9c5d-4b59fc03e0a7",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7c13a805-7468-4663-9823-270e432eb964"
        },
        "item": {
          "id": "9061c213-6fa9-40ea-9598-ab1935aaf094",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5793361e-db5c-4f9e-af1a-5dca0c9bd538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa45236b-ee4d-43ee-98ff-081cebc7148e",
        "cursor": {
          "ref": "45350388-24b0-4db1-817e-da59aadc764f",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "534d4ede-8c48-4215-bb3b-1e045f387ab3"
        },
        "item": {
          "id": "fa45236b-ee4d-43ee-98ff-081cebc7148e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7cf26a7c-9999-4955-9492-32dbf772c634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9d383c-7e96-4ef2-af51-63d9d53bf363",
        "cursor": {
          "ref": "daf739ee-5f8d-4c83-9321-1d8c8ffbacef",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "bfb51b85-6c7e-435c-9d29-318d0d0505d0"
        },
        "item": {
          "id": "7d9d383c-7e96-4ef2-af51-63d9d53bf363",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f28119ce-fd60-4ebd-af3f-61644b9e6849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce23cb89-bb04-4af4-a4b5-6d6ebb47cf54",
        "cursor": {
          "ref": "b1ea8034-e088-4a37-8541-c1aa62c4b7a6",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8889cc3f-ecdc-4874-8c28-d1348d30e16c"
        },
        "item": {
          "id": "ce23cb89-bb04-4af4-a4b5-6d6ebb47cf54",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "baaae618-a7a2-4d42-9a4e-8ea6c2b257b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd277b1-c063-40b5-80d6-646005cc5515",
        "cursor": {
          "ref": "0863016a-25f1-4418-ac69-275eff3fe153",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "da18c6f6-9aa4-4203-aca6-d9e3cca09b28"
        },
        "item": {
          "id": "5fd277b1-c063-40b5-80d6-646005cc5515",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ddf7d0e7-96e0-4670-82f7-c32f00806908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3dd69a1-4b77-49e1-8b48-3515994d3ba7",
        "cursor": {
          "ref": "f4b00ea0-1c8e-4575-a645-7ddd70f9031c",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "76a81ea7-ca8c-4598-b4b9-0dcaaf307c49"
        },
        "item": {
          "id": "b3dd69a1-4b77-49e1-8b48-3515994d3ba7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "820313ad-07f1-4a08-8bdf-abbf818cab7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48917462-d4b7-4e99-bb3f-5541ca10a712",
        "cursor": {
          "ref": "50b306e4-d165-46ed-8ba6-22084a25bcc2",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ebbf7116-2046-4fdd-81b8-5bea09aeb863"
        },
        "item": {
          "id": "48917462-d4b7-4e99-bb3f-5541ca10a712",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "737cfa51-2bff-440b-9cc7-8d8e1c2b932d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf91b65-29db-4c59-9a6c-5d4d9314744a",
        "cursor": {
          "ref": "575f7de5-223a-4629-85d0-1a891fe1b3e0",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ba25c328-d33f-4d50-ab1f-cc54cb3b58e0"
        },
        "item": {
          "id": "9cf91b65-29db-4c59-9a6c-5d4d9314744a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3f1f7090-38dc-4c9b-ac9d-833c729dcbe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6599e3a3-6db5-4631-9e4b-cd6fa0facc92",
        "cursor": {
          "ref": "0eb6a2ac-1d07-44e4-b119-41a183b769ea",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4209ab90-652d-4bca-8772-c66e77179901"
        },
        "item": {
          "id": "6599e3a3-6db5-4631-9e4b-cd6fa0facc92",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "93458f56-cf20-4040-8e21-93e2bfaac570",
          "status": "OK",
          "code": 200,
          "responseTime": 221,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "181b73a2-fc7c-41f9-b1aa-a508243a3352",
        "cursor": {
          "ref": "3f57bd92-1199-435e-baf7-68892a06b3df",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "363bd4b2-755b-4d10-bf19-630b11493dfc"
        },
        "item": {
          "id": "181b73a2-fc7c-41f9-b1aa-a508243a3352",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "06fbe1d0-96b0-4a2c-b274-71d5b785adff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b5e799f-13ba-4a8d-9776-dbcd38955ba3",
        "cursor": {
          "ref": "1c0bb76a-b20f-4b68-9f42-66e38370becb",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "39581a5a-2348-483c-b1fc-4568bfd2e435"
        },
        "item": {
          "id": "7b5e799f-13ba-4a8d-9776-dbcd38955ba3",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a59ee740-6317-4f9a-809e-38cb8b363507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3fcc372-2e22-4881-80c3-a17022b06b21",
        "cursor": {
          "ref": "633a051f-84ec-4c9a-a17a-9d1cb3dd38e9",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5151c069-4775-4a65-bfa0-17689d8e2349"
        },
        "item": {
          "id": "c3fcc372-2e22-4881-80c3-a17022b06b21",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3930671e-7533-4757-9a3f-7478b1fa9452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80cc448-080a-42c7-99c1-0dc696a24fd7",
        "cursor": {
          "ref": "cbf500a2-77d9-4447-b7d9-2eb57579eff0",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "84320d36-9904-4bd9-9b31-3ebc1d691e74"
        },
        "item": {
          "id": "d80cc448-080a-42c7-99c1-0dc696a24fd7",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f08cac99-6949-49ff-8f6f-44da0776f197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ead504-5b3e-44a3-9444-ae02657d10fe",
        "cursor": {
          "ref": "3d6448f5-5c2c-4ec0-9e39-ad05f3f611fe",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "69dfb748-1f11-4fe3-a7c0-0933477705ef"
        },
        "item": {
          "id": "b1ead504-5b3e-44a3-9444-ae02657d10fe",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "46b2a5aa-1c76-4d09-b7ac-e4b892f8f333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffe0ba0-12e4-4fce-be95-d54c593a7f35",
        "cursor": {
          "ref": "5c9a5558-da66-47d4-bd53-70192a9f51ef",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c1c9ddd1-7d5d-41e7-a1a7-cb21f57607da"
        },
        "item": {
          "id": "6ffe0ba0-12e4-4fce-be95-d54c593a7f35",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a6a72df1-ed4a-4d7f-91df-e9ac420fb194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc86737-cd9d-484d-aad5-2ba0b3e6db99",
        "cursor": {
          "ref": "5c3281f3-f502-4d8c-8633-ea7956009af2",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c01c095b-732e-4487-b59b-ef1bb4536033"
        },
        "item": {
          "id": "bbc86737-cd9d-484d-aad5-2ba0b3e6db99",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b0f9e097-4827-4190-bdfa-306993d48791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9333ee34-419c-4cab-976a-c1a46ce41be2",
        "cursor": {
          "ref": "4118c722-6303-4e1d-bddd-cc1014abf760",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3140b90b-dc2c-4ecf-8014-d948708d98c9"
        },
        "item": {
          "id": "9333ee34-419c-4cab-976a-c1a46ce41be2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "90a628df-efac-439a-9eb1-2dcf593f25de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88334e21-8ef7-4a8d-80c0-aca5337409a1",
        "cursor": {
          "ref": "caa25d57-c4e5-4ac8-b352-2267ac6f4b71",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5f7c1389-af59-47e6-a1b1-f67508344aa1"
        },
        "item": {
          "id": "88334e21-8ef7-4a8d-80c0-aca5337409a1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b42f8ca5-74b7-4df6-987e-c428b4d94f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bda18c8-cfdc-403b-961b-bb12de2a0d4f",
        "cursor": {
          "ref": "e1c7e17b-e061-4dc3-bb47-d51d07b966e9",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "91bc43f1-8ce0-491a-b648-62000fb7723f"
        },
        "item": {
          "id": "9bda18c8-cfdc-403b-961b-bb12de2a0d4f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0f7f8ed7-8554-4849-92ca-941eae2107e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec397576-275c-42d0-9bca-1ebf775e20de",
        "cursor": {
          "ref": "314ad410-0f76-42e0-82d6-95196d9b23d8",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5995fdae-a891-43c5-9800-0256ac447102"
        },
        "item": {
          "id": "ec397576-275c-42d0-9bca-1ebf775e20de",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "de1abe1c-196e-4dfb-9272-e1425f3df29a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8808dbc4-fe93-4ed0-8b18-39145e996fae",
        "cursor": {
          "ref": "525ed686-de60-4fb6-bd38-b828d713eabd",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2cb8f5ad-518b-4316-8171-8bfd83a4565f"
        },
        "item": {
          "id": "8808dbc4-fe93-4ed0-8b18-39145e996fae",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "81528fec-e1f5-4e58-9a11-f5408e6d79b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5304dc67-cd69-4def-9a77-efe8054f457e",
        "cursor": {
          "ref": "247d025c-ae56-4245-85e5-6e538fcf2ace",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "26dc6078-64b4-486b-8e6a-e2c1f9f8e196"
        },
        "item": {
          "id": "5304dc67-cd69-4def-9a77-efe8054f457e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "40bac45f-f752-4d45-82e8-126f7676cfab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ca064b-50aa-448c-9452-06f1450ce4ca",
        "cursor": {
          "ref": "c276565a-be6b-48eb-949e-9b1d36b2be38",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "79ea35ba-5610-42f4-8457-dcaf84ceb9fc"
        },
        "item": {
          "id": "89ca064b-50aa-448c-9452-06f1450ce4ca",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "272ad8ae-0d2c-4643-9dcd-12a65cbc4bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902a07f3-a005-4bff-9806-5fda98a4349c",
        "cursor": {
          "ref": "8a943465-7951-4dfb-bb6e-7152bd0a66c9",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "993f589d-41e3-4409-ae7f-28e7fdae484f"
        },
        "item": {
          "id": "902a07f3-a005-4bff-9806-5fda98a4349c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "69877774-e397-4ef9-b7d3-66ab2ffc858b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0c0c6e-f061-4ff8-963f-9649876e728d",
        "cursor": {
          "ref": "2b1bb99e-7e3b-4d2c-a9d9-06dd85b73fd9",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "93b72f9d-bc10-45ed-acfd-3867715c1419"
        },
        "item": {
          "id": "0f0c0c6e-f061-4ff8-963f-9649876e728d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "deed3238-a563-445d-b45d-3d8459e3a11e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea5f04e-53b3-4ab7-8a0d-bdd0a7217493",
        "cursor": {
          "ref": "542167f8-0a41-4b47-817c-5f17999479fc",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "63de7cf5-e4ab-48db-b29e-cde812a989a3"
        },
        "item": {
          "id": "eea5f04e-53b3-4ab7-8a0d-bdd0a7217493",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "20d86dd8-4fac-49c1-bf13-62574f203ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c86941-e158-4984-902d-4dab2b599805",
        "cursor": {
          "ref": "58a1d5d6-a09a-4d37-ac8f-e6732e0d80b7",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "22c09d0b-36cd-42e5-818f-70b6b12e86d2"
        },
        "item": {
          "id": "b1c86941-e158-4984-902d-4dab2b599805",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2e5675d2-4ce8-498a-8abe-bf859b07074f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef5f2e4-01c2-4715-bfc6-b9c2628e2fb2",
        "cursor": {
          "ref": "8efdca97-9691-418d-a430-7a6bb788666e",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b5c10a4a-3f24-4efc-9612-0ffcdd842961"
        },
        "item": {
          "id": "1ef5f2e4-01c2-4715-bfc6-b9c2628e2fb2",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2bb72f52-880f-453d-9503-22c2ecfa9cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe93769-fa70-4bcc-a6a6-ca79bc93088f",
        "cursor": {
          "ref": "16500011-c3f8-4df1-b6dc-d0f62b28ae21",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "73dc1bc9-3b2d-40e8-b2c0-682bec8aaa86"
        },
        "item": {
          "id": "3fe93769-fa70-4bcc-a6a6-ca79bc93088f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1b32afc9-bac7-4c54-80f8-d0c971d3a03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351f2756-7f16-45e2-a4b7-da68c178a328",
        "cursor": {
          "ref": "45ade7e2-9ab6-497a-b0c5-7d1b3df8826a",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ee5bb14f-e214-4b63-a8ec-39e8fe2fa174"
        },
        "item": {
          "id": "351f2756-7f16-45e2-a4b7-da68c178a328",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "49dfa2ae-bddf-454f-8652-de8b853d13cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb6a81c-5022-4d51-98dc-bc16bd2b2e6f",
        "cursor": {
          "ref": "741cb65f-c6f7-4928-8a95-ba00b2bf78ce",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "93f2fe1b-4f28-4387-8e01-6b6d5128cca4"
        },
        "item": {
          "id": "8eb6a81c-5022-4d51-98dc-bc16bd2b2e6f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "388a5d2e-ad79-43f2-84d7-f4969e439177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "919a134f-2c68-4c3d-9aad-eb58e79c2f11",
        "cursor": {
          "ref": "00977eaa-0f3d-4755-88ce-fdbdc094f741",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9e8434f5-487b-4fec-a86c-f97034b68ed4"
        },
        "item": {
          "id": "919a134f-2c68-4c3d-9aad-eb58e79c2f11",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ac82f987-d817-46a7-99a4-72328717fe34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c6eee2-f69f-4ee1-85a2-c09751661674",
        "cursor": {
          "ref": "0b046e36-f62e-418c-8f7e-1a098c560c96",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ed38343c-72ba-468d-80d6-630bbf159073"
        },
        "item": {
          "id": "64c6eee2-f69f-4ee1-85a2-c09751661674",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "820900ca-5ad9-460e-89b0-41efb60b1579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabf128f-1af9-43e3-a798-5bf912bcb512",
        "cursor": {
          "ref": "cb8467a7-df68-4d8a-bef7-19b4089bedcf",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "37df0674-5a16-4138-b85b-d235a50f546b"
        },
        "item": {
          "id": "cabf128f-1af9-43e3-a798-5bf912bcb512",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "35efebac-9f8a-480e-9939-d9a372818fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09dee563-af86-458e-99c7-4f6368b24b1a",
        "cursor": {
          "ref": "77d390be-2fc8-4f25-9e17-f0a7dd175533",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "83d0e7e6-8541-42ea-b983-574dc11d755c"
        },
        "item": {
          "id": "09dee563-af86-458e-99c7-4f6368b24b1a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ffab4895-dc4e-4bf4-81df-e1d1a9098d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0eb381-3f99-46ae-b16e-7b8212644676",
        "cursor": {
          "ref": "bf3d6cc0-3727-4082-b70c-46b8ae9096c2",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2e34a32f-cf01-4198-a417-9528e07c1602"
        },
        "item": {
          "id": "de0eb381-3f99-46ae-b16e-7b8212644676",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7acee1d1-63b2-41a7-91eb-9cd98ba5f98e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d3363b-1bf6-44cb-bcca-09fbe2d87211",
        "cursor": {
          "ref": "c68720c5-0ba2-45d9-b0d6-761d6a5fda2d",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "90d8b2b9-b92d-4e12-885f-5ef0ba98e0fa"
        },
        "item": {
          "id": "c9d3363b-1bf6-44cb-bcca-09fbe2d87211",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "4b3a3976-545d-4848-aa5e-e0f406a33b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786533f5-85a5-4ec8-806e-c7a1af7863bf",
        "cursor": {
          "ref": "6284399f-ad2b-451d-b1b6-ea9363c5d3bb",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c04e0f39-09ed-4cb4-940b-a329b5eb7f2d"
        },
        "item": {
          "id": "786533f5-85a5-4ec8-806e-c7a1af7863bf",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7ae073f3-5287-43ca-9e66-5d6d49765439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118554b5-cc5e-4c6d-87df-d2aeb592eb63",
        "cursor": {
          "ref": "1c048f04-8ac0-4e90-8060-45a009271a9e",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6562fca9-7ee2-4439-8a3b-db43471c3353"
        },
        "item": {
          "id": "118554b5-cc5e-4c6d-87df-d2aeb592eb63",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b2c37fcd-b2f3-46a7-8d89-32dcf2b919c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bb2193-620f-48b6-a3f1-aba6a54d1451",
        "cursor": {
          "ref": "a0cea763-d9f9-4792-aeea-3849df4566b6",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d50daab7-37a9-421f-9635-245b75cb0db6"
        },
        "item": {
          "id": "58bb2193-620f-48b6-a3f1-aba6a54d1451",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3fb1b82f-e632-44ad-b3ea-353fa68b8093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bfdcf2f-afeb-405e-8f39-d89d15291e18",
        "cursor": {
          "ref": "b5a02cd9-cd3d-4894-b73c-81235f99331e",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "38eeaa8d-44ac-4d0d-9beb-b192e6891e50"
        },
        "item": {
          "id": "4bfdcf2f-afeb-405e-8f39-d89d15291e18",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6147d4b2-9af7-46a4-aeff-99e1a2a55b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b0cc06-0ef0-4d7c-9ec2-3866dde9d80c",
        "cursor": {
          "ref": "5f81b0df-42e6-476a-a0ab-e9e243b5e005",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "99a1b22e-71e3-4e85-be45-3bead9997110"
        },
        "item": {
          "id": "56b0cc06-0ef0-4d7c-9ec2-3866dde9d80c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3e25166a-f782-4f7c-bab5-d43811268860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb3fcb6-31d5-4e25-8887-3f10e4870fc3",
        "cursor": {
          "ref": "d148d5a2-8a7e-4cab-887f-381877402bac",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9cf5183b-203a-4a9f-82cf-1769b564d9e1"
        },
        "item": {
          "id": "adb3fcb6-31d5-4e25-8887-3f10e4870fc3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4cab7095-d991-41c2-bbbe-1e96c62715da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e5225d-45b6-4f79-ae51-4aea912d4f99",
        "cursor": {
          "ref": "96bc6b3f-07db-46da-828c-a2555127fc84",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "08d8c3dc-d525-4536-8abf-d8192c57a3e4"
        },
        "item": {
          "id": "90e5225d-45b6-4f79-ae51-4aea912d4f99",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5abfc059-e315-4259-a9e7-686c9c61c850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4bff734-ca38-4b7f-ae00-db756caed2b7",
        "cursor": {
          "ref": "322a29cc-1a31-451f-a733-65bb6bf788c6",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d9966c69-181c-4cc9-b001-0d9002061321"
        },
        "item": {
          "id": "d4bff734-ca38-4b7f-ae00-db756caed2b7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "dc04c0d6-5e1b-440f-b762-3a9b38a045a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51dd0517-9aa0-4ac4-867a-399ac71e0734",
        "cursor": {
          "ref": "b1ddfaf4-3994-40a8-a2e3-834e0a2bf140",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a87adfe4-82fd-4e9b-bc4c-b881daa4a990"
        },
        "item": {
          "id": "51dd0517-9aa0-4ac4-867a-399ac71e0734",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "37f939ad-d293-48c8-b0d9-d72dd926c6e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5742aa-3c8b-4e9d-8831-3a0b7d0354e4",
        "cursor": {
          "ref": "4f2a574c-18e7-4324-9fc2-a0c21beb250b",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a3bc6573-cec5-43db-b877-dbe013258f0c"
        },
        "item": {
          "id": "af5742aa-3c8b-4e9d-8831-3a0b7d0354e4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "46527e21-2458-4995-abf6-4f64d0629d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd7dcc5-fd01-4118-aeb1-3639343a7803",
        "cursor": {
          "ref": "815e08ae-e80f-46f7-ae0d-d76129029573",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cdcc5c8e-a26c-47a5-89db-17637d5ca656"
        },
        "item": {
          "id": "7bd7dcc5-fd01-4118-aeb1-3639343a7803",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "47a7bef1-a377-4eca-8180-e3ee88405ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7adc4f-dd55-46fd-9180-6cc8edc60c25",
        "cursor": {
          "ref": "f75b9caa-cbde-4941-ad08-dcb276983d8c",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c3119338-829a-4b51-9530-e1ed75c5f681"
        },
        "item": {
          "id": "dc7adc4f-dd55-46fd-9180-6cc8edc60c25",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5e2a9e75-260c-4f1b-9b64-9c4b777e4285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c01567-04a5-4fa3-87bc-dae881186814",
        "cursor": {
          "ref": "8f975c89-dfca-44a4-aab3-83cd133d4014",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "dacb7520-c277-43ba-b794-fbcce9fdfd70"
        },
        "item": {
          "id": "31c01567-04a5-4fa3-87bc-dae881186814",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9ebc550b-1084-4737-844c-ec32ea7ad497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a1bc5bc-c3d4-439c-8809-5bea014dbd78",
        "cursor": {
          "ref": "16c63caf-ebc8-4d55-8951-76e404d7e9b9",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b6e544e4-c7f1-4394-8803-9d1b2e431380"
        },
        "item": {
          "id": "0a1bc5bc-c3d4-439c-8809-5bea014dbd78",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1c37cddb-2988-48dd-9278-11dd60e0af33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2486058-2a7b-4f10-94f4-9cb8bcf20c7d",
        "cursor": {
          "ref": "7fa3ee33-0f84-46b8-b0d6-44d55cf390e1",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e4def78d-3c4c-4d88-98fd-fdab8fce261f"
        },
        "item": {
          "id": "b2486058-2a7b-4f10-94f4-9cb8bcf20c7d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "00c14bda-797c-47b0-bd8e-408a1580f784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdbc71b-edba-4278-8ab7-08791d29f872",
        "cursor": {
          "ref": "654a2dc8-6349-42d8-a9ef-40053acce0c0",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6093f9a6-1230-4f58-8fbb-1704d9dd623e"
        },
        "item": {
          "id": "8cdbc71b-edba-4278-8ab7-08791d29f872",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2272386e-ae71-49be-9c3f-1c3dc9b05f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23ca391-7233-4fa6-aece-9dc3be67c477",
        "cursor": {
          "ref": "1e6e195d-da1d-4314-ba3a-ae9f037417b1",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1a82ed62-b21f-4815-ab46-d49ed52125de"
        },
        "item": {
          "id": "a23ca391-7233-4fa6-aece-9dc3be67c477",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "55f1edf9-6f10-4fc2-9bc8-13a24d1bb9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25f3dcb-a6f9-4c99-b3fe-f7f38c49954a",
        "cursor": {
          "ref": "f3face85-1f88-4bcc-8d38-d5b09028c1be",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "06fa014b-fb84-4b9e-a523-888cd3e502f4"
        },
        "item": {
          "id": "b25f3dcb-a6f9-4c99-b3fe-f7f38c49954a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "88a97a8d-3e36-4c20-b46f-cbb261cc13cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91f3178-2829-4bfc-bf54-73d7cbb8a4a4",
        "cursor": {
          "ref": "8872323d-53e3-47b0-a913-37dbc636960a",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "04124f48-85a4-47ef-94be-598947e3ea90"
        },
        "item": {
          "id": "c91f3178-2829-4bfc-bf54-73d7cbb8a4a4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "52e42bf3-d2ba-4260-b29e-b83972eb2066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4caa0f0c-09b4-4c5d-a86f-c99991b71e41",
        "cursor": {
          "ref": "3ef092c6-d7ba-4a7d-941a-01c0a0b79bde",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7aed5b56-54df-493e-ae68-d0cfea878399"
        },
        "item": {
          "id": "4caa0f0c-09b4-4c5d-a86f-c99991b71e41",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "66cff102-d7c3-4317-8d07-5484d145b335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772a1a4d-804d-44a3-9368-30a447523c1e",
        "cursor": {
          "ref": "28176a7f-d465-4420-b531-22e6838cf78d",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ffb7db40-9348-439f-816c-8b0801143c80"
        },
        "item": {
          "id": "772a1a4d-804d-44a3-9368-30a447523c1e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6836f7ce-8de7-4005-8128-e93864736c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09157ef7-5e26-4c6b-90ce-be8f1abfd357",
        "cursor": {
          "ref": "96e1d8aa-c518-4add-9000-56685169a7a2",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d127307d-5456-48b3-8706-39a020c211a4"
        },
        "item": {
          "id": "09157ef7-5e26-4c6b-90ce-be8f1abfd357",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "eaf9f213-e84b-4d2a-976a-4fac88c78cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbba8f61-20be-4c33-8a31-45285bd45af1",
        "cursor": {
          "ref": "7327130e-948f-46b9-852d-0518c42a734c",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c524e518-e31d-4da4-954a-b551b243e043"
        },
        "item": {
          "id": "cbba8f61-20be-4c33-8a31-45285bd45af1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "161a3e70-0488-460a-99ca-fcdfa71dee02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d750b7-8c2a-473e-9e07-c9af0b0dab95",
        "cursor": {
          "ref": "60aa55ef-b771-42f0-b081-abe58d80ecc7",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "157aab3c-d0f0-4ede-8e06-82b2349115e1"
        },
        "item": {
          "id": "40d750b7-8c2a-473e-9e07-c9af0b0dab95",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "35d48f62-4374-48aa-9df8-263f410bd345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3624fe4d-1524-446c-82cf-4914094e3a1e",
        "cursor": {
          "ref": "758d4c04-0cf7-45ba-8e25-207d6186d02d",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4668e1e8-2c91-4d05-9aef-ee16548e96ff"
        },
        "item": {
          "id": "3624fe4d-1524-446c-82cf-4914094e3a1e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "af8c6d83-0239-4de1-97c2-51e3cff910c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a69a5bb-2ff3-4cbf-b6c0-888e5111fb29",
        "cursor": {
          "ref": "36fc76ff-aff2-462a-a902-a42cb6bc2867",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "33923443-55e6-420a-8246-272b17147afd"
        },
        "item": {
          "id": "5a69a5bb-2ff3-4cbf-b6c0-888e5111fb29",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "128a7df3-ef6a-4b7a-b6b7-8c9f9077be01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac037d0-fc92-4224-9f25-170a363abb0b",
        "cursor": {
          "ref": "52c9e876-5535-4177-b0fa-59ff0d23a887",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "66c480c5-7f5b-4ae4-afbc-c6767b984464"
        },
        "item": {
          "id": "0ac037d0-fc92-4224-9f25-170a363abb0b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "29dbaac6-9d5d-4177-be9d-779d41e478ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe2d7d6-5441-4ca5-8d81-6e1a5b2647c7",
        "cursor": {
          "ref": "95a5bc6d-99d0-4a69-ae54-f2e17b45ecba",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1a815923-8341-47a4-8c6d-c05605cfe005"
        },
        "item": {
          "id": "7fe2d7d6-5441-4ca5-8d81-6e1a5b2647c7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "40a56b43-62aa-4edf-a7d0-85dbb6045a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2341751-23bd-4f9c-b258-c41affc0371f",
        "cursor": {
          "ref": "4eaa7ed3-6f26-4679-afd9-ba768d205e7f",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "069ab3c1-6a31-4611-8b09-b2612bc2a59b"
        },
        "item": {
          "id": "d2341751-23bd-4f9c-b258-c41affc0371f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "19446b28-ad33-48fc-a4db-e95e08831f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec41948-eb80-4dfc-8ac3-0694a92e6496",
        "cursor": {
          "ref": "fd472ea0-d29e-4fd3-8eb6-7361c52a09ca",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "078b9474-cb52-4f12-bc02-303c40e4d050"
        },
        "item": {
          "id": "bec41948-eb80-4dfc-8ac3-0694a92e6496",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "11382bfc-6474-4335-8bde-3c5faaa43a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb267190-f115-4539-a008-092fd183f846",
        "cursor": {
          "ref": "814ce4da-da92-44c8-8f0f-a1116ee73dcc",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "72e71fe2-6f92-4fa3-ad45-a546ebff41ee"
        },
        "item": {
          "id": "cb267190-f115-4539-a008-092fd183f846",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "554d71c0-f745-4e18-ac73-2a7994633324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f837065e-89da-4565-b05c-06782ccb31b3",
        "cursor": {
          "ref": "d19b985b-4fd6-4298-876b-e61f05dc2223",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f3aede6d-4645-4343-933f-5b4317d9fc30"
        },
        "item": {
          "id": "f837065e-89da-4565-b05c-06782ccb31b3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2de96a8b-a4c1-47a8-9fdb-fffd313a065a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ff973c-f94c-4abe-99da-2e4aee12f34e",
        "cursor": {
          "ref": "8cb2c766-21b6-4503-b04a-a5889aff5d0c",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "da94c9e1-630c-4e4f-9270-4e3ed6d093ad"
        },
        "item": {
          "id": "e6ff973c-f94c-4abe-99da-2e4aee12f34e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4a3057bb-c120-49c5-888d-64d5148f5cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4175d664-26a5-45d6-85f3-7d106b9260bb",
        "cursor": {
          "ref": "ac31f745-83ca-477c-ba00-57352d12dea4",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3f532128-f7e5-4e17-9a70-2d2d32ca983b"
        },
        "item": {
          "id": "4175d664-26a5-45d6-85f3-7d106b9260bb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7ecd1fc2-d988-4a53-8674-f589d56a4e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5ccb6f-2555-4ec3-baa5-b70baa7beaee",
        "cursor": {
          "ref": "bc5d1f9c-df4d-4c89-a461-ac3eb7346fc0",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e53b5273-8520-4ffa-be84-6f2610fa573a"
        },
        "item": {
          "id": "bd5ccb6f-2555-4ec3-baa5-b70baa7beaee",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f20c7997-ace8-4d84-af6e-ecdb8f0f4a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ba7332-1a10-4c1b-a12a-6514176ae043",
        "cursor": {
          "ref": "b9d21528-0ba8-4385-804d-e82e1adb2850",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "598805d7-7ff3-46cb-9228-b7a056f30ca9"
        },
        "item": {
          "id": "18ba7332-1a10-4c1b-a12a-6514176ae043",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f3497fa3-7e6f-4f90-9625-530f0daad850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b726ddee-6ac8-46d5-8ce1-ebe989e82e67",
        "cursor": {
          "ref": "c8a26084-00b7-4f1c-be58-77858b410b05",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3c576dee-6d92-4770-a976-3e876ddd1751"
        },
        "item": {
          "id": "b726ddee-6ac8-46d5-8ce1-ebe989e82e67",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "32a48893-912f-4e3a-a331-c0c407286da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de13993-11d4-45ea-a966-d05b7376ece8",
        "cursor": {
          "ref": "fffbeefc-4a15-445c-91e6-5b2a6f867e19",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "73d78a15-05e8-4dd7-aadb-741662d2704b"
        },
        "item": {
          "id": "1de13993-11d4-45ea-a966-d05b7376ece8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "71ca3324-8327-4096-bc93-1f5badd22584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5bb91f7-db84-4b61-81c6-ed76b4c0c46b",
        "cursor": {
          "ref": "50c0d681-8f3a-4688-9dd7-7763a83a5236",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "63d359d2-7c7e-47ec-98f2-a5f44c5de91b"
        },
        "item": {
          "id": "d5bb91f7-db84-4b61-81c6-ed76b4c0c46b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "cfb8f75d-74ce-4fb4-af9d-2633be6347e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4723d05d-2546-4415-b4f9-23bd68549de0",
        "cursor": {
          "ref": "0adbac09-9a66-4e06-851c-63817e10afb6",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7daac145-1171-4f80-8056-283482a54e93"
        },
        "item": {
          "id": "4723d05d-2546-4415-b4f9-23bd68549de0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5c300ef3-ad74-445a-9fd2-c53676e20d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc9d627-05fc-4c16-877d-bab5c54e5c3c",
        "cursor": {
          "ref": "ec955cdb-ea89-4926-a7de-ce09bea67ad5",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "470d1585-f034-4a6e-aa4b-ef614f4aae07"
        },
        "item": {
          "id": "dcc9d627-05fc-4c16-877d-bab5c54e5c3c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "69e16db8-ff4c-436c-8218-f3ce55f838a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff32198-9f76-46fd-94a8-95a6dd9fda2a",
        "cursor": {
          "ref": "9e9f7735-3349-4f8d-8f83-fef0ac8a546a",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "bbcd6332-d4dc-4c95-8c54-6229e493f202"
        },
        "item": {
          "id": "2ff32198-9f76-46fd-94a8-95a6dd9fda2a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "204b80ec-6b0b-48da-907f-74875d57e40d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f822c6-c6c1-4b30-8256-238d8c1643f7",
        "cursor": {
          "ref": "3e41398b-8374-4fce-b6b6-83fb241a5760",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7e994a02-ab4d-446d-9273-2f919941cfb5"
        },
        "item": {
          "id": "48f822c6-c6c1-4b30-8256-238d8c1643f7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e15920df-8f39-4dc7-9f24-260c65e5f0cb",
          "status": "OK",
          "code": 200,
          "responseTime": 438,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb34d591-9c96-4c27-8d18-1efead6cf53b",
        "cursor": {
          "ref": "fce00b7e-a460-4cc3-9181-d4b5ba07e4c8",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3ab4ae8e-00bf-443b-a555-c2671fc0a717"
        },
        "item": {
          "id": "eb34d591-9c96-4c27-8d18-1efead6cf53b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "24c8e069-6da3-45c7-ae9d-4ad12c902924",
          "status": "OK",
          "code": 200,
          "responseTime": 429,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f333a7ae-8542-41a2-b814-b06173d75fa0",
        "cursor": {
          "ref": "0ef4b9ef-e7b8-4da3-a2ac-e572bdc873a7",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f0614b25-f10c-4f03-82e8-b984bbd4d00b"
        },
        "item": {
          "id": "f333a7ae-8542-41a2-b814-b06173d75fa0",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "25280ccf-c28a-4c97-aead-e11389aa3703",
          "status": "OK",
          "code": 200,
          "responseTime": 581,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "081ca6c4-46f0-4183-b8af-fc5160297ac6",
        "cursor": {
          "ref": "30a86354-8df2-42e6-8724-cf9f25422bfb",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "19d30f2d-64c6-4c98-8b7c-587b1b7743ee"
        },
        "item": {
          "id": "081ca6c4-46f0-4183-b8af-fc5160297ac6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5740af84-087e-450d-b61e-a03013c41922",
          "status": "OK",
          "code": 200,
          "responseTime": 456,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b9a813-d0ae-4887-b577-e3adf2dc100b",
        "cursor": {
          "ref": "2f62b749-e0ce-4bee-8bb1-ff9b976f722a",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4b4ea3e2-e2cc-4d3f-8589-14e018226aa5"
        },
        "item": {
          "id": "d3b9a813-d0ae-4887-b577-e3adf2dc100b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8ca1742c-1d31-425e-9b0e-9bb7986f39c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b9a813-d0ae-4887-b577-e3adf2dc100b",
        "cursor": {
          "ref": "2f62b749-e0ce-4bee-8bb1-ff9b976f722a",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4b4ea3e2-e2cc-4d3f-8589-14e018226aa5"
        },
        "item": {
          "id": "d3b9a813-d0ae-4887-b577-e3adf2dc100b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8ca1742c-1d31-425e-9b0e-9bb7986f39c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b9a813-d0ae-4887-b577-e3adf2dc100b",
        "cursor": {
          "ref": "2f62b749-e0ce-4bee-8bb1-ff9b976f722a",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4b4ea3e2-e2cc-4d3f-8589-14e018226aa5"
        },
        "item": {
          "id": "d3b9a813-d0ae-4887-b577-e3adf2dc100b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8ca1742c-1d31-425e-9b0e-9bb7986f39c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd122be4-2883-40ab-9aa9-6744e2e55a87",
        "cursor": {
          "ref": "e08d22d5-f79e-4ed6-bd9d-76911f4d8ced",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "fc87166a-b952-4837-a6eb-c683a4b0984e"
        },
        "item": {
          "id": "cd122be4-2883-40ab-9aa9-6744e2e55a87",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "585761ae-0ae0-402b-b56c-ee9c38e9a938",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 38,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2cfa21-df99-4648-a8d6-ed97225137a3",
        "cursor": {
          "ref": "493c22e4-a56d-4dff-b6f8-e12ce940d130",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f54de4b9-0f0b-4f07-a649-6ab7e4f16611"
        },
        "item": {
          "id": "bf2cfa21-df99-4648-a8d6-ed97225137a3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b313d153-3394-4709-a66c-ec753b46d3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "bf2cfa21-df99-4648-a8d6-ed97225137a3",
        "cursor": {
          "ref": "493c22e4-a56d-4dff-b6f8-e12ce940d130",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f54de4b9-0f0b-4f07-a649-6ab7e4f16611"
        },
        "item": {
          "id": "bf2cfa21-df99-4648-a8d6-ed97225137a3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b313d153-3394-4709-a66c-ec753b46d3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "3520a6c1-cb93-4363-bff5-87b792273ab8",
        "cursor": {
          "ref": "ffe188dd-16fa-4d1b-9bda-78d3aa3dfdae",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7bc526d5-a0e3-469a-9d4c-b16273ae4845"
        },
        "item": {
          "id": "3520a6c1-cb93-4363-bff5-87b792273ab8",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "77b76a65-5f51-4460-8842-0344ca3f78dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b29b08fe-4df3-43cf-9f75-4273d2b5fce5",
        "cursor": {
          "ref": "2a163caf-db4f-483f-bab4-2bd2d24594af",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a7391e71-741e-4a8e-8fcf-da9e1dc2091e"
        },
        "item": {
          "id": "b29b08fe-4df3-43cf-9f75-4273d2b5fce5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "12cc6784-08c6-464c-a6f3-53e993fa7cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "b29b08fe-4df3-43cf-9f75-4273d2b5fce5",
        "cursor": {
          "ref": "2a163caf-db4f-483f-bab4-2bd2d24594af",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a7391e71-741e-4a8e-8fcf-da9e1dc2091e"
        },
        "item": {
          "id": "b29b08fe-4df3-43cf-9f75-4273d2b5fce5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "12cc6784-08c6-464c-a6f3-53e993fa7cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "02de5358-6020-4310-9fa0-96a83f15747c",
        "cursor": {
          "ref": "2b563b6e-6c9f-4893-a7df-bb9b49ddce39",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6ed6dc1d-bf73-4559-b3b1-bbb8e9deedb7"
        },
        "item": {
          "id": "02de5358-6020-4310-9fa0-96a83f15747c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "a959bb5f-5df7-4469-ba22-532122510dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}