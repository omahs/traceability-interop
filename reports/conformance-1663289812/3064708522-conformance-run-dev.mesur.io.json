{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "cd345768-76f8-4f35-a3dc-b89156823b7d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "73fcc6e4-680c-422f-a955-13972d0f8d76",
            "name": "Positive Testing",
            "item": [
              {
                "id": "69601d8d-82be-40a7-bc48-e77384f08ade",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc12d768-59ec-4a83-a5bc-13f8077b3eb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "88e3fe9e-be1c-4aa6-b18b-0a5496ed1890"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "221e797c-ad59-4932-84e9-a41c2c21fa6d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7f55933c-ad82-44e7-ab88-3d372841bb07",
            "name": "Negative Testing",
            "item": [
              {
                "id": "31dd4068-0bd6-4159-a611-ff8b28c35037",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1c1141ab-ffc0-40fb-aed2-20203f174a07",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da368ef6-80b6-4971-9178-2ac33dda3eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "466c1764-fad6-4ca7-8261-3a326cd0dc79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1814c3c9-849f-43cf-8737-4a54d64c1b4f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7efb35c-8bc2-49c7-909a-9dd41f26e044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a67e8f4-7dbc-4e00-850b-85c2d4fc2b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61f8adc-45eb-4ec8-93bf-4b6e56aa73ac",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6329d16-217e-4d44-88ce-840e7671603b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b50c60de-b524-410e-b157-d8b1dfd8dccd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "613f181d-7efa-4e12-a017-0d823e383fb0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36119d14-21ef-4206-b4db-d106926f01ee",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2373883-a4be-450b-a938-e375638f7db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff4ae191-e63c-4919-8741-e39eb90a62c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de8c971-8305-40f3-996c-05875cad4718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0996938-8cf7-4462-b5fe-4ca2dd19f189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315fd7ff-5dbb-4baa-b357-90b9b46ffc03",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75557ab0-74fd-45b4-84c8-a242e30ecf50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f7385be-fcc1-450b-98c0-61af3457446d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8d6e3f-490c-45ec-9eda-a8f7403a7b73",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b811c331-f221-46e9-a9e1-3e53c9780317"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6f67568f-92c9-414a-b283-6aacae64cd48",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d2a65d85-18de-481a-8ef5-7cbb5626d00d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36827448-9fea-41e8-915a-b7b04c618ebb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fcd61445-6c75-4e9a-86f0-e416bf33659a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f2df858-bfb7-4945-a8b9-cce4f5ce9190",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "dd0a80f2-1629-4003-8357-8a0c7ce6ec96"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64dd359c-45d7-4a3e-8e5d-1e778ac30191",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27b83190-a43e-4a91-9e45-905ea04e9749"
            }
          }
        ]
      },
      {
        "id": "33f4a1a1-f69e-4453-b9ed-11f65cef48eb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9d4cbfd6-ebb2-49d6-86f5-c23b6f1c3a7f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "28977b45-23da-479b-af3d-8886478225b8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7a196097-8dee-4904-8c8e-faf8fb58b993",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3d7f51-ef52-4ea8-a90c-0699a87d61b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba2a8e4-96ec-4564-af0b-db4a3822ff08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2258bf46-3ae7-4b3c-857c-80d6f3f67433",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59c54bd5-df34-4e0f-8e91-9527b1600fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e04b3a9-7a8e-42e9-bfa7-cfee720514d4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6df5c4-d3df-4272-9d45-dc7ce5824856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b15f38ca-683a-4c8e-90cb-d2c05c8ff0e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359e1276-1eca-47b7-9309-d4fcf810a059",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d0fa1c9-9a1f-478c-bd4b-53e467c6a721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521dd8f2-6d3f-4086-ace0-44d60647b71b",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41edd0af-0fd0-4140-8048-b92ccfbf6df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eef6758-7d78-473f-973b-d74cf52e0e68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca995be5-d063-479f-997d-f931f1f2a8af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "034cc01b-986a-4532-b329-c04f0aefc946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eddfe214-df5d-4cdd-9402-77a5d847ea97",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eafdfefb-fb17-4694-adae-5e8a4349dad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af4490d0-bf24-4ffe-bb4f-78c2ec74c47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa1a68b5-6b02-44a3-a84b-4e4ca287b243",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78ce1380-bc61-45a4-b0b6-b8dcbdc403c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce951bb-6edd-4a86-8663-6ae7573bc24e",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e392b9-ed88-443b-bfd2-e414866d7e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "202f9ce4-e503-4af5-9cef-10adfc884829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeda1944-c99d-4fc1-9731-3df546362969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52f250b4-b7a0-4e0d-8ea0-30eaab807ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18babe1-5119-4391-834f-c4467de7a16c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9d1e81-fe9a-46ef-a977-e05bbf4d7227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aaa0ab9-3ce9-42cd-9bf9-ea1478d83efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439701bd-3ef4-4cdd-814d-b83f1423ced8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7857eda8-bfd6-44a8-82bf-46c330837d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06b4e46-324f-4d1e-b09f-8888ad16a825",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34046ec-1f71-45cd-ae2e-23bf76b98b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d77502c5-8341-4f3f-8e65-975e8ee48579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9312c906-3de9-423a-b739-3ed57db33fab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22fc0ce1-3d98-4716-92c0-2ab90cada511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6e4608-b5c4-4dc5-a4dc-9509bc8f9944",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "875780ae-8938-4879-a62f-815b2bec62db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5020e9ac-f4cd-4125-9472-1408778ecab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad61e61-d7e3-4e25-a5eb-94ce413bdf9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "789d38a9-e9d1-40d6-a451-9b5f9f4aa149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0d1d48-f731-4c66-ac46-03d648b9f1b5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1fec9b-d773-4697-a9a6-d3eefd6717e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d42cde37-9a55-43ae-b146-cf7a2b744830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b6e644-d58c-45cc-8f20-d67d00cd6290",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd3715f2-0d22-47ca-b9bc-1ec71b9e1307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba4848c-3ff1-458d-a399-a5fce28206ee",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b467a24b-db62-4683-bea6-0b3ed41ce5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d866ca-7274-4ec9-92e9-2de784fc3d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8e59f4-8341-43a5-8573-d9e830a72ce4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fac701c5-74ff-49f7-ae7a-1da4bb11dbe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1c511c-8b69-4187-bcb4-332fa048dbdc",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960c65c4-5e17-4415-ad58-606bda3edca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338a83cf-d22a-4c81-b64e-551c0327df19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2cd599-3d2f-4b0d-82ff-caf7a0e82ca3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "dfe99e4a-fe59-4d41-b58c-5dbb7a9fd53c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae8be62-e05f-4370-b22a-182ed11cbc1c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7bb2a1-2236-48fe-b83f-757a40788434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c272a66-b763-4574-aa4d-3bf1987d5c42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47875f54-5ea0-4dec-9f3f-52a981d16fcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "3913ac04-9438-4b59-a731-0f430ae50d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75803892-d208-477f-a1f0-f9a8b6aff4bc",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dcf7a9-d5fd-490e-8005-2307c9705ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6a0fe04-a40a-44f1-9912-f4eedd6d5849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f8db8c-fe2f-43b3-acd9-9d82a4482104",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66aeef63-ad5f-4172-ac51-752ddc4757ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2c19fa-2697-4eb9-bb6d-20fe08a25516",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4152264e-9a7c-4983-a17f-edddf6c71e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f7865d-e239-4405-8521-c6e8d8df15ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6faf901-845b-452f-aa31-a7ceb69422ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb8812fc-3578-4130-b494-23b0df002c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cfeb5e-0955-4715-b1da-3b1fdb844fd0",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12dd049-e763-4a38-9b45-74482c06f838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30bdd71-3a0d-4a81-9304-8a68af915112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90dabd1e-f962-4af7-ad7f-ba006303fbfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "ded9bcaf-e41d-4d23-b295-354dbd77a2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8978a0-9726-4891-9585-725576e71603",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67644ddb-0541-4a32-ae31-00dba93b32ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bebb2a3-4427-47d7-8f0b-3099b74c9e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5775d88-ed98-4854-b267-e46bd3bf701c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "885c6c22-8569-4d26-877f-2e8e6b05b0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73f7597-293a-4230-996c-e5e23c358277",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edacb242-e149-4368-a5a2-3eb342eed49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "302c5aef-9d20-4707-a435-2092ce295bc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e86b05e7-18be-4a90-b690-dde8ed6c6095",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09479ae2-3e0c-4a22-a4de-cfbc56441dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301116dd-ce22-49a3-a03f-95c850f75194",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7473f9c9-21e8-4311-bb7c-208a0bf70257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb9fe0a-719e-4bf4-b428-d236aea01184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7bb8160-5b51-4bf1-a264-de0f5fe3c058",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f19995c-cf87-4794-aadd-d5820572a94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bdb9b0-c980-48f5-b507-ea19783fcce5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7e9eb4-1c5f-4ab3-84b4-40256ef07ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6eeb14e-1ec6-4cdd-b1c6-c84d601a94fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88f3b66-33ee-44f8-8a91-8d3da340817c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "508197d6-a1fe-4a9f-a575-3678d798be21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16dac73-0c1c-45d3-9e6b-bbac0b7b10ff",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c80a75b-3827-41b6-b130-eb680d5f73ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c3fa069-0fa8-4838-9056-a7968b895171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b879cd2a-09f6-4f6f-ae66-eb7a5715f051",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f801dfd5-4725-45ad-8cca-57ffc70e5cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0d8d9e-8007-4f67-99ea-4442fc059169",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a9b0a8-2794-4ec1-a516-27f613244016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4d1d36-052b-4920-b84d-3429739f9ba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba589344-e647-403f-823a-562674a0d847",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f16b5a50-c1df-4a7b-9485-49ff1a39600b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7547969-ae89-4914-88e0-c6e871328673",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "047aec94-d96c-4f47-a82b-471c15706330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e204a1d7-b4d0-47bc-b5fd-23d514b1957e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f366e3-3c0e-43e0-823a-2fead515fcad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70af4cb3-21d1-4923-97c5-94652c791ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88957894-00a0-4d6a-88c7-9f2255d76d19",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f962c8-12a1-405c-af73-297f1b259fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab7271b-c50d-4bb2-bf90-319e27398b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d33b08-df82-4023-bcaa-49833225d053",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e15efbfc-ee05-4c1c-9348-6126cd787548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7744f5-cc94-4da3-ab0c-758d3899d213",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b79e16-ea2c-4ab1-8d50-e33ae7e400b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc65e950-712c-4e9c-a73b-0a0c82530ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a199d663-a457-49ba-92a0-f715734041d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4252a770-b4da-46f2-975f-386920348594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdfc628-ea49-45d6-9f26-07bbed9fb624",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9ba608-548a-4dc2-b65f-20789ecdc809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108a9943-ec0b-4edc-8d8a-6ced873498ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8673c30-5899-41f1-8452-cc6eee21b3e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ba8d160-52c5-44d6-9b90-4312fda391bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba7d3e5-9fe0-4f75-b58b-41f4eda0f6e1",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50cbf5f3-29ee-48a1-8868-a8606a87bece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dfb0d5c-4197-4076-a08e-6a54e3ed7ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb28af8b-3e1c-448c-aae0-7715df2f88d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac283d92-6e44-43fe-9b93-bb4883c66a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fc646a-0485-48cf-8368-f64685ac2d2d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b663f7-df0c-463f-b7a2-035b9d536869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6baf3b-f184-4061-b228-bdf4efef0640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b229948-955b-4478-a0be-25be0ecf37d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f60d6a0c-fa27-4b15-9735-013ef3a815c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea50256-d48a-4092-b93d-abed12b2a9ae",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0353bfb5-b092-4f1a-8c2c-40bf8b0bf38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1a2a4e0-8667-4ee7-bcc1-d8e0c628a2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918b8b34-eac7-4e79-b561-0239b42b422b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0a6e67b-e7e7-4bcf-bc37-5e2f8fd49d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4992fcf6-826d-4578-9b3a-e1ed0dfcaa7c",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581d440b-d81f-4db2-b3c8-10adf7d0572e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8deeb85e-b0e2-4ef1-bd17-8a577cd2ba8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051b14ff-9e1c-4f8f-9cce-3965401b3d55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68c1475c-13a7-4494-9ee5-13affc0836bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b86f3ff-968c-45cc-b34a-657854ce0d27",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5970817-0a0f-448b-bf97-5920db267c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32ced383-fe65-45b1-aeb3-f46440e86531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5f03ac-c8ad-42de-988f-b02ca11feb84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53621c37-9247-473b-a98e-5c52d2b419e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9460544e-113c-4b94-916b-bfd2196ec448",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5114f0ea-ead2-4f1c-a6dd-9ebc9b307268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7d7f2c31-7f9a-480b-8f85-9479b76f933a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c09cf5-43de-4206-bc5c-45df96ce1b10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0fad3f5-1c1c-490f-abc6-f2629e41852e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4b7d6988-5730-4220-8f06-56d8b49b0307",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c5af265-4849-4ce1-b610-c1d8e7198295",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800ae2b2-1449-4648-b0c4-15825747bf58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd3c0be1-ba06-495f-be9a-14c916be15ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf8858f-9feb-4d88-8a1a-a5b8793a82eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "351b9540-04f1-4c83-b1ca-77b1dcb11223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93948556-449e-49b7-b33c-41d23220571e",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35061cd9-b5c5-4cf8-a0a9-809b9127a91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31273abe-850d-406c-a06e-74babfd29048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afd9aa0-d9c3-4cd4-8b3d-b8977a779bd2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2d891835-e97e-4e39-8e15-b7f90972a4dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ec2d43b-16ed-4edc-93c8-fab44ef199b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b0cabbc-766c-419c-a2a2-c54a198583b4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee7b9d2e-286c-49c5-af73-8896a8465134",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "764b595e-d7a5-47b2-9ff9-1c55b8562005"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c7d6a86b-4c47-4612-8c03-8b2fa62b341a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "62391c3f-48f1-4b6a-b1eb-5f2e35c2c77d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8560b3ac-c915-48fa-a596-cedc8bc73321",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4b22bc55-6c8d-4bb2-b723-20dbeb6d2a97"
                }
              }
            ]
          },
          {
            "id": "38899e19-9f7a-4325-a9d4-9331bb71cc9a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9912dbe7-c760-4218-92c3-0e67e771bfec",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "355d9e34-a9c9-4f66-9600-ee980c2eed2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d446257a-5947-40ac-864a-40b7f0bc754b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b784832c-8b9d-4c41-9225-1f663f0c92eb",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "79f15551-2914-4c32-84a4-995be45b0f2e"
                    }
                  }
                ]
              },
              {
                "id": "2266268e-64f2-49d9-b8df-f5899eb9fc4e",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c41eab68-178a-404e-a7a8-66d2eaaf3a98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7fe0e8ee-4829-4403-a407-9de8fa3937ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "761ea9a9-56a6-48ec-a3f3-22c1662b83be",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "72a17e85-a19f-448c-815d-95a1a71a43c5"
                    }
                  }
                ]
              },
              {
                "id": "32956254-5788-4d7c-aba6-5cc544a06c6c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9685bdb4-e4a0-4256-a386-aa21b4301713",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c510240e-2644-4afe-8d70-3f1150c5ed0a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "392b1e37-80bc-4c95-9501-7d5ae2c4fa06",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ca2735ef-4071-47fa-829c-74c14cbb2f15"
                    }
                  }
                ]
              },
              {
                "id": "18258e16-bcb4-4b4b-a3c0-377fbda17edb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9946816-200c-4f52-9679-eba2e43ca842",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87a3091e-ba3b-41a7-8269-6edbc98a1bc5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6166a8a2-2674-4d29-a362-43b5ee65672e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "18b42179-eb92-448e-b02d-58cd67cbff62"
                    }
                  }
                ]
              },
              {
                "id": "d43e0f2c-a5b7-4986-8d75-6012b019c92f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2c9ff9d-e2be-4214-bae2-c0dab88d54bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2449073b-5f5a-4fa3-a9a3-b786936e8bc6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79490ba2-ff12-4221-837d-6f4115b154f5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5b5e7659-839e-43cb-8a10-b0f2ae10815b"
                    }
                  }
                ]
              },
              {
                "id": "9127c76a-23e9-46b0-8bb8-34b3c9cf6704",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b2635fd-a082-4f69-b547-1731bcc92e75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b7f521a9-b011-408d-8504-31dab294b22f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9dc22d75-cf87-46a7-95bd-ed6f5832e2b5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0f911880-87c8-421b-8e9a-5bc7ec0e6b2a"
                    }
                  }
                ]
              },
              {
                "id": "4f5ae082-ecfd-49f8-912a-ab8dd9359080",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ec50433-3f09-404e-96df-c233dc9f3ed0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5605e782-6080-4ea7-b259-1b616ae57900"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4aee6c8c-8883-4fc4-833e-49f66b043d94",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "94144452-8823-4093-8736-e6fc4f417293"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c671ac6b-648c-4fe2-9bed-739cc19e3084",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "26e2c754-0b57-490d-9723-b1a765f7ddf0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6ce17678-e8cb-4f11-9f27-5bca1408ed40",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4c03cba-2aec-4b16-8359-52f63b653374"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f6ea253-1b77-424b-ab1e-9aa3d692c27f",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "0602907e-1c67-4ee3-b52d-cb9361279ed1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cea84245-01d7-485d-973a-118153618b8c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8935d92d-01d6-4b04-8f46-f97f16e1d91f"
            }
          }
        ]
      },
      {
        "id": "c34790e9-0de6-487b-ac2e-33a2bab03054",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7bb29f94-84a9-4d38-8af7-c1ce2c78f318",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d34720b-226d-4a82-a361-15e09445c174",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "80e7c9b4-cc30-458b-9b4a-82b5e9a5324b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08282a69-4cdd-41d3-9cfe-ac2f3f29b89c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58769798-335e-4e3f-84df-05140e037135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcda1332-8ef1-44cc-a259-ba47eb761406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53b3ee03-a4b6-49f8-87ca-0119b432164b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f965d880-8d81-4635-bec2-ec3fc0aafa3f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875459e1-c053-419b-a403-fcfcb2cf0c1d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6c164439-ef66-40b5-9617-e6a9c63a3078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e222a9c-1bff-4f96-a802-3b0016de5fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e336c3d9-8531-4dc3-b9a0-cd833641cac4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "769a15e9-0263-4bb8-9934-fb8792f95fb8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60be7fcb-ff63-4acc-a61b-45320b2b9a61"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "982eb458-3930-4362-b10c-5c61c8cd1b3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f33c22d-601a-44d5-b951-6708699491db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d79eed01-fb0b-4dc1-b75d-4596ead24489",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "cabeab87-dcce-4b24-b63e-c42eca931278"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6cc07335-9828-440d-9c8e-f3bab588a923",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da2fce47-4b2b-4ec3-ab68-bbf8eb47e4de"
            }
          }
        ]
      },
      {
        "id": "1e938214-30fb-4c1f-9009-137e497e62fe",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a072cba7-2887-466d-b28a-7b5336628d1e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e725d8a-6958-4ba6-9aa4-30d938cb39fb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a94ae16a-7480-42d8-89bc-f7ece1e3794a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2235585d-829e-4cd0-b672-34d2ee462e91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c29fc0ae-55d8-455c-a71a-03496572c45f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8085ebf-e4f9-4766-98f7-200b4362bd90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39069c55-a3ae-4555-ba52-77116ed6f6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4194f67-4b43-4701-87f7-b7a791a13c45",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c36bd7-023a-4c8e-b727-8ebd9f8e0667",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b295f82-2b01-48eb-a682-d24c0a8095cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "708acb2a-b6a3-4dd1-ba22-a5cf933ee7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b4294e5-26e5-44a2-8999-6895334443b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2addeb52-7651-4578-adc6-91efb5fbe7d3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36eed418-b25d-42e6-8ff7-2cb0ba67eb52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3834feb-cf48-4d88-9293-cdba8fcf1bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b8ab3d-0be7-4ae2-9e43-6ac0aa437a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96e490f3-cfd6-4a86-ab2c-1fa0a315fd9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8bed0d-e45c-4dc9-871a-0bc44438b122",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a4a73a-95c5-43e9-aaa2-b24b6a63ce30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21b35f24-d28d-4fbc-b0ba-4ccd115e3cb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e191a3ee-de5f-463b-8efc-79642fb4b303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20b182f9-2da5-4128-b30f-35e4f93ad1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6b1a34-887c-44dc-9146-46977ece3e30",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228713c2-a718-4b5a-8b4b-80fb0272b103",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1b5717f-4abb-4df2-9645-a869213ccab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de54b42a-5295-4ae4-91a3-8261294cccb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45c4a76b-673e-4b02-8ee8-d3a9d5285ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988ce0f0-c379-4de5-987c-0c6ce1288815",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba703c0-ae36-4526-950e-0e46b8b29b9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48f620f4-c84e-4e0c-8c8a-a7021a28a0e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1244e87d-20e5-4a6f-b676-47b5a9f2fa79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12feb145-beb5-44f0-bc01-f9a082d5399e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b7402933-24a8-4ece-a84e-4fcaf9472b77",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fdbb7806-188c-44a5-a472-f92d8fa8c595",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84a5f4a-3725-45fd-9a6b-6a3afef38165",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "bd2c52ce-9005-4f2d-bffa-8ff51b3e36e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad90180-0002-4cc5-88d4-2e0c65400eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "553d3adf-f721-4790-8a83-53dd1cbe3f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e23a600a-3a73-4a05-939a-ad846f736f6d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23457da-ff4c-4a10-8ad9-969f8256b922",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "ac3fb611-f9b2-46c5-bf7c-e60d7feaded5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c067ffb1-847b-4a07-9bf4-0e1bf29a0be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4d8eb53-e604-4494-8382-b6ea5da4666b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a10c057-3971-498e-9a16-6282a0bf46b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55195136-6597-4613-8ed3-b7ad7f943de0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "31385c27-6f6f-4a82-97f8-bc2a4c14e992",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7dc6fd5-d3c1-4f0b-9a62-a475f497e57b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4009767-2d1f-4c6a-a4d9-5c57133ccab1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e90f148a-cd90-4845-a5c0-c8ea68073ad3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "237c0e0e-f9da-4786-a722-2ef63861e6fd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea8a71bd-a508-4528-b969-9be0d6df854a"
            }
          }
        ]
      },
      {
        "id": "8281e36f-9e89-40f8-8dc2-cb35460d120a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "40087b1d-de79-4c66-bcdd-e255473bc827",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab2c49f6-8b80-49a7-8551-3866606ba748",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "73ef9390-2c3c-4a8d-820a-aace8c5e7810",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcbaf84-b1b4-4fcf-bb97-1d253a05b6cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f4ee3b-a0b2-4ac1-b4f4-bc8a63a4f2d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb75d02-8274-4789-bfc1-d77b6174e42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c5d4de4-c958-4f09-9331-55a3e960320d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7122d9a1-6f55-498e-a5fb-e8b6627ec1a9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c007446-e3b6-499e-b7be-6a8ae50298e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "da56101e-a764-4801-9ec4-c7d9ccc7606f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c33b0a-843a-490c-932b-6daedbf4ae61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8fa5ccb-06f7-4fcb-aa62-4f4fef1b017d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3542724-7a1e-412a-95cb-55ae6f628460",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "418a3caa-1774-4974-859c-fb01ad6ef3ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f0bdbac-d880-4894-b499-c5603e48da6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "045183c4-3351-45a2-b43c-711b6a5fcfe4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1f447e1-175c-4b52-a327-d1bd23ab963e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "0e5dcd29-db6f-456d-b2e4-e895cb3cf36f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51a6a093-0263-4ff8-aad6-6f0b2e21dfe1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc505229-81c6-483d-b2bb-2bf7baaf3882"
            }
          }
        ]
      },
      {
        "id": "e05be9e0-68c2-450f-92a8-196d56446de5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4f0af392-769d-4088-ac3d-983064e0f088",
            "name": "Negative Testing",
            "item": [
              {
                "id": "870a2733-a6a1-4fbc-8800-7c0ec08fa034",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f2e08159-ff7e-4ea2-9b15-43d9816a5a46",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccfa9241-0ca1-49e6-bf3f-4a3fb748cc88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdad60ca-4f72-406f-8478-4e96ddbe1162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c2daf6-2119-46f2-a102-9026b23064de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "293a7153-5805-4261-83ea-415c90bd3e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5529acab-ca97-44c9-bcbc-f01a13f2537d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900d39fa-ebc3-4edc-b6a5-502d100ea875",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "cd0184c2-f279-42b5-a4d4-b34a2c955885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afde3664-e356-4562-ba83-c31aedb34c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28bc78d0-19a3-4343-bf89-eacef8d082f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1999041b-770e-4c12-9fe1-46bcbdc626f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68942706-4d92-468e-9d25-793db78c503e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "52845c67-de24-488a-a7e0-6d44492a1029",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c42959d5-46d9-4ccd-8c1f-71dec65c5e74"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee46d359-9114-4a85-b461-9e4618d73364",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "f972cf79-00f7-4767-b835-361a1033ce62"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4059a886-fc83-4208-9296-bdaf4a381362",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "47534c2d-8eb9-4eeb-b9d6-a69674f4a23d"
            }
          }
        ]
      },
      {
        "id": "273bd36d-c340-460d-9fc2-4f8fe007e3b1",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "db3c8960-e0fc-42ab-90bc-a46de97cee46",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c4f8d1a9-3963-486e-bd60-1e58a0412ec7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2042f9b8-096d-4726-945e-2c98b48470b4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd87a349-7e5a-485e-a82d-b72d1f095efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c818c8ac-1d75-46e0-8aef-9d39a29d6ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8954c715-caa3-4718-8163-f8e38dbdb9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9836c894-2158-4497-bd7c-79f2394e8940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d89eae-db3d-48c2-9ac8-21a7bd24f8b9",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7f6837-d54b-4172-89e1-57ad8412d020",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "de632d91-b342-4598-a3ae-6c10f1d756d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12163cce-8e76-436d-80a0-0456bda85473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc0dad0c-1c4c-4501-b1d8-a84be24b2475"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebee48c0-7622-4cf6-b171-549f8928236e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72394ffb-f91e-459c-9af8-196e4dfbe777"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "845a54ef-c236-453d-bd1e-0df2f47421dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1026afa5-d301-440a-a278-da155cfc783c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f7eade2-95bd-4c1b-87b0-fef8da4c46d0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "979fe662-ccbd-4575-86db-bdbeba4c9054"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4552db0c-010a-4284-8500-2ccaed94e070",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a139577-92c9-4533-874c-922c06a581bf"
            }
          }
        ]
      },
      {
        "id": "b3bf5056-d7c1-4e7a-bdce-50597e9db788",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "18591275-bb12-4103-8b20-15d56bd7893a",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 9
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 111.26126126126127,
      "responseMin": 64,
      "responseMax": 774,
      "responseSd": 115.5613570275499,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1663289685572,
      "completed": 1663289701728
    },
    "executions": [
      {
        "id": "69601d8d-82be-40a7-bc48-e77384f08ade",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1e81b900-2663-4e99-87b0-70bc0c11e9aa",
          "httpRequestId": "284d9284-7858-4ee3-8e21-b523e19f9cce"
        },
        "item": {
          "id": "69601d8d-82be-40a7-bc48-e77384f08ade",
          "name": "did_json"
        },
        "response": {
          "id": "0faef4b0-e3b3-4593-b407-58acd51d25c4",
          "status": "OK",
          "code": 200,
          "responseTime": 347,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "1c1141ab-ffc0-40fb-aed2-20203f174a07",
        "cursor": {
          "ref": "24675f2d-1416-4f17-9ebd-bc06a48af16a",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8a8f67c6-e78a-4894-b935-d63697367b57"
        },
        "item": {
          "id": "1c1141ab-ffc0-40fb-aed2-20203f174a07",
          "name": "did:invalid"
        },
        "response": {
          "id": "f711d027-f82e-454f-a020-62b026770176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c1141ab-ffc0-40fb-aed2-20203f174a07",
        "cursor": {
          "ref": "24675f2d-1416-4f17-9ebd-bc06a48af16a",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8a8f67c6-e78a-4894-b935-d63697367b57"
        },
        "item": {
          "id": "1c1141ab-ffc0-40fb-aed2-20203f174a07",
          "name": "did:invalid"
        },
        "response": {
          "id": "f711d027-f82e-454f-a020-62b026770176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1814c3c9-849f-43cf-8737-4a54d64c1b4f",
        "cursor": {
          "ref": "5d0f633b-d25f-4b28-bf73-afddfde1e70f",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4291f0c5-200a-49fa-8d17-65fe9c0d1013"
        },
        "item": {
          "id": "1814c3c9-849f-43cf-8737-4a54d64c1b4f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "883104a3-626a-40d6-a0ca-cc8534e6b1dc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 121,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61f8adc-45eb-4ec8-93bf-4b6e56aa73ac",
        "cursor": {
          "ref": "73589293-e2ea-4986-831e-34bd8baccade",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0255ea37-e1f9-49da-9eff-e7ccfbfce89d"
        },
        "item": {
          "id": "f61f8adc-45eb-4ec8-93bf-4b6e56aa73ac",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2a86d3da-76f6-4753-a75d-7e376ba0c816",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36119d14-21ef-4206-b4db-d106926f01ee",
        "cursor": {
          "ref": "026b71fd-af9f-4158-8c8d-ad95f232e215",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "636a5f7b-7f35-4194-abe6-bdf810b0beae"
        },
        "item": {
          "id": "36119d14-21ef-4206-b4db-d106926f01ee",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8565d8a0-2541-417b-867e-69d7912343b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315fd7ff-5dbb-4baa-b357-90b9b46ffc03",
        "cursor": {
          "ref": "a2eae2ce-c9d7-488e-b0be-0356fea58760",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a48fd019-4443-469e-bbbb-83190e313dd2"
        },
        "item": {
          "id": "315fd7ff-5dbb-4baa-b357-90b9b46ffc03",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "52d7d3d5-dc5d-484e-88f4-8a25cb778155",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 67,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315fd7ff-5dbb-4baa-b357-90b9b46ffc03",
        "cursor": {
          "ref": "a2eae2ce-c9d7-488e-b0be-0356fea58760",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a48fd019-4443-469e-bbbb-83190e313dd2"
        },
        "item": {
          "id": "315fd7ff-5dbb-4baa-b357-90b9b46ffc03",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "52d7d3d5-dc5d-484e-88f4-8a25cb778155",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 67,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a65d85-18de-481a-8ef5-7cbb5626d00d",
        "cursor": {
          "ref": "cc792c1c-9c90-418a-897c-4c00e6ab4122",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b99aa301-4f75-4d0f-aed2-9a3fdf4d99a4"
        },
        "item": {
          "id": "d2a65d85-18de-481a-8ef5-7cbb5626d00d",
          "name": "identifiers"
        },
        "response": {
          "id": "5f5fdf3f-55e9-4a9d-99e5-bcc9badbd166",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a196097-8dee-4904-8c8e-faf8fb58b993",
        "cursor": {
          "ref": "ef53ccba-964b-4777-9afa-752931b14acd",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5a103b8a-2b70-4903-8964-afabc5fbf657"
        },
        "item": {
          "id": "7a196097-8dee-4904-8c8e-faf8fb58b993",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e870f80d-06e1-4522-9142-0d824098b850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a196097-8dee-4904-8c8e-faf8fb58b993",
        "cursor": {
          "ref": "ef53ccba-964b-4777-9afa-752931b14acd",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5a103b8a-2b70-4903-8964-afabc5fbf657"
        },
        "item": {
          "id": "7a196097-8dee-4904-8c8e-faf8fb58b993",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e870f80d-06e1-4522-9142-0d824098b850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a196097-8dee-4904-8c8e-faf8fb58b993",
        "cursor": {
          "ref": "ef53ccba-964b-4777-9afa-752931b14acd",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5a103b8a-2b70-4903-8964-afabc5fbf657"
        },
        "item": {
          "id": "7a196097-8dee-4904-8c8e-faf8fb58b993",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e870f80d-06e1-4522-9142-0d824098b850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e04b3a9-7a8e-42e9-bfa7-cfee720514d4",
        "cursor": {
          "ref": "7f756510-46ec-4f79-bf48-ea9f5886ff35",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a4270ff1-e85e-4df7-9a3d-e9b8b03bd7c9"
        },
        "item": {
          "id": "1e04b3a9-7a8e-42e9-bfa7-cfee720514d4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c01d813a-bc88-4d9e-8822-cc20076cae2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e04b3a9-7a8e-42e9-bfa7-cfee720514d4",
        "cursor": {
          "ref": "7f756510-46ec-4f79-bf48-ea9f5886ff35",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a4270ff1-e85e-4df7-9a3d-e9b8b03bd7c9"
        },
        "item": {
          "id": "1e04b3a9-7a8e-42e9-bfa7-cfee720514d4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c01d813a-bc88-4d9e-8822-cc20076cae2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521dd8f2-6d3f-4086-ace0-44d60647b71b",
        "cursor": {
          "ref": "aa241460-083e-4771-bf8b-80d27d8d0da8",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "04599acf-677f-48d2-b8f6-6c4174bd035d"
        },
        "item": {
          "id": "521dd8f2-6d3f-4086-ace0-44d60647b71b",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "6021a346-768c-447c-bfd4-8a105eff53c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521dd8f2-6d3f-4086-ace0-44d60647b71b",
        "cursor": {
          "ref": "aa241460-083e-4771-bf8b-80d27d8d0da8",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "04599acf-677f-48d2-b8f6-6c4174bd035d"
        },
        "item": {
          "id": "521dd8f2-6d3f-4086-ace0-44d60647b71b",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "6021a346-768c-447c-bfd4-8a105eff53c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eddfe214-df5d-4cdd-9402-77a5d847ea97",
        "cursor": {
          "ref": "a8586a80-4d34-49b0-9697-194dfd4745bf",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3f038405-2bc7-4abb-b76a-967c24390386"
        },
        "item": {
          "id": "eddfe214-df5d-4cdd-9402-77a5d847ea97",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "aa9fad74-d976-40fd-b9d5-496b932acd98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eddfe214-df5d-4cdd-9402-77a5d847ea97",
        "cursor": {
          "ref": "a8586a80-4d34-49b0-9697-194dfd4745bf",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3f038405-2bc7-4abb-b76a-967c24390386"
        },
        "item": {
          "id": "eddfe214-df5d-4cdd-9402-77a5d847ea97",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "aa9fad74-d976-40fd-b9d5-496b932acd98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce951bb-6edd-4a86-8663-6ae7573bc24e",
        "cursor": {
          "ref": "14b09677-de12-4c48-92bf-c0d8d3324360",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2b3b6df4-14cc-437a-98f1-4d090d260938"
        },
        "item": {
          "id": "4ce951bb-6edd-4a86-8663-6ae7573bc24e",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "edb54f5d-dab6-44d8-97a2-a75032d83ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce951bb-6edd-4a86-8663-6ae7573bc24e",
        "cursor": {
          "ref": "14b09677-de12-4c48-92bf-c0d8d3324360",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2b3b6df4-14cc-437a-98f1-4d090d260938"
        },
        "item": {
          "id": "4ce951bb-6edd-4a86-8663-6ae7573bc24e",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "edb54f5d-dab6-44d8-97a2-a75032d83ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18babe1-5119-4391-834f-c4467de7a16c",
        "cursor": {
          "ref": "6afb2c76-f413-4359-9dfb-785800bfdc7d",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4fece8fe-5654-4c87-8155-e8d8b5db8bd2"
        },
        "item": {
          "id": "f18babe1-5119-4391-834f-c4467de7a16c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4504d176-2c2b-4971-872d-44644415a130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18babe1-5119-4391-834f-c4467de7a16c",
        "cursor": {
          "ref": "6afb2c76-f413-4359-9dfb-785800bfdc7d",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4fece8fe-5654-4c87-8155-e8d8b5db8bd2"
        },
        "item": {
          "id": "f18babe1-5119-4391-834f-c4467de7a16c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4504d176-2c2b-4971-872d-44644415a130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06b4e46-324f-4d1e-b09f-8888ad16a825",
        "cursor": {
          "ref": "96aa8572-e9ad-476e-8bd5-a1816dd79427",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a17f36bb-2e29-4229-b18c-b43c80d39c3a"
        },
        "item": {
          "id": "a06b4e46-324f-4d1e-b09f-8888ad16a825",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "57eadaf7-9e0d-4be7-aafe-b595ffc3660e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06b4e46-324f-4d1e-b09f-8888ad16a825",
        "cursor": {
          "ref": "96aa8572-e9ad-476e-8bd5-a1816dd79427",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a17f36bb-2e29-4229-b18c-b43c80d39c3a"
        },
        "item": {
          "id": "a06b4e46-324f-4d1e-b09f-8888ad16a825",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "57eadaf7-9e0d-4be7-aafe-b595ffc3660e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6e4608-b5c4-4dc5-a4dc-9509bc8f9944",
        "cursor": {
          "ref": "40d26a94-b6b5-4bc1-bed8-f6105f9b9c04",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4c51539b-6aa8-4507-b4c0-cea50aee57f0"
        },
        "item": {
          "id": "2b6e4608-b5c4-4dc5-a4dc-9509bc8f9944",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "ab79edb2-4a80-46df-9fff-dee055dedaaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6e4608-b5c4-4dc5-a4dc-9509bc8f9944",
        "cursor": {
          "ref": "40d26a94-b6b5-4bc1-bed8-f6105f9b9c04",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4c51539b-6aa8-4507-b4c0-cea50aee57f0"
        },
        "item": {
          "id": "2b6e4608-b5c4-4dc5-a4dc-9509bc8f9944",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "ab79edb2-4a80-46df-9fff-dee055dedaaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0d1d48-f731-4c66-ac46-03d648b9f1b5",
        "cursor": {
          "ref": "80f56092-196b-4c3a-b684-f8d6785b8121",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "693a71bd-7c9a-4e2f-b977-1f6df4bdbc19"
        },
        "item": {
          "id": "8a0d1d48-f731-4c66-ac46-03d648b9f1b5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f536994d-c20b-4be6-8830-ff4ae73442e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0d1d48-f731-4c66-ac46-03d648b9f1b5",
        "cursor": {
          "ref": "80f56092-196b-4c3a-b684-f8d6785b8121",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "693a71bd-7c9a-4e2f-b977-1f6df4bdbc19"
        },
        "item": {
          "id": "8a0d1d48-f731-4c66-ac46-03d648b9f1b5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f536994d-c20b-4be6-8830-ff4ae73442e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba4848c-3ff1-458d-a399-a5fce28206ee",
        "cursor": {
          "ref": "0a84b771-b398-4d5d-bced-6b4b25cd9353",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1fb00983-5be0-472e-9da4-cdfb66524046"
        },
        "item": {
          "id": "7ba4848c-3ff1-458d-a399-a5fce28206ee",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "e83a9548-3fba-43af-8bf5-c356e5854ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba4848c-3ff1-458d-a399-a5fce28206ee",
        "cursor": {
          "ref": "0a84b771-b398-4d5d-bced-6b4b25cd9353",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1fb00983-5be0-472e-9da4-cdfb66524046"
        },
        "item": {
          "id": "7ba4848c-3ff1-458d-a399-a5fce28206ee",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "e83a9548-3fba-43af-8bf5-c356e5854ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1c511c-8b69-4187-bcb4-332fa048dbdc",
        "cursor": {
          "ref": "273bb57b-c0b9-46e6-a803-3a53ec401e17",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0b52655e-bd25-4ab1-a5c5-f407ad181774"
        },
        "item": {
          "id": "0b1c511c-8b69-4187-bcb4-332fa048dbdc",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "c836de46-feb0-49cf-b4f4-f4a54210bedd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1c511c-8b69-4187-bcb4-332fa048dbdc",
        "cursor": {
          "ref": "273bb57b-c0b9-46e6-a803-3a53ec401e17",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0b52655e-bd25-4ab1-a5c5-f407ad181774"
        },
        "item": {
          "id": "0b1c511c-8b69-4187-bcb4-332fa048dbdc",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "c836de46-feb0-49cf-b4f4-f4a54210bedd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae8be62-e05f-4370-b22a-182ed11cbc1c",
        "cursor": {
          "ref": "0dd80b5f-4cad-4f40-8daf-34d3401351b9",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "56d65469-97d7-4511-bd4c-ef9312a71f19"
        },
        "item": {
          "id": "4ae8be62-e05f-4370-b22a-182ed11cbc1c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "be19eb9f-d470-48ce-9149-c205ef290ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 774,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae8be62-e05f-4370-b22a-182ed11cbc1c",
        "cursor": {
          "ref": "0dd80b5f-4cad-4f40-8daf-34d3401351b9",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "56d65469-97d7-4511-bd4c-ef9312a71f19"
        },
        "item": {
          "id": "4ae8be62-e05f-4370-b22a-182ed11cbc1c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "be19eb9f-d470-48ce-9149-c205ef290ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 774,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75803892-d208-477f-a1f0-f9a8b6aff4bc",
        "cursor": {
          "ref": "c0f0bcdf-a85b-4f2c-a64e-c04da777c26f",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1cadfd6d-c717-48e8-9a03-90d622b794d9"
        },
        "item": {
          "id": "75803892-d208-477f-a1f0-f9a8b6aff4bc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c6eecc31-bde2-43f0-abe5-f92c327dd63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75803892-d208-477f-a1f0-f9a8b6aff4bc",
        "cursor": {
          "ref": "c0f0bcdf-a85b-4f2c-a64e-c04da777c26f",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1cadfd6d-c717-48e8-9a03-90d622b794d9"
        },
        "item": {
          "id": "75803892-d208-477f-a1f0-f9a8b6aff4bc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c6eecc31-bde2-43f0-abe5-f92c327dd63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2c19fa-2697-4eb9-bb6d-20fe08a25516",
        "cursor": {
          "ref": "5e7a0fb8-5be0-4313-be7f-1514344ed5a0",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "34ad5e3f-c549-407c-9e20-dc3fb3bc4bf0"
        },
        "item": {
          "id": "6f2c19fa-2697-4eb9-bb6d-20fe08a25516",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "4f1c5310-a245-42af-9ba1-cc0f1247941a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2c19fa-2697-4eb9-bb6d-20fe08a25516",
        "cursor": {
          "ref": "5e7a0fb8-5be0-4313-be7f-1514344ed5a0",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "34ad5e3f-c549-407c-9e20-dc3fb3bc4bf0"
        },
        "item": {
          "id": "6f2c19fa-2697-4eb9-bb6d-20fe08a25516",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "4f1c5310-a245-42af-9ba1-cc0f1247941a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cfeb5e-0955-4715-b1da-3b1fdb844fd0",
        "cursor": {
          "ref": "34bfeb71-e634-46cd-8628-8ae00b860a88",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7c464cdc-882c-42a5-91d9-2883c561eac7"
        },
        "item": {
          "id": "53cfeb5e-0955-4715-b1da-3b1fdb844fd0",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "e9e988b0-e2f0-44ec-bc60-2430cac5aab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cfeb5e-0955-4715-b1da-3b1fdb844fd0",
        "cursor": {
          "ref": "34bfeb71-e634-46cd-8628-8ae00b860a88",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7c464cdc-882c-42a5-91d9-2883c561eac7"
        },
        "item": {
          "id": "53cfeb5e-0955-4715-b1da-3b1fdb844fd0",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "e9e988b0-e2f0-44ec-bc60-2430cac5aab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8978a0-9726-4891-9585-725576e71603",
        "cursor": {
          "ref": "c469b63e-2bb4-4238-8c15-4cc29e0f7876",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ad369d0b-420f-4f9f-9bcc-bb6b817edbd6"
        },
        "item": {
          "id": "1b8978a0-9726-4891-9585-725576e71603",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "45d124e2-29e0-46e9-9911-94b211a838b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8978a0-9726-4891-9585-725576e71603",
        "cursor": {
          "ref": "c469b63e-2bb4-4238-8c15-4cc29e0f7876",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ad369d0b-420f-4f9f-9bcc-bb6b817edbd6"
        },
        "item": {
          "id": "1b8978a0-9726-4891-9585-725576e71603",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "45d124e2-29e0-46e9-9911-94b211a838b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73f7597-293a-4230-996c-e5e23c358277",
        "cursor": {
          "ref": "4c864024-9320-40c5-b431-0edec6317d98",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1ac312d8-f50e-4290-a139-8ba5cd50bc0d"
        },
        "item": {
          "id": "a73f7597-293a-4230-996c-e5e23c358277",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d804ad28-13d2-4eaa-a578-31b8f403b50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73f7597-293a-4230-996c-e5e23c358277",
        "cursor": {
          "ref": "4c864024-9320-40c5-b431-0edec6317d98",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1ac312d8-f50e-4290-a139-8ba5cd50bc0d"
        },
        "item": {
          "id": "a73f7597-293a-4230-996c-e5e23c358277",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d804ad28-13d2-4eaa-a578-31b8f403b50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301116dd-ce22-49a3-a03f-95c850f75194",
        "cursor": {
          "ref": "7e4082eb-1768-4ea2-a008-de0535f26f39",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "65f9114e-b469-4790-bfd1-98dd882586d8"
        },
        "item": {
          "id": "301116dd-ce22-49a3-a03f-95c850f75194",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "175302ca-36f5-4803-a2ec-0c81587e9773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301116dd-ce22-49a3-a03f-95c850f75194",
        "cursor": {
          "ref": "7e4082eb-1768-4ea2-a008-de0535f26f39",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "65f9114e-b469-4790-bfd1-98dd882586d8"
        },
        "item": {
          "id": "301116dd-ce22-49a3-a03f-95c850f75194",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "175302ca-36f5-4803-a2ec-0c81587e9773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bdb9b0-c980-48f5-b507-ea19783fcce5",
        "cursor": {
          "ref": "ed66c32f-05e6-493a-ab6b-639af6519884",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bc5ce8fa-c7a8-4daa-84b6-1ebf464f4c17"
        },
        "item": {
          "id": "b4bdb9b0-c980-48f5-b507-ea19783fcce5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c23e82c2-7ca4-4901-ab29-0b52236b848e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bdb9b0-c980-48f5-b507-ea19783fcce5",
        "cursor": {
          "ref": "ed66c32f-05e6-493a-ab6b-639af6519884",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bc5ce8fa-c7a8-4daa-84b6-1ebf464f4c17"
        },
        "item": {
          "id": "b4bdb9b0-c980-48f5-b507-ea19783fcce5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c23e82c2-7ca4-4901-ab29-0b52236b848e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16dac73-0c1c-45d3-9e6b-bbac0b7b10ff",
        "cursor": {
          "ref": "c1624aef-5d6d-42b1-8347-6743130d7a06",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6d144005-ae00-4d71-8404-f7887e1bbd85"
        },
        "item": {
          "id": "b16dac73-0c1c-45d3-9e6b-bbac0b7b10ff",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fb0c2621-3d6d-4a68-9b23-eed539af8739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16dac73-0c1c-45d3-9e6b-bbac0b7b10ff",
        "cursor": {
          "ref": "c1624aef-5d6d-42b1-8347-6743130d7a06",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6d144005-ae00-4d71-8404-f7887e1bbd85"
        },
        "item": {
          "id": "b16dac73-0c1c-45d3-9e6b-bbac0b7b10ff",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fb0c2621-3d6d-4a68-9b23-eed539af8739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0d8d9e-8007-4f67-99ea-4442fc059169",
        "cursor": {
          "ref": "047bf32c-bfe5-449c-8904-3e0974ec3baf",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6fef027f-e2fc-4935-8616-16d05e1811d4"
        },
        "item": {
          "id": "6e0d8d9e-8007-4f67-99ea-4442fc059169",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "ff232a42-f969-4a6f-98fb-7745103ea97b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0d8d9e-8007-4f67-99ea-4442fc059169",
        "cursor": {
          "ref": "047bf32c-bfe5-449c-8904-3e0974ec3baf",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6fef027f-e2fc-4935-8616-16d05e1811d4"
        },
        "item": {
          "id": "6e0d8d9e-8007-4f67-99ea-4442fc059169",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "ff232a42-f969-4a6f-98fb-7745103ea97b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7547969-ae89-4914-88e0-c6e871328673",
        "cursor": {
          "ref": "e195cd17-90dc-4ffb-8e5b-9e758de5ed9f",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "19d358e7-b214-4acd-8db1-0eed3bb1e82b"
        },
        "item": {
          "id": "a7547969-ae89-4914-88e0-c6e871328673",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "bd7d98f8-6281-4f61-a91d-2090435279e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7547969-ae89-4914-88e0-c6e871328673",
        "cursor": {
          "ref": "e195cd17-90dc-4ffb-8e5b-9e758de5ed9f",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "19d358e7-b214-4acd-8db1-0eed3bb1e82b"
        },
        "item": {
          "id": "a7547969-ae89-4914-88e0-c6e871328673",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "bd7d98f8-6281-4f61-a91d-2090435279e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88957894-00a0-4d6a-88c7-9f2255d76d19",
        "cursor": {
          "ref": "113e5dbb-59ca-4f82-83b7-ff712d5ea428",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "227f2c58-8bdf-47f3-9500-de2ba6c8a5e3"
        },
        "item": {
          "id": "88957894-00a0-4d6a-88c7-9f2255d76d19",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b4acbacf-bb93-43cd-8f82-cebd2277d37f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88957894-00a0-4d6a-88c7-9f2255d76d19",
        "cursor": {
          "ref": "113e5dbb-59ca-4f82-83b7-ff712d5ea428",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "227f2c58-8bdf-47f3-9500-de2ba6c8a5e3"
        },
        "item": {
          "id": "88957894-00a0-4d6a-88c7-9f2255d76d19",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b4acbacf-bb93-43cd-8f82-cebd2277d37f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7744f5-cc94-4da3-ab0c-758d3899d213",
        "cursor": {
          "ref": "2f063a8e-86ca-410d-b6a5-b899e577be3a",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "083a0c2b-9012-4dc5-88c5-dbe5e3d308dd"
        },
        "item": {
          "id": "ea7744f5-cc94-4da3-ab0c-758d3899d213",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "7141bd93-b37a-47cc-8a9b-8ed13409d666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7744f5-cc94-4da3-ab0c-758d3899d213",
        "cursor": {
          "ref": "2f063a8e-86ca-410d-b6a5-b899e577be3a",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "083a0c2b-9012-4dc5-88c5-dbe5e3d308dd"
        },
        "item": {
          "id": "ea7744f5-cc94-4da3-ab0c-758d3899d213",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "7141bd93-b37a-47cc-8a9b-8ed13409d666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecdfc628-ea49-45d6-9f26-07bbed9fb624",
        "cursor": {
          "ref": "4ec544ce-0bf5-4a4c-985d-0b5367a9c536",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2dd30377-725a-4ce8-a292-5cc562383916"
        },
        "item": {
          "id": "ecdfc628-ea49-45d6-9f26-07bbed9fb624",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9c5a0bdf-0cd1-440e-93c1-d016a4cbbd32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecdfc628-ea49-45d6-9f26-07bbed9fb624",
        "cursor": {
          "ref": "4ec544ce-0bf5-4a4c-985d-0b5367a9c536",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2dd30377-725a-4ce8-a292-5cc562383916"
        },
        "item": {
          "id": "ecdfc628-ea49-45d6-9f26-07bbed9fb624",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9c5a0bdf-0cd1-440e-93c1-d016a4cbbd32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba7d3e5-9fe0-4f75-b58b-41f4eda0f6e1",
        "cursor": {
          "ref": "89a9a5a2-90e2-48b7-8815-3fa1eeed01ff",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "951349a1-a6e3-4704-80df-117da384d78f"
        },
        "item": {
          "id": "dba7d3e5-9fe0-4f75-b58b-41f4eda0f6e1",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "e669beac-33fa-48e2-8d60-61b85250e40c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba7d3e5-9fe0-4f75-b58b-41f4eda0f6e1",
        "cursor": {
          "ref": "89a9a5a2-90e2-48b7-8815-3fa1eeed01ff",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "951349a1-a6e3-4704-80df-117da384d78f"
        },
        "item": {
          "id": "dba7d3e5-9fe0-4f75-b58b-41f4eda0f6e1",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "e669beac-33fa-48e2-8d60-61b85250e40c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08fc646a-0485-48cf-8368-f64685ac2d2d",
        "cursor": {
          "ref": "21c78c1f-3a2f-40ef-9e8a-0ad7e4b22224",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8a922d14-8607-4065-a2bd-8082a02652f9"
        },
        "item": {
          "id": "08fc646a-0485-48cf-8368-f64685ac2d2d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "dde98b28-2480-4b76-b78e-3bca897c6fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 709,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08fc646a-0485-48cf-8368-f64685ac2d2d",
        "cursor": {
          "ref": "21c78c1f-3a2f-40ef-9e8a-0ad7e4b22224",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8a922d14-8607-4065-a2bd-8082a02652f9"
        },
        "item": {
          "id": "08fc646a-0485-48cf-8368-f64685ac2d2d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "dde98b28-2480-4b76-b78e-3bca897c6fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 709,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea50256-d48a-4092-b93d-abed12b2a9ae",
        "cursor": {
          "ref": "f6b1b0ce-d132-427e-9687-10592a0a234c",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "30c44254-c5c6-48c8-8d9e-1a0c0b3d80eb"
        },
        "item": {
          "id": "eea50256-d48a-4092-b93d-abed12b2a9ae",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "26f584f9-c5a4-463f-afdd-5cb61ed260ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea50256-d48a-4092-b93d-abed12b2a9ae",
        "cursor": {
          "ref": "f6b1b0ce-d132-427e-9687-10592a0a234c",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "30c44254-c5c6-48c8-8d9e-1a0c0b3d80eb"
        },
        "item": {
          "id": "eea50256-d48a-4092-b93d-abed12b2a9ae",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "26f584f9-c5a4-463f-afdd-5cb61ed260ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4992fcf6-826d-4578-9b3a-e1ed0dfcaa7c",
        "cursor": {
          "ref": "1226fa8a-61f8-4e80-bc0e-aabffeb34d2a",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c98c81a5-87c1-4824-a859-c3b7d116560c"
        },
        "item": {
          "id": "4992fcf6-826d-4578-9b3a-e1ed0dfcaa7c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "f4fd8986-aba5-4f82-afbc-e62454a671f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4992fcf6-826d-4578-9b3a-e1ed0dfcaa7c",
        "cursor": {
          "ref": "1226fa8a-61f8-4e80-bc0e-aabffeb34d2a",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c98c81a5-87c1-4824-a859-c3b7d116560c"
        },
        "item": {
          "id": "4992fcf6-826d-4578-9b3a-e1ed0dfcaa7c",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "f4fd8986-aba5-4f82-afbc-e62454a671f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b86f3ff-968c-45cc-b34a-657854ce0d27",
        "cursor": {
          "ref": "ab43af0c-f08c-4871-8fec-8c21ae692ad2",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "054705b0-a454-402a-a583-f873066020fd"
        },
        "item": {
          "id": "8b86f3ff-968c-45cc-b34a-657854ce0d27",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "49a8261f-dac7-4c2f-bf30-006b252338e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b86f3ff-968c-45cc-b34a-657854ce0d27",
        "cursor": {
          "ref": "ab43af0c-f08c-4871-8fec-8c21ae692ad2",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "054705b0-a454-402a-a583-f873066020fd"
        },
        "item": {
          "id": "8b86f3ff-968c-45cc-b34a-657854ce0d27",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "49a8261f-dac7-4c2f-bf30-006b252338e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9460544e-113c-4b94-916b-bfd2196ec448",
        "cursor": {
          "ref": "3b68fca5-d8cd-493f-b66d-6133f65cdce9",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "18e7a6c7-dac2-42f0-83cf-a23cbb3b5ef0"
        },
        "item": {
          "id": "9460544e-113c-4b94-916b-bfd2196ec448",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "8bda59ad-e401-49f3-a0eb-b9f00a5a4056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9460544e-113c-4b94-916b-bfd2196ec448",
        "cursor": {
          "ref": "3b68fca5-d8cd-493f-b66d-6133f65cdce9",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "18e7a6c7-dac2-42f0-83cf-a23cbb3b5ef0"
        },
        "item": {
          "id": "9460544e-113c-4b94-916b-bfd2196ec448",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "8bda59ad-e401-49f3-a0eb-b9f00a5a4056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5af265-4849-4ce1-b610-c1d8e7198295",
        "cursor": {
          "ref": "e8b435a9-6af6-44a2-bbac-80ade6eb30b2",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1bfc8fa6-770a-4cd9-a5aa-c2c7b09bdaf3"
        },
        "item": {
          "id": "4c5af265-4849-4ce1-b610-c1d8e7198295",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b95ff2c0-f22c-49b0-8165-a96d7294663e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5af265-4849-4ce1-b610-c1d8e7198295",
        "cursor": {
          "ref": "e8b435a9-6af6-44a2-bbac-80ade6eb30b2",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1bfc8fa6-770a-4cd9-a5aa-c2c7b09bdaf3"
        },
        "item": {
          "id": "4c5af265-4849-4ce1-b610-c1d8e7198295",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b95ff2c0-f22c-49b0-8165-a96d7294663e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93948556-449e-49b7-b33c-41d23220571e",
        "cursor": {
          "ref": "1bf05591-4418-4ba5-b31f-cea632bd86a0",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4ccea112-c34e-4835-85de-9e70d1fa6441"
        },
        "item": {
          "id": "93948556-449e-49b7-b33c-41d23220571e",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "76c26ea4-b31a-4387-a263-e8e4e077eb94",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93948556-449e-49b7-b33c-41d23220571e",
        "cursor": {
          "ref": "1bf05591-4418-4ba5-b31f-cea632bd86a0",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4ccea112-c34e-4835-85de-9e70d1fa6441"
        },
        "item": {
          "id": "93948556-449e-49b7-b33c-41d23220571e",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "76c26ea4-b31a-4387-a263-e8e4e077eb94",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9912dbe7-c760-4218-92c3-0e67e771bfec",
        "cursor": {
          "ref": "8144206e-c211-40af-b486-54a3589b793c",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5c2b03f7-f048-47d7-88cc-bebec0a6cf1c"
        },
        "item": {
          "id": "9912dbe7-c760-4218-92c3-0e67e771bfec",
          "name": "credentials_issue"
        },
        "response": {
          "id": "60cc2b88-ec33-4a21-9620-2d694bac955c",
          "status": "Created",
          "code": 201,
          "responseTime": 398,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "9912dbe7-c760-4218-92c3-0e67e771bfec",
        "cursor": {
          "ref": "8144206e-c211-40af-b486-54a3589b793c",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5c2b03f7-f048-47d7-88cc-bebec0a6cf1c"
        },
        "item": {
          "id": "9912dbe7-c760-4218-92c3-0e67e771bfec",
          "name": "credentials_issue"
        },
        "response": {
          "id": "60cc2b88-ec33-4a21-9620-2d694bac955c",
          "status": "Created",
          "code": 201,
          "responseTime": 398,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "2266268e-64f2-49d9-b8df-f5899eb9fc4e",
        "cursor": {
          "ref": "ad316a54-0aa8-4907-b006-1e9c3dfd961d",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4de4c170-30c5-46d2-ac89-1ee12347f2b1"
        },
        "item": {
          "id": "2266268e-64f2-49d9-b8df-f5899eb9fc4e",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "095bdca2-8b04-49dc-8a32-c22279ceacfa",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2266268e-64f2-49d9-b8df-f5899eb9fc4e",
        "cursor": {
          "ref": "ad316a54-0aa8-4907-b006-1e9c3dfd961d",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4de4c170-30c5-46d2-ac89-1ee12347f2b1"
        },
        "item": {
          "id": "2266268e-64f2-49d9-b8df-f5899eb9fc4e",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "095bdca2-8b04-49dc-8a32-c22279ceacfa",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32956254-5788-4d7c-aba6-5cc544a06c6c",
        "cursor": {
          "ref": "f35d6ed9-e2d5-4aa6-8a6e-8a85f3e5cd16",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "66ef9d0a-cbf3-40b0-b2c0-66c5be03702d"
        },
        "item": {
          "id": "32956254-5788-4d7c-aba6-5cc544a06c6c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "13cfdde2-b7d8-490b-baf6-16397e183d96",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "32956254-5788-4d7c-aba6-5cc544a06c6c",
        "cursor": {
          "ref": "f35d6ed9-e2d5-4aa6-8a6e-8a85f3e5cd16",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "66ef9d0a-cbf3-40b0-b2c0-66c5be03702d"
        },
        "item": {
          "id": "32956254-5788-4d7c-aba6-5cc544a06c6c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "13cfdde2-b7d8-490b-baf6-16397e183d96",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "18258e16-bcb4-4b4b-a3c0-377fbda17edb",
        "cursor": {
          "ref": "abf280ce-c15f-47c6-aa7f-1289e65f01fa",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "de2f0852-fca8-42bb-bd4b-33fd7fe2881b"
        },
        "item": {
          "id": "18258e16-bcb4-4b4b-a3c0-377fbda17edb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "175a1b18-a5db-47ed-8af0-7b4be7283816",
          "status": "Created",
          "code": 201,
          "responseTime": 401,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "18258e16-bcb4-4b4b-a3c0-377fbda17edb",
        "cursor": {
          "ref": "abf280ce-c15f-47c6-aa7f-1289e65f01fa",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "de2f0852-fca8-42bb-bd4b-33fd7fe2881b"
        },
        "item": {
          "id": "18258e16-bcb4-4b4b-a3c0-377fbda17edb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "175a1b18-a5db-47ed-8af0-7b4be7283816",
          "status": "Created",
          "code": 201,
          "responseTime": 401,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43e0f2c-a5b7-4986-8d75-6012b019c92f",
        "cursor": {
          "ref": "d3023ef6-49c4-49c9-ba0d-a4adba0b045e",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b8ad25b1-6b84-455c-8e93-e778e9d81cc9"
        },
        "item": {
          "id": "d43e0f2c-a5b7-4986-8d75-6012b019c92f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1174b817-feb4-4013-81ce-4e1324680658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d43e0f2c-a5b7-4986-8d75-6012b019c92f",
        "cursor": {
          "ref": "d3023ef6-49c4-49c9-ba0d-a4adba0b045e",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b8ad25b1-6b84-455c-8e93-e778e9d81cc9"
        },
        "item": {
          "id": "d43e0f2c-a5b7-4986-8d75-6012b019c92f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1174b817-feb4-4013-81ce-4e1324680658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9127c76a-23e9-46b0-8bb8-34b3c9cf6704",
        "cursor": {
          "ref": "2cf1aa0e-7821-4a57-824f-12c8ffafe43a",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5539bcda-d099-45b1-bc4e-0bc08053d149"
        },
        "item": {
          "id": "9127c76a-23e9-46b0-8bb8-34b3c9cf6704",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "64354090-7833-49d8-9c80-da795d5553ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9127c76a-23e9-46b0-8bb8-34b3c9cf6704",
        "cursor": {
          "ref": "2cf1aa0e-7821-4a57-824f-12c8ffafe43a",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5539bcda-d099-45b1-bc4e-0bc08053d149"
        },
        "item": {
          "id": "9127c76a-23e9-46b0-8bb8-34b3c9cf6704",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "64354090-7833-49d8-9c80-da795d5553ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4f5ae082-ecfd-49f8-912a-ab8dd9359080",
        "cursor": {
          "ref": "740d6a41-e05d-42b4-ada9-3fbdc7eff15a",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8f13218a-b2db-4ef3-9b89-5e5e9053845e"
        },
        "item": {
          "id": "4f5ae082-ecfd-49f8-912a-ab8dd9359080",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "823d06be-84a7-4ecd-9577-34560e05d7cf",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f5ae082-ecfd-49f8-912a-ab8dd9359080",
        "cursor": {
          "ref": "740d6a41-e05d-42b4-ada9-3fbdc7eff15a",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8f13218a-b2db-4ef3-9b89-5e5e9053845e"
        },
        "item": {
          "id": "4f5ae082-ecfd-49f8-912a-ab8dd9359080",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "823d06be-84a7-4ecd-9577-34560e05d7cf",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e7c9b4-cc30-458b-9b4a-82b5e9a5324b",
        "cursor": {
          "ref": "850be31f-d6cf-4d38-8818-b2a455742127",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3bae2ec6-17b1-4a98-a5df-f0362aaebc2b"
        },
        "item": {
          "id": "80e7c9b4-cc30-458b-9b4a-82b5e9a5324b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d82899f1-241f-4ec7-ab3e-6784d21fe77f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e7c9b4-cc30-458b-9b4a-82b5e9a5324b",
        "cursor": {
          "ref": "850be31f-d6cf-4d38-8818-b2a455742127",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3bae2ec6-17b1-4a98-a5df-f0362aaebc2b"
        },
        "item": {
          "id": "80e7c9b4-cc30-458b-9b4a-82b5e9a5324b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d82899f1-241f-4ec7-ab3e-6784d21fe77f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f965d880-8d81-4635-bec2-ec3fc0aafa3f",
        "cursor": {
          "ref": "bf59fe9b-1fa9-4ad0-910c-dfa7a8fc78fc",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d1cdeaa3-e4ab-4af2-b9b3-99177119a44b"
        },
        "item": {
          "id": "f965d880-8d81-4635-bec2-ec3fc0aafa3f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "3eb6415c-17c7-42c0-b0c2-47310fe9501f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94ae16a-7480-42d8-89bc-f7ece1e3794a",
        "cursor": {
          "ref": "2633d4bb-ec23-419d-b0f0-3ded59f9de74",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2ab08add-cacc-4f11-8bca-5fa0d1922569"
        },
        "item": {
          "id": "a94ae16a-7480-42d8-89bc-f7ece1e3794a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a4afcd76-32cc-49c6-931d-0c879916f6da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94ae16a-7480-42d8-89bc-f7ece1e3794a",
        "cursor": {
          "ref": "2633d4bb-ec23-419d-b0f0-3ded59f9de74",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2ab08add-cacc-4f11-8bca-5fa0d1922569"
        },
        "item": {
          "id": "a94ae16a-7480-42d8-89bc-f7ece1e3794a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a4afcd76-32cc-49c6-931d-0c879916f6da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4194f67-4b43-4701-87f7-b7a791a13c45",
        "cursor": {
          "ref": "595ef0c2-a7ac-473c-8336-d82c645eda6e",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5bd31149-9e3a-41aa-a901-1554ffe2779b"
        },
        "item": {
          "id": "a4194f67-4b43-4701-87f7-b7a791a13c45",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "892bfd88-8832-4d2c-a69c-ab15a0a33761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2addeb52-7651-4578-adc6-91efb5fbe7d3",
        "cursor": {
          "ref": "a03505f6-a0f0-4456-bed5-4854cb379978",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d1f8146b-e820-4f2b-98f8-7b400fb03a64"
        },
        "item": {
          "id": "2addeb52-7651-4578-adc6-91efb5fbe7d3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "48188d6c-41b9-4dd8-8999-705917aafc25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8bed0d-e45c-4dc9-871a-0bc44438b122",
        "cursor": {
          "ref": "c111fd18-6d0d-43d6-b565-586501c0d82c",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3fae94d4-f7e3-4b44-8af8-8a195745711e"
        },
        "item": {
          "id": "bb8bed0d-e45c-4dc9-871a-0bc44438b122",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "29655c90-943c-4cd0-a4a6-059763e9f895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6b1a34-887c-44dc-9146-46977ece3e30",
        "cursor": {
          "ref": "523bf883-42a3-42d4-8e33-19fd4c281a5f",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "01137510-c048-425a-bf5b-cfe631125717"
        },
        "item": {
          "id": "1a6b1a34-887c-44dc-9146-46977ece3e30",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c587f38f-0323-4508-bc43-2af7ab31709a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988ce0f0-c379-4de5-987c-0c6ce1288815",
        "cursor": {
          "ref": "15df30f3-278c-488e-aff9-79c911056547",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c34d858c-73c9-45ab-8f22-6d70d363c89d"
        },
        "item": {
          "id": "988ce0f0-c379-4de5-987c-0c6ce1288815",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0b0e10c8-3028-4738-9333-bdfe3e1484ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbb7806-188c-44a5-a472-f92d8fa8c595",
        "cursor": {
          "ref": "7ab78f1f-ebbd-4817-9031-69aefb92f9b2",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b4631e41-2832-41cd-9521-cc6b72dd71f3"
        },
        "item": {
          "id": "fdbb7806-188c-44a5-a472-f92d8fa8c595",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b160eba3-786f-4115-b2fb-9e6fbf3b4858",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e23a600a-3a73-4a05-939a-ad846f736f6d",
        "cursor": {
          "ref": "d4c6b798-8575-430b-8092-3b83b2f24cde",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f041ba52-0216-40e3-be48-116b3b2696f7"
        },
        "item": {
          "id": "e23a600a-3a73-4a05-939a-ad846f736f6d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "bfc1ff6a-442f-4b4a-b46d-89931df71460",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 68,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ef9390-2c3c-4a8d-820a-aace8c5e7810",
        "cursor": {
          "ref": "94fce933-844a-4ade-a7a8-0a8a26e00f39",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0ca7e6d7-68ae-4fcf-8646-53827eda1457"
        },
        "item": {
          "id": "73ef9390-2c3c-4a8d-820a-aace8c5e7810",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f135e97a-cb21-412a-9572-355ed828c9fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ef9390-2c3c-4a8d-820a-aace8c5e7810",
        "cursor": {
          "ref": "94fce933-844a-4ade-a7a8-0a8a26e00f39",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0ca7e6d7-68ae-4fcf-8646-53827eda1457"
        },
        "item": {
          "id": "73ef9390-2c3c-4a8d-820a-aace8c5e7810",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f135e97a-cb21-412a-9572-355ed828c9fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7122d9a1-6f55-498e-a5fb-e8b6627ec1a9",
        "cursor": {
          "ref": "04b7f583-e88e-4160-acef-48a51c25302f",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5ed8a68f-56cf-4450-b18d-009854e99360"
        },
        "item": {
          "id": "7122d9a1-6f55-498e-a5fb-e8b6627ec1a9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "3a11af26-97b0-444c-9f15-4f1b85a1287c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e08159-ff7e-4ea2-9b15-43d9816a5a46",
        "cursor": {
          "ref": "e3c9b8e0-5810-43ff-aabb-58328dfa93af",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0c9b36cc-936b-46db-9207-bfc0f0ba3383"
        },
        "item": {
          "id": "f2e08159-ff7e-4ea2-9b15-43d9816a5a46",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4d772938-b59a-4c7a-b363-ca634a0bed26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "f2e08159-ff7e-4ea2-9b15-43d9816a5a46",
        "cursor": {
          "ref": "e3c9b8e0-5810-43ff-aabb-58328dfa93af",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0c9b36cc-936b-46db-9207-bfc0f0ba3383"
        },
        "item": {
          "id": "f2e08159-ff7e-4ea2-9b15-43d9816a5a46",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4d772938-b59a-4c7a-b363-ca634a0bed26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "5529acab-ca97-44c9-bcbc-f01a13f2537d",
        "cursor": {
          "ref": "13c5af24-4283-4dd3-ad5a-78a1b05ccdb5",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d9fecc83-9904-47f4-b741-5f154160f1a2"
        },
        "item": {
          "id": "5529acab-ca97-44c9-bcbc-f01a13f2537d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "eca19806-c0d3-43ee-944f-7eed0b3480e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "2042f9b8-096d-4726-945e-2c98b48470b4",
        "cursor": {
          "ref": "69cd0d24-68be-409c-afff-12bb5d978b14",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ac135e05-6e15-42d4-8117-4c2ed41a9f14"
        },
        "item": {
          "id": "2042f9b8-096d-4726-945e-2c98b48470b4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0b480fa5-4b24-4b86-b670-0fcf6ab2a7e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2042f9b8-096d-4726-945e-2c98b48470b4",
        "cursor": {
          "ref": "69cd0d24-68be-409c-afff-12bb5d978b14",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ac135e05-6e15-42d4-8117-4c2ed41a9f14"
        },
        "item": {
          "id": "2042f9b8-096d-4726-945e-2c98b48470b4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0b480fa5-4b24-4b86-b670-0fcf6ab2a7e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d89eae-db3d-48c2-9ac8-21a7bd24f8b9",
        "cursor": {
          "ref": "179bd4d6-07ea-4795-ab0d-98b40438d85f",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "04109b41-36d8-4abc-aed9-36f558d25060"
        },
        "item": {
          "id": "69d89eae-db3d-48c2-9ac8-21a7bd24f8b9",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "95d2762c-dc54-48c0-b154-0bbfcbce614d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}