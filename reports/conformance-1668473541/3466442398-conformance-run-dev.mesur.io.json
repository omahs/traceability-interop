{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fa20faa8-1dce-47b7-9399-465f4b77b226",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2e9a8d98-b9f7-48c2-88f3-572a2b3009da",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "294e559c-a23d-4356-9d41-aa7ea476a5ff",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "639d45e3-bd6a-4212-b981-c9ea6d2ad84a"
                }
              }
            ]
          },
          {
            "id": "b79e3b32-6e2a-4f94-8d0d-4c1b3a6d9464",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "da2a9f95-2736-49db-ab2a-bf9d33d28d50",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4f849be3-6297-4412-848a-705e72157b54"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "eac551c3-ac8b-4ef9-9006-4f4e90a5787f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "796de50f-30f8-4856-9d5a-eb5fc5524b61",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c9ed644b-ec58-465c-b583-c5362b42f3e7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa3309be-4d9a-4ebe-bf6f-dc344ff8c9c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4be2b501-1f19-4c1a-aa26-21e9643cb9d5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bf1cf5ad-3037-4f2f-8843-3786f6ad8b3d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3862f294-a586-4934-9569-c3e5b60286b8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "843de139-30c2-4e07-a4a6-9b932c41d36a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fd0727c7-c460-4a64-ab9d-542f23726303"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ffee88e-daf2-4fa1-a58b-df42949c174d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "07f9dd84-a79c-49d9-980c-1bf7218eadbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b1e5cf03-2d68-4779-a97f-1caacc25dc9d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb868ce1-27f7-4155-9d2c-4dc6f57388c9"
            }
          }
        ]
      },
      {
        "id": "15e3c5a2-5652-40c7-adb8-bca3ce36193d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "51b85571-2f18-4717-af7d-9132cc6a6630",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d1ed44c1-a0a9-4af9-9bd2-7dd6aea9b948",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cbe57e82-d26a-4f39-acb1-d0da87c9552e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "693531d5-17fa-4f21-8b0c-4092b23e2b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "620ea5d2-b487-4e4c-b71a-baeb30f3d1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6985af8e-49cf-4480-adfd-6ee5cb6819c6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f154c30-0284-48be-83ad-18522031d23b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "191c2e47-e2cd-4277-a966-1370e21b555c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb0de58-77e5-4c75-817a-7419fb8cf508",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f2dea7-3d99-45ad-add2-df2af73338df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34e45af2-caae-48f7-bec4-e2dd704f226b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e6e3fa42-1f55-46ab-b5e7-04254f43098e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "549298f5-bf56-4c8a-854c-bc9cfeff0a52",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5865a9c-4309-42b2-8eea-71a695661477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbe12424-c10a-4bc3-8dda-97127ab33f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c7306d-8b2a-4e0d-9eaa-562e2fbf951d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5508c394-8a09-482a-8d60-fcfd681cb47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47494f29-174b-49d3-8df2-33f03f46d238",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84220189-a852-4b4a-9efe-99ca18e58b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b0b2e7d-0861-4d2b-b4d1-b14d40c40ff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199eed57-9871-48e2-abb8-e735fdb56ff4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "76101ec6-7ca0-41e7-bd6c-546cd20403c8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a8805d47-22f8-4195-958a-f6f05a1f27a4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bf977de1-8259-4327-9769-9296073d04a7",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09169972-72af-4f39-aae5-98dc540f3425",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "114a90bc-e769-4d29-8ed6-388ffb1b0213"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ce4cff3-1b6d-440d-b392-5cfa2390904f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "90262d90-ddc6-452e-81c0-490e06aad59d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6bb88333-5972-480d-8af2-78b54d07af29",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3066c7ec-8895-4f61-8b13-78e4222753c8"
            }
          }
        ]
      },
      {
        "id": "7a9f919c-96ad-46b5-8448-59ac7f9c9c48",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c9cc78f9-d914-4af6-97e6-9684d78305a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d9879541-99bf-4ab5-ac80-82737bb02b67",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3b11acd6-8a14-424e-bc1a-f65f201d3b03",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5908723f-8ad2-426f-ac98-9229d48b34f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a09e26e4-e4e7-4ead-91c0-57efc8cb14d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d32560-a751-4066-ad98-c1a139c459f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26674117-aa3d-4187-9d74-76700a162099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ad6b41-50ac-4809-bcb4-856dd9473783",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe76bed-35a9-4a82-b9bb-e295d71a6f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f79070c1-e0fc-4465-8ca5-c9b8bfba598a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7048cd6-4e92-4e65-828e-3a694ec95c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b7f9745-1265-4e37-a8c1-17a71272cbb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f42f9a5-1036-4786-8a23-ab87a904f61f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e2295b-2c05-4db1-8bb5-9025fd06ea6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c795e2-21ee-495c-b2f2-4c3ea50da7f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555c6df1-e435-4be7-8ed9-02349fa91363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8400c3e2-4ef6-4ab3-9b1d-8852b02e7bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2514b8-080d-4a7d-9387-64b2a3f2fe60",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22f8eef-ec90-4c73-b29d-3b7afa1f1e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4492a0d4-11a0-45c7-a858-392101968b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9655c28a-49fc-481c-a393-f13402e4e93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9890db48-002b-44c8-a514-44e4b02990ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688d2210-d002-47fd-a6fc-b70ed6ea624b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a94466-1a76-4440-a412-1121a8e478b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd171a3-514a-4bf5-bfb7-fd5f7251bae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3506a2cc-ff23-4e73-8e0e-4a097fbb530e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "644abc47-b8c0-4594-adcc-259df249843f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1001e73-b545-4c48-8204-cec83f0a13d5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b774211-7068-4157-96ef-ad2c46340135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c47793-3ce3-444a-a71b-40675b90b64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b845b3-4a00-4763-8dff-04134d666512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2efdcd5a-11c3-40eb-9e7a-24b092029123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48f26b8-8696-4fca-8126-b4390808ec88",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28f196a-972c-4702-aaa8-dba37e87773a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71569b4a-e44e-4767-a1c0-04ba895b4207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea58996-20be-48e9-89ed-5a827734540d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74c5ec3b-5121-4b33-841a-ed4c081c7d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e0d215-cfc9-42d7-b768-5f86737dfeb9",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67733342-cac3-42e2-809f-c9cccb7136cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f2e212-9dda-41cf-be9c-55d88ba8d841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b0ee41-50e4-4f8f-a765-f7c61a6f6320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff70366a-71cc-48a2-9f46-ee0f6d3b20c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a99fee-7a65-4842-b25c-1a9c79f102e8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "720aff87-6a74-4b60-9839-87e23f0035a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51541e87-8428-4d8b-b383-854cf7cb8dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e474bc-5efb-4f75-9f4d-4834168dca85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ab21997-cab0-4e68-88b3-ebc00a7e50b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e7e336-753d-49a3-89df-621efd91ffbf",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63e1d53-beb5-40b2-bfd4-a30139fe7f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b695f50-aee4-49ba-aeca-923a01687941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91befc38-eeaf-462c-9b69-579c0cb75c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d9ed1b6-666f-4e3d-8509-8e77237932ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878e514f-5290-4b10-9d92-5b5ee4a6ec95",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "442ea17e-42b7-4697-be90-b5f017475665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ccdde57-594d-456b-8e2c-1eb3b6266676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869b272a-c04a-4442-b7f3-0c2f5cc7e477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34a14028-5325-4306-ab14-6141f40f1814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575a98ed-5302-4946-9d60-3308ff089ecb",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7b4bba-5bc7-4f2d-bd62-2e06a9f5f1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f09a1c-da6c-40fc-8fcc-0571bca5af8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6248742f-347c-47d5-9249-2a01429956c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9460fbb3-4c49-45ca-a040-8a1b447ae9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607e9c82-72a1-4ac9-958e-5199613ae77c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "105856eb-d132-4740-9e61-cf6bbe182021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f5d1a7-f12d-45e3-9be3-f7d35c860017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417b822e-88b1-4bfe-990b-b36b9d200dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "381dbf0b-20a3-41ac-af98-3ea7f6e65597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1f2762-dd37-43c1-a338-70b67d1300b0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c40508d8-ab6d-4455-87b8-a02822f64f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3daadd30-777b-4ec4-8835-60d8c02e33de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e970bb41-7f76-4dec-9980-68eb658d9e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "175a0424-4a93-4de5-89f2-58cd1ce77f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b684e6d7-73f9-4177-aa6f-b46c1dbd3fe5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ffd57c4-02f9-4ad6-a32c-6d2f15b393ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "639566a9-7303-4d43-aa02-8357c19a08dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec573c8-7eaa-487d-ab71-7b14cdc986a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18383d50-fded-4683-a6a9-5bb78a07346d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5213b7-4e60-4002-88ff-4234524572d1",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8cf5aa0-ee9f-44c3-92cb-54baacdf3e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef65b4ad-7ad6-4322-91c3-b4bccde01119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1269aac7-b7f6-46fb-af17-a02e15e17c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c55ba32-e084-491f-8846-8edd8dcbe9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c0b9c1-c601-43a2-97ec-7c2cc448a32a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0578842-a2ba-4662-8360-1763d31c13ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e3f3a7-896a-4c43-90e9-4a8e084588f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5017b434-ce49-4aae-bba4-14a9047ca53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39bd5fc8-23ab-4318-b91e-308b1c753495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014a1348-e7e0-4ff2-a875-ac2acfc250bd",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a165be-1328-456e-8833-c64a8e5b23bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cec78c9-f081-4a8f-91a1-37b7b5748428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244024db-425e-40ad-8e52-be304c6e52a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "09263ed6-7cba-444e-b432-99bf07ca5a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f82dc3-c227-496a-9638-b50a9b6a2f53",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3b60ea-14a6-445b-871d-7b3c615649b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "783577d5-2e00-4fac-b61c-b9e52eb53f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ff8ea0-f561-4f5c-9d7f-91ccb4594274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cda6ac2-5335-4520-9169-6ad65d1c1d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860df611-5e80-4d0b-8ba5-b89004d54e62",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3afe8b-2f73-49c6-bf33-524bddd517a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517efe9f-eaf6-4a9a-bc80-960aab0373e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9649f7c7-518a-46c6-a13b-a49f1037353f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce5be240-6273-4995-8720-5b773030ec68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23a17dd-92ce-4df0-9f6e-dd5b9c1483d9",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68f0810-9606-4493-b441-968b7a8831ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "444579c0-10aa-4bc3-9cc3-38c213341a91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e85f43-ea72-4e6b-9bf8-359e683a243d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "66070246-7b8d-479a-8eee-a504d154dab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c8b172-bfbf-4501-a5ed-dc8cf0c8efba",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668c8b0e-903b-4a55-baaf-a36de9475b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93234774-fed9-444a-8087-156ed022ba95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d98b32a-6da3-412a-b97b-95331ff64153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6370d784-bdc9-4854-922b-6a6db34a5065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8fdeb2b-10a5-40c8-8456-fac6009b8909",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4733e8-5a0e-4e63-92eb-a25063430b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c27ad12-2813-463c-951c-835d625b5afa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cedc31a2-9f19-4544-be02-fe8665db4d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0124f42f-3299-47c5-92c5-457218bdad47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7decf2de-7bc3-4e34-86d4-d18e26af5f4e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df74fc7-ec0f-45a5-a64c-4452adcb1274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d9533fc-a50b-4e2c-a7bc-29d00be9d6ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5fb29a-494e-4a3d-b36d-5d5b7dff87ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7191f9a8-7866-44d5-9c56-a087096acf14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3a7edd-e93d-4c9e-a733-1428157e94f5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e58e45-c210-4dc7-9821-be254295357d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7aea35c-e778-4c8c-b640-2c616be37311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0c82dc-fdf5-40d9-ad93-4858a8a7b8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "de332d93-796f-44fc-b8ce-bd04cab944c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b9403e-6674-4315-b334-e4e014e5093e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "405da320-67ed-472e-b70d-0f16404004e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd80dca0-99a4-4382-ba22-be80ac8c2074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40c42ef-670d-41fa-839b-43ecd27dcfa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b5413e0-51e3-4d3c-b950-75cf24f39281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa7882e-ccae-4d6b-8294-35fd9bb10ffb",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "645247f8-f82a-4cb6-9255-0b52a4a0f432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3355bce5-c191-40d0-b9fe-b70c91ff7157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec792aa0-ac9f-4f63-a6bf-247dbcd78f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a05e475b-e16f-4f84-9463-720c03ede671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb88e281-e984-41bf-9415-5616bd15081d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9cda43-b227-405a-9d66-362c553044d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e14e789-4a11-439c-9e92-b98138a0ba0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd646cd1-fca3-420e-b082-13686b891dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "72d7149a-0041-4e35-80b4-755f049d95a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337694c6-9a06-4d64-a3db-1592617694e4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d51ad79-52c5-47a4-88df-e6eb689ea511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e369f48-212d-4c51-b9b9-e0af2f7b3c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6b725d-9b14-4169-9fe3-30096232a3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7935aa2f-91ba-4c15-8a74-b6cc278208b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8cd83d-f6e2-4953-bdbb-9fa7a69ec913",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d50045c-b53c-4004-8564-fd433d1fadf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de674bc7-e85c-4824-9171-efe4544fb0d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8a95e7-eaab-48cf-935e-5b3c9cedf1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "91cb3bd6-6acb-4cde-a7e6-127ca8ce5865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7739ff92-75b0-4b97-a977-5e49d9cc31fe",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59f2453-56b0-4baa-9058-5d3fc52cc491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c89c150-b982-4cbc-9490-8afaf5a3c0bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2de4978-b1da-424c-a135-ea7cbe068e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "018058b9-fafa-4c41-a39c-987ee96e4758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d031d034-c7ad-45ac-bbcb-06f25ab8b7dc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19508cf-9786-4439-87e9-db3ccca2ecb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a0a7db-03e7-4aa4-ac82-3e5ef297eaee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e528214c-378b-4264-99e4-ac367d868ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17729da3-897a-441b-a214-433f9f7f74d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa4becc-30f9-4436-a764-7dc88c17130b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e343cdc0-7fa5-4bcd-bae4-1745fa5446c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cecd7633-eb04-459f-9d70-fc893a5e6dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70a2f4e-2a6f-4c8f-af68-98ca49e882ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "788219e8-5404-4428-b8ae-e4475de4ca68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5867275b-c2da-447d-8405-cf19056e4066",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc5b1ff-e270-4b4c-9d9d-b1a4d736d217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ce5ad9-eb30-4f26-8773-d6ec871cb63d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e5eebb-1093-4053-a544-26220c1ddab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab7ed3f-f1c3-4c8b-9f3a-79b89f66a11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d4368c-6a00-48dd-b780-23122694388b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25512c9b-6d9a-48fc-9665-e273e063d3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add8962b-ff24-436b-bb17-30dec55d7bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26e6501-2956-492a-bc56-36e92641ccba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "549dce05-50aa-41c1-9cbc-eb40eafa91ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8416057-caf1-45a9-a276-8ae9242b72fc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc37709-e819-45e8-8751-9f40ffa94bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce7d0eac-58ba-47ca-b581-17ca613a8d3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb366d63-4104-41b6-acb9-6b9c806d4745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f4ca9b8-063e-4190-bb45-d29a333b3c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d8c095-7525-4c65-a2bc-ce44a1a20dae",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9b80cc-9137-4471-ac4e-4321141c526b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4205a235-6db2-4a44-9141-7e0f45f73c1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c205e2d9-06ad-4529-ba5e-08493eddc047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c53e0db-90fd-4fa5-bfbe-eda6b5390a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9a6f7b-3881-4e14-ba81-c2d4eaf91b45",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f49efe-6ec0-441e-8a6a-d4e140fe78e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ed58c5-3dd3-4a1d-a63b-062b81e960c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dce5a06-8369-4a23-b276-d1186617414c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "18120bb1-0735-4517-b66e-4ae0b42d1426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8a4ff7-5b16-415a-b950-95ca643ac9ca",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5a62aa-3dda-4c99-870c-750a5a2b6eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60118f92-aa72-44b2-930d-a819bab1d5c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ee1d62-829c-473d-a038-c04ddebfb11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e60ceb-1789-46fb-b652-2e9573782c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12c959c-75fb-4f3c-8320-16507fe854d4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219f0978-bada-45a3-9727-0fbfe65ac497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2252590e-d806-4b02-aa83-10c3bd1b47eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c134d872-3e44-442e-bb75-5df41880e846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf4ea250-14e0-47b0-9f8c-c660140c7994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294eff22-3862-4098-a0aa-09edb775c073",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74772fc4-950a-4711-aa4d-abfeff092910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d33e466-a632-4810-af88-bd63c9326ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6d80df-bf97-4b86-b33f-dca3db2f889d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4025d082-5fe1-454c-ae7e-a7242bc455e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a11f16-aeb5-4d88-814b-01961e5c1e3c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5dae4a8-6d8c-4f91-b055-9bac019dfd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c88970-db6b-4e57-879f-ce90e639dc7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86d23a3-2794-43e0-a74d-a0dcabb4d3ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb60bd0-602c-4f74-9ea5-de2eb841e0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea05f6dd-c70f-49e9-a61d-c15dcc74ba2f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b580e3f5-4881-4d70-8331-299291fcf816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30a145e-d28c-414b-9b41-02ac0ca3b1ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1262663-72f2-48e5-b144-0624354df052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c92eab3-ae13-43e1-a0c7-f77161aea35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf41491-eb3c-4cf8-83cf-f9171f2b6a4a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72ad66e-5344-4331-9905-9e3854de8a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7ab972-3a89-42db-ac4c-3f038d4cdee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05434ad-9df7-4e08-a82c-68e378d1bdaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "24128c80-7290-49c3-a90a-63c9f5894810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2ac53c-3cdc-4493-8de0-99ea3cc02c10",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1969b85-ab54-4b9f-90d0-9a37ed56e0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df837f08-285f-46f9-82f4-a3f011c3567c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5bb741-0aa1-46f8-9c9c-623beea19ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a64a5ff-563f-4e93-be58-5501c54985d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b919d7-4084-44f8-8465-cf89790c5931",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750767bb-754c-4f04-b36a-1238ec75b5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9352afe-0441-4f1a-a267-d657f934785a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5032c6c9-d89f-4b83-9a3d-43dc97c57d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfcfb770-b0a8-4904-9184-ef4a3d741096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47da7ee-362e-4e82-9716-c0d8cc7d8961",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2fad344-5b7c-49c4-9b40-a82cbb8369ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c546f283-fc17-4fcf-9c87-528e306b2198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d36e02-c3b9-481e-ba4c-00576e7c5b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "59d606ed-3ea5-495b-b4b5-e3c59e3fb9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a99409-b3a6-460b-bac7-1e9c3620a046",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b747a07b-0f7b-4d94-a0a5-fe8a76bec404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e4449b-f781-4bee-8b75-5f3ad7f2c831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be08112-6f1e-4708-92a2-aeeaf75c206e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e63c7d8e-e24f-4893-b636-ecd09220139e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e24ef3-cdb7-48f2-82bb-484dd09fa0db",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dbbd4d-3f49-4ab5-8fce-3516e7af359f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c19461-9ab1-4dc0-a849-46e98aaf2dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983f5d3c-af30-4dc0-b5f8-44b3f01369ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "30e1e306-0043-4421-91c8-70a6e8f2fbf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de09c79f-40da-438e-bf24-139f1241b50b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e859a5da-f9a9-48ce-acbd-fa305ff51502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b07b000-6570-4409-8173-418756ecedb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876d7fa1-7557-4a4f-b988-149f4c2f62f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "48854531-e1a0-4b64-8f63-2557cc4fc717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f83ce42-fb4c-48b2-931c-124b67978878",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6967c8de-d78a-4bf6-93f9-5919496ea5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89af2dd4-f676-4c17-9a2a-0564d53fca1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1685e756-a87a-44ee-b565-934048dd3b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "30a4e13a-6340-4e86-9b15-21298e048e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee592ef-afa9-4be8-abbc-612c44a77150",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac60eac-8c5d-4403-95d8-547fb0c3513b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b3112b0-5df5-4da9-90e6-5e7226009b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e13f95df-7269-45b5-99eb-7a465606db1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "05268288-fdc5-4fc8-a4a4-8ea757d91454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a428b28-1e0e-4817-81a0-c016d93e1241",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93e0dce-92f4-460a-86cb-64593f6aecf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be5fdca-ee09-4794-a6cb-7f27df9d18a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d33cfa-8f52-4734-b252-ad79cd3a80d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb099a50-4989-4b91-94fc-5283abc2bab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee0179d-bfde-4b3e-a957-abea2ff173d3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2583449a-86cd-4e59-9a90-1be1f1f4a890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3888a729-88f6-40fc-afb0-e7c96fa86477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0573917-73d8-4f9c-8740-ca0fd008d2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4d69602-790b-4cc2-857e-fd5f3b3f73d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8194c479-b6ca-4425-a77b-e2d2ce13d7f5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4f2a25-1207-4160-b11d-5041dbecfcb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba08a57-82b6-41d1-8f14-911103a95245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f3cd6f-c88c-4a76-9f8b-db3307e7c040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "664ffbc5-4e65-4a9d-8fbd-08003b0dc690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a585dba1-c7f1-4edf-946e-5671599c3cbb",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea39a74-0774-48ad-8cef-f5202644e7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "671c1eb2-6710-4b50-84d7-a781868f018b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10abf54f-b731-49d6-8320-ba40b3d101f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb71a04-4020-42d5-8dbb-44685e92de91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7325f1-1f6d-4aab-9c27-5c3cfd17d01a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c3bb8b-354a-4063-ad1d-ddd8163d40b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eff78d24-fb1b-4d35-8633-5c51b36cc4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea76e74-b721-404f-ac59-44c436a67b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8209054a-5bf9-4733-a71a-7856b509a6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebaa6afa-4eb4-4b76-9722-6721c31f4e29",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "362d5238-9f5e-4b6e-934b-590448b738ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba55ec6-1976-47a4-be5c-def3b312d0e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ba4a6d-4d5e-42bb-856d-f7b3671c7603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b3c720b-cf8e-4cb1-ab17-f24dd68f0b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d03a6b-dadb-4611-943c-53d6d481f56f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30c0fdb-cf7a-4661-81e5-3609ea7aaba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d4e96bd-35d9-4913-b7fe-9da78e6796da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d7cf27-15c7-465c-97dd-bcfd2583befa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd0e30b-e2e7-42e2-985e-2bcbd6a5a0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d947e407-c6a9-400f-a5e4-314fc6ad6895",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d154c3-35d8-41f4-a7d3-4a800cb726cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57143fbb-6651-42fb-b54c-bf7fa1d2cd13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02abc54a-817a-476f-820d-2a3a939f4a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6239c16-a69e-4514-8715-a33b78156475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e66eb3b-5cef-403f-bbf6-e7b635f1c58f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1903558a-3317-429a-8ce6-f3c4edadfea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c09629-e497-48c9-8268-195259cc2787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e69981-27a9-47e4-a0ab-554e90f5880f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab663873-cb17-426c-8458-81aa785248f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567c57cc-554d-406e-ba80-5378fe023b86",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757d8276-23af-44a5-9cee-30212e7c5c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75526d70-2e64-42dd-bc6c-290bb170995d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d34d80-7e7a-4169-aa1a-92b917e4f4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0a1f6af-c45f-4b38-81fb-0ccc7e582eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a7b862-fed9-4d70-b201-f7ccc602bb5b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1864fef2-15e1-4bc3-9c4c-78fec985c938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4888d59b-f265-4d79-805c-c30bf5908dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3e1140-308c-4dfa-ba14-72783f03eda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a607a71-0068-4e57-b3fc-ccb798200a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bf378f-88e9-4f90-92f2-94b15ddae118",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1fae8a-2512-4535-87c4-e2dac62bf02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "323237d4-9248-4bbe-9a6d-c09ef0cce50c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb82f9c-85b6-40cb-a475-09841ae48c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45a5d029-7547-4e6a-9f72-23200ec6d44e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec06475-f2c0-4b96-8a12-8c54b1145e9a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4600511-9a27-469d-9ed0-6bb83b76d46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2cb2e0b-2d74-4082-bdbd-7714262150d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42061b8a-d7e6-45c3-a1dd-d120fdc63a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a7f7b63-cbc4-41b0-a831-4b344e66db44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e98330-0c81-40e4-8f7b-137e7638b708",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb417174-8339-4fb6-a8ea-9e965d0f88bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b0cf37-f1fc-466e-af49-f81f8c85e013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce4c465-7303-4530-8c55-50cec025a6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e716f20-8665-4853-a2ba-3021649febe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8570949e-a3ba-488c-8e34-8759e34bb262",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ab846c-5186-446d-9982-baad600d2ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f0e952-0dee-4f71-ac41-17fcbf20af64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be10e01-4c7f-4549-bf90-0123127d67ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e8744d0c-9df0-4a37-8172-8d5cfe8446f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38d1f5e-a2d4-407a-ad1b-c7ac86997949",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fbd0fe-a1c0-40b3-8f2e-3e6e0fb0ca8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a2c5109-3151-40c0-8171-d908efebac6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7c65a9-1628-4247-9fee-0bf3ec64a1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b93d039d-4b05-421c-b595-cf571ca79ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ee67d1-a04b-40e4-bc79-e4faa0cc7837",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6490c68f-286a-4ae1-84a9-71780db1c47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6d038f8-e8c7-4737-a52d-046cde66593f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa79d0a-b2af-44ce-8baa-2399a2b8f44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5460602d-d5b6-43f2-8be2-1a6a3b6a9375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43178108-bc92-4145-b546-609a34e0ab65",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3971bbd9-7f1b-4693-982b-b354b9d71976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e897bc94-8d99-4add-8b82-342fefc19b14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc05604a-09db-4ea5-8bff-2515378ca47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "16b7f503-dae6-4fcd-97b9-5e93fe233b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df802de-a8a1-445c-88e4-80980499972c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7022bf1-7e9d-496b-967c-583a62fb0141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab819c5-cf04-4aa8-b2cb-dc0a3e18ab79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8149f0c-d62c-4b5c-a3a0-225e32a12cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7ff3a5-cd78-4b1c-8258-731779e5b5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c23cb7c-e8ff-47d0-ae2f-7628d7f57447",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "840f1b8c-bf26-440e-b913-8097e7822dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33539946-c3a2-43d6-ba40-d0dfe2e84f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27991f7-aa00-408f-bfaa-536160f43972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b41d758-ca74-43d5-8267-aac06a9695e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6476ea-9c68-4479-9266-60034514fe2c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4561a27c-77fe-4864-afad-b7cd59e2f5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ac8fb8-070d-4a35-a9cd-2d669e232452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5daee93-58a8-42e6-9850-ea42addfb961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2d615c7-bf13-4d14-a675-6ddbf9c7d056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5a33f3-63e1-4282-9a14-708339bb55ce",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efe74b4-8dfd-49e8-80b9-5b3a47c5db5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "700c85c1-3a59-4566-a3e0-b70dd6e44677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4f7bf7-eb01-4ec4-b483-bd7959865f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "03fa9e24-bcb5-486b-b5c4-ef5dc147fd6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f1b798-bdc4-48af-8afb-6f47d880ffed",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24462890-2133-49a2-ae75-e7b3a3da76e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d33240-028e-415f-9cf8-f9f7fee34e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6289a461-c29e-4344-9871-bca38ce43fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "929fb4a9-13e5-4d6a-9a49-23171b4652d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00da600-cd9a-422c-97fd-8e78d1e06125",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b415e7-a0f2-4700-a925-5e8bf9ff0ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8a63609-d3b4-49ae-ad34-a65ee7d9010b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7af08a7-3c54-4dfe-b03e-8b8c060d02d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9212434-c032-4df7-87ec-1b373ad88838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e823309-d4bf-4343-b49a-251d5414b969",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5009127-abd3-4297-995a-7048efce3a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d297b66-9352-47e3-b29d-ecace71d3152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58bdb35a-7dac-40e5-8ee1-79aa35878749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "839b4c1c-4ae1-401e-b26f-2e89b02ef816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb06312d-2d4d-4fec-bae1-182071651c7b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a929140-5327-4678-b0d7-f77973d6a2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eed36b40-f929-4745-bcce-89ec6754f081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd49a85-59ed-4f92-a9e1-0e0c020a575e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef650d4d-6013-438b-bb0c-60187c8eb460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e9a1b6-0d03-46cb-8a33-10bf51a6f939",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc1ecbe-5252-4ea4-a399-b15c0ec19bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a552c801-65f9-40cd-b65a-7d39e9f34e40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb20b1c9-7569-4f3e-a2a7-5f2d0c0fe1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "267e7569-1b16-4840-86e5-a3ecdd31acd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28b7aa3-d52d-4e5a-8ad2-785c2ff8efe1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dededea-9eeb-4446-89cd-5cfe8ab13ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88cd444a-a7b5-44e8-b956-f7a72fa5adc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e1f2d1-63c1-4068-affe-20494f9a6761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "862e7365-625a-4dcc-9b9e-00d42aff1c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253437ac-daa0-468b-84fd-bca5ade338df",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089602d5-2c64-4072-b3ca-5be18372b9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f9fd8c-60bb-4079-9313-d70563f856ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df63c3f6-4101-45a7-acf8-fdf4a1bd4b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f3225f7-4b4b-441b-a9a4-51422d8247b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d6a391-2f76-4809-8ac9-ec93e9a49467",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70fee936-ecb3-4716-af22-8d25bc5746e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4cabb43-257a-4879-8f0a-d9a43c0d5835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bfc7e77-bdca-44b8-b209-b59ef27a261f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c2d0cb0-f077-4211-914f-ab1c51f95403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5e8dbe-c717-4e9a-b76a-c8ab721583dc",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "178636dd-4530-484f-94af-e870aae30417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72027bbd-b5d4-4818-ad42-13ad7b31f79c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95915faf-fade-470b-98d0-ae05f81e7471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1db9adb-7345-473d-a9f0-918874690803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d433b9-f4df-4614-bcb4-21173593353d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b3e948-a760-458e-8371-4543d7744c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "768d951f-42d0-4635-9345-872f390a6020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35753bda-7e2b-4349-87d2-9840ade42d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "39b98d4d-ee18-4e2c-86b9-e39b8f2205c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1626274-ba8c-4c5a-965b-77948385a617",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfa03b2-91d9-4778-91f2-f9450f71a12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be547fbe-be0b-471e-9285-85e35f0b6a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04670942-4f74-42f3-b430-b7d19acd73ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cff1ed42-0ee6-4a3a-808c-bdecd45d9347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2277b893-9b72-4329-8423-8a5cb930e0ac",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "279e26a4-38a9-4af5-a147-bc72e7484641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14d86d0b-acda-4827-a233-2b435dfdb723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4637b139-7706-4522-ae60-a3b7f4881dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d21e22c-1dee-4431-a4f2-59a01aa31813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0978184-fb87-48bc-96ae-a08ab2798d3d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff327894-a710-4745-b81a-456ef22392a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1456f8a4-13a6-45fa-a138-356e299c5c85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1257a3c6-da2c-4db4-8e81-fbdca1008a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e148ce1-bfa9-44c4-8327-0cfd772f30a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92000aa2-2721-4bfd-940b-65b0b594182b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5b128e-eeae-47b2-87aa-ce37900fe674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25bab25f-c843-4d2d-aa16-0b334c5b2ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd4631d-c975-4335-9a9e-dcdf1b21becc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "028449f1-a597-49d7-988f-ef35e81d6f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb63ee69-feef-4625-9ae6-0805988cf665",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "557cb0f3-aebd-4841-8498-c51562e06c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de7d114-3b4f-44dd-a5a0-03cac553c6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b5a092-05bd-4cf0-8c24-f3fd7558e02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "06f2f410-ac7b-49fc-9cb5-e88aa6708aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff7bde0-2ae8-40d3-9c44-992ff0acf380",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da12fb3d-f445-4b89-9f44-ba6d3a49d1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5b230b7-f826-4b2a-839d-6fee902972fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74c24a8-92ca-4fa1-ae7d-190539944977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "db68e83e-9488-40e7-bc46-d193dfaac9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc59871-7f48-4be3-a99e-2552b579400e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379c778e-30cc-47af-ade1-67e1604fe8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b2b53d-491f-4874-ac15-798376a5b2f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98b4f14-94f3-4a54-a1fa-dba64d08cb5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6391f49b-8c5f-4617-9380-8f1106668f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612cf7fb-2150-470e-8455-7ee0ce380290",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566e15a6-f6e0-449b-a83b-ea5c4d550419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c3104b39-2cb0-4371-8c36-886cb85d98c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0bcdf5-afa6-4e59-a805-e6d3923f2023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ded10eaf-90d9-4143-855d-a8e569a061a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0e400c81-218c-421e-ae35-c7e23e8b4982",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "692c7dab-e787-432a-b8b9-c3eb9b7edf67",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaed508b-7fa2-4ec9-9eab-40b4960b8a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7689fa6-860d-4a92-af1e-832d25655eb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7368f54-2a67-4c4b-aa56-c366eabeb8b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f1cef16a-01a3-4937-b9f4-4623bcf2c244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e13735-b389-40e5-9aca-72d3fe2507bd",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27bd03ea-dfeb-4bcd-8c50-5a4e685ee87b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1fb6d93d-9114-4601-a1b9-9042aaa2095e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a413ff-f038-4b85-bfe6-d96a5afd3d78",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8eca33ef-b845-4c14-8cd2-3f906b88e78d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1cbfdc8b-6329-4db3-b2b1-d79b286d8eac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29764be4-51c4-47e8-bac8-93ccd1966c13"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3695f548-77f8-4c82-adf8-07f2ecb7f5da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d42aca5-4e0e-4f0e-843b-2594c9dfb7ed"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "12f1d3b7-36db-4f59-a916-ae7b9ee8191c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4dfea0d5-793e-454a-8673-94bd91b4c7f4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3de40254-7bd1-47e0-a33e-f5502c54f445",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b7c5c401-174a-4bfd-9dc9-d8362db9a7dd"
                }
              }
            ]
          },
          {
            "id": "5be2ce40-ad1f-4e76-96cb-fb28fc50324e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b6eb0eb7-1f0d-466f-9cdf-a42efb655972",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7bc6b1c-fc8e-4b23-bfae-15bb47ed8f7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9812e3b7-33d4-4216-bab5-0ea3f2ba1664"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4171509-52c0-4647-843d-5b817c61168c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6292a3ae-592f-4e07-8532-fa7d8c1614c8"
                    }
                  }
                ]
              },
              {
                "id": "dd2dea80-72e7-4124-83dd-25896acc28ec",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f749383-cdee-49c7-a729-6931052faa3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e93208b2-3430-48ed-beb6-e391889dbb11"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "733e4933-b80a-4cd5-af8d-3d3f85c467af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b7abbf50-99a9-4e6f-b5ec-a93403e5396b"
                    }
                  }
                ]
              },
              {
                "id": "24ba9481-5ff1-4eff-9e93-5d7c89086e73",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f76051b-0952-4eb6-a823-118f8aee6cea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8783870b-d343-42a7-88ed-d3332dad5211"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5334829-7be6-4f34-9675-01c05eb66a02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c8118782-1cd5-4286-8c2e-3c58b0608d0a"
                    }
                  }
                ]
              },
              {
                "id": "42101c64-025c-4b70-9fec-953515097d0f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5439e03-436b-4730-a2e5-472289c8b38a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3e4efe6-9116-45c0-832e-a096b309daf2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "193a3bbb-024c-494e-868f-ad49d7876712",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "01d4db10-2c3d-41f1-8114-e0dd95083763"
                    }
                  }
                ]
              },
              {
                "id": "6d54e608-1c09-44b3-96a1-cb6b792c6e30",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3ad6e50-88b1-4b1c-b8da-26668aae7223",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d3ed48e5-ea75-4249-b314-0db779e279e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a327432-0011-458f-9c4c-8ae4c6b565e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d5d04514-5500-4579-b9f7-30cf5450daba"
                    }
                  }
                ]
              },
              {
                "id": "67a22fdd-9643-40f2-89ad-254b7c09201a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "494ae89f-72ed-45d7-a53d-4601ce3cb5c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a79f9c4-f722-44ef-9ed3-0110ad79307b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14677cdb-8a77-48cc-bf0e-93ac92856514",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "82021e5f-447a-48de-8390-2828c07f3fe6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30477228-d033-4f32-8cde-2e49144401c9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "11a318a0-650b-4c31-9290-c51b3d2fc781"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b432aa6e-5a5b-4760-8602-c1ad8e92b57d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d75abc5-a260-49d7-bb31-70e9e45086e9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd8a2ab6-09dd-41f4-9dbd-e3a1f5e443a9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a1f37f6a-61eb-4e30-99bc-6d21c8695285"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d51ac9df-33e7-4f71-aeb8-4cc6755d058c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8690dd1-93f4-4de3-9dd1-68b9b9d30f9e"
            }
          }
        ]
      },
      {
        "id": "1499bdc0-6116-4105-a4d6-86c586082243",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0f76b0c9-8e02-413a-80b8-8d7932a9ff88",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8ea3a162-5a3a-4934-8e2f-b21675f6de2d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "006ae655-084b-4a42-ad9a-98e75e1e2454",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c10384b-8831-4acd-a61c-509868e4a483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4747ffe-6ce8-4592-9f82-57f302d04e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7327d996-dd97-432c-a947-cbb144a1acc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3719c465-c5c6-466a-98c7-556a86b4e313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce4b1b51-554b-4fcf-b5e9-2f4dbea30fb4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f3bd75-5bb8-4025-b8c0-0149b7bb13e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b78480-3e7f-4656-b7da-25047f06d914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ae0272-370a-4974-9ad3-2284abee4534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffcd22b8-ea02-4f0f-ba78-baf1182993fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c64900-aa70-47d3-be33-541dbc400a76",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16978ba8-f02b-4ad3-a0f1-27c84f99f2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6cf870d-6f9c-4c35-8b5f-30d8ef14e477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54924047-1239-4394-b2f0-260345a69d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1aabcd4-a2c6-4e04-9d88-f7304e5a39fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d1a34f-bfdf-4bc4-83c0-d1dd49d2adb6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c80ae9-abce-491a-9842-9a51c2374146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59d9648-ad3a-456d-8745-499592d86819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec175a3e-0724-4539-9801-4e3e1fa1791e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3cc838-5dfc-48d6-926a-51cfa689ecfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9fa28b7-e476-48e9-8761-86784932e0fe",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd2b3f2-b68a-4669-b897-1c8a4e4f2a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71761b7e-b72f-48df-8577-212425aae262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fba311-4868-4e2c-8406-4c12d5ad7e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9e6bb47-33e2-4061-a529-34029ad026da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32149556-d697-4912-8745-f5c33bf1b1b3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2f8612-eb56-4b18-98aa-6092c78a6b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39935c2c-ed2b-424e-95a6-64c4264de080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6405e0ef-aaff-4f63-9824-fb3594d1a364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56cb25f8-4619-498c-9d5c-b369cf1ea253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7de3bb-f59b-4725-9a78-60b09bfc56d5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e37b8e-1170-4f8b-80f5-9ad619e60f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0685b7-18f0-4819-a7f6-51b91b6f0cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4acaaff-d06b-4495-a678-0ff094907035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb3c716-15a0-48b0-a6c1-92d8cc37100d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe1286e-4c21-47aa-a582-d122797bc499",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5349517b-017b-4532-a914-e320055ad49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5aff2e4-b446-4af4-acec-b6f50e1542c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed634d97-ab3c-4e7a-b09d-c39e73db3cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8548a555-e9b5-48a1-bbcf-0316fd43e3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348bc9e5-32c5-40d1-bf4e-eda0a5a608f1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87345b4-dd64-4847-b7f1-ebeebaacde5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92969093-5c8b-48f6-83c4-dac7fb4b105a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b13edf4-f9b3-4fe4-b372-b27b76a5fcd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5be59824-ead4-4c0f-860c-091a6ecb9ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d6ca33-41b3-4005-b181-7b5c4329d005",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2ef331-0131-4ac2-9c8c-1f694eb69f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e6c129f-bce7-4d38-8461-9c9ea7f10360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca9d2b9-0556-47be-ae9f-1ae657f31d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdc9eb50-71f3-4276-afc2-6fb7efdef291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c765f0dd-b301-4efe-8488-ae44244adece",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453a88d9-4d1b-4947-a94a-bc5d629613a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ece7d24-5bbc-4588-ae8d-07d7be846f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5913ddec-7e9d-4381-9a0c-e7ce90f6d263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d417c194-9c14-489a-b309-f8b50790bd2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04d759b-0024-452b-9247-6ccf5aa9a76d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1efc710e-b1bb-4038-9ad8-8f9fa716eaf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fbed987-b4bd-4ea5-92bf-3c841ea01a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a76551-9b59-4065-829b-f3234b350b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d509f984-c2c9-4240-bd79-b9abbb3ed0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031c1663-add4-46a9-8e99-0d5c29fe786c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed77813b-88d6-41da-b549-2ac368e0f2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a130ef-3abe-4a94-8dcd-b4362aa8a5a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb1e920-f6cd-4869-bfbe-63134887a00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "68d56f27-597e-495c-ba62-ac375bfac3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69bf18c5-7f4e-40a2-8b78-188a32321928",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12465084-51ea-48ef-ad7a-f686748a32fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6fc2692-9ed4-41e6-bbf6-cc80f43783cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdf84f2-290f-44a0-893f-0aa88d97e94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e9faa85-4c79-4727-8ce4-ba6de4476c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7182e985-37f4-42d2-95c6-ce72725ef24e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc508219-75af-4bf2-9f58-5fd7a1985ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "606b9356-a890-4cc1-b672-9a546b6fb27e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f665013-f3db-45cd-9b71-8c6b033d3b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a4eb430-bb0a-4ae7-93ae-fffde5153fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2693ba-0740-4236-9f7c-12bbdeb218e6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507a1079-2589-4f06-9685-4cfc16c57ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "296b6b79-2dd8-4a38-9973-535ce50d7fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3044cd-71c5-437d-9dce-0e9492792efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d03ece9-8f01-4073-973d-f3aa03fbe24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f668aedc-5743-4cc0-8adb-ac47dfb31177",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa375ba-1137-468f-a52d-537f352785f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec3bf409-0160-46ae-9486-0d152f43de55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88be8e6-5a32-4a96-a6a9-30754f595716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "048bf821-0080-4718-9c9c-a9c6a5ccb91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4c3205-c1f1-436e-90e7-c9f3d55a90d3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01f2382-da53-4ecc-929f-214b16b3d1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02995fdc-fb30-4cb4-8c42-e72bae7a86f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c71a611-247b-4648-8870-28923d90fafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aaea9f9-06c4-45ab-aa67-e92a64cefa83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e50b4ef-ba62-4774-862d-3bfd20007b1f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71efd0e8-4aff-4428-a504-c83be0421a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab29a8b-d25f-4ce8-93c6-2c3e0a8c7883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91260a3-0bde-473f-81f9-ae905fdd4cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f228039d-4f78-44f2-9aaf-f2150d4ccd41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e346b554-f1a7-4dc7-83a3-4779ad456526",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272d866f-4191-466b-ac48-fb3f7bab316f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78564c7e-33e4-428f-a603-e8de5153d867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c6012e-1680-40a7-b2ae-fb64d5d1f77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bda7f3e3-e0e7-42f1-a53f-94296cbdd198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d044966-e5f5-4cf7-91a3-c32374c94489",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092915f3-0272-4763-adde-0d795ac3a37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5edd7c80-ad09-4212-ab90-3ebc1d341a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16a6c26-2504-41a6-a37e-df8d2f83c133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "944b346a-cb3d-4d3a-a204-ac2f30e9e8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c7aabc-a252-4c66-8a27-06ae45e966d8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f45733-7760-4ad5-9998-09ba5264a6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb065416-bd6d-4f85-bec4-db9d7040aef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d3f36e-6801-41d4-8cbb-b2c651062c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b27af27d-7cc8-4654-9b1c-82c729503d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444ae49c-959b-4349-8787-36a91aaf1ffa",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ec39c5-c65a-4ff0-a08c-98a82ebef0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "218740a0-4978-499a-9622-1d321c2e2d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672903fd-23fc-46d7-bb1f-e13f8de511a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd4a9e45-e2f8-435e-963f-6942fc514087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2162a59-6a3e-4018-ba17-4d2665faa447",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26374fcd-202b-480b-92cd-16dd5ffc18f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1499e9-6dbd-4595-a646-3cbe59cfcc4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e28587c-568f-49e9-9de7-1d71c9969588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "213321b2-86f3-4035-bac9-360e1006af79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a592a01-6352-406d-94f7-b1b9814b77cf",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2524b511-eb2c-44c7-a86c-fc72e3d91846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433a8821-6ca9-41a8-8837-88bb25c7ecb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ed4344-182a-4926-a4be-47612d615f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "049d7144-ce64-4f68-a072-60aa5fb9b5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c59ef26-79e7-4b77-a137-5bb1d960f963",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57df1fa0-5b4d-4b49-a115-4c50b057a90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b0cd26b-4365-4193-bb0f-b73916156ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0824f7f1-b593-4d97-bc9e-9725df3999ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1eddd57-ee4b-4a46-b547-a840f37002c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba9b5f9-f81a-48e0-a5ba-e6abe3bbf433",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3f4836-19e9-48b4-bf60-13eef9d18c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c45b25e-8a58-45f6-823b-2a9d574605ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924df318-de30-4a69-a55d-42195554b318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba04109e-00f0-4188-b19a-3390593e0185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7e7aa8-eff0-4141-873b-fe5452923e99",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4e55cc-0782-4126-8432-bccd9e194685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0c5d44-f232-4c91-b969-2cd002bf188e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31aafe6f-540b-4ffe-99fe-cfb8bcabae50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c0de63d-f9e8-4b73-a783-f525e826f3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956d2387-12ce-4dc6-a56b-5f240a407416",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e227e1-40de-4621-b0cf-506061d33884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a0422d-4eb5-4f85-9f33-5fcf4a0a3859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c572b33a-9aed-43d7-8763-763b99757c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e52c97e-d3ae-476c-8d5c-30ec46b2803f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d981cb19-9df4-4594-a425-38ea4b5a8139",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04f063a-be11-484c-a9d1-16d2d462f5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3125cd08-a68b-492f-893e-617116c7b002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e6a5ee-5daa-4d36-9909-dca8a4c0ccb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08b53786-cb54-465c-b6e3-011b3581f6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618889a7-2daf-4bb8-b242-9dc23bbd9d70",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d5c5ad-20f2-4baf-9f32-f2737e04d7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db9f6b22-76c4-44b8-bf76-62b046b96eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03746eec-272d-4df4-a70a-4315809179ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1362817b-fb46-47e6-8669-ec45791c470a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb85faf-5603-412a-a5fc-6fab7a7d4732",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45185cb-ef3f-4d47-8a4b-d206fb96f5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36d7bba9-3af5-4c58-800a-647ba826a181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e09cdee-afc5-4aa5-9580-ef48ff919c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27a0b2a4-562d-405e-901c-49599b75532d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "762772f7-f832-444b-b0a8-80bebd8b5747",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de7d197f-c566-4f55-9580-6aa7a5b749ce",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6210f631-e792-4f8b-946e-31a408a571d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa85891-7941-479f-82c5-6c838ad47a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9723a3b8-6276-4a77-bfcd-e3e7808a625c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "713fdf1a-ea0d-47b9-93c3-9bfe2bce3c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9f4f35-eb44-42b7-a3b9-4bcc229ab1ec",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f61122-8991-4cd0-a11f-9dccab59c525",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "649c14f5-9f75-4876-84da-a35ed88f97f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7862bc7-ade0-4cb8-bdb5-5bdcde9ed07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6065dfd-e9bd-4296-bd92-5e3226c1410d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cdb038dd-9c11-4e6e-9f48-c3b1b31a96e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79114c52-c7d2-4d22-9b96-a2d7f4b7dd11"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "61844c5f-fa6c-44ea-b09d-23bfcb8f6cf6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e21250a6-ea55-413c-a913-b43541eb8ba5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9cb5ab51-a305-49d9-98be-81d599b629d0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "61a3025a-e70c-4403-acf0-bbd435d66727"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a290256b-4d3a-4034-bdc4-46bcdcc47500",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b26a87f8-9b2c-4737-9120-24253905d3c5"
            }
          }
        ]
      },
      {
        "id": "23b7a162-3b26-4768-85cd-1d18a4910aff",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c1083728-9d7a-4a1d-b524-2c25415fff52",
            "name": "Negative Testing",
            "item": [
              {
                "id": "175ac349-0c20-4ce0-b11e-2fac543b9f26",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cc48e365-4220-4a25-85c1-dfa9379f018e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c0ac6e-b5fe-4b4f-9abb-a6f51a6f858d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c965ead6-6c0c-4e12-98a4-bf748bda7494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80aaef7-170d-4510-a7fd-0c581a88f300",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f83b6d-8ffa-4521-8e9f-76926628e801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ae36a5-6b04-4336-aa76-647e1d10f3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafc3af6-df0a-4f4f-8234-eed32b23c193",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f41c7e-c95e-4666-b1da-3cbf913eb3b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e61e2993-ced2-415f-94b4-af52dab44528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80df209f-6838-4782-b4a5-c55831294022",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "923d0adc-3061-48af-8672-1e4251453c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfe4a84-0dbb-42f4-bc14-10e9e43a1039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6382ec59-1c38-46d5-adb5-3b78d697c976",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c40487-7ac9-4b50-9adc-03f40bf6c7a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03aab59a-c49f-4b94-9548-6b75a9d240c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc56d1a-4eae-4184-b546-4cc49b4a70aa",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef57056b-45cb-4837-9d8e-73e004eb1f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb0e599-446d-4636-884a-119b4a6341ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8720a4-4ab9-43b1-852a-b0460623bc08",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07b50ae-6050-4492-b095-831e8865284f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b67e5a-03bd-438b-b1e9-38ba4d0923ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49c4fa8-d37d-4489-b0b8-a99d321e9d19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b36d8c30-86cd-4385-8d78-89eef0422c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b519d78-7957-40f6-aae7-663c4e9a8521",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0032932b-9454-4cb1-8fb1-cb9fd519ff0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0610eb14-d81b-4a23-8eea-724c7c7c09ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71af861c-91c2-4a43-8158-a845b34c56de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042137a6-4c39-4526-bd18-6c90bcc7a0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb0249e-3b96-4da9-a7e9-de2a34a8e524",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "752627e5-5142-4d1e-bd00-9a7a4a9e8faf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb9debc0-0be5-4a85-9fb2-722be7b2f09b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19a1732-c6fc-40af-b1d8-a8f6ce582135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4db4a37-fa66-4a98-b9b9-6585bf6ba1c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da689425-489c-42b1-9848-a0c47147164a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa18baf-4797-486a-861e-89e153cb3175",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "361d9ff7-c4dc-42ce-9a5f-39b4387679df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7380de0-f391-4cae-bc6a-a07f18ac09f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884f1715-7929-41c2-9d52-abc59be7487c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd0f5569-0e43-4a84-85c9-924a62e71fac",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a750f8-3b05-45a9-af32-3d930665a6e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8d4c01-dc89-4f84-b7d6-e7f147e22a08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb21eb5-fb5b-441b-b547-94e41a6601df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee6b01b-043e-4e6b-8ea4-1594b167e162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568807e2-36e8-4964-9a90-58e5acdd5b9c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82777c5-effa-4e04-8e20-04cf5b2aff4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f6f2804-add7-4a6c-a1e9-0aa703ee8db1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc428b6-805b-4ce9-a75a-05723a2c26f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f97ee50a-072e-4aa1-b832-2cad6ae45e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a292c27-70c9-49e1-ab40-ec5046243cca",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9eb7ebe-7910-4f3a-8ac0-af4c7e52e84b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52b76b02-a03e-4c2c-91cc-60d43d7c0113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72d6ce2-9eaf-409c-847e-5b76d848a522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe576a5c-ccae-40d8-930e-698475727e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769c2af3-5f3e-4990-a9ba-619c650741e0",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be90a46-09d5-4874-8407-86a605eafa0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9cce835-29c4-4084-b87b-44174a0c346e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b47bfed-a07c-4c66-8049-6e1af44e70b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a10faba4-36a3-4c21-a892-231f6a772943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b647091b-3751-498d-9264-7383dac274cb",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6cdad3-6d74-4208-b815-70643003f19e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0734f344-3e17-4ca3-b002-6b0f73992e95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3160d8ad-1707-4440-bf84-b4e0db7d44ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35d7e7af-a198-4958-b6a3-c231860e1971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aef85f8-6235-4a9d-a409-23ee10bd4201",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4a882c-fac7-4e03-946a-c924a65138f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d772e588-e3f5-46eb-8e38-826d7c702cb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db15969f-7e69-467f-a451-d1003f7ecb4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb6ad272-1d37-423d-8547-1ee86323ed4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00231269-e4d3-4d9e-a36b-b390f45ece11",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c50274-2361-48a9-85fe-ae288558583d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c029e9f6-dc92-4c63-b2c2-8405ce399cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fddaa50-1132-439e-8040-4dac3cc19a5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9983ad7-04e5-4b44-bb82-4881380c759f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df8c380-bf1b-4473-bd82-b4213a7a8949",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd832a89-9d82-479e-aa7b-eee8afdb1fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb2e9521-d34d-4c28-901a-66526634104a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6065c087-313e-4156-bf89-c9eb98476207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b10d68-f012-4dd2-8e78-aff7b9c29a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2b62dd-e220-420f-9070-db3596d94d8b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555c7eec-9047-429a-996a-a3079097c827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "812caf38-b51f-4f25-a01d-06a255482f16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2438659-5ad1-4367-9cb7-1cc944d51d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27cfc75d-7f37-4dc8-9c19-b1aaa955db29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb02d76-48b8-41b9-bbbd-d84987255be5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004e6100-969b-4ac7-a6de-cda72f11c43c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27617af7-6a81-47cf-a489-555abadcaf54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a8b86f-727a-4920-b77c-f054dc6fa662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379d41ed-f19d-4fc1-8376-24b6c3913a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c08fbf-9748-40c1-a60e-8417e8cc4803",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3520018c-75bb-497b-84b1-573951f5e932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e255dbe7-4dc2-4d01-86d8-bbc9062a345f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "029d2858-5538-4e56-b9dd-c6c94e6c865b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d92753f-8f00-44fd-b3a9-4f792cace541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3a6e04-c621-4f6a-bcf0-b8f4e9ca10cb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c82d2d2-8774-4b5a-b4d7-7b4bc51d2f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19167e3-5457-4448-90cc-e70fc1cf1017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fb8c7b-4f70-4b46-af33-ddd7b82775c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62bc0407-794e-4aaf-b302-faaf5a43f6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a573467b-727a-4d0d-9064-7386bf6be2d6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f0687d-0d2e-4f68-8e0b-0d1082802190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab656d62-3751-42d6-b688-7e1785a8d827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e22329-711a-4543-a46b-05ad16b62d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a323a29-4c5e-4fa8-bb6d-7a60fab00177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816d2a90-8e82-4af8-8704-fd0c3e0186d4",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477a060b-6698-46c2-af30-874afedb6b26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59bcffb0-5f76-4b51-9280-8560c940268c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37afe2be-12b3-417b-b490-6ecb04e2efbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2631dd76-7edc-4355-96d9-1edee14b1e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e2e76f-a2ee-4481-811b-457070c9d9b2",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc9059c-72bb-46eb-bac1-463a6f205347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72f63d61-1cb4-4133-94d9-5f72d8bec943"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e08a6d-32eb-491a-a772-8f2fd6786461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2358bc3-6516-4f12-8137-b8867e1e93ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f147ff8-944c-49da-b99e-ca76abda3a1e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf557b9-a826-496d-9677-006011df739d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f42a87c5-5446-4200-b47e-2865a8c312a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06636e6a-8d5d-4b8b-86f5-61206f81b2f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8374c740-850f-49d5-9b45-ef006e375f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc95e0cb-b47a-4791-a6a8-56ecce326c6c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241977bb-0543-479d-9365-22be4c03bfae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b48cf407-4e88-4869-a0af-f1c6a2f7e262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d26777-3307-44e5-8410-56645d434d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b9b664a-d217-46e1-9fad-a32498403f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b62df8d-a6ce-4e3f-be2a-35a0deb1c900",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904f520d-7131-4fd6-8aea-d355bb37b754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c63d65a7-f381-4167-a3a1-12e05cedb638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b380318e-db08-42ae-9a63-8f8bd0941523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62a460d-83a6-43e7-9971-88e2ada0b2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6423cf14-d9c5-49e5-872e-9ac22222cbb4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88732feb-bc8e-478a-9230-2e70391c1bb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c1d5e04-d8bf-4d95-b489-d22a27c1259a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e02ce2-44e9-42ce-8bdc-0baba452af90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c78688-cccb-4a94-b84d-40cfbe03578e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d70f219-30ef-4a89-a41c-183422d885f3",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf50e2f-1477-441c-a134-6e5d8a611f8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b77d0f5f-47c0-4b1d-855e-049ade728851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f28f74-d6b2-44a1-8219-9099a9ff0b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f5d4b6-f972-4af1-9877-2e3cf8d05f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3f4e81-63ba-4d72-b5a0-8d105ff05d86",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ace886-2e2a-4035-9314-5a45660fc350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "767b2766-4f93-4956-9d1b-878f1ebea180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b704474-e644-4519-8541-37a6332ae79d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a78f80-ded2-4be0-821a-c21e73bc184c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ad0dfe-2e77-4d43-9afe-1666bf52cc2d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dcea2c9-655f-40c1-9477-445505a43911",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47cf4f91-1ba5-4e68-8d13-d71014a2c5d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "081000e7-be94-41db-889d-22bd0c12922e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "518f9e66-e274-4e9b-a054-4998802d2644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c355f092-0b9a-45dc-968e-7b4c98105e51",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457fdbb5-34ab-4e75-8112-1ff5f0a28431",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53fbcf28-0d9d-4457-b65a-fdd65ab281bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1baef3a2-4ff4-4ea7-ba0d-3e1831df398c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe56878-3b1c-42bd-9998-d1cef7db855e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dea5d45-b0ff-4b18-9525-7685c6aeacc8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd762328-6d96-494b-bef8-3aa9f4f0c18f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fe03f9b-63ad-4612-9178-6b17005cd146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d01d352-3485-400f-8aa9-9856cef7b7b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd20160-ba84-41e3-8594-646062707101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b8e48c-e6e3-4983-99c1-814baaa11b9b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c999e37-4633-4735-8fd1-42846fb4e27f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2001efe-bdee-4fc0-9971-93ceb06fb65f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e64fc14-69d3-4ca1-bfbb-cf31369dff67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dff78f4-26a9-43c6-a6e8-5714fbf81f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee066557-5d77-4214-bf9c-0474e50d4793",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4da433-77a4-423f-bd05-9f5ab2bc85c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "983dcd08-92f5-40db-88c7-a37b8615efce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c56bb8-48c0-4b3a-8278-848c1d28d437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50289c2d-4820-4dc3-9b18-557ed73ef16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0810dd88-acfa-45f7-b0c6-5e5d68ecab20",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0c2650-b695-491f-b5f6-7c4767238c8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e503b9-d1e7-4909-8035-7a26fd42ae4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "243e43ff-1c91-40c4-a9b2-7e859e31603b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c780214e-3bf8-45a6-9123-24a0d3079f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e64dde2-fba4-469a-a0ba-700800c75286",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa66555e-3edb-4539-ae0f-4495f733dec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "645c29d7-2093-47be-8169-5c94b7a8cbd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9f0c9e-a55c-4c83-9703-3615bacaf63d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a507c95b-da85-49a0-841b-11ed0f332766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e1fcf6-f6b3-44c3-95de-8f1fa81ad54f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44dd8e99-a0a5-4134-a882-114727178820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c5e5ae-057e-4006-bd47-b137c7ebce58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c17f978-766e-46ca-9870-2fec1ec42526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b54b71-e16d-47af-8c69-a819c8103204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570ddafb-e267-41ee-a4cc-e79f86b831f7",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eca5ede-f163-499b-b141-733f0e8bec07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f48f6181-5112-4102-a2d3-c9bba1a8aa2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92395c80-a323-4439-ad24-6a401c2605af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83802471-1d83-4ea6-83a1-966187fcaf7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "effc026d-6987-4e9f-b087-c32083d1757d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a8e210-33f4-4c10-8d63-8afed78ef6ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5a891c-c2b7-46d6-bc1b-90a29d53bbea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad37d5b6-305b-417f-a318-6292598c2ca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af5008c-f156-4783-a58c-5b85feafae7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bedf2034-f26a-4e32-9062-04ba1b754eb9",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903aea43-cf0d-4b96-80b9-7d6d350075f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b033fb-675a-4bd8-aed1-32d33ac754c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97ab45f-395a-4cd6-8286-bf977e678548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b58070ef-eb63-482c-90bd-aacd873762f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b19c40d-486b-4c11-a24f-2340cadca646",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2712743f-a33d-4801-9103-3ea37856e423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f8a3399-183b-4ee4-be09-78df0748dc62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa62ad96-a6f7-401b-b6b9-756e25f6c68a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a754f718-261e-474c-95eb-97aa0e40baa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6dd94a-61d0-4850-b5f9-cd6d6ea54f48",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fcbff0e-94ba-414e-b64b-526e3d306993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31bfa669-74c3-43ce-8769-7b581852be1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79bec991-4d37-4021-abfa-f78841821422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1022996b-acdb-4f4f-a92b-a4f7c80f2924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac716305-9486-4367-90f3-c598a312ddae",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee2d7e6-07ef-4edd-b45c-0f7b87b09a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a5f8e0a-b04f-441c-a1cd-59cbcf4484bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13c9d8f-bbb2-44ca-bb26-0d4686ed6e62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f462b7a0-5144-44b1-9a04-ca276fecf376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85717351-b060-4284-a679-bf37145b6c4e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64c8c8a-f8f3-4033-8a66-f3645bbbe74e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae79c75-b117-48aa-901e-ec91ac2df4d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a040bf-8f00-491d-8809-916111080113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d42aed-55ab-45f8-8370-1726636acd02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a67928d-e00b-4a39-9c76-76c0270e87fb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b9d3cde-25ec-41c9-ad85-c1f0f8a4b1bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36df625e-9b00-4627-a227-9b94f449ac6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "815238a7-6fb6-4e26-86ab-8ad37e3eacea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a0aca91-0cc0-42bb-ad23-f7142983625a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f0643a-9592-4265-b219-7176f8980cd2",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9faa21c5-ae10-4397-b4ae-cd0fcaa3316a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "811d104b-d3df-46c4-8cab-1dc2e3358fae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db4b6fc-eb38-4f86-b753-7e3f63a38b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27938e09-7157-4e8c-a73f-c3bca5f45534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca68eb0-45b8-4940-8214-f36cafffc69f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138f8220-ce90-4228-9df1-8b2feeb0805d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc49fd88-b7b2-4029-b52c-31ba9f2320e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d753e4c-d641-42d5-a6b5-ad17a86014f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54dc5c9a-b8c5-4575-bb2d-a0c2c331fdc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bfbfb65-85ef-45bd-9a1f-3dc66368c96a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76653f27-7d63-4c5f-aa82-538cddca96f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12d078a-b1a5-4f42-8299-df079ce76ec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef50e89-9794-47d6-99b3-1bad44a18f40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc8b7b80-da3f-4300-900d-21a770b58ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9fa7720-3969-48c9-978b-6d92d4172029",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa734782-6f7c-45af-baf5-3f1e9e4070b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7f5042-087f-4ff8-8a8d-5e09b493b165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdfaa70-b1f0-4fc6-9b57-f7cef9afbafb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1801b8b3-3cdb-4d16-b296-a96d1db4a303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c0c11f-53ee-4ebe-95c5-d370980077bb",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cff95b1-7f87-4e65-ad46-b0a53c282167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "002b70c8-ca03-4f4b-bcdf-727b390ba9c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1dc4e4-b264-4186-a291-ccd4759f097f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eafd2532-d1c8-4fb8-b4c2-d2d0ef19fa12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b36ac0d-4978-4b0c-9e64-7aab4eacaa82",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40500d1-9d16-49c2-a6d6-9f588a3b6c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb3bd6e8-56b1-4d5d-ba23-594cc3655395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edcb5cc7-c48a-42a6-b2fb-d5fb721aa215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a74f12-d58c-485f-883f-162bd4a18e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62915f93-a936-492e-9cfc-09695336dbe4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13cd0051-c6d6-449b-bc48-87ef293e5883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbdf24a1-3578-47c4-825d-aafad4eb5e10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea5a520-eca2-4ba5-a880-2d8ce1917545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaeeb782-266c-446f-a9b2-a72d866fab71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a035ee07-e325-4f44-9f48-14e7baaac6d1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651894ed-7480-46c0-9f93-5e4a873b54bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9428422-9555-4381-a7e2-4b05056e3c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0135db8-e307-4a03-9978-971b1455e6cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4f579bc-70f9-4ed4-9add-873fa81f4a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ee5287-2847-43d2-ad7e-c573e27d98b5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024e226b-99d2-405e-9eb7-8be6d572be0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6812e443-7a34-4ee0-8ec4-f12061a0e0ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1abd65-98ad-4e20-8518-ee03926203ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e60b60c5-7357-497b-88c9-ce503776d0c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da11f71-3a74-4441-804f-8c1eebcf437e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdedaae6-dd15-4297-aa1c-dd04bbb1e079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a6b484-de29-462d-ba56-5d755e3b74a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ce5f5b-9e1a-4967-a8d7-3b7b1f4c1478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3af0c1f-00ac-47ee-ae88-8bc1784a477f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a683948-243d-44b0-a49a-4ae3633ceadf",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379a6c52-160e-4d32-8d84-827ae0d0def6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d93b28b4-ce33-4cff-b2c6-ef8b791bef84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89625936-6ccc-43e9-8522-506cede1c266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07688068-b1d9-45ea-a9dd-902125830bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8dbc816-d39b-44f2-9703-766b3be4e139",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e8f046-c285-41c9-9684-6b780835eb41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f6fe7f-b07a-4522-ba9e-3539e2ceff7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe88bc8-443e-48d8-a9ef-cb203b604e90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d70db0-34d2-4c65-acc6-39529441e2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c704b8b-64a9-40ba-9142-d1d32799c8c2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55297224-3b9e-41d6-a902-f93daae69eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877fc524-cf6d-4d1d-b172-2ba2b4d1d40c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83325d0-c39b-4ebc-ba37-fc8fc5a4387a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d9d829-fc1e-42dd-b0e7-a8f05087171b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4d4c38-d5e3-4094-afcd-323e71f85091",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9c98fa-d022-46c0-98fc-486a7847c4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18096f10-a55e-4c3d-97c5-be39747102f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05189722-5e1b-4a64-ad25-3173ffb78191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f461c7ba-944d-4480-a85c-e44b9ce738d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011dc5fd-2459-47ac-8926-6655bd318ee5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94733b69-2f5b-4740-92d7-a3e15364a0b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36eba4c6-ffb6-4bdf-b727-6f1125e1cad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "001856df-a3ac-4ce3-9c6b-8483840ab3e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88766edd-a8a5-4a6f-9d2e-227092a0b907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4edd5ac0-7422-4e78-bb9f-5e9657dd0d59",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42801a5b-e889-469b-98ff-be9a5d8cb68c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42bcc702-ca39-4a11-9134-0dd1d55adb4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e59582d-bd05-4b04-b9c2-caad79bc335f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f3b75f-d89b-494f-9629-40c970f284a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb5128f-e5b3-4cd1-abe0-436d53cc91fb",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dccc1b81-64a2-4b1e-9612-7be6571334c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20c31330-6ce4-4cc4-bd4f-cbbdc0b36363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f588ba3-890e-4757-ab0d-be6e1bf1f6fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c085bf5-6ef2-4dcc-ad3a-d73414448c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e806ba4-032e-4198-8ea7-0765e2ac9a8b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502a0916-802f-48d5-8313-b62de11dd16a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83862104-8e0f-45b7-9f79-8a7a1f1acf50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ef0bd8-45ce-449c-b8ab-f0a178652636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262fbdd0-8390-4401-acf4-d05fb44ee07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0030981f-0892-4f44-82a3-3e376d735fa0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f3fb1c-57c4-4690-b024-ce003c7c1233",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89f67b16-12ec-4b28-bb4c-0153d2f01f20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29bb4afe-08ec-4bba-8a62-81758f897e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cc07389-9a28-4453-b655-889408cf98a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca073610-d610-4f29-9a5a-8c148c38977d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7a1436-fa0f-4c7b-a60e-e4a3e4d6be53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c11f8915-3c79-41b1-9e16-133512c4b4af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "175713fe-c0a6-418a-9c85-d51952f8b5d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "657dfd0c-f3d2-4380-821e-491817810277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2e1813-c26a-4412-895b-7c43c0c73a17",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134fa703-bfb9-498e-9543-6e823d69850a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f18c2850-868b-42e3-aa7b-4e64eeb5ea45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbab698c-7817-4ed9-ba6e-79b0b00f7c07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d99e54-caaf-4291-8408-6ae0941391ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1529db9-6979-4738-898c-5fe617643159",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b1facc-3a10-4e47-9dee-ad91ba9a3c04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21355970-be61-4d3c-9dc4-2ee362f012ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaec702f-05b2-4532-a8d6-81ce01da6719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "637eaac5-1ec9-4be3-a6b7-5367b98bbfb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c2e33c-fab4-4681-b52b-492c668aaaf7",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51b388f-c53c-41d3-b426-c133e5d7d3cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "218089d1-3ac8-4c19-8f9d-92d09e59d8ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e5454f-9360-4871-bf96-2a77214d4f4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b09e40-f9f4-4763-981e-14201e84dd68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ecec23-aadf-40ba-b19b-c0fc8af3d910",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2231f26-e953-4767-8db1-ed76c81cb79d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef4c6780-3e4d-4d33-8212-ccba240de26d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3bfa49-ed07-4259-820d-ca58ed339727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa6ad95-ab53-4b8a-ad1d-e3d00fad4fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50be495-08ec-4ecc-9e13-f5f6d3924cdf",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84cd4ad-fa0f-454f-a229-cbb07a1ce926",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "737023df-a4d7-433c-8698-c3fbb0dced99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "064790bb-4372-4ea0-a1a6-66a582641e9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23bdf051-2c5c-4298-b3e7-7b11950e7cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b25562-6646-44d1-9c96-36b25315495a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebce73b-2295-428b-9d06-47b18ae37c0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6048d0c0-ac14-4a2e-bf9b-615bce46c6e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec307adb-b126-4e6d-8c52-46b7c21405f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f2b7290-6673-49fc-ba38-31aba4a8061a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf211728-1f35-4d68-b03a-488dde96d21d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff04324b-2ca1-4d42-8a0d-c092184daf84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e0275f8-26eb-41a8-9124-1da579d59c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7c24f0-94ac-4358-a158-dffac2847248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7914ca38-9e0d-478a-9ccb-72c0d250deae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22ade24-4954-4cf0-ba16-4942aa237f7e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d895e9-01b6-40b8-89b9-2da233bb1a9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2dcb27c-47c8-44b3-a228-cfa5de8602eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0cd68f0-f32d-4c1c-9095-a77d3c8b5be6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98718d56-9d4f-44d2-9986-c64212abd533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc17a7cc-0d87-423c-8ea6-3d0fa5a0e834",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3095abc3-e37c-454c-a4c6-4c63f9d4afbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95595617-6bcc-4425-8c86-56ba96b5c626"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "907f23b7-9fd3-49e6-9c2f-4da8ea393d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b28ea24-0d09-49cd-babb-4b917727829d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45825fc-628f-4306-95f4-4a264cfb11e6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd8322c-93b9-483b-ab76-4225b965a3b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f98e3c18-fedb-46f0-bfe0-168c488f35e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3120ed1-e3d6-417e-8fc3-e027bca7ff29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ee1bee-f7cf-459a-98ab-14f039bdaf4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea935d2-46c2-4039-b6f6-20f1e684825d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a78f12c-9ae5-4e41-9d8e-e790a7b01d22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68316ebb-6ee8-467c-96b1-e5e3debaf2cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5dd45b-e223-4f0e-9819-78cc778caa07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed00291-75fa-4927-b120-69f0f9620c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582ad3e9-f651-418d-ae5b-6a822410385a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0cb65b-39ef-49a0-9dc3-04a464d46412",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dbcd763-cf29-4dfc-9404-dc797ba50a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2775448a-9b05-4016-b6e3-f4793c2c705e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af8acf82-426d-406a-bbfb-5e97061e8e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d23531-9348-4e2e-a94e-354d872874ed",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93feae0-73b5-43a4-a5cf-cf66e6d71429",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fb3edbb-2500-4431-a7d3-f5f1615c993a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "045a3cbb-0ad0-4b62-b296-88684f5b00ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f83178-aed3-490e-affc-2d217c1716a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891408e8-6f75-47db-9511-15ec96c8bab3",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3514c27-39be-4095-aa9d-6df43bf9a14a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f969aa1b-21fe-4636-af1c-c6059b6a9fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "002ae093-632b-4e92-b2da-7712e7fb6479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c457bbd0-cd20-4f15-b287-26aba6a7bdb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d8c40d-363e-44f5-8cb3-7b6e85ad55d7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce49906-1948-4b5c-8590-3898ef317542",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d94bfdc2-5c71-485f-a9ec-1c7266888dcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9692a680-6b9d-4cfb-a18d-7a0494319191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60091ccb-ace8-4af7-9e43-bb752e706cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88fe8bcd-1a5e-47b4-ab63-51f16670be8e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba091a1e-c10d-4548-b7cc-dd7bf8c2e59c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "275194dd-253f-4adc-a378-9ecb019f7f38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2dabc8-add5-420c-b45b-b33f53bc982a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795768d8-48a4-4247-a5fd-c1317583a802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f58296e4-c4ac-40ed-b435-c698d54058ad",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0988f4c-1b62-4221-9df5-5e48a48ffb47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c462acb3-a5d6-401f-97a0-e8cd8319e0f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac334c7-128f-4a47-bdf1-94b217a3263b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87220804-76f2-4890-b45e-cef0e3d37254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ddbc8e5-8eb3-4cb1-b460-c5b2207e6431",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82bc1cf0-8643-48f6-a1d8-a3bcdffe2340",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c52f7380-9599-4a82-b9b4-1d24fecae4d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06265fb4-f659-4375-8e81-5657668eba97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c617a6-6b4b-421f-8bd7-ad0f99611960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8492b562-4c83-4377-b73a-ac6488befeec",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c15b3a-dd6e-4611-9e84-9fe5939f4f6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8afa5f01-d613-4d1f-87fa-eb0265ebf244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47dee07-d2c0-4671-a9b1-2a03b3b00dde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b94e9cf-2608-41a4-9ebe-3cd1a21fc78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff1574e9-8ef1-4f05-86f8-808938f1af26",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085f6495-7794-4c93-a1bf-2e7dfb90bc35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13506408-0bdb-4259-b2fe-02d8d003642e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eec1558-7fe2-48d2-9000-a9524ee2881a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f665c26f-95f9-4180-9c31-fa076863bfba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f6f18d-6f05-4f16-a44e-07e4d919875f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13792b8-4441-4b9b-84c7-ce8471b34754",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed3e11c5-54fe-42f5-b9e4-27b32712f70f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "217ee42d-8560-41f1-81a1-f1fb2f4d8391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01349ed8-b5a2-41f8-b605-d796cb54fded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa81711-42a3-42fd-84c5-efd200a6fd1e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90ee351-ca24-4711-bcad-c17cb0fc18ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43272a91-a18d-46dd-a211-2def500863b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2b2cbf-1a45-4ace-852a-2d50f4a7e522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00126703-4776-4541-9162-ab6444784d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65e8651-e7d9-43a5-81f4-127e1e61ae06",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810ac9d9-0442-4c2c-b17a-2d9d990c68ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbc2b6f4-ede8-4ce5-81fa-de5e5d31512f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe56ce8-eb09-4ea8-a4cf-a96f88418f08",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ea3624a-988d-4e7e-bf9f-ef1f7e38fe7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed36496-728c-4892-869b-36f109469706",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07007926-1621-4370-bd16-58372d1dbbe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09e71086-c06e-4f44-b3b3-f842e99d7884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a357b39-64df-438f-b553-cb15e3570737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f14ad2-e593-4a97-8a49-6f79ede744b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f115305-1962-4ae0-a042-d63eb69aa97e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731a14ad-cc11-47bb-a58c-3789eef3ca89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "617e5555-4a66-4c6c-8959-79cd1bdc3321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1e72c8-de27-4c78-9e8a-da4a7da795ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce77af7-8125-474c-aaa5-c328246d308f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7eed4fd-468e-4699-ab11-0b12736f3582",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ae8883-2af6-403a-a561-a97dba79ba29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d2e12eb-1e60-44a4-94c6-f6c1f974978a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af78b0d4-f1a0-4fcd-b7dc-966d4031723c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8c78ff6-28c2-44fa-86a9-7aa98faa018d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61949e5f-3188-4ae5-bfc9-246880d72f7f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7b28bb-adb1-4f3e-a140-272f7145ce4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec9e29d2-4850-49f1-8c71-dd5e1fabf2f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87a8495-ad66-480f-af24-b6b22666c01f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e961d2-9e26-45a7-bc9d-14a595b64a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9bbc98-73e6-427a-b895-de808e0f7f23",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5951b637-4608-4610-9747-a6a4bafb7fe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78d25e50-d1c5-4c96-ba64-179153e46c90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8441354d-c4b4-4fcf-aa0e-292fccebfb83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8ac5e46-6ff6-41d0-983c-2cd91994cac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc4caf9-1955-41c8-a298-55d2a894052b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8465dff8-ecfe-4917-ad0f-01e2c2d5c7a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fb48ffc-0756-43c4-9834-1a1259819a12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "542f77f3-9614-40be-815c-ccba48180eaf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "559497be-d4a6-40cb-82c9-44726be4e471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbce508-2d82-47c1-8f98-987d6dd45537",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3542da-72e8-4030-a0ad-b29ff620d831",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5449ed0-986c-47ba-9163-02aa1967a152"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3498bcf-ee77-447b-9e29-df7cd92b74ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1098786-7673-4244-a798-3e120f27f942"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39b2bed8-3cae-44e5-b57f-f016ba50cce1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e05bebc2-6aa0-4aaa-b320-9ab625ad61c0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "03f5c196-2505-4461-9e61-6da2a0e36a3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41a66fef-037d-40d4-bda4-cbba3551c0fc"
                    }
                  }
                ]
              },
              {
                "id": "00c67103-5808-4afd-9fdf-872fedf37cd6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3480cb8a-1bbc-416e-9ba8-d91bf358965b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e171ac6-5b4f-4828-a509-b9e5da78fb18",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4774ebf2-fed6-47b9-b1d6-ddee351bdd5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d92b04-b270-482e-87ef-ee74e7e215dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "049ef3d6-d226-45f7-b9cb-8b1692b7ee45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2003f07d-6cb4-4d28-9c6f-bcb18e15872d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc5645a-9112-429b-b452-5b285a282aae",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "075123fa-d033-47e8-a28d-385744bf8ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eefc561-f559-439d-887e-ed9d783547ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46670e47-0512-47e6-8a87-e4a68a6d8cd9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1de0e454-feb8-4f40-b268-7fa852002a46",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a77262e-6eab-43d8-9532-b95f026afefc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd3ff0c6-3b11-4aa0-9c84-60adad9aa691",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "536ec43d-0184-484e-8e40-b158d4a8a0df"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "effbf87a-c2c4-4f18-9aa5-9145379cbedc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3e75cca5-15c0-4519-a60a-dcf5b44248ba",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b59abeea-b0e5-4389-866d-cd62c1e66d77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "29fcd922-2fba-43d2-bada-a5cbb5481c8f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb4662f7-5e99-4444-97bf-1fd283cf2457",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "666137c5-7f03-412e-97da-038a6a88fb40"
                    }
                  }
                ]
              },
              {
                "id": "71183ae0-2e65-4bb0-9f9f-4f3444e684cc",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a14779e-72b8-4bf2-9929-ff0845f3f02d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "85c237ba-185e-4907-991f-5055362475db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52a24916-f215-4c21-ae29-c52536dd5523",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e794bacb-c171-4cbb-971c-5709416fd79e"
                    }
                  }
                ]
              },
              {
                "id": "8f3b8d1c-ae37-4c01-ac35-06587cbba5ec",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "170a80ab-5add-43a0-a72d-e865bc032b63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a348c8df-41b2-4a97-ab05-9b7f08dff06d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81e1db7b-6c41-4cad-9b5e-97754e402fd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5c6f053-f459-44cc-a04e-d39fe06eca41"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4851b402-7a09-4c07-a9a5-a6da5cd688b0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "aec85d96-bcf2-4cae-9396-6f68aa54ae75"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "031e740c-0b54-4b7d-9a6e-3fa77e877e1c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01977864-c4cd-4812-9513-4235f2488356"
            }
          }
        ]
      },
      {
        "id": "5a5da62e-f255-4ef6-ae30-eec43a239d01",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7369d2f6-b506-40ee-89e0-a26f11fb2c1e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f9f31000-94d6-48ba-ba03-33386e5cfbcd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "98c3ba9a-b637-4b01-98d8-be35d8e5cccd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fdc2302-b475-4dd3-9b94-c7db13cec1f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "729eac8c-456c-41b7-bdfa-c653312f356e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb35cda-6cad-4aef-bdb4-5cd404d18243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e91ba1ae-794e-485a-84f8-a323b9a1ca8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8f3323-e72c-4cef-9b5e-43878e0306b9",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8b93ca-e235-4610-a9cf-18f975a12fc6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cc9b61aa-aba0-49f1-b3a4-da3d3a252f5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f8861c-b5f4-4a53-a963-fd405b1b089d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17a3f27b-e8d4-4642-b90f-9bdfe981afdf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bf45c04-c00e-4935-9d5b-f0103f02e7ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75b6ad2c-1562-4caf-8bc5-b008f42dfd15"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c55b84c-67c0-41f3-9586-305a42005314",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f4cb9a9-e857-4a12-ba1c-fb96c54c47d0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da441c14-5e14-45ca-88b1-8a4956730454",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3c1f0233-8703-472b-bf8a-439eab9c1dbd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53340b97-bc06-4f4e-ac6f-f3a7af45a3cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d99e3427-867f-4bc0-8b1b-ff44c3735861"
            }
          }
        ]
      },
      {
        "id": "50d302a0-f508-4b42-a0f4-81f5e5c3d1c2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "eb15d9d7-fe5f-423b-9899-f64faa8c9146",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c231f49e-d3b5-48d3-9231-63aa7567a912",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "343a5406-4995-4a8c-973e-ea38176619b9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4196655-5781-4f85-bbb4-6af091ede999",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6bd4c269-4d10-41ef-a5ca-51a56b86f794"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d984b88-465a-4754-ad3b-15f054f612ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba2d7af6-93f0-445b-a61f-3da5e500a307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0fb2a0-5978-40ae-8278-3f2d0bf22186",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a612ca9-04df-4c7e-b2fe-58310a235718",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5fc9d45d-d6ad-49bb-a022-5fdbe72b95f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fbf82c6-0038-4302-a85d-a794c14e74a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8281b546-9ec4-4f78-9155-ad0d8c2a9e47"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7021383c-3e3f-4546-b56c-065841c5e2d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57f35d1d-ff85-4bc4-b720-9e6568005293"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a661f898-942c-415c-9ad5-590f41bb9a44",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db675383-360d-4b8b-86ca-5c9fc149b7c1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8707449e-d12a-4bdb-808f-498db6a8403c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "76631b54-0513-487a-b58f-e1a343a34258"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10a425fc-dc20-4e2f-9019-42514bc9ca7c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3404a3be-b466-400c-b499-9a639f11989f"
            }
          }
        ]
      },
      {
        "id": "0bd52509-d806-4d67-8ae6-1094341080a7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "461ee688-962c-47d7-932e-d7ea9c3b35a2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d3f1aa5a-c67d-4808-8e35-04be794b17c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c9af2a4-7aa9-4920-bbbe-0e4f35bc1136",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a663a3b3-3405-4103-a73b-a97d4c9775ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c5b0df36-361b-4067-8d05-b06f36c87ff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc682543-5457-40f6-b433-776b5307daa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4299daf-6214-478f-bd25-c219be0f1356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2e1556-d128-44ea-ab79-c0b46c347baf",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7068f7-cabf-43c6-ba29-3dab990913b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3b5dfcff-10fe-426c-8437-16609879dcbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b506b8ec-8673-4775-b5ba-9744d7d0a5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9c4186e-a3d0-4f17-b8be-ee4817b89aeb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "225d0a0b-b76f-4771-b2db-afc9cd8cc99e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7700b98-dff8-4876-b7b1-3a4e70e426cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3224856a-c28f-4e14-9e24-2b3434db3edf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3037d47-25d9-4370-a194-c9ce4137366b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1ebc945-3432-4e99-a91c-f0df9162dd5b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "18d85f3a-c0bf-4c98-a8de-7ae74b16bbe1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62de2410-c885-48df-b4f7-e84527255699",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f823a2e-b114-4c52-8f3f-819aa19829f0"
            }
          }
        ]
      },
      {
        "id": "4c737125-352f-4c6d-ab0c-101a275fa640",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8fb7db93-1c8b-42e4-b06b-5b647b10271e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "faa0af74-6342-4b5d-b422-eafa30cd4aab",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9c4bf10f-50cf-4b5b-9a05-f85e635fe767",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cf0e3e0-24c0-406e-8948-7051c11e1995",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "44c84777-cdf8-4e18-b48b-98f1e726eb2d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 105
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 123.3923076923077,
      "responseMin": 6,
      "responseMax": 779,
      "responseSd": 112.54144509426433,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1668473289763,
      "completed": 1668473335524
    },
    "executions": [
      {
        "id": "2e9a8d98-b9f7-48c2-88f3-572a2b3009da",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "92eb1be5-76eb-4992-b458-b36c5b949a56",
          "httpRequestId": "090393b6-df43-4fde-bc13-fd4f768fd0a0"
        },
        "item": {
          "id": "2e9a8d98-b9f7-48c2-88f3-572a2b3009da",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3d70acae-0530-436c-81fe-1b3362e73b75",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "b79e3b32-6e2a-4f94-8d0d-4c1b3a6d9464",
        "cursor": {
          "ref": "36ba8fce-5926-4ee3-b041-c49c8cb4a0df",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "defdb631-8417-433a-991c-8ad44a815acd"
        },
        "item": {
          "id": "b79e3b32-6e2a-4f94-8d0d-4c1b3a6d9464",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c4e4ec97-64d2-41b8-8118-c144b45de32c",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "c9ed644b-ec58-465c-b583-c5362b42f3e7",
        "cursor": {
          "ref": "57987e4a-df0e-4b2f-bfab-bc45e98b7113",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b73d3d1b-1521-4601-8f1f-efaf42618022"
        },
        "item": {
          "id": "c9ed644b-ec58-465c-b583-c5362b42f3e7",
          "name": "did_json"
        },
        "response": {
          "id": "cd18b5b2-8573-444b-9c45-8c07ab63c3d8",
          "status": "OK",
          "code": 200,
          "responseTime": 270,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe57e82-d26a-4f39-acb1-d0da87c9552e",
        "cursor": {
          "ref": "6b0a28e2-f6e4-4863-a55e-7b6dece033fc",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "50ae8d4b-aa4c-449b-a771-2b12d8785c17"
        },
        "item": {
          "id": "cbe57e82-d26a-4f39-acb1-d0da87c9552e",
          "name": "did:invalid"
        },
        "response": {
          "id": "c5db7ddf-954c-42f0-ab63-fe77cfd4e011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe57e82-d26a-4f39-acb1-d0da87c9552e",
        "cursor": {
          "ref": "6b0a28e2-f6e4-4863-a55e-7b6dece033fc",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "50ae8d4b-aa4c-449b-a771-2b12d8785c17"
        },
        "item": {
          "id": "cbe57e82-d26a-4f39-acb1-d0da87c9552e",
          "name": "did:invalid"
        },
        "response": {
          "id": "c5db7ddf-954c-42f0-ab63-fe77cfd4e011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6985af8e-49cf-4480-adfd-6ee5cb6819c6",
        "cursor": {
          "ref": "6d42232c-017b-4444-85ff-72e539cdf9e8",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a3bd8278-dbdc-4d93-9153-01e8b314d526"
        },
        "item": {
          "id": "6985af8e-49cf-4480-adfd-6ee5cb6819c6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ba1bbd20-ff00-4df3-b7b8-fea584b3c698",
          "status": "Not Found",
          "code": 404,
          "responseTime": 218,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb0de58-77e5-4c75-817a-7419fb8cf508",
        "cursor": {
          "ref": "360a2793-e5d9-406e-83f5-bd725f047fdf",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "20a92240-216b-4bbd-95cb-b1d84d3c108f"
        },
        "item": {
          "id": "adb0de58-77e5-4c75-817a-7419fb8cf508",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8b58c4e5-89e6-479a-a236-d9b6caa54a4e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549298f5-bf56-4c8a-854c-bc9cfeff0a52",
        "cursor": {
          "ref": "9bb12dae-d7b5-4d34-954c-ecc7422bbea1",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "75855e1a-2249-427d-b668-ccb14cbfb921"
        },
        "item": {
          "id": "549298f5-bf56-4c8a-854c-bc9cfeff0a52",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6d03d51a-eb89-4664-80b2-0b600d63a2d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47494f29-174b-49d3-8df2-33f03f46d238",
        "cursor": {
          "ref": "e2ac6c78-be69-44b3-87e1-ce2215e36cc3",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4c9ba81c-e003-4621-aaf3-b16139b2fb93"
        },
        "item": {
          "id": "47494f29-174b-49d3-8df2-33f03f46d238",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "877ecbbf-39fd-4029-9378-92b3215b371d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 73,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47494f29-174b-49d3-8df2-33f03f46d238",
        "cursor": {
          "ref": "e2ac6c78-be69-44b3-87e1-ce2215e36cc3",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4c9ba81c-e003-4621-aaf3-b16139b2fb93"
        },
        "item": {
          "id": "47494f29-174b-49d3-8df2-33f03f46d238",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "877ecbbf-39fd-4029-9378-92b3215b371d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 73,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf977de1-8259-4327-9769-9296073d04a7",
        "cursor": {
          "ref": "91c8de21-9293-4ace-80ee-63873e41f300",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5f109084-dbb7-48d4-8d84-5dab6aadc041"
        },
        "item": {
          "id": "bf977de1-8259-4327-9769-9296073d04a7",
          "name": "identifiers"
        },
        "response": {
          "id": "bc4a56a7-f9dd-4b4a-8740-8654487f0690",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b11acd6-8a14-424e-bc1a-f65f201d3b03",
        "cursor": {
          "ref": "422789d4-b4bd-45e0-814f-cf79f70ae997",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c79b40fa-53a5-4c01-93e0-3e2ac7aa5269"
        },
        "item": {
          "id": "3b11acd6-8a14-424e-bc1a-f65f201d3b03",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "74639447-6192-41ac-8a3e-253e03fd1835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b11acd6-8a14-424e-bc1a-f65f201d3b03",
        "cursor": {
          "ref": "422789d4-b4bd-45e0-814f-cf79f70ae997",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c79b40fa-53a5-4c01-93e0-3e2ac7aa5269"
        },
        "item": {
          "id": "3b11acd6-8a14-424e-bc1a-f65f201d3b03",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "74639447-6192-41ac-8a3e-253e03fd1835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ad6b41-50ac-4809-bcb4-856dd9473783",
        "cursor": {
          "ref": "e8c4f022-f523-48c5-b7fc-9844c36c1b65",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c9cbe8b8-f0ce-4640-a0fa-65fa80dae12d"
        },
        "item": {
          "id": "c2ad6b41-50ac-4809-bcb4-856dd9473783",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c8682d20-8917-4e48-a2a7-b7af64363511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f42f9a5-1036-4786-8a23-ab87a904f61f",
        "cursor": {
          "ref": "640d70d4-66bb-43f0-91fd-7a5bb4932997",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "abfd9901-4d28-44f5-a106-9b9fc2e87083"
        },
        "item": {
          "id": "4f42f9a5-1036-4786-8a23-ab87a904f61f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2d5b4c63-cb0a-4443-b8e0-f56bd7d35401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2514b8-080d-4a7d-9387-64b2a3f2fe60",
        "cursor": {
          "ref": "3059de64-487b-409c-9c1c-93c0aaadd573",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d099dcf7-a217-49e6-9eb4-70cd6a7b19be"
        },
        "item": {
          "id": "ef2514b8-080d-4a7d-9387-64b2a3f2fe60",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0414bc15-9b9e-449b-ac8f-641dba35003e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688d2210-d002-47fd-a6fc-b70ed6ea624b",
        "cursor": {
          "ref": "a55f71b3-e071-405b-a65d-42ffcff9d384",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "06903ffa-50a4-442c-be3f-34cad25dad98"
        },
        "item": {
          "id": "688d2210-d002-47fd-a6fc-b70ed6ea624b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "27470dbd-5eef-44d8-a09f-4050493cb95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1001e73-b545-4c48-8204-cec83f0a13d5",
        "cursor": {
          "ref": "8ce51b59-1ac5-4774-a26f-e5d08c335397",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "370e4762-ac61-427d-acd0-68d8cbba7cdd"
        },
        "item": {
          "id": "e1001e73-b545-4c48-8204-cec83f0a13d5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0f1eb394-da85-48c8-95ce-7ec261a09364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48f26b8-8696-4fca-8126-b4390808ec88",
        "cursor": {
          "ref": "ff9dc02f-337f-4232-b29a-23f9f4b0bbb8",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d7ca61ee-1465-49ee-bde6-e4b944b5a3a4"
        },
        "item": {
          "id": "c48f26b8-8696-4fca-8126-b4390808ec88",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e5b37819-0d0d-4eb6-b7cd-dc408e2ce2da",
          "status": "Created",
          "code": 201,
          "responseTime": 713,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b6e0d215-cfc9-42d7-b768-5f86737dfeb9",
        "cursor": {
          "ref": "c68fc081-a5fc-4907-b121-f45bd6c9fb33",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "03c5f9dc-ba3e-4c3a-83b6-e20880476865"
        },
        "item": {
          "id": "b6e0d215-cfc9-42d7-b768-5f86737dfeb9",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9f6f1250-00d3-4c4e-ac45-559ea6fdb733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a99fee-7a65-4842-b25c-1a9c79f102e8",
        "cursor": {
          "ref": "673ecc48-0ccf-476f-8063-614ad754841c",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f796bc01-e061-4928-896c-a19e847dc2ad"
        },
        "item": {
          "id": "21a99fee-7a65-4842-b25c-1a9c79f102e8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "cfe7cd18-6da9-4604-a166-cdd602b3a9c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e7e336-753d-49a3-89df-621efd91ffbf",
        "cursor": {
          "ref": "f9213b24-94cc-4ab1-b951-638ad624479c",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8780992a-13b7-4ac2-a279-1d006a9babb9"
        },
        "item": {
          "id": "87e7e336-753d-49a3-89df-621efd91ffbf",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "06f5e696-6a36-40ca-9373-e8ea3fdd7540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "878e514f-5290-4b10-9d92-5b5ee4a6ec95",
        "cursor": {
          "ref": "031b28d7-5ce3-4610-8bd2-f9335b2e663e",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b0d6a734-252a-4941-9f79-29bbd9a4216b"
        },
        "item": {
          "id": "878e514f-5290-4b10-9d92-5b5ee4a6ec95",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e954553e-c536-4d75-82bf-99954e9729a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575a98ed-5302-4946-9d60-3308ff089ecb",
        "cursor": {
          "ref": "70e1e368-f3ff-40ba-8514-b65a81cbf259",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5d8aa496-2f0e-4f55-be65-fcbf0e7f8e0b"
        },
        "item": {
          "id": "575a98ed-5302-4946-9d60-3308ff089ecb",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "61602600-7531-41b2-a5b8-f5253a9ef184",
          "status": "Created",
          "code": 201,
          "responseTime": 390,
          "responseSize": 609
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "607e9c82-72a1-4ac9-958e-5199613ae77c",
        "cursor": {
          "ref": "94506d54-e7a6-4207-8a16-4f58631ab1df",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a2c87695-7d28-4a79-8ec7-236c54c11407"
        },
        "item": {
          "id": "607e9c82-72a1-4ac9-958e-5199613ae77c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ddf21013-4c10-4b65-900c-b7c635623896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1f2762-dd37-43c1-a338-70b67d1300b0",
        "cursor": {
          "ref": "ab95d112-6ec9-489d-a662-8b60091ace1b",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0a8a690b-8920-466d-a31b-407224de15dd"
        },
        "item": {
          "id": "0e1f2762-dd37-43c1-a338-70b67d1300b0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4ae25540-c132-4174-ada5-52e2f6a7dcd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b684e6d7-73f9-4177-aa6f-b46c1dbd3fe5",
        "cursor": {
          "ref": "cc3ae84a-c1e6-4085-a1d5-115fedc58266",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6f182c8e-2bf7-4947-9231-8883dd5a7af0"
        },
        "item": {
          "id": "b684e6d7-73f9-4177-aa6f-b46c1dbd3fe5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9f08682a-1dd4-43e3-978f-9f998352f7a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5213b7-4e60-4002-88ff-4234524572d1",
        "cursor": {
          "ref": "a2519f8e-b4b7-4ea4-91af-6f5fc01b7a51",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "27df7b18-7e8a-4f90-b93d-d1336e58fa48"
        },
        "item": {
          "id": "ba5213b7-4e60-4002-88ff-4234524572d1",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "30f45baa-0ecd-477f-a2e9-bac17cffa9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c0b9c1-c601-43a2-97ec-7c2cc448a32a",
        "cursor": {
          "ref": "4a6ce623-dd61-4168-a3e2-354726b35a1f",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3263e67e-4011-416e-aca1-e59d28ecd28b"
        },
        "item": {
          "id": "e1c0b9c1-c601-43a2-97ec-7c2cc448a32a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f0b3ce18-5ab7-422c-8549-71e65e9543b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014a1348-e7e0-4ff2-a875-ac2acfc250bd",
        "cursor": {
          "ref": "6b4d8f1b-99ae-48ba-a86f-ae78f70b348c",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ffb80a45-72ea-487b-a61e-5908ebdcff85"
        },
        "item": {
          "id": "014a1348-e7e0-4ff2-a875-ac2acfc250bd",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0b69f34d-f7ac-44f9-b595-e01e6389388a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f82dc3-c227-496a-9638-b50a9b6a2f53",
        "cursor": {
          "ref": "11a13ebf-19f5-44f6-8db8-f4571f581006",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0d04ed69-d3d6-4fef-b33f-c2faf873da55"
        },
        "item": {
          "id": "39f82dc3-c227-496a-9638-b50a9b6a2f53",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6decc9b9-05c5-4e3f-b658-8443655338b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860df611-5e80-4d0b-8ba5-b89004d54e62",
        "cursor": {
          "ref": "e4ad2552-3e00-4ac6-8793-1b008686b041",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "373d746a-ac9e-436a-a441-cd9a961e5a60"
        },
        "item": {
          "id": "860df611-5e80-4d0b-8ba5-b89004d54e62",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "cbdb0e74-7826-4ec8-8d83-cc912c725a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23a17dd-92ce-4df0-9f6e-dd5b9c1483d9",
        "cursor": {
          "ref": "da9145d7-fdf4-41f6-96ad-705cdd5b7429",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1663520b-4e8b-418f-bfd7-c30e764864d2"
        },
        "item": {
          "id": "a23a17dd-92ce-4df0-9f6e-dd5b9c1483d9",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1988ae04-dfc9-409a-ae17-bd7ca6df1594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c8b172-bfbf-4501-a5ed-dc8cf0c8efba",
        "cursor": {
          "ref": "8f74c7fb-c49c-41b5-8d0d-1cf5140d615a",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8ff73c97-5e13-4530-863f-3095b9bb22c4"
        },
        "item": {
          "id": "c8c8b172-bfbf-4501-a5ed-dc8cf0c8efba",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3f75ea29-f432-4291-a2ba-6ca1776cbf56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8fdeb2b-10a5-40c8-8456-fac6009b8909",
        "cursor": {
          "ref": "87bb6770-01fa-44d7-801e-feb50bc0939a",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8b74a2b9-bfbb-41fb-a6f5-092552631932"
        },
        "item": {
          "id": "e8fdeb2b-10a5-40c8-8456-fac6009b8909",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c24f22e5-4a81-4a05-98c2-ae0a4f721355",
          "status": "Created",
          "code": 201,
          "responseTime": 453,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "7decf2de-7bc3-4e34-86d4-d18e26af5f4e",
        "cursor": {
          "ref": "b14b50d3-8c69-4365-8504-ea114eaf47ea",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cdfd8610-7a1b-428d-bb77-41aa1e76dfed"
        },
        "item": {
          "id": "7decf2de-7bc3-4e34-86d4-d18e26af5f4e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b1c125bc-f6c7-49bb-ae30-7bce8dfce369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3a7edd-e93d-4c9e-a733-1428157e94f5",
        "cursor": {
          "ref": "b80f941b-b1e1-4ccd-a759-b401f12bf3f0",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9eb9402e-24e3-44b7-b1aa-be52c906d70a"
        },
        "item": {
          "id": "db3a7edd-e93d-4c9e-a733-1428157e94f5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f2c3c1c3-4cf0-4126-a441-9baeb6bd83c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81b9403e-6674-4315-b334-e4e014e5093e",
        "cursor": {
          "ref": "0c918f9c-3cae-41de-a6fb-29d2179f949b",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2936b7fc-a0dc-47e5-80e1-5ff32ce9b2cb"
        },
        "item": {
          "id": "81b9403e-6674-4315-b334-e4e014e5093e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d893eaef-c63e-42df-9e7c-e3be95b4db9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa7882e-ccae-4d6b-8294-35fd9bb10ffb",
        "cursor": {
          "ref": "44f58e81-ac11-460f-bb55-ad004c052732",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "695417db-8a16-48e0-be46-43bf107f39d5"
        },
        "item": {
          "id": "8aa7882e-ccae-4d6b-8294-35fd9bb10ffb",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "61bfc801-df4d-427e-8a84-23b65440f9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb88e281-e984-41bf-9415-5616bd15081d",
        "cursor": {
          "ref": "7d559909-6ad3-4768-a9dd-0faeaf53707c",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "685f6530-68b5-4539-89b0-169ea9a80003"
        },
        "item": {
          "id": "bb88e281-e984-41bf-9415-5616bd15081d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e5e1ef93-2dc0-4a70-b3e1-a302f11c5957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337694c6-9a06-4d64-a3db-1592617694e4",
        "cursor": {
          "ref": "c982f86d-1f19-4b60-b8df-5011fa034eaa",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b1eefd34-5fca-46ac-bc96-978b0263e209"
        },
        "item": {
          "id": "337694c6-9a06-4d64-a3db-1592617694e4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2229a8a5-21d3-4d29-bd80-f1c6cf920abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8cd83d-f6e2-4953-bdbb-9fa7a69ec913",
        "cursor": {
          "ref": "bbb9b880-e447-4a85-acb8-5e147ea63dfc",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e65ff7a2-72a0-4e42-9bf0-b3c10cec1d81"
        },
        "item": {
          "id": "7c8cd83d-f6e2-4953-bdbb-9fa7a69ec913",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "18264f8c-0418-4831-9659-6915efc18e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7739ff92-75b0-4b97-a977-5e49d9cc31fe",
        "cursor": {
          "ref": "4b7ec617-8861-4659-9268-aa77cc42feb2",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4b353b69-847e-4da5-9176-2d375c76798f"
        },
        "item": {
          "id": "7739ff92-75b0-4b97-a977-5e49d9cc31fe",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c4b3646a-168f-407d-8510-ac9bca00506e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d031d034-c7ad-45ac-bbcb-06f25ab8b7dc",
        "cursor": {
          "ref": "6f840f32-9cf3-4de3-960c-b832034677a1",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "17a20c82-e112-49b2-a20d-1fff8f5bf581"
        },
        "item": {
          "id": "d031d034-c7ad-45ac-bbcb-06f25ab8b7dc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bd59b7b8-5468-4e51-ab8b-a311b898f4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa4becc-30f9-4436-a764-7dc88c17130b",
        "cursor": {
          "ref": "cf272f69-9463-4d7c-980b-81c5654d4c53",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5ae9d360-dc34-4e6b-b33d-4d7fcb51339b"
        },
        "item": {
          "id": "dfa4becc-30f9-4436-a764-7dc88c17130b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8f0defb1-1cf1-4a8c-93bc-84af05915674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5867275b-c2da-447d-8405-cf19056e4066",
        "cursor": {
          "ref": "59224dae-4d1e-4acc-9b7d-f22bc4a1289f",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "224d4032-2cb1-4dc9-9fc3-d1c1d390090e"
        },
        "item": {
          "id": "5867275b-c2da-447d-8405-cf19056e4066",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "99aee397-a02b-4347-944d-a25b517ceadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d4368c-6a00-48dd-b780-23122694388b",
        "cursor": {
          "ref": "9a324f8d-8448-45fe-8f41-a6a316f67411",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "42905f86-10d5-4dbe-aa29-ee556462dc34"
        },
        "item": {
          "id": "63d4368c-6a00-48dd-b780-23122694388b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d0ca4a50-84a9-42a2-a3fb-1c0095d06f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8416057-caf1-45a9-a276-8ae9242b72fc",
        "cursor": {
          "ref": "092a9711-d4d1-4420-b75b-c538e6435ad9",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3610086f-4a0c-46a5-852a-832e834d0e67"
        },
        "item": {
          "id": "a8416057-caf1-45a9-a276-8ae9242b72fc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2f625a8d-2325-4c37-b98e-d9f6235569d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 400,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "58d8c095-7525-4c65-a2bc-ce44a1a20dae",
        "cursor": {
          "ref": "68d57833-c554-4414-bca2-89e388aa1973",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9aa18c24-2943-4fd9-aa0f-9d5c0b19011f"
        },
        "item": {
          "id": "58d8c095-7525-4c65-a2bc-ce44a1a20dae",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bf49659a-9f2c-4327-acaa-cdcd1d86d7d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9a6f7b-3881-4e14-ba81-c2d4eaf91b45",
        "cursor": {
          "ref": "380b2330-aa6b-4ce0-9a3d-98bb4c0e9328",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "83f4e7f1-3934-4af0-8906-d2d1556eaaaa"
        },
        "item": {
          "id": "ee9a6f7b-3881-4e14-ba81-c2d4eaf91b45",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "15ccc754-df8f-42f9-99a5-ede93304e066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8a4ff7-5b16-415a-b950-95ca643ac9ca",
        "cursor": {
          "ref": "5a297e81-e5ce-49eb-9fce-56c85d53fd7c",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8ff973ba-4ab9-404e-b6d0-d47c24ce271d"
        },
        "item": {
          "id": "2c8a4ff7-5b16-415a-b950-95ca643ac9ca",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5614385b-b0b9-4fd5-b454-9e0e38ef0614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12c959c-75fb-4f3c-8320-16507fe854d4",
        "cursor": {
          "ref": "797ddb31-577c-48f7-8f50-95f3d319dcb3",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ce7244c6-8e40-4b98-b2df-0d5d4fc00bba"
        },
        "item": {
          "id": "b12c959c-75fb-4f3c-8320-16507fe854d4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "86802ae3-d26f-4a10-b629-4cad22de4bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294eff22-3862-4098-a0aa-09edb775c073",
        "cursor": {
          "ref": "99dcbb58-87fc-4bdd-9317-004cb25c8a4a",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0e0639f4-7d53-41af-a9db-eeaf545ada33"
        },
        "item": {
          "id": "294eff22-3862-4098-a0aa-09edb775c073",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "cd77fbf2-397a-4de4-9fcd-0ba1dc84ba5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a11f16-aeb5-4d88-814b-01961e5c1e3c",
        "cursor": {
          "ref": "ad2b4cb4-d06c-4526-ba16-962a633e766d",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "bfc50754-a3f8-49fb-81b1-d29f1be58926"
        },
        "item": {
          "id": "c1a11f16-aeb5-4d88-814b-01961e5c1e3c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "df01114c-e0ab-4fdc-be7f-ba10cc14a53f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea05f6dd-c70f-49e9-a61d-c15dcc74ba2f",
        "cursor": {
          "ref": "faf67c07-cfad-41d1-8733-329472862537",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "103de1fd-7694-469a-8dfa-68b15036f938"
        },
        "item": {
          "id": "ea05f6dd-c70f-49e9-a61d-c15dcc74ba2f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fb592c94-b518-47ac-8ad4-6b4e29c7c145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "6bf41491-eb3c-4cf8-83cf-f9171f2b6a4a",
        "cursor": {
          "ref": "10b45063-f7ae-4db1-b605-c6363eb8fcf6",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b3693c9c-439d-4acd-9f1a-e6f319eb3fa7"
        },
        "item": {
          "id": "6bf41491-eb3c-4cf8-83cf-f9171f2b6a4a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "80b4eb9b-991e-47d1-9ff3-ab5a94d9f1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2ac53c-3cdc-4493-8de0-99ea3cc02c10",
        "cursor": {
          "ref": "2a684063-f46e-4023-8aae-a57f40536c00",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "cac6dbae-ad09-409b-ab1d-ef58613b9604"
        },
        "item": {
          "id": "ec2ac53c-3cdc-4493-8de0-99ea3cc02c10",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "71e123ac-798d-4960-a067-77bb6853930e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b919d7-4084-44f8-8465-cf89790c5931",
        "cursor": {
          "ref": "2a10d92f-02cb-4779-b7d7-77f66862758e",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "42aae40d-9f85-48a4-a3cc-ac12c4577bca"
        },
        "item": {
          "id": "14b919d7-4084-44f8-8465-cf89790c5931",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ed28f0cc-e5ab-4ff8-84b8-54db9a16a083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47da7ee-362e-4e82-9716-c0d8cc7d8961",
        "cursor": {
          "ref": "47307664-a8cb-4665-83b0-33099b736b94",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9b82eb8a-2d81-4c96-96bd-f4082f61c574"
        },
        "item": {
          "id": "f47da7ee-362e-4e82-9716-c0d8cc7d8961",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a9187629-0c9d-46c9-9786-44861d0388d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a99409-b3a6-460b-bac7-1e9c3620a046",
        "cursor": {
          "ref": "ebcfdedf-b284-4d86-bf57-9759955ed55c",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7c9b9332-3092-4d84-836b-a8f37f5c175d"
        },
        "item": {
          "id": "f9a99409-b3a6-460b-bac7-1e9c3620a046",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3d2bad31-f955-4bfe-a7f7-718fad5e9be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e24ef3-cdb7-48f2-82bb-484dd09fa0db",
        "cursor": {
          "ref": "5cd5c1b7-f1e4-4b29-892a-a8ac1d3a0960",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a21769df-c3c4-4789-8e76-05e8c22ae80d"
        },
        "item": {
          "id": "66e24ef3-cdb7-48f2-82bb-484dd09fa0db",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c0d5e806-16fc-459d-b58c-8e66497d11f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de09c79f-40da-438e-bf24-139f1241b50b",
        "cursor": {
          "ref": "314f745b-2c24-4958-972e-d4733099dbbf",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4d796685-3776-46f8-9284-f71143c81a8d"
        },
        "item": {
          "id": "de09c79f-40da-438e-bf24-139f1241b50b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f6c328f7-680c-42a8-b598-51971e437e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f83ce42-fb4c-48b2-931c-124b67978878",
        "cursor": {
          "ref": "ac8ade89-1f09-495d-89a9-5adb5614c081",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e7ff3b7b-a657-4dcc-8d92-a246a9c945c3"
        },
        "item": {
          "id": "1f83ce42-fb4c-48b2-931c-124b67978878",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9bd020d3-ff9c-4c7c-b81f-598d935e3c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee592ef-afa9-4be8-abbc-612c44a77150",
        "cursor": {
          "ref": "9896a93c-aa5c-49ff-add8-c63ad02171a0",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4671f599-9ec3-41e5-bf18-9a8f9a014318"
        },
        "item": {
          "id": "cee592ef-afa9-4be8-abbc-612c44a77150",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f7865850-012e-4011-bea3-f95b44183059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a428b28-1e0e-4817-81a0-c016d93e1241",
        "cursor": {
          "ref": "3161d0df-9124-47c6-98b4-d433b096ea76",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a415a323-5c26-46f8-b3eb-c734ba8173a9"
        },
        "item": {
          "id": "3a428b28-1e0e-4817-81a0-c016d93e1241",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5e57ec7e-afc5-46e5-bb69-9600d37df413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee0179d-bfde-4b3e-a957-abea2ff173d3",
        "cursor": {
          "ref": "aeac66fb-eb54-452e-bab1-849921ad1b85",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "731c48cc-dd1a-4d5b-bc94-ebd0ad0002f3"
        },
        "item": {
          "id": "fee0179d-bfde-4b3e-a957-abea2ff173d3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "420e7c7c-2aeb-4d5f-82a7-aa10f3d824ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8194c479-b6ca-4425-a77b-e2d2ce13d7f5",
        "cursor": {
          "ref": "52961037-8c5c-4350-948c-5ef8c76ed6a0",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b459ff0d-a5f1-4fd7-9cca-2b4f79984ed5"
        },
        "item": {
          "id": "8194c479-b6ca-4425-a77b-e2d2ce13d7f5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c85bcbca-80fc-468d-a2b5-08c1e81f7ee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a585dba1-c7f1-4edf-946e-5671599c3cbb",
        "cursor": {
          "ref": "f74b04fa-24cc-4fd3-bfe2-9e3d083d21a1",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e28d6d54-a698-4096-8cf1-955c2cd51e0a"
        },
        "item": {
          "id": "a585dba1-c7f1-4edf-946e-5671599c3cbb",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a5b895d9-d99a-4b08-a331-340e7469148b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7325f1-1f6d-4aab-9c27-5c3cfd17d01a",
        "cursor": {
          "ref": "fb9ba902-6b9f-4172-be26-fe28f4c42065",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1844f236-87ea-42e6-b7c5-c0d0c67a9a9a"
        },
        "item": {
          "id": "8a7325f1-1f6d-4aab-9c27-5c3cfd17d01a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ef7ab404-6966-4635-b59f-fd6fa34d7d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebaa6afa-4eb4-4b76-9722-6721c31f4e29",
        "cursor": {
          "ref": "aecc1fa8-3b16-4eaf-9fd3-73819864228e",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c13e0f66-58f3-4e97-b21f-630426cbb5d9"
        },
        "item": {
          "id": "ebaa6afa-4eb4-4b76-9722-6721c31f4e29",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3ca8a341-49c8-496e-8269-00767653a31e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d03a6b-dadb-4611-943c-53d6d481f56f",
        "cursor": {
          "ref": "2e21c136-d1b1-4a86-b281-9c59ecd0a40c",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6927a94b-a67a-4727-827f-b4f5c79d4bfe"
        },
        "item": {
          "id": "91d03a6b-dadb-4611-943c-53d6d481f56f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "683b0533-5758-4502-8e4a-6c3fbfbef3a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d947e407-c6a9-400f-a5e4-314fc6ad6895",
        "cursor": {
          "ref": "d26de8be-3977-4c02-884b-67c057c89ca7",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1845f161-2e8b-4cb6-acce-9b4eee071298"
        },
        "item": {
          "id": "d947e407-c6a9-400f-a5e4-314fc6ad6895",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3072a213-a9dd-48ea-a42d-6ce91a1d3a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e66eb3b-5cef-403f-bbf6-e7b635f1c58f",
        "cursor": {
          "ref": "6a88dce1-db66-49f7-b796-7154eca89ca7",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3be720fd-282e-403d-ab57-e6c356c6d008"
        },
        "item": {
          "id": "7e66eb3b-5cef-403f-bbf6-e7b635f1c58f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1a6cb7e6-b07f-4aa0-9e63-e19d6802ae34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567c57cc-554d-406e-ba80-5378fe023b86",
        "cursor": {
          "ref": "8ff847d3-a938-4176-99ff-5b3782457115",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "95a28f76-462c-4e7f-8f5e-2e4db8db93d7"
        },
        "item": {
          "id": "567c57cc-554d-406e-ba80-5378fe023b86",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b4f59585-d77a-44ed-9de9-ec1796059333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a7b862-fed9-4d70-b201-f7ccc602bb5b",
        "cursor": {
          "ref": "db01c476-a648-443c-9166-a41ae52c9ab1",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7c081f6f-bcac-4d85-95fe-0cafceeeffee"
        },
        "item": {
          "id": "f6a7b862-fed9-4d70-b201-f7ccc602bb5b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4a31a85f-00de-4bc9-b227-d1419f1a1e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91bf378f-88e9-4f90-92f2-94b15ddae118",
        "cursor": {
          "ref": "d105178f-317f-4757-899a-f91893b1b979",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5146bcfd-f5cd-4380-916b-808c8271a9f7"
        },
        "item": {
          "id": "91bf378f-88e9-4f90-92f2-94b15ddae118",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "13ef00c4-9f32-490f-ab24-76df56b24d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec06475-f2c0-4b96-8a12-8c54b1145e9a",
        "cursor": {
          "ref": "73ad92ab-98c4-4acb-95a3-9497fe8863be",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "37d01b2d-5ff6-492e-acff-291dedce3c06"
        },
        "item": {
          "id": "fec06475-f2c0-4b96-8a12-8c54b1145e9a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "acb98400-6f9e-4cd5-b372-4a4e01bd6c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e98330-0c81-40e4-8f7b-137e7638b708",
        "cursor": {
          "ref": "4f453c38-d033-4ad6-bf60-5da7f2da192e",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5c699a64-f833-4669-aee3-cb9393e56085"
        },
        "item": {
          "id": "f3e98330-0c81-40e4-8f7b-137e7638b708",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ab57b36a-8fe9-4365-8250-ab66ff1fcdec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8570949e-a3ba-488c-8e34-8759e34bb262",
        "cursor": {
          "ref": "a156783e-654c-4fc7-95dd-adda0e6a5730",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8e7e59d8-c0cc-4398-9af8-734265cf4cae"
        },
        "item": {
          "id": "8570949e-a3ba-488c-8e34-8759e34bb262",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "21db2a7a-d05a-4f33-98bd-9d424dde752c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38d1f5e-a2d4-407a-ad1b-c7ac86997949",
        "cursor": {
          "ref": "ad959569-682d-42b1-aba2-42045338f10d",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f4b4d954-5bdd-40ce-9086-4928990e7286"
        },
        "item": {
          "id": "f38d1f5e-a2d4-407a-ad1b-c7ac86997949",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "55cca914-7cd1-464d-a8ee-e7f52a0f76d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ee67d1-a04b-40e4-bc79-e4faa0cc7837",
        "cursor": {
          "ref": "24dc0d58-64dd-43d5-95d5-de5a59dd6c35",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "dc6bb5b4-924e-4394-a54f-2f9bb4cde15c"
        },
        "item": {
          "id": "84ee67d1-a04b-40e4-bc79-e4faa0cc7837",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "bbc8e810-0d49-483e-b2ea-4c842c2386f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43178108-bc92-4145-b546-609a34e0ab65",
        "cursor": {
          "ref": "1036c5da-be4b-4976-9f8d-20b4f95113af",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f1052c13-dbf4-4778-b1b3-d29e6b74f587"
        },
        "item": {
          "id": "43178108-bc92-4145-b546-609a34e0ab65",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e47d2861-8896-4c54-9f77-b4e8b5e44081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df802de-a8a1-445c-88e4-80980499972c",
        "cursor": {
          "ref": "b440a7c4-80b8-40e3-8f99-5570cc691109",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "828cad88-ae2d-4d00-8905-d03176fc512f"
        },
        "item": {
          "id": "9df802de-a8a1-445c-88e4-80980499972c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "14fefe22-860d-40c1-8078-d038bf3f10c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c23cb7c-e8ff-47d0-ae2f-7628d7f57447",
        "cursor": {
          "ref": "41b35b22-124d-4832-8bc7-225de26d893f",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4d1aee93-a102-4431-a6e4-ee377d8c9ad1"
        },
        "item": {
          "id": "4c23cb7c-e8ff-47d0-ae2f-7628d7f57447",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "34f025d6-d9db-4ffa-b43a-22d6a88773b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6476ea-9c68-4479-9266-60034514fe2c",
        "cursor": {
          "ref": "9280802d-1c2e-4742-b499-4d936fd2f587",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9534cef0-0f6c-4aa1-b20b-7227e1510c1f"
        },
        "item": {
          "id": "3b6476ea-9c68-4479-9266-60034514fe2c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6014d0ee-2a56-4d56-b4e2-02a97c4f1604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5a33f3-63e1-4282-9a14-708339bb55ce",
        "cursor": {
          "ref": "452a871d-db3b-40be-b9d3-39a83e78a575",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "23bdf97e-cd83-4922-8644-6384c203501a"
        },
        "item": {
          "id": "ee5a33f3-63e1-4282-9a14-708339bb55ce",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "36c3fc79-d8d6-47e4-9faa-25be45c5b52a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 397,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f1b798-bdc4-48af-8afb-6f47d880ffed",
        "cursor": {
          "ref": "e3166cac-67d9-4e30-996e-cfb9af5133ef",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c9779bf4-ac7d-4b7a-8a8c-6c270af01f21"
        },
        "item": {
          "id": "55f1b798-bdc4-48af-8afb-6f47d880ffed",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7c35ee35-3b64-487e-9044-9c11877653ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00da600-cd9a-422c-97fd-8e78d1e06125",
        "cursor": {
          "ref": "88821634-e061-4c00-bafc-0a1ba0683869",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ce373071-7f98-43bd-ab5c-6779b037b34c"
        },
        "item": {
          "id": "f00da600-cd9a-422c-97fd-8e78d1e06125",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3c090a98-f25d-479e-a75a-6cde60f1b7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e823309-d4bf-4343-b49a-251d5414b969",
        "cursor": {
          "ref": "14c67bc3-96ae-4b40-8d65-83b341b54e49",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a819e534-6c1d-4387-a5e2-5407320ed264"
        },
        "item": {
          "id": "3e823309-d4bf-4343-b49a-251d5414b969",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c634eb10-dab8-420c-acd9-6a02cce836d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb06312d-2d4d-4fec-bae1-182071651c7b",
        "cursor": {
          "ref": "a702c73a-623b-4dd8-b763-6e3d709cf3f8",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d168dc08-57d1-4d9c-a692-8dddace34b8e"
        },
        "item": {
          "id": "eb06312d-2d4d-4fec-bae1-182071651c7b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8fc6069e-0c7c-473a-91c3-c013dbb016fe",
          "status": "Created",
          "code": 201,
          "responseTime": 401,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "c2e9a1b6-0d03-46cb-8a33-10bf51a6f939",
        "cursor": {
          "ref": "ca77c76b-ad1e-4804-b6a9-37e1287219a2",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1a8a7c99-344b-41e3-bc35-6a4c681b17eb"
        },
        "item": {
          "id": "c2e9a1b6-0d03-46cb-8a33-10bf51a6f939",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ee21d07d-e91e-44ed-b999-af4fdd9c9a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b28b7aa3-d52d-4e5a-8ad2-785c2ff8efe1",
        "cursor": {
          "ref": "a49b4ad4-d2e6-4a45-a164-4092d2b67c5a",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a4c2ed1a-5d5c-4859-aaf3-9fe856c98cf2"
        },
        "item": {
          "id": "b28b7aa3-d52d-4e5a-8ad2-785c2ff8efe1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2ad0ca61-15fe-4813-bdca-a4a81929b711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253437ac-daa0-468b-84fd-bca5ade338df",
        "cursor": {
          "ref": "eafb54fe-fd27-47e7-ae2e-092ce4dbed78",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6224cb3d-2d97-4b6e-9172-191001ed7137"
        },
        "item": {
          "id": "253437ac-daa0-468b-84fd-bca5ade338df",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "79298a96-1492-4663-bfa5-cf234c6546f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d6a391-2f76-4809-8ac9-ec93e9a49467",
        "cursor": {
          "ref": "8680652a-d919-4416-8bed-9cf534980dd7",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2d149f01-39c9-4d3c-89dd-00109882d871"
        },
        "item": {
          "id": "f5d6a391-2f76-4809-8ac9-ec93e9a49467",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "eca7c115-965d-43dd-9d16-cdd8766f75c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5e8dbe-c717-4e9a-b76a-c8ab721583dc",
        "cursor": {
          "ref": "4b07fd5c-e1f7-4d52-ad38-555e311aea5e",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6697dd87-a615-437e-9a81-d0f0af36c7ff"
        },
        "item": {
          "id": "df5e8dbe-c717-4e9a-b76a-c8ab721583dc",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5d58b59e-c45e-45b3-b65c-ba203a2067cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d433b9-f4df-4614-bcb4-21173593353d",
        "cursor": {
          "ref": "0f5b50fb-b3ae-42a9-a904-8cbc71895f74",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "bb875caf-9737-4b01-a9f9-1d06b95237ed"
        },
        "item": {
          "id": "e5d433b9-f4df-4614-bcb4-21173593353d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "bdc704b9-ea82-471d-87ff-a7f45bcc8935",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "c1626274-ba8c-4c5a-965b-77948385a617",
        "cursor": {
          "ref": "fe60ac4d-92e4-401b-b51e-986489b3f714",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7c2b8c86-8a54-4a23-9751-9fc98ebe65f7"
        },
        "item": {
          "id": "c1626274-ba8c-4c5a-965b-77948385a617",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "707ae9d5-3039-406c-8045-365049f12df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2277b893-9b72-4329-8423-8a5cb930e0ac",
        "cursor": {
          "ref": "9b0fe026-e905-4558-85d8-3c3be2c3b15d",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b9be0d93-ac92-421d-8c1e-80496bddff96"
        },
        "item": {
          "id": "2277b893-9b72-4329-8423-8a5cb930e0ac",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b7db6c12-59bf-499e-b0e6-5ba00dc1d241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0978184-fb87-48bc-96ae-a08ab2798d3d",
        "cursor": {
          "ref": "4919f590-702f-4ec2-aeac-b1f310a48ecf",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5a06ec74-d8ad-4c96-8b49-c5ee7818d2e4"
        },
        "item": {
          "id": "a0978184-fb87-48bc-96ae-a08ab2798d3d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4c4c438d-1be4-41ea-8eb7-43f8d7b64c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92000aa2-2721-4bfd-940b-65b0b594182b",
        "cursor": {
          "ref": "680e616b-2170-46e7-acc0-52af7c68ba67",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c0f3429b-fa8c-4e8e-8596-1e38883828bb"
        },
        "item": {
          "id": "92000aa2-2721-4bfd-940b-65b0b594182b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "936a1da2-42c5-4ef5-9dd7-b679e966859d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb63ee69-feef-4625-9ae6-0805988cf665",
        "cursor": {
          "ref": "8c5ee503-8a3f-475d-9bb2-151858e910ff",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "83adce2f-4d70-4278-a12b-37eff19a1f5a"
        },
        "item": {
          "id": "fb63ee69-feef-4625-9ae6-0805988cf665",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "456a5dbe-b60e-44cc-89a5-ffb6ba6afc22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff7bde0-2ae8-40d3-9c44-992ff0acf380",
        "cursor": {
          "ref": "149cc5bd-6a62-4c66-87ec-28893ef35fb9",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6e63cad4-18d9-4320-b83b-c63a3568e761"
        },
        "item": {
          "id": "8ff7bde0-2ae8-40d3-9c44-992ff0acf380",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "40c27a75-f376-4856-bea6-d2e62092f2eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc59871-7f48-4be3-a99e-2552b579400e",
        "cursor": {
          "ref": "4f6e6416-cdc3-41a5-a274-16e33c4f68de",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "aa7f26bb-f896-4dee-929c-943546221f5c"
        },
        "item": {
          "id": "9bc59871-7f48-4be3-a99e-2552b579400e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d678c578-58ec-4ded-9f93-39dec298485d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612cf7fb-2150-470e-8455-7ee0ce380290",
        "cursor": {
          "ref": "b5b59aaf-880f-4f0a-aed8-82d10395f182",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0fe9f928-7c58-4cb8-9c29-0a1aa190de34"
        },
        "item": {
          "id": "612cf7fb-2150-470e-8455-7ee0ce380290",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "70ebcfb2-fbba-4d40-8092-a9c044530946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692c7dab-e787-432a-b8b9-c3eb9b7edf67",
        "cursor": {
          "ref": "b7dd69f0-4bde-48e5-9345-f580ccdffaa1",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e02e269b-869f-4665-bb92-e6fa5c109cea"
        },
        "item": {
          "id": "692c7dab-e787-432a-b8b9-c3eb9b7edf67",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3dc181e3-ee80-4d28-9268-3d14639260f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "59e13735-b389-40e5-9aca-72d3fe2507bd",
        "cursor": {
          "ref": "7e399e4e-99fa-4e07-ab46-f3430b70078c",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b673596e-9a04-47ff-a6e9-ca6c42e8c002"
        },
        "item": {
          "id": "59e13735-b389-40e5-9aca-72d3fe2507bd",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "94e3f401-a938-4a80-a825-54a4125418ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b6eb0eb7-1f0d-466f-9cdf-a42efb655972",
        "cursor": {
          "ref": "99327306-8cda-4717-9339-a79957643fda",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e6c842e7-a987-4689-baba-5cb65e28f0d7"
        },
        "item": {
          "id": "b6eb0eb7-1f0d-466f-9cdf-a42efb655972",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8fd619ef-a6ab-4c28-ad35-14101475e8f5",
          "status": "Created",
          "code": 201,
          "responseTime": 420,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected undefined to equal 'did:web:dev.vc.stg.mesur.io:v1'",
              "stack": "AssertionError: expected undefined to equal 'did:web:dev.vc.stg.mesur.io:v1'\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": ".empty was passed non-string primitive undefined",
              "stack": "AssertionError: .empty was passed non-string primitive undefined\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "expected undefined to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected undefined to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot read properties of undefined (reading 'created')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'created')\n   at Object.eval sandbox-script.js:6:104)"
            }
          }
        ]
      },
      {
        "id": "dd2dea80-72e7-4124-83dd-25896acc28ec",
        "cursor": {
          "ref": "66225042-ec86-4de9-82af-73e136b1657c",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "051483cf-ade6-4f79-a030-c64e896fc241"
        },
        "item": {
          "id": "dd2dea80-72e7-4124-83dd-25896acc28ec",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "c240f724-bdf9-44e1-81b4-3ba6fa77fe88",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 616
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "24ba9481-5ff1-4eff-9e93-5d7c89086e73",
        "cursor": {
          "ref": "33d32a19-9241-45e4-8e30-d5ce0b92f2a6",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4eb27898-c9c4-467e-bd7c-f3e785cb0d81"
        },
        "item": {
          "id": "24ba9481-5ff1-4eff-9e93-5d7c89086e73",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "899be36d-14da-4723-973a-d57829a0ee5e",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "42101c64-025c-4b70-9fec-953515097d0f",
        "cursor": {
          "ref": "7b0ceb4c-5c9a-434e-ad34-9dcbb2b4cce0",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c85a3ec7-bf3a-4981-9a0a-c0a766206257"
        },
        "item": {
          "id": "42101c64-025c-4b70-9fec-953515097d0f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e7b61c4e-c704-413a-aee1-f9d8186e5023",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 585
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "6d54e608-1c09-44b3-96a1-cb6b792c6e30",
        "cursor": {
          "ref": "7e4a2972-befb-4c65-b759-7ddc5053d772",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0b22f240-1b22-4b9a-b227-4a0764d153e7"
        },
        "item": {
          "id": "6d54e608-1c09-44b3-96a1-cb6b792c6e30",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "742cc72f-5080-44f5-b8ce-721f7d06dd08",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 553
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot destructure property 'created' of 'pm.response.json(...).proof' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'created' of 'pm.response.json(...).proof' as it is undefined.\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "67a22fdd-9643-40f2-89ad-254b7c09201a",
        "cursor": {
          "ref": "00c29487-bdbf-4795-bf5a-b727b1a7b22f",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a536a1bf-7f2d-4e76-ad8f-e49e3e335b3d"
        },
        "item": {
          "id": "67a22fdd-9643-40f2-89ad-254b7c09201a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "55651773-2ac7-45d8-9b7e-57479ae5c6b1",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "006ae655-084b-4a42-ad9a-98e75e1e2454",
        "cursor": {
          "ref": "dd690868-df15-4918-bb85-e889722d87d5",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "34aca148-8b80-41f6-9f69-8cac63c1aff1"
        },
        "item": {
          "id": "006ae655-084b-4a42-ad9a-98e75e1e2454",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "de15a60a-e774-4bcf-8c38-14814ba55131",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "006ae655-084b-4a42-ad9a-98e75e1e2454",
        "cursor": {
          "ref": "dd690868-df15-4918-bb85-e889722d87d5",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "34aca148-8b80-41f6-9f69-8cac63c1aff1"
        },
        "item": {
          "id": "006ae655-084b-4a42-ad9a-98e75e1e2454",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "de15a60a-e774-4bcf-8c38-14814ba55131",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "ce4b1b51-554b-4fcf-b5e9-2f4dbea30fb4",
        "cursor": {
          "ref": "fec5c0dc-f547-45ac-9228-99d60b9841d4",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "06f2ddea-b3f4-495f-b6f8-4e0b6e5b71ec"
        },
        "item": {
          "id": "ce4b1b51-554b-4fcf-b5e9-2f4dbea30fb4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "232f3d45-64f7-4596-824a-28570ed8e16a",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "e9c64900-aa70-47d3-be33-541dbc400a76",
        "cursor": {
          "ref": "c4cbb670-42b0-464d-acd7-fb2615864270",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6e47a9df-0b05-44cb-9122-ebadd75b6032"
        },
        "item": {
          "id": "e9c64900-aa70-47d3-be33-541dbc400a76",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9e88243e-608d-434b-a194-acb24372559d",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "62d1a34f-bfdf-4bc4-83c0-d1dd49d2adb6",
        "cursor": {
          "ref": "13053492-f529-4d09-b611-ce65e1d4e449",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "13c3764e-d372-4a04-9c3c-c8912b1b2477"
        },
        "item": {
          "id": "62d1a34f-bfdf-4bc4-83c0-d1dd49d2adb6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "526d1c09-fc40-4900-8f12-65503d39c449",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "e9fa28b7-e476-48e9-8761-86784932e0fe",
        "cursor": {
          "ref": "7b679d86-eb06-40d6-b891-d92f6702f455",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1e7aa153-ace5-49be-837d-bd11dd486a7d"
        },
        "item": {
          "id": "e9fa28b7-e476-48e9-8761-86784932e0fe",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "571e7b2c-1950-4ee2-a768-83d7324d148a",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "32149556-d697-4912-8745-f5c33bf1b1b3",
        "cursor": {
          "ref": "7ab08a96-d911-4873-8769-dc8fafc188fb",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9fbe9646-61c7-4c5f-ad33-b75ee4c48f5b"
        },
        "item": {
          "id": "32149556-d697-4912-8745-f5c33bf1b1b3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f06cb7c0-f2b0-417b-82e6-b68fbc005dd5",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "3e7de3bb-f59b-4725-9a78-60b09bfc56d5",
        "cursor": {
          "ref": "1e55326b-f403-40c3-aa78-b4bfc5992de5",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1c318387-4da9-45be-a70b-b8539f007e83"
        },
        "item": {
          "id": "3e7de3bb-f59b-4725-9a78-60b09bfc56d5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "067fcb0d-511e-4064-b332-9ddf289e6cb9",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "dbe1286e-4c21-47aa-a582-d122797bc499",
        "cursor": {
          "ref": "c248fab1-25db-4021-94b4-47ff7e01ac45",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c489a172-b059-4060-8e5c-913a387bd0ee"
        },
        "item": {
          "id": "dbe1286e-4c21-47aa-a582-d122797bc499",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "78a638ce-94be-4047-81c0-99ba81ae985a",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "348bc9e5-32c5-40d1-bf4e-eda0a5a608f1",
        "cursor": {
          "ref": "06ae539d-e847-4882-82bc-87d5500c1ca5",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9fb1b755-754f-47eb-a7d6-b17c2e9c0453"
        },
        "item": {
          "id": "348bc9e5-32c5-40d1-bf4e-eda0a5a608f1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "30519a4a-3dd9-41a6-ae26-ee3dbdd12c76",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "c0d6ca33-41b3-4005-b181-7b5c4329d005",
        "cursor": {
          "ref": "c77f3108-2f3b-4516-b363-6d44f6ed278b",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bbad8628-7ffc-4ebf-84d2-a8503942ab39"
        },
        "item": {
          "id": "c0d6ca33-41b3-4005-b181-7b5c4329d005",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "57259af9-0372-4ab1-9cd7-bdfeebcdcdc7",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "c765f0dd-b301-4efe-8488-ae44244adece",
        "cursor": {
          "ref": "f01978df-ec4e-4fd0-b123-ca4115e12517",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6131c98f-821a-46ac-ba73-0ed64e0e3c8f"
        },
        "item": {
          "id": "c765f0dd-b301-4efe-8488-ae44244adece",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dd0c5395-3971-4c90-9950-66bc41f35621",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "e04d759b-0024-452b-9247-6ccf5aa9a76d",
        "cursor": {
          "ref": "1309b5fb-7bbd-4699-994d-c6b08bc0f6b6",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b2b43742-f0ec-4f0f-9aa1-04111126c617"
        },
        "item": {
          "id": "e04d759b-0024-452b-9247-6ccf5aa9a76d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5c80f067-890e-45b1-afa2-c2aa5f398f5e",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "031c1663-add4-46a9-8e99-0d5c29fe786c",
        "cursor": {
          "ref": "c115e0cc-6717-42da-9969-72fb0b18df1e",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "11d76fa9-7e2c-4c05-b934-fae77dd35ae0"
        },
        "item": {
          "id": "031c1663-add4-46a9-8e99-0d5c29fe786c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "bfd40ba9-f1c9-445e-b887-ddc1c297b51a",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "69bf18c5-7f4e-40a2-8b78-188a32321928",
        "cursor": {
          "ref": "400358d0-6363-4349-8dd6-def8a7ff6a56",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "edcde85c-b723-4c78-91df-1831c315daa2"
        },
        "item": {
          "id": "69bf18c5-7f4e-40a2-8b78-188a32321928",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "661bf7db-4216-4074-b561-abaf0480333c",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "7182e985-37f4-42d2-95c6-ce72725ef24e",
        "cursor": {
          "ref": "71ab3620-42ec-436c-a7ee-ef583379d4ca",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "db75bb8b-9666-47a0-93bf-6335bc744d1c"
        },
        "item": {
          "id": "7182e985-37f4-42d2-95c6-ce72725ef24e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "69bc1f73-59fb-460f-a87a-1801f0da7195",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "1f2693ba-0740-4236-9f7c-12bbdeb218e6",
        "cursor": {
          "ref": "55d7c30d-488e-4042-b718-1e16822ac202",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "70f1e0f7-b3eb-48c7-b973-c607281b98c5"
        },
        "item": {
          "id": "1f2693ba-0740-4236-9f7c-12bbdeb218e6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7a601cd0-0747-4483-bc37-6da87445ff42",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "f668aedc-5743-4cc0-8adb-ac47dfb31177",
        "cursor": {
          "ref": "8035432d-9a68-4ab6-85f0-6922c2ccab10",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5714af2c-bab6-4845-93b2-5bf36da304a3"
        },
        "item": {
          "id": "f668aedc-5743-4cc0-8adb-ac47dfb31177",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5ff59160-a90b-4036-b72f-3dab07c20afd",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "2a4c3205-c1f1-436e-90e7-c9f3d55a90d3",
        "cursor": {
          "ref": "4cf9a447-0009-4c07-a7bd-ffaf4b70c1cd",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3bc0e971-305c-4003-949c-5c01506742cd"
        },
        "item": {
          "id": "2a4c3205-c1f1-436e-90e7-c9f3d55a90d3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bb4cb2e4-eff5-4d7f-9db2-20f8a315eb2c",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "9e50b4ef-ba62-4774-862d-3bfd20007b1f",
        "cursor": {
          "ref": "bb99f1bd-3795-4771-aa95-2c71633e3350",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8f89bfc5-9a7b-4158-8413-a6de56a931d0"
        },
        "item": {
          "id": "9e50b4ef-ba62-4774-862d-3bfd20007b1f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d7272aca-8061-4b2c-a16b-0713d3331966",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "e346b554-f1a7-4dc7-83a3-4779ad456526",
        "cursor": {
          "ref": "315b050c-3e13-4635-adb7-097152fdecc1",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3cd081c3-a582-4e3f-a8d5-582cc9129171"
        },
        "item": {
          "id": "e346b554-f1a7-4dc7-83a3-4779ad456526",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7ff47114-f005-4665-af97-4dce7d5f7cc5",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "2d044966-e5f5-4cf7-91a3-c32374c94489",
        "cursor": {
          "ref": "9897f1a6-caf6-44d9-abca-9342f5ec347a",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2eb97360-6864-4411-baf6-44a081d54d72"
        },
        "item": {
          "id": "2d044966-e5f5-4cf7-91a3-c32374c94489",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4698b736-e306-4b22-98e2-f4cd69c44d63",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "57c7aabc-a252-4c66-8a27-06ae45e966d8",
        "cursor": {
          "ref": "880a449a-d037-491d-b923-8d0399726fc5",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "522d8db4-3ddf-4759-a6c2-1ecfa548ce5a"
        },
        "item": {
          "id": "57c7aabc-a252-4c66-8a27-06ae45e966d8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bdb1506c-f006-4fb5-b6c0-4ad0f3fdefa3",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "444ae49c-959b-4349-8787-36a91aaf1ffa",
        "cursor": {
          "ref": "a1074edb-407b-4c44-b5ae-8245780de85e",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f0e6139e-d791-4475-ab9f-546d28305f1d"
        },
        "item": {
          "id": "444ae49c-959b-4349-8787-36a91aaf1ffa",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "01ffa148-5d46-423f-adae-03990f754c8e",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "b2162a59-6a3e-4018-ba17-4d2665faa447",
        "cursor": {
          "ref": "b4a0f53f-0d22-44ba-bb82-5a7ddfff9ea4",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d5e49f69-e567-4ae6-a9fe-bac1f8b72fe1"
        },
        "item": {
          "id": "b2162a59-6a3e-4018-ba17-4d2665faa447",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "03350e1e-14d1-4e93-9e48-5b7c9e8b1f3b",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "1a592a01-6352-406d-94f7-b1b9814b77cf",
        "cursor": {
          "ref": "97a78757-944b-4342-b4d2-528db6ab1fb7",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6a1fb2eb-cabc-4ed3-a873-774d7d6f26f7"
        },
        "item": {
          "id": "1a592a01-6352-406d-94f7-b1b9814b77cf",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "64ca44af-3736-43f2-bf71-6b68e180ee0f",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "4c59ef26-79e7-4b77-a137-5bb1d960f963",
        "cursor": {
          "ref": "09058049-7f9f-4130-9cee-3a8cc676c769",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e3b33fec-1620-4010-a13d-60ff41a7244c"
        },
        "item": {
          "id": "4c59ef26-79e7-4b77-a137-5bb1d960f963",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1989642d-6d74-44d3-9343-5c506591966d",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "9ba9b5f9-f81a-48e0-a5ba-e6abe3bbf433",
        "cursor": {
          "ref": "007d6274-00af-4f9c-9238-c35b53004804",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "bccc8ee7-93da-4676-a32e-0a57367c8ccf"
        },
        "item": {
          "id": "9ba9b5f9-f81a-48e0-a5ba-e6abe3bbf433",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0e75fb7e-07c9-42b4-9e1b-ee8871db970a",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "ac7e7aa8-eff0-4141-873b-fe5452923e99",
        "cursor": {
          "ref": "7ee6047d-3528-436b-9e9b-750b7de7c51e",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b8574dfc-31c0-4997-8165-9f4cedad7051"
        },
        "item": {
          "id": "ac7e7aa8-eff0-4141-873b-fe5452923e99",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f8be524d-9928-4071-88e9-91fb2e0a9699",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "956d2387-12ce-4dc6-a56b-5f240a407416",
        "cursor": {
          "ref": "54e96601-d75d-4f5c-8891-87e826b57fde",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "58a11cab-c110-4656-a89f-0960fb2c25ef"
        },
        "item": {
          "id": "956d2387-12ce-4dc6-a56b-5f240a407416",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4d5a0eea-f0ce-4e6b-b23d-c6b2b8b7f03e",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "d981cb19-9df4-4594-a425-38ea4b5a8139",
        "cursor": {
          "ref": "5353cb5d-4a05-4456-8254-21e4b95eeeae",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e73cf7b6-4723-47c0-98bd-56bf576098ed"
        },
        "item": {
          "id": "d981cb19-9df4-4594-a425-38ea4b5a8139",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "49b2b6c6-4379-4ab3-bd5e-990dde6b872c",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "618889a7-2daf-4bb8-b242-9dc23bbd9d70",
        "cursor": {
          "ref": "e714662c-5b19-479d-a49d-5d7c451fe950",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "71b6a788-a92c-400f-a512-dcce77e742ca"
        },
        "item": {
          "id": "618889a7-2daf-4bb8-b242-9dc23bbd9d70",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3c2e8ffb-8eee-417b-874d-3e6d571a4884",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7cb85faf-5603-412a-a5fc-6fab7a7d4732",
        "cursor": {
          "ref": "f28960e6-4672-4821-bd42-810186eeb1f6",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5e3eb1f9-0258-48a5-928b-3adb1fa33e51"
        },
        "item": {
          "id": "7cb85faf-5603-412a-a5fc-6fab7a7d4732",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9e53cb0f-e82b-44f3-9beb-165a2b0c2949",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "de7d197f-c566-4f55-9580-6aa7a5b749ce",
        "cursor": {
          "ref": "b7b7be4a-ca1b-44d8-91b6-f579c0de6224",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "be385579-f7fe-418e-a62a-c7894d78b156"
        },
        "item": {
          "id": "de7d197f-c566-4f55-9580-6aa7a5b749ce",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2db9f41a-c39e-4bf3-a807-a5c4e084aab7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff9f4f35-eb44-42b7-a3b9-4bcc229ab1ec",
        "cursor": {
          "ref": "1080030f-e5ed-4834-8df8-aaf4d873126e",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a611b487-e691-48bd-9b8c-986434e90a86"
        },
        "item": {
          "id": "ff9f4f35-eb44-42b7-a3b9-4bcc229ab1ec",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f6e95eda-e6bc-49b4-9a7d-6835062df70d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc48e365-4220-4a25-85c1-dfa9379f018e",
        "cursor": {
          "ref": "837f79aa-df70-4557-8b38-49afd3077da4",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d2bd11e4-cd33-4b1d-bb16-c7cec475156e"
        },
        "item": {
          "id": "cc48e365-4220-4a25-85c1-dfa9379f018e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f27879c4-d7ba-42f8-a686-e025e3c2aa96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc48e365-4220-4a25-85c1-dfa9379f018e",
        "cursor": {
          "ref": "837f79aa-df70-4557-8b38-49afd3077da4",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d2bd11e4-cd33-4b1d-bb16-c7cec475156e"
        },
        "item": {
          "id": "cc48e365-4220-4a25-85c1-dfa9379f018e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f27879c4-d7ba-42f8-a686-e025e3c2aa96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80aaef7-170d-4510-a7fd-0c581a88f300",
        "cursor": {
          "ref": "c07485a0-1aa8-4315-8e45-621445c0bdc1",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4cd7382b-5bc0-4f45-bf65-13e278119e2f"
        },
        "item": {
          "id": "c80aaef7-170d-4510-a7fd-0c581a88f300",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bb5aafd9-3862-44ce-b49c-4664d6e9c51f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafc3af6-df0a-4f4f-8234-eed32b23c193",
        "cursor": {
          "ref": "e36fb5d8-6b0b-4312-86b3-f3bc078d5e3d",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "646bdc74-d856-4bde-a8f1-884e0096438e"
        },
        "item": {
          "id": "eafc3af6-df0a-4f4f-8234-eed32b23c193",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c863c6dc-4754-4ad3-a360-55fb2ca404d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80df209f-6838-4782-b4a5-c55831294022",
        "cursor": {
          "ref": "b575a1f3-8c32-40eb-a9d4-527edb536a43",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4b432e7c-2a4b-4735-a01d-c61918eac11a"
        },
        "item": {
          "id": "80df209f-6838-4782-b4a5-c55831294022",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3ab10c7c-b401-4d8a-bff7-ea71a62eac8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6382ec59-1c38-46d5-adb5-3b78d697c976",
        "cursor": {
          "ref": "91284717-f177-4372-a7fe-8894f45b01b0",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "73900788-ba35-4fcb-8067-57f1b68c14dd"
        },
        "item": {
          "id": "6382ec59-1c38-46d5-adb5-3b78d697c976",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "bd5257c3-58ed-4045-a5be-80bc29cdd807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc56d1a-4eae-4184-b546-4cc49b4a70aa",
        "cursor": {
          "ref": "bfd747af-3c4a-4f02-829b-86a687ad6dcf",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3171de10-a094-4e9d-bc3e-2edb7dec2127"
        },
        "item": {
          "id": "6bc56d1a-4eae-4184-b546-4cc49b4a70aa",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "30491243-b0db-488d-8dba-1e1b72ee14e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8720a4-4ab9-43b1-852a-b0460623bc08",
        "cursor": {
          "ref": "1d6a1853-9bd1-44e4-80cb-e891f314787b",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0609b28d-7254-4786-9998-859117eaddca"
        },
        "item": {
          "id": "1a8720a4-4ab9-43b1-852a-b0460623bc08",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f0aa59fe-f994-45e3-9270-ffabeabd7d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 467,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b519d78-7957-40f6-aae7-663c4e9a8521",
        "cursor": {
          "ref": "917532eb-ebb7-4f2f-afce-64ed6832fed0",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0e5ff6fa-e1ad-468b-995e-a69b9b2287b8"
        },
        "item": {
          "id": "0b519d78-7957-40f6-aae7-663c4e9a8521",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d168e913-77fd-49c1-868f-b3b523fddbc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb0249e-3b96-4da9-a7e9-de2a34a8e524",
        "cursor": {
          "ref": "3b7f2c35-c22a-41a4-ab65-44954cb6535c",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3f305e0c-3691-4479-b28c-05d10f21dc3e"
        },
        "item": {
          "id": "efb0249e-3b96-4da9-a7e9-de2a34a8e524",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fceef9e4-15e7-429c-bdbf-9c4ee6075df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da689425-489c-42b1-9848-a0c47147164a",
        "cursor": {
          "ref": "06031920-2032-4cf9-a547-2d24d2972ce7",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "228bd3dc-eb4a-49c9-83a9-d22cb59bb5e9"
        },
        "item": {
          "id": "da689425-489c-42b1-9848-a0c47147164a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f33c3346-444a-4e2f-a604-4bff11e2c705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0f5569-0e43-4a84-85c9-924a62e71fac",
        "cursor": {
          "ref": "79ff1886-9e82-4662-ad98-37db23bd64c9",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "941abe83-b401-463b-a6f9-24295c3f9cfd"
        },
        "item": {
          "id": "cd0f5569-0e43-4a84-85c9-924a62e71fac",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "15e0885b-b466-4fc9-ac3b-b1b9b706c018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "568807e2-36e8-4964-9a90-58e5acdd5b9c",
        "cursor": {
          "ref": "f70599bb-17c4-4815-aa54-c46bc21f86c3",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "462a2828-43b3-48af-864d-8fa4f9e7ff47"
        },
        "item": {
          "id": "568807e2-36e8-4964-9a90-58e5acdd5b9c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4b18eb5e-1a65-4f60-99e2-fddab204fa88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a292c27-70c9-49e1-ab40-ec5046243cca",
        "cursor": {
          "ref": "3bbadbe3-f749-4dc1-aba6-5a048cbf2261",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d7530274-0496-42f4-b13a-3db38ae52c37"
        },
        "item": {
          "id": "6a292c27-70c9-49e1-ab40-ec5046243cca",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e8341910-479f-413a-be8d-acc669e48bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769c2af3-5f3e-4990-a9ba-619c650741e0",
        "cursor": {
          "ref": "ae4377a1-99e0-4568-b71b-dba4d233f32e",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2be1ac29-d276-497e-804a-0be79ec00d30"
        },
        "item": {
          "id": "769c2af3-5f3e-4990-a9ba-619c650741e0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e9c9d782-15c1-4374-97eb-5c46b3d4cd71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b647091b-3751-498d-9264-7383dac274cb",
        "cursor": {
          "ref": "0571e098-2084-4134-8b3c-0585944f4011",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "593c6e25-69f1-4464-9508-60c2a6108e01"
        },
        "item": {
          "id": "b647091b-3751-498d-9264-7383dac274cb",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "dd8dd6ac-890e-4ac5-a37b-09a6186c24ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aef85f8-6235-4a9d-a409-23ee10bd4201",
        "cursor": {
          "ref": "a6302c20-21cb-432f-96dd-78fcdd98ca7b",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e314a6c1-df4e-45d7-b130-5e168d5540be"
        },
        "item": {
          "id": "5aef85f8-6235-4a9d-a409-23ee10bd4201",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "40d9414e-8a50-4d7b-bed7-40c20d75fc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00231269-e4d3-4d9e-a36b-b390f45ece11",
        "cursor": {
          "ref": "7f8e1841-1749-44b0-a888-a8f3fe50420e",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0d8f6244-1b0c-4766-bdaa-854400bbc972"
        },
        "item": {
          "id": "00231269-e4d3-4d9e-a36b-b390f45ece11",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7f991572-4251-4a4c-abfb-b51df1add8af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df8c380-bf1b-4473-bd82-b4213a7a8949",
        "cursor": {
          "ref": "c87cda94-12cb-4288-94e2-1e04382b2eb4",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "60a79e05-0e40-4691-9803-73b91fa15839"
        },
        "item": {
          "id": "8df8c380-bf1b-4473-bd82-b4213a7a8949",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "40c32d8a-a0ff-4dca-9b9e-4a8ea55a9fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2b62dd-e220-420f-9070-db3596d94d8b",
        "cursor": {
          "ref": "8a2e2f0c-6e86-47a0-a107-26ccb79d44b1",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "85ebad1a-d58a-4be0-8227-641da7709ec0"
        },
        "item": {
          "id": "bf2b62dd-e220-420f-9070-db3596d94d8b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0533e65b-28af-4a59-9ef1-c83673780f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb02d76-48b8-41b9-bbbd-d84987255be5",
        "cursor": {
          "ref": "7a6757d7-2482-4f56-bb1b-5866a61e2717",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ecb03702-fa06-46df-b8b2-e87fe9266296"
        },
        "item": {
          "id": "7fb02d76-48b8-41b9-bbbd-d84987255be5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6e7e4c8c-76e2-43a5-b713-171bd4aeb6c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c08fbf-9748-40c1-a60e-8417e8cc4803",
        "cursor": {
          "ref": "5a4e9024-7940-4be2-abb9-4536b6e1c5a7",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9d226c60-dd33-4086-8c75-a4daedc979e9"
        },
        "item": {
          "id": "a4c08fbf-9748-40c1-a60e-8417e8cc4803",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f20f7e4b-64ac-4799-a5cc-ce49637762ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3a6e04-c621-4f6a-bcf0-b8f4e9ca10cb",
        "cursor": {
          "ref": "e67f1a6e-c507-4053-abdd-85a7596a4404",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "103fc47f-db8c-4c42-b821-83f73a7ee4c4"
        },
        "item": {
          "id": "ad3a6e04-c621-4f6a-bcf0-b8f4e9ca10cb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d85ae69b-0ceb-4ead-bc4d-9b0de640d4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a573467b-727a-4d0d-9064-7386bf6be2d6",
        "cursor": {
          "ref": "04a0690f-db50-40f5-9215-db3f5e931969",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e82103a3-f273-4800-a246-f88086d81133"
        },
        "item": {
          "id": "a573467b-727a-4d0d-9064-7386bf6be2d6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c643f5c5-6b71-4175-84e6-604e520378c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816d2a90-8e82-4af8-8704-fd0c3e0186d4",
        "cursor": {
          "ref": "e931fde9-5283-46e7-ae7e-b56c860611f2",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "df8ac5ed-29f7-47aa-88d6-8e29cdd8713f"
        },
        "item": {
          "id": "816d2a90-8e82-4af8-8704-fd0c3e0186d4",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "84771df8-c649-4391-8f16-589f88454839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e2e76f-a2ee-4481-811b-457070c9d9b2",
        "cursor": {
          "ref": "b07ac0dc-5c10-4b87-a444-c72e0b99eb7e",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f64b163a-0f5d-4aa0-b79c-025100cc4b4b"
        },
        "item": {
          "id": "e1e2e76f-a2ee-4481-811b-457070c9d9b2",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "40357303-0905-408b-a5ac-4f8dbea4b43e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f147ff8-944c-49da-b99e-ca76abda3a1e",
        "cursor": {
          "ref": "3dee02d1-caca-4c0b-bfd6-7d3a5391d22c",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "05bc2f7d-bec1-4e35-acd6-20ddece33df0"
        },
        "item": {
          "id": "8f147ff8-944c-49da-b99e-ca76abda3a1e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "959dae6b-b985-4468-87c4-7cb9c67a7762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc95e0cb-b47a-4791-a6a8-56ecce326c6c",
        "cursor": {
          "ref": "26d7dacf-aed0-483d-bc05-5bb9794a42c5",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b71765d3-a37e-4c98-b889-a04b9dd1966a"
        },
        "item": {
          "id": "cc95e0cb-b47a-4791-a6a8-56ecce326c6c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ab95af43-3361-4ab2-969c-ce246c7dc6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b62df8d-a6ce-4e3f-be2a-35a0deb1c900",
        "cursor": {
          "ref": "7c2b0a19-718d-4acc-911e-ba5fb916c209",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "526e254d-261d-4f04-9f3a-8daa055c2916"
        },
        "item": {
          "id": "0b62df8d-a6ce-4e3f-be2a-35a0deb1c900",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "49140053-c35d-4d98-a8a0-58633866b7bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6423cf14-d9c5-49e5-872e-9ac22222cbb4",
        "cursor": {
          "ref": "fa371280-4ba7-49e8-949b-bb11b1771613",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "008588b9-1e8d-43bb-94d1-c0aecac40b48"
        },
        "item": {
          "id": "6423cf14-d9c5-49e5-872e-9ac22222cbb4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4b6affbe-03cb-42d4-84b0-e3cde5b9c683",
          "status": "OK",
          "code": 200,
          "responseTime": 235,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "7d70f219-30ef-4a89-a41c-183422d885f3",
        "cursor": {
          "ref": "b5256535-25db-4cc9-a757-5d278622db6b",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cca05dde-9dfc-40f1-8dc0-99e3cc650511"
        },
        "item": {
          "id": "7d70f219-30ef-4a89-a41c-183422d885f3",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "794dd8ed-c167-44bd-810e-16dc159aae3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3f4e81-63ba-4d72-b5a0-8d105ff05d86",
        "cursor": {
          "ref": "811d241f-a2df-4b96-9d77-ea00613c46f1",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5702a547-33b6-45bc-a2f7-5a5d8205b5a0"
        },
        "item": {
          "id": "5f3f4e81-63ba-4d72-b5a0-8d105ff05d86",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7109e7f5-671f-4793-9bef-8f6061158194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ad0dfe-2e77-4d43-9afe-1666bf52cc2d",
        "cursor": {
          "ref": "cc2e96d3-be32-462c-bf3b-ab2f0f0ed259",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "028c1bd4-1d25-482c-9a05-647aaddfaba7"
        },
        "item": {
          "id": "f3ad0dfe-2e77-4d43-9afe-1666bf52cc2d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c766cd12-5f09-4804-9be8-a3e3a23053c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c355f092-0b9a-45dc-968e-7b4c98105e51",
        "cursor": {
          "ref": "6777501e-589d-4d47-b71f-83932e0c9fb3",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "db0e85e2-ba62-4499-9946-6e1ada258df4"
        },
        "item": {
          "id": "c355f092-0b9a-45dc-968e-7b4c98105e51",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "eb06c8e9-f4c5-4a81-9ae9-9a2574d8a294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dea5d45-b0ff-4b18-9525-7685c6aeacc8",
        "cursor": {
          "ref": "049414fe-5f49-44be-b059-ccbe684b3e00",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "53a150c2-3920-4668-9e6f-4381f79cf1f6"
        },
        "item": {
          "id": "7dea5d45-b0ff-4b18-9525-7685c6aeacc8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7183289b-ccfa-4c72-8a3d-e95fa843f8b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b8e48c-e6e3-4983-99c1-814baaa11b9b",
        "cursor": {
          "ref": "231c0e48-935a-4b9c-8019-156a3d0d80ef",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9974647c-f214-42bf-995e-0da0d0b16877"
        },
        "item": {
          "id": "14b8e48c-e6e3-4983-99c1-814baaa11b9b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c2acc69a-8721-4bdd-bb82-c0402cbbd0b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee066557-5d77-4214-bf9c-0474e50d4793",
        "cursor": {
          "ref": "e361243c-75b0-4429-aca1-5a406ed5daf0",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d9d625a2-f227-41fd-b2c6-743714976cd4"
        },
        "item": {
          "id": "ee066557-5d77-4214-bf9c-0474e50d4793",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f8d9927f-84f0-4499-972f-4f350b3cc64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0810dd88-acfa-45f7-b0c6-5e5d68ecab20",
        "cursor": {
          "ref": "f91c314e-254a-4de1-9143-98bfb287a21f",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "30e84b4c-dd84-42af-9b07-ab5ce54528e4"
        },
        "item": {
          "id": "0810dd88-acfa-45f7-b0c6-5e5d68ecab20",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7d2d84e6-455f-4164-86fa-c055d200328d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e64dde2-fba4-469a-a0ba-700800c75286",
        "cursor": {
          "ref": "27ce8ab6-58ec-4503-97ea-e981fc626fd5",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a1b7f569-8470-420b-9ad2-d5546e5aab6a"
        },
        "item": {
          "id": "0e64dde2-fba4-469a-a0ba-700800c75286",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a050c8d2-8d2e-4b6c-9311-ff57949f0008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e1fcf6-f6b3-44c3-95de-8f1fa81ad54f",
        "cursor": {
          "ref": "33ac121e-c707-43f1-9e00-bd9359b861c9",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "987ef594-c694-46ae-8eaa-ea87d269389e"
        },
        "item": {
          "id": "d2e1fcf6-f6b3-44c3-95de-8f1fa81ad54f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c25cadbf-a9eb-4204-92f3-fea6d5ac1961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570ddafb-e267-41ee-a4cc-e79f86b831f7",
        "cursor": {
          "ref": "e5124724-b9bd-4dbf-9cd5-7f5fb20254f6",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f4566499-a0f1-42bb-8d39-76afb41aa80c"
        },
        "item": {
          "id": "570ddafb-e267-41ee-a4cc-e79f86b831f7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "732b9eaf-efad-4b89-b5d9-9190ca8f7a0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "effc026d-6987-4e9f-b087-c32083d1757d",
        "cursor": {
          "ref": "8a5d99eb-e331-4688-b22e-a39220f30dc1",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6256ba04-7cd5-4ab7-80c5-d85a6c093779"
        },
        "item": {
          "id": "effc026d-6987-4e9f-b087-c32083d1757d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "de48cd44-d904-49ac-8291-8df981684250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bedf2034-f26a-4e32-9062-04ba1b754eb9",
        "cursor": {
          "ref": "9fe4ee0f-be64-4816-acea-ecae66fbb91d",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "13cd91c0-b190-44db-b009-3d0dac6ecc2f"
        },
        "item": {
          "id": "bedf2034-f26a-4e32-9062-04ba1b754eb9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2b07a6ec-338e-4e1c-9e46-120862afbc72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b19c40d-486b-4c11-a24f-2340cadca646",
        "cursor": {
          "ref": "cf2d0f74-5004-4e45-a840-d4b7dd81135c",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "96cd9803-ba84-4811-9278-b1596139fd65"
        },
        "item": {
          "id": "5b19c40d-486b-4c11-a24f-2340cadca646",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4d86cf74-9f43-4b41-8157-bde38699e391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6dd94a-61d0-4850-b5f9-cd6d6ea54f48",
        "cursor": {
          "ref": "74b2d350-924c-4ba8-bcef-92a37bb60edf",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9e8b09d0-a9ba-4220-b254-63f9d719c3c5"
        },
        "item": {
          "id": "2e6dd94a-61d0-4850-b5f9-cd6d6ea54f48",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "28fdff04-0a29-48fa-96c2-66e54964f542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac716305-9486-4367-90f3-c598a312ddae",
        "cursor": {
          "ref": "5a24d3d1-137e-4f0c-aaf8-8896a059a0d8",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0dc1b286-8181-4771-a928-645b01016a7b"
        },
        "item": {
          "id": "ac716305-9486-4367-90f3-c598a312ddae",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4b3b89ef-9f5b-4491-b99e-a120f4bfaac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85717351-b060-4284-a679-bf37145b6c4e",
        "cursor": {
          "ref": "edfca070-e04c-4df5-98e2-b481386ebff9",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3e0dd956-3e1a-4717-80cf-cf32261b1d48"
        },
        "item": {
          "id": "85717351-b060-4284-a679-bf37145b6c4e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4d105278-77a0-452e-b3a2-167e9ddcd8a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a67928d-e00b-4a39-9c76-76c0270e87fb",
        "cursor": {
          "ref": "2c69aeab-7a38-4c8a-a7db-90337f8a7505",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "549f8236-b630-4695-acb5-f0fe2fb35af5"
        },
        "item": {
          "id": "2a67928d-e00b-4a39-9c76-76c0270e87fb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4e45dce4-5092-4874-97e2-bfca398b6153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f0643a-9592-4265-b219-7176f8980cd2",
        "cursor": {
          "ref": "c5281e9a-0068-4286-bc82-53134d08a23a",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1b77ed73-6ef2-411b-89cd-8303953b024f"
        },
        "item": {
          "id": "74f0643a-9592-4265-b219-7176f8980cd2",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d5aa9001-fabd-44da-9a3b-909dca4fa9df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca68eb0-45b8-4940-8214-f36cafffc69f",
        "cursor": {
          "ref": "67549b51-be26-425e-bce7-5a804557ec3f",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9ebc34a5-24cf-428f-8cb1-16bc20802b70"
        },
        "item": {
          "id": "1ca68eb0-45b8-4940-8214-f36cafffc69f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e7a5ab16-33b7-4ed4-9c7a-18979fdfae13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bfbfb65-85ef-45bd-9a1f-3dc66368c96a",
        "cursor": {
          "ref": "09b96a08-e4fe-4190-b09f-0c3bfe328249",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b260201e-39bf-4a08-97a0-a81392d9e367"
        },
        "item": {
          "id": "0bfbfb65-85ef-45bd-9a1f-3dc66368c96a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e5187bad-20ab-43b4-bb6c-f68c884d1404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9fa7720-3969-48c9-978b-6d92d4172029",
        "cursor": {
          "ref": "ff653a85-4524-4e43-a101-0f4bc05f0b4e",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e8bbb3d3-61b3-4623-96c1-78c4e984a109"
        },
        "item": {
          "id": "e9fa7720-3969-48c9-978b-6d92d4172029",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6deb346f-99e0-4d25-9e40-7da401b446f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c0c11f-53ee-4ebe-95c5-d370980077bb",
        "cursor": {
          "ref": "fdfa6aa6-9159-4bc7-8c29-6d2f1f03ce47",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8e94d8a3-e23e-49b0-ab76-8aa7c771c4aa"
        },
        "item": {
          "id": "97c0c11f-53ee-4ebe-95c5-d370980077bb",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b2f850b4-686a-4041-a40c-8221d3aef0e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b36ac0d-4978-4b0c-9e64-7aab4eacaa82",
        "cursor": {
          "ref": "866d39ae-c87c-4c33-af38-00b6985aaadc",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "84fbe458-7edc-4e03-b1c7-572ae1ae653b"
        },
        "item": {
          "id": "9b36ac0d-4978-4b0c-9e64-7aab4eacaa82",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2632a86c-c03f-48af-a83d-7b62eff8cb9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62915f93-a936-492e-9cfc-09695336dbe4",
        "cursor": {
          "ref": "203fcf34-4590-425a-89a7-1d1adb34c4d7",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "de263b9b-5e88-4a74-bebc-bcd5503764db"
        },
        "item": {
          "id": "62915f93-a936-492e-9cfc-09695336dbe4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "159f9563-84be-4322-8516-ba9e18d7c5ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a035ee07-e325-4f44-9f48-14e7baaac6d1",
        "cursor": {
          "ref": "23bceae3-ce69-4a8c-81dd-e90f645a7cb8",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "14c85a31-a471-4e4e-9921-9b079469f3f8"
        },
        "item": {
          "id": "a035ee07-e325-4f44-9f48-14e7baaac6d1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c2bc4cbc-ebc7-4006-9786-6c4bf5b62324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ee5287-2847-43d2-ad7e-c573e27d98b5",
        "cursor": {
          "ref": "7cc54981-2b46-4f49-8304-632b6f0d610e",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "56a9680c-983c-4a56-9d59-f9fa6f24d763"
        },
        "item": {
          "id": "31ee5287-2847-43d2-ad7e-c573e27d98b5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5d2ec54e-6852-4234-a5cb-abffc0bc8edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da11f71-3a74-4441-804f-8c1eebcf437e",
        "cursor": {
          "ref": "3dc49099-188b-4bcf-b8e8-de619cd0f8fa",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "96adf9d9-0e9a-41cb-9f1e-949a32425e19"
        },
        "item": {
          "id": "7da11f71-3a74-4441-804f-8c1eebcf437e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cb08cccb-750e-4e48-881f-7febc5808657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a683948-243d-44b0-a49a-4ae3633ceadf",
        "cursor": {
          "ref": "94c5b064-300e-48f0-8625-9759dcd8d356",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7e5ad95a-a715-4f7b-b09c-add28300831c"
        },
        "item": {
          "id": "1a683948-243d-44b0-a49a-4ae3633ceadf",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "db1eca58-7805-4b43-971c-42ebd61e8fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8dbc816-d39b-44f2-9703-766b3be4e139",
        "cursor": {
          "ref": "4671639f-0cf1-4a34-b736-06238ca9da82",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2ef3f540-b59c-4844-bdd2-32fd20481145"
        },
        "item": {
          "id": "e8dbc816-d39b-44f2-9703-766b3be4e139",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ab2bcdfa-6d87-4e0a-a274-3bacca538f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c704b8b-64a9-40ba-9142-d1d32799c8c2",
        "cursor": {
          "ref": "ae9f1a89-4511-412f-8f2c-3210c6b81d7b",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "078d977b-fd91-40a4-a758-2723c6e35a7a"
        },
        "item": {
          "id": "9c704b8b-64a9-40ba-9142-d1d32799c8c2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7b37c382-4088-420c-8438-2a0bd9a6ab66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd4d4c38-d5e3-4094-afcd-323e71f85091",
        "cursor": {
          "ref": "e5464255-1f42-450e-a1e2-2a5675e85456",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "428b6192-a93c-4e79-8eac-e31b6470acb8"
        },
        "item": {
          "id": "cd4d4c38-d5e3-4094-afcd-323e71f85091",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "bd88e7f6-daf4-4884-b5bd-cd3c0ba76eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011dc5fd-2459-47ac-8926-6655bd318ee5",
        "cursor": {
          "ref": "f06403fc-913c-4e26-bb11-60faf7ceb00d",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bd279d56-cfa0-44c3-94fb-482fa46f792c"
        },
        "item": {
          "id": "011dc5fd-2459-47ac-8926-6655bd318ee5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "34b2e179-0c37-41ae-9a38-ed5594ee16fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4edd5ac0-7422-4e78-bb9f-5e9657dd0d59",
        "cursor": {
          "ref": "54a83aa4-9484-4738-9bfc-8cecf083f72d",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "46ba461d-75d3-4761-a139-f852d864ce10"
        },
        "item": {
          "id": "4edd5ac0-7422-4e78-bb9f-5e9657dd0d59",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "acd8e0b7-6706-4487-bd57-2ff2869e0084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb5128f-e5b3-4cd1-abe0-436d53cc91fb",
        "cursor": {
          "ref": "82eb7a9b-e85c-42dc-b69f-9783627ba292",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "982761ac-38ee-42c4-85ff-3e5a904fd344"
        },
        "item": {
          "id": "8bb5128f-e5b3-4cd1-abe0-436d53cc91fb",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d5ceb0f2-d866-46fd-a367-610c1bea7473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e806ba4-032e-4198-8ea7-0765e2ac9a8b",
        "cursor": {
          "ref": "e043e9cc-b6e3-4a08-b2b7-3a676973da2e",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2df3440e-4a42-4156-b660-5d2afd3798a6"
        },
        "item": {
          "id": "0e806ba4-032e-4198-8ea7-0765e2ac9a8b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c06f4a2f-c1dc-421b-8868-68bff9b636e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0030981f-0892-4f44-82a3-3e376d735fa0",
        "cursor": {
          "ref": "75cfa8f7-83b6-4f35-b097-0f4dfc7f8359",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "32a731b6-e769-4b6f-88af-ba73ab91fd5e"
        },
        "item": {
          "id": "0030981f-0892-4f44-82a3-3e376d735fa0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e8c5973c-e23d-43b0-ab58-d34f7597f27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca073610-d610-4f29-9a5a-8c148c38977d",
        "cursor": {
          "ref": "3fb75521-dd2b-4d1e-b540-464cf27c1d12",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0b1f7ea1-9ac3-4ebd-843f-6fb4e76df675"
        },
        "item": {
          "id": "ca073610-d610-4f29-9a5a-8c148c38977d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b784efb7-99e0-458a-9e03-f2843ec41887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2e1813-c26a-4412-895b-7c43c0c73a17",
        "cursor": {
          "ref": "ec8b20cf-1a9a-444d-a589-71e90092d6fd",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ade6e19f-421e-4884-8deb-856af0dfd494"
        },
        "item": {
          "id": "5e2e1813-c26a-4412-895b-7c43c0c73a17",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "47f28e0f-bcdb-47df-8dfa-7acea5a95361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1529db9-6979-4738-898c-5fe617643159",
        "cursor": {
          "ref": "1fc382ac-853e-4cd2-a721-c7e6cabae678",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8ae0f73d-69a5-4141-8f69-636abb96d016"
        },
        "item": {
          "id": "e1529db9-6979-4738-898c-5fe617643159",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9a924680-418d-4c12-a662-03a8f68446bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c2e33c-fab4-4681-b52b-492c668aaaf7",
        "cursor": {
          "ref": "a7001b30-4ba3-479c-95e6-1b8bc3f2361f",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1f3231cd-b868-4387-9b30-5aa0178ed1b7"
        },
        "item": {
          "id": "93c2e33c-fab4-4681-b52b-492c668aaaf7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "32eb6cf1-7600-4d5d-b24d-dd890ee3149c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ecec23-aadf-40ba-b19b-c0fc8af3d910",
        "cursor": {
          "ref": "8542a8c5-c664-48be-ac25-b24d2e4ea92d",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "48877f42-0a10-4d63-94bc-8881315f641b"
        },
        "item": {
          "id": "a3ecec23-aadf-40ba-b19b-c0fc8af3d910",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c8b37e11-e694-4cbd-812b-c21ab1e934d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50be495-08ec-4ecc-9e13-f5f6d3924cdf",
        "cursor": {
          "ref": "e8c124df-7d64-468b-b23d-3160ab754566",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "47fef4da-43f9-41da-8d9f-92430ac5ff50"
        },
        "item": {
          "id": "c50be495-08ec-4ecc-9e13-f5f6d3924cdf",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "25bbe20c-5c9c-4d4d-99d2-40abaf9afdca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b25562-6646-44d1-9c96-36b25315495a",
        "cursor": {
          "ref": "456d3a5e-96fa-4e86-baab-71212810961b",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "63591c77-ca37-4f52-b4c7-258737158f9e"
        },
        "item": {
          "id": "14b25562-6646-44d1-9c96-36b25315495a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5589555d-ed9e-46e5-8fbb-ab76eba9423c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf211728-1f35-4d68-b03a-488dde96d21d",
        "cursor": {
          "ref": "3b562084-170a-490a-8cce-3a0175058463",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "28b7ed09-0e2d-42ee-8310-4aa7e103775b"
        },
        "item": {
          "id": "cf211728-1f35-4d68-b03a-488dde96d21d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f18dcb30-4d59-4add-b2b7-46688fb7367c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22ade24-4954-4cf0-ba16-4942aa237f7e",
        "cursor": {
          "ref": "8378b3f2-d22d-4387-a585-537647881007",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2c1e3be7-20ed-4a86-bbce-cf45eaeda2dd"
        },
        "item": {
          "id": "d22ade24-4954-4cf0-ba16-4942aa237f7e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "225d809e-6ecd-40e5-ace5-c4e9885414be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc17a7cc-0d87-423c-8ea6-3d0fa5a0e834",
        "cursor": {
          "ref": "a510e127-d818-402c-af23-b0ce40ecadc1",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "439708e4-b418-446f-8e2d-9a89ebe3c647"
        },
        "item": {
          "id": "cc17a7cc-0d87-423c-8ea6-3d0fa5a0e834",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "50b44898-e7f3-4323-aec0-da7a19ccf601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a45825fc-628f-4306-95f4-4a264cfb11e6",
        "cursor": {
          "ref": "d45788f9-668e-4505-80c1-45c0c3e81a5f",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cc0de6a9-7cf5-4921-9600-3aef720a1fc2"
        },
        "item": {
          "id": "a45825fc-628f-4306-95f4-4a264cfb11e6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c1454d86-bf68-46cc-bbe6-4b8592ab0d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea935d2-46c2-4039-b6f6-20f1e684825d",
        "cursor": {
          "ref": "81cf7eb9-907c-4689-b5b2-73ee8b07045a",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "54c04fbc-bed4-4168-bfae-02ab10bc3db4"
        },
        "item": {
          "id": "bea935d2-46c2-4039-b6f6-20f1e684825d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "dd53b464-562e-48fb-9d33-8ccdb02f0ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582ad3e9-f651-418d-ae5b-6a822410385a",
        "cursor": {
          "ref": "24cca246-ab52-4f68-b3c0-d34ae258be22",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "19bbf9ad-ef4c-4480-ad26-61398b576466"
        },
        "item": {
          "id": "582ad3e9-f651-418d-ae5b-6a822410385a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "eeb7a35b-5718-4110-9918-8d27b7efaa61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d23531-9348-4e2e-a94e-354d872874ed",
        "cursor": {
          "ref": "5a7910fc-4835-483c-b7f9-ac948811c342",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "dc01b9d7-8727-4732-84e7-781eab87958f"
        },
        "item": {
          "id": "45d23531-9348-4e2e-a94e-354d872874ed",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "10550951-3604-484a-b35f-753764efa882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891408e8-6f75-47db-9511-15ec96c8bab3",
        "cursor": {
          "ref": "c4e8be42-2324-4e79-b721-2f8371617ebb",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9b6f84e3-03b1-412a-9fb7-2acfdfb5cd6d"
        },
        "item": {
          "id": "891408e8-6f75-47db-9511-15ec96c8bab3",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4e5a65e3-4931-4722-abec-629a508812d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d8c40d-363e-44f5-8cb3-7b6e85ad55d7",
        "cursor": {
          "ref": "79d2c09b-954a-47dd-ac94-32c542cfdf69",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b0c462ba-51e4-4b97-a1ea-91a999a168a2"
        },
        "item": {
          "id": "67d8c40d-363e-44f5-8cb3-7b6e85ad55d7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3c2c2e4f-2f4c-4a85-a5b9-0b9f87ed108a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88fe8bcd-1a5e-47b4-ab63-51f16670be8e",
        "cursor": {
          "ref": "72fddcaf-1c9d-42c5-b3f5-77d9ba9ecc61",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "84f1649d-8599-4649-8300-9f454106625a"
        },
        "item": {
          "id": "88fe8bcd-1a5e-47b4-ab63-51f16670be8e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f559cd91-33c3-4d18-8498-db7908b026cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f58296e4-c4ac-40ed-b435-c698d54058ad",
        "cursor": {
          "ref": "8ec2021c-0450-4e9a-871d-cac69b83f6b6",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "327130e0-1811-4f1c-b763-35449f557c4c"
        },
        "item": {
          "id": "f58296e4-c4ac-40ed-b435-c698d54058ad",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e5013309-bfc9-4550-95b3-28c300dce3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ddbc8e5-8eb3-4cb1-b460-c5b2207e6431",
        "cursor": {
          "ref": "cb2099e3-8448-467f-8eef-6689d6a3a98d",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "06000895-e7d4-45a7-b8b2-46697711831f"
        },
        "item": {
          "id": "1ddbc8e5-8eb3-4cb1-b460-c5b2207e6431",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0a941af3-7986-4c4c-9a8e-92ded05d5ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8492b562-4c83-4377-b73a-ac6488befeec",
        "cursor": {
          "ref": "79757f69-a502-4848-bda6-f46ad1f2e3af",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3c6ffa12-a256-400a-a8e1-d15d98dfd3aa"
        },
        "item": {
          "id": "8492b562-4c83-4377-b73a-ac6488befeec",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "704a625f-7ffc-42cb-8477-ab1cead24248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff1574e9-8ef1-4f05-86f8-808938f1af26",
        "cursor": {
          "ref": "4f671f4c-dfec-4836-918f-d0495a2767dd",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "21269dc0-a5f3-4c06-8bf6-4dd003cd50ac"
        },
        "item": {
          "id": "ff1574e9-8ef1-4f05-86f8-808938f1af26",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "dca88037-9651-4b8e-a5d2-afa1091e462e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f6f18d-6f05-4f16-a44e-07e4d919875f",
        "cursor": {
          "ref": "7991382d-cf3d-42ac-bb2e-492c04c4facd",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d1aca824-be59-40a5-af11-73e34c53be95"
        },
        "item": {
          "id": "a1f6f18d-6f05-4f16-a44e-07e4d919875f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d90bb521-726d-444d-983d-7bbfd5b39e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa81711-42a3-42fd-84c5-efd200a6fd1e",
        "cursor": {
          "ref": "555a77bf-2ef9-4954-8f82-4cd51ff7bc25",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "10ddba5d-1b4b-4111-82cb-1ed777c7766d"
        },
        "item": {
          "id": "0aa81711-42a3-42fd-84c5-efd200a6fd1e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "710284b0-93e2-47e7-b0e3-1ea46a0e065b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65e8651-e7d9-43a5-81f4-127e1e61ae06",
        "cursor": {
          "ref": "c1ce375b-e526-4d8b-bbf3-1ac5c659561b",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6ecb3184-7f4c-446e-9e0f-fdb6c201100a"
        },
        "item": {
          "id": "e65e8651-e7d9-43a5-81f4-127e1e61ae06",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "93bebf03-e8c9-41af-8280-159558e22295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed36496-728c-4892-869b-36f109469706",
        "cursor": {
          "ref": "d93117ef-f627-4837-8f6b-0dfdacd86224",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "27ff7109-6860-4c5b-93e2-f2d870c80e00"
        },
        "item": {
          "id": "eed36496-728c-4892-869b-36f109469706",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6fd0c99f-d10b-446f-932c-421db076e8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f115305-1962-4ae0-a042-d63eb69aa97e",
        "cursor": {
          "ref": "390c7719-2471-49ce-a0c7-f104d6ed0909",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3e8b2bf4-03b8-4afb-840b-a679e24cea89"
        },
        "item": {
          "id": "9f115305-1962-4ae0-a042-d63eb69aa97e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d49898b1-e313-44c1-8618-93b3b2caee44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7eed4fd-468e-4699-ab11-0b12736f3582",
        "cursor": {
          "ref": "4f871926-5b91-4066-831a-494b9111ae7e",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c05037f1-1140-4898-bb71-73a5cfd0a392"
        },
        "item": {
          "id": "e7eed4fd-468e-4699-ab11-0b12736f3582",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9e93c3e3-668d-4cd3-b57c-0bb0f1d47247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61949e5f-3188-4ae5-bfc9-246880d72f7f",
        "cursor": {
          "ref": "205059b8-0e9a-4d7b-bdcb-f5e36d5a7a19",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "35813d98-0784-4a23-9961-2dc42b56817d"
        },
        "item": {
          "id": "61949e5f-3188-4ae5-bfc9-246880d72f7f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4995945f-429b-4cde-9949-2979e41fcb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9bbc98-73e6-427a-b895-de808e0f7f23",
        "cursor": {
          "ref": "077dc1af-1f37-44f7-8f29-6b55679ff19b",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "cbc01480-4459-470c-adbe-8a5c89c6e78a"
        },
        "item": {
          "id": "9e9bbc98-73e6-427a-b895-de808e0f7f23",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4f364719-a57a-42c8-9f3e-72ed1d8a7662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc4caf9-1955-41c8-a298-55d2a894052b",
        "cursor": {
          "ref": "683af7e2-c9c3-4acb-a680-5455743cbad4",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "eab29059-b813-4b7b-8333-09257b04c9fd"
        },
        "item": {
          "id": "7dc4caf9-1955-41c8-a298-55d2a894052b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7ec7738b-a98c-4c53-9f67-fef8061fec0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdbce508-2d82-47c1-8f98-987d6dd45537",
        "cursor": {
          "ref": "62845983-36a8-481a-94dd-044452ae54a0",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "41876bd1-69d8-494b-ac7a-65e71257c116"
        },
        "item": {
          "id": "cdbce508-2d82-47c1-8f98-987d6dd45537",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "aecbbc45-f145-467d-bc48-c99d234de2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3480cb8a-1bbc-416e-9ba8-d91bf358965b",
        "cursor": {
          "ref": "845093ca-c8c4-4b9b-a7a4-2772f75319ea",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "35f9ca36-86c0-46f0-88f9-1098c9f88e5e"
        },
        "item": {
          "id": "3480cb8a-1bbc-416e-9ba8-d91bf358965b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "44ae73a0-a9d3-407c-97c8-c7a088f25bd3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2003f07d-6cb4-4d28-9c6f-bcb18e15872d",
        "cursor": {
          "ref": "58b1ba14-a9a3-4c8c-93f9-c076eef1f3c3",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b3deb63a-3a89-40b2-b079-2ba37d2fb2cb"
        },
        "item": {
          "id": "2003f07d-6cb4-4d28-9c6f-bcb18e15872d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "cb4f7ab0-8f65-4a52-b2e1-e87961123564",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 70,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e75cca5-15c0-4519-a60a-dcf5b44248ba",
        "cursor": {
          "ref": "e1e29504-5b4e-432d-81c1-db6a1c2f0d50",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "aa121521-8b0c-4429-83bc-3e24a9c717c7"
        },
        "item": {
          "id": "3e75cca5-15c0-4519-a60a-dcf5b44248ba",
          "name": "credentials_verify"
        },
        "response": {
          "id": "43258391-09db-47ba-a339-39b5ca26fe95",
          "status": "OK",
          "code": 200,
          "responseTime": 558,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71183ae0-2e65-4bb0-9f9f-4f3444e684cc",
        "cursor": {
          "ref": "76f57bed-95f9-42d4-b8db-ea9ff3e51702",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f528dddd-e5d0-4f02-9264-3cf2e07ddf66"
        },
        "item": {
          "id": "71183ae0-2e65-4bb0-9f9f-4f3444e684cc",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "efcdbc0c-abfc-4670-90db-7306449754c6",
          "status": "OK",
          "code": 200,
          "responseTime": 384,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f3b8d1c-ae37-4c01-ac35-06587cbba5ec",
        "cursor": {
          "ref": "475d2274-4658-4457-9867-0f38d9f0e6d9",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2be1e05c-b862-4d71-9780-25d10ea1d98d"
        },
        "item": {
          "id": "8f3b8d1c-ae37-4c01-ac35-06587cbba5ec",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "88387740-1837-43eb-9fcb-baaada12504f",
          "status": "OK",
          "code": 200,
          "responseTime": 779,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c3ba9a-b637-4b01-98d8-be35d8e5cccd",
        "cursor": {
          "ref": "a992f269-670f-474a-8409-9e4e9077b1ee",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e09a6913-223c-47e7-8e41-29848b8156ca"
        },
        "item": {
          "id": "98c3ba9a-b637-4b01-98d8-be35d8e5cccd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "42a0e8e3-207d-4927-b80e-c703210218a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c3ba9a-b637-4b01-98d8-be35d8e5cccd",
        "cursor": {
          "ref": "a992f269-670f-474a-8409-9e4e9077b1ee",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e09a6913-223c-47e7-8e41-29848b8156ca"
        },
        "item": {
          "id": "98c3ba9a-b637-4b01-98d8-be35d8e5cccd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "42a0e8e3-207d-4927-b80e-c703210218a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c3ba9a-b637-4b01-98d8-be35d8e5cccd",
        "cursor": {
          "ref": "a992f269-670f-474a-8409-9e4e9077b1ee",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e09a6913-223c-47e7-8e41-29848b8156ca"
        },
        "item": {
          "id": "98c3ba9a-b637-4b01-98d8-be35d8e5cccd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "42a0e8e3-207d-4927-b80e-c703210218a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8f3323-e72c-4cef-9b5e-43878e0306b9",
        "cursor": {
          "ref": "fa39126b-9d14-4721-b372-50732a214ac3",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0c177003-fbc8-42fd-899a-45a03dbd406c"
        },
        "item": {
          "id": "9f8f3323-e72c-4cef-9b5e-43878e0306b9",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "64bebcd8-279e-457f-9505-3883771f1fd7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 77,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "343a5406-4995-4a8c-973e-ea38176619b9",
        "cursor": {
          "ref": "e7db0af3-a6f9-4a64-8c17-6c87c3eac76e",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "69cfe5ff-dc31-4db2-815d-e5cbeb098b3e"
        },
        "item": {
          "id": "343a5406-4995-4a8c-973e-ea38176619b9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "05d97d7d-6043-4b1d-b09a-a053e3345b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "343a5406-4995-4a8c-973e-ea38176619b9",
        "cursor": {
          "ref": "e7db0af3-a6f9-4a64-8c17-6c87c3eac76e",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "69cfe5ff-dc31-4db2-815d-e5cbeb098b3e"
        },
        "item": {
          "id": "343a5406-4995-4a8c-973e-ea38176619b9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "05d97d7d-6043-4b1d-b09a-a053e3345b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "8c0fb2a0-5978-40ae-8278-3f2d0bf22186",
        "cursor": {
          "ref": "6e4048f7-ebb7-4879-a43d-2f0cca81de8f",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b1535648-b9e6-43c6-8f56-dbca939aadac"
        },
        "item": {
          "id": "8c0fb2a0-5978-40ae-8278-3f2d0bf22186",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "255ce953-ed90-45ec-86c0-6f60086f12e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8c9af2a4-7aa9-4920-bbbe-0e4f35bc1136",
        "cursor": {
          "ref": "506b0f11-bb4b-4dbd-bfba-1fafa4bef73d",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b57f66f3-eef8-41d2-ac4b-6334377eefe0"
        },
        "item": {
          "id": "8c9af2a4-7aa9-4920-bbbe-0e4f35bc1136",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ae2aef90-4c5e-42db-afaa-34f68f094d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8c9af2a4-7aa9-4920-bbbe-0e4f35bc1136",
        "cursor": {
          "ref": "506b0f11-bb4b-4dbd-bfba-1fafa4bef73d",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b57f66f3-eef8-41d2-ac4b-6334377eefe0"
        },
        "item": {
          "id": "8c9af2a4-7aa9-4920-bbbe-0e4f35bc1136",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ae2aef90-4c5e-42db-afaa-34f68f094d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9b2e1556-d128-44ea-ab79-c0b46c347baf",
        "cursor": {
          "ref": "7b9c5e5a-2a30-4e6e-af75-85ee0e096d6b",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "21fbb69c-2e02-4c85-bc22-9fa4ebef1673"
        },
        "item": {
          "id": "9b2e1556-d128-44ea-ab79-c0b46c347baf",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "145ca111-9fe0-4454-802c-77d6cc414e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}