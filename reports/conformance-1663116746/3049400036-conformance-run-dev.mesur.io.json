{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c291052c-5b03-4cf5-a2cb-f3ce6f840f1b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "028b5b8c-3455-4119-81f4-130a5f3c49f6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3776def9-d296-453a-b4a7-d01c75fff4b4",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcad41f0-2ef0-488e-a0d5-a8f65c3e9a95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5d115ddd-bf1e-48eb-aebd-a70e7324313e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "3400d18f-50ce-4088-ab49-19014e93fc84",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8f842ace-5e56-46ea-9e96-66b33fc1721a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8a91c3ad-e079-4e3c-b97f-5540223d0785",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "85926546-87e6-4ce9-8c74-f2ed950b3db5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64fc2932-b554-4710-a842-48042e815014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e14606c-0057-450c-9e66-21b0529b0f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfa3224-9d3b-4160-aa21-4987c1a6b0af",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be62e46-929a-4ea0-aa56-f87d2a125f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6317b732-9be3-4ec5-b5f6-2a9dcec9842c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626aba8c-fbbb-40dd-a1d4-d2cb92f4c0c5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9306e513-7c35-4541-9da7-26279f29e9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31f351b7-4885-447e-bb91-070d84d5b4ab"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "56c6457a-2895-4645-ada9-1b862b692e74",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "769333c5-c6ba-4fd4-af63-72ed69c60367",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4b0170-6698-4a05-b57c-5b403a814152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1585b209-8414-4fde-b020-84eac7b03bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c692d92a-f988-4bbd-b62c-6b745ca1be89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15fdbb1e-71c4-474c-b37b-f91ad292a666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bdfe14e-a05d-4ed9-a8e0-a0378f3fc41c",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7458c3c6-6166-4e7e-8bc4-ad7c4d970d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e97b672-042f-48eb-b1c7-561ba643d0a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d314414-84e2-4fae-8320-5c905f7824e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "27573220-1e06-4567-a3d6-5ff511a669bd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "91eac859-cc68-4f4a-8d29-ad88fc0211ec",
            "name": "Positive Testing",
            "item": [
              {
                "id": "20b7aa5b-9e27-4536-80d3-137b8a6e66d9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68ea1fdb-beb6-4583-ae68-404dfcb09c27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c07344d6-5ccd-4988-9248-902a82cb7abb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f37b52f-3481-4f88-91b2-cceb47d038f3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "9048eae6-fc84-442e-b453-0ad99448f8a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc54861d-7b6d-4042-a954-086a51e9eb83",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3456ea3-b0c8-4003-83a6-8f13703f48db"
            }
          }
        ]
      },
      {
        "id": "216afc68-c467-40fa-9cba-3ec0d4e67f16",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2cf8cd51-742c-49c0-87b8-c8c670e06fa4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64b6ff8a-4a5b-486a-8572-b6caeac298de",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5e503889-723a-40bd-bec0-ac5a130ce3e6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6d5431-a691-4b3b-84ca-6a081f96391c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "575d6979-064c-4321-b28c-828d2924aa69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed326724-0465-4ed9-ad31-4d138533be1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "580fc3f7-1006-4af0-8b6b-cb42ed1f9d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee65263d-4953-49f2-a594-fc0030b6d1b9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "677dbe14-0ca6-4a68-91dd-cd6a27efa7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f259827-eff9-4a6b-9949-43a3477d7f88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685bb343-3d4d-4842-b8ed-03b4a1252c65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b4d081c-075c-4eaf-87e4-2b1a321682cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5355fb5b-c833-49f4-8c4b-394d1c736842",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a89234-b4cb-4161-bd81-46d05589aba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a44fcd7-7c7e-4d9e-90e5-c4e1c393b7d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3f9bae-4139-43a6-b5b7-63490082a4e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "719c8482-6357-4646-8452-6502c96d8e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8629794-4463-4ffa-a687-306e3ca2de7c",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1ee0e6-e819-4923-a477-7a84acce78d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08119a0-8d3d-4154-9c29-9fbaa61d04eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ffd7d33-7065-426e-b814-588f3df4b73b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee5f89e4-ceea-4ecd-a89c-ad40b418608d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0534f28d-23ea-461b-8674-35d2ae67a7cf",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2295b76-8530-49e1-8e08-bcc91f82bc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e33f5e25-5ea4-4de7-9db0-3c41488c7327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a31032-9698-48f5-8ea4-07f7149f5d4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e9bf4d5-83be-44bb-8e1a-770481a3d4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc91ca0-7d12-4ed1-81f5-c984d1dd4fd7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60188b8-bcf1-4bec-986c-e5c211e76114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bda9e1f-9c0b-4c06-a203-c91c0801cd86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac903b5d-8293-4bc1-b75c-45b212d6dee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ee633ee-960b-43f8-9ae2-e0470f6c8942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1e0bd4-5da1-4784-a584-f438835f43e6",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef28fe1-0d8b-477b-836e-94f1ffdf7e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80cf9eda-f2d7-4581-bd77-b92ea11bbd47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736e8ccb-eab5-4f09-9789-3f657c0e3bb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b33cbf4f-2c03-441e-a446-3142870dfeb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f84d434-41f3-46a0-99a6-e53df193ed01",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb18e64-6a78-4e21-9d18-3ffe82eecd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd44d7a4-db96-4e87-b182-e71e3a3bab8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3f37a3-3b7f-4134-8796-c41901746d6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c682dad-b025-486f-bfa3-4fd235d5cf25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09a47d5-aeb7-4793-b4de-905d9e8980c8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e650ad2-2ae0-4fc6-bdb0-6ee424f45285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f112246-1381-4b17-b8d3-60e36563df08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3d33fc-9cd2-46ad-8418-954bd9803a85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "288e459c-3d7b-4003-9797-bb57c8e342f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "768f3d7d-4d40-4a8f-94ea-00f716d6d608",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e514a79b-7a55-4eac-8d7b-5a21741570ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d3ccb8b-28df-4c2e-bf8f-abf87fc2d044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68d0b09-1139-473a-9cea-ab4dde8f89fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "759583f0-c7e1-47f7-8749-64e2d4d51506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb06a70-f440-4789-8456-5e5088fef1e2",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e2d38e2-fe4b-4bd0-b446-8ac490097509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a760fc4e-5ecd-4d2c-836a-47140ad5f44a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a8d7bd-7a42-4640-a4e2-4857d90d29d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "8c4ae382-9a00-4e4b-a356-5b6c1b8a4eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836074d8-853c-4d61-9188-a976cec407fc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f215bab4-1e2a-482c-b641-1779c11bd5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1036405d-4d2a-4129-a80f-5cf67cfb0628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42476c65-200b-4b81-97de-874571684c81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "830a270a-7975-47c4-8492-cff549520463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e340e57-b532-4313-8a4d-5d1b6f265840",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc433d9-d274-4e5b-84d2-8f5ecc34dc70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "690df28f-1f51-496d-b842-cfc55ccbfa8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859a4de2-7041-4438-a0b6-50d200718620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9c779c9-cbd9-4a55-86f9-a0a2f2739760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269d18a6-6ddf-46ca-96ac-e2abfee94ee9",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ae3355-4055-4f84-8933-b6b26aa560a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "806afe0f-4e1f-4e63-b2cb-086ed2e4e852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce51b1ac-ee6a-48ff-8b58-594dec871e03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a8e1bac-7ca2-4ef6-9200-8e5017229f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76004de3-8ae2-4a5f-a492-cb35008511ec",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a8f1a5-bae7-4feb-921c-8c7b2e671b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "495f24b3-1a70-4a7d-82fe-b4eed694565e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a1f25e-5c41-427f-9689-d2266e3a7daa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "7f59c2f4-0d25-49fe-b55d-38aa6a5859c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159dd882-45f2-436a-bdf2-fccaecd3cec4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb57405-650e-4a34-97b1-6f1a4b4a0eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a66497ee-8ba9-4559-bbc7-c0a3a9bfa90e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920a53fb-0914-4405-9cd1-0632c31ad473",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "382a1555-4c76-45d0-9b1c-736c673ec2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5f8149-0ada-4967-8a32-babb28755cd3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "965b1f20-22e2-4cd7-923a-622f282381c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc1e29b-d9bd-4b70-ab98-eea20f29dfd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68723ca9-618e-4e62-916e-a01c910ea906",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76128842-2845-4f0e-9e45-220db73383a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ef6535-b0f6-4b3d-9195-dbf0210a7906",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61372dfe-f9f7-4bfe-95ae-1d5eb3ad325d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2daeb205-fc50-4404-9fce-04ee59ffc9d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1abdaf77-f4b7-42ea-9a84-3625873649d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "172d78d8-02c1-4a49-9429-f77099004876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebc9ee5-0678-4c52-8496-68a221d47145",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff8cdfb-a0be-4343-b672-1fd04de5741e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e681d6e-cc6a-463f-8588-f11cb6fa92bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2aa99a4-ddb7-4825-8047-5451d721f42d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a9238a7-be0f-4153-8ae0-2eafeb05b07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0bd68e2-d82c-4681-b528-c787ce35dcc8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ac4989-d0d6-4326-baa3-d72301fc9686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b165fc-c36c-41d0-a2ec-9e99c22680b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f19ddab6-a87c-4ab9-b4d4-4817155a166b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e0fe642-0bf8-4e90-9db7-2e2fc0e7f04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b5fce3-0c67-43c2-8355-74163f189ee7",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aadde4cf-8815-40a5-9a2e-85d911a6eb9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d413be-8174-4add-b0c6-0a37c4fe5de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e93b1b-b874-4ac6-ad28-851d398a3715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "930a2130-6629-492b-b10f-65fdf96ec22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be549f2d-d9ec-4413-88e2-fbbc02a753c8",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003700a1-050a-4281-b549-d3f4f65f1a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2972e20a-281f-4732-9141-96c5b3147490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890b8a9a-6d1e-4a62-8d88-948874a884e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2aa2801-f346-4b47-98b7-ab3bc1f85dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f070a273-5edb-4288-ad68-eb5f7a4d9d1d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f48ce97-ca57-4434-8516-2ca3d931a9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e4ad718-7b6c-4fb4-a0ad-d314ec7466bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc6e6ac-2e42-483d-b3b1-38b9eadd3eaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "347ead78-b0fd-4994-9625-b89d82197cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832a067a-ac50-49f7-b13b-3cf5ed984664",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a8675b-8dd4-4078-a390-0da62222b03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6b78c1-3100-4bb4-995e-28a97fcacfba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9809e746-9ecf-407e-9428-d0e50f6ad993",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84285b06-6f2f-41bc-8957-abb22d001e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb96e35-aa6d-479c-9374-d34f71e369ce",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "454da7ad-0147-48cc-8afd-c946dfb2ab4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "219d6096-1f66-424b-ac1d-c0da44754b78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083e6cb1-9f8f-4666-bd50-f1ff4527e3e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "495521ce-e08b-449b-af24-6678ab563d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69eec586-0b4e-421e-874a-b486da0fc175",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20105dc8-25ff-4cc5-90ac-19fd08e1cccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5044183a-95d3-4e5c-9d48-dc5675c0f541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34445b19-6992-48e0-a81e-69c612dab1d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9fb0d79-3ee2-4556-99b1-184c6fe9aaa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3224cdd2-1eab-4e92-9341-bbff80306989",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9104fb33-e484-4fff-b99e-16d2256a014b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8901d7fa-a190-4958-95ff-b810f785cd75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71256878-6333-4f4e-b42a-052cd0d6a388",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19a5727d-2f1f-4f84-9dff-1fff51cbf620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96644c8d-5770-485a-a0c7-038cbef6c266",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264b4576-cd43-48a5-9f70-1284cce037e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff5577e6-e0c7-4ec6-ace5-b0cd2cd5e26f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bb2d1a-e9e5-46a2-a725-b66c849f1400",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d68d5326-e827-4d45-a638-d1daa5afdcd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d2b0af-ea74-4d70-b1b5-41c82d241679",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74fb5922-9a17-4779-adc7-010928dae654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6853ad77-5904-404c-ac30-b68633653d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3880d37-7fd3-4e14-b9ad-45bb3d831b1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7fa6a86-d44c-4cdd-aec1-80228484dafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bcf80f0-c13b-4368-bd73-ded4a354e4ff",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14641ea3-c2f3-4765-935f-dbe2e370699b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5c4052-b710-4d0d-a0f6-91ccb1dd7538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8804ff-01cc-4266-916d-900aacdeb4cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54080a3d-d951-4e80-9ad2-18a05698499f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9425567a-3cd4-4f76-987a-8ade30b39331",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c27cc0-043a-4e0a-b715-22f650b3e863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6c9b8a80-08c0-4403-82d1-83ebe849ddd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8627fd25-33b0-4a8c-85e2-27cedd82a828",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ae8f46a-4e4c-425f-9f33-7f62093a0f88"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3edd4f68-799f-4589-8c7e-423d79d0520e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5cd32a29-7123-4527-b1f0-2772186680b7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d6d5e8-89fc-4172-884f-8bb00b679b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0c07e19-d8ad-48ad-8c33-9c826a16e92b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea40ad57-6363-4a1f-a72d-91525688b56a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "59bdb209-5d5c-46b7-825c-0efdaf0cbf9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85aef680-69c2-413a-b6e6-60d2029de5eb",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30af263-2e3c-4a88-a7d7-39b4e0688477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24f46e10-3085-4e6b-a2c6-b1d5bca31db5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b01f7e-2957-492b-b3e5-fb3a3513b8fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "de7bc971-ffc6-4dfd-a053-50e731c491bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96231398-1bd2-45c8-b0b4-e7b82d8b71a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c4d0eec-47a7-4f33-9f77-b94aaf82782d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a74abf30-3a46-4dc4-a756-949a1b977ff1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04dcb568-227a-44c0-b705-0c184d861271"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "78d1890f-49dd-4d8f-be2d-b8d99fbd9b70",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "39dbd1a6-3348-48bf-aed1-994f310a83ed"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "936c793b-0c9d-491a-84fa-cfe85a06b0bb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "47f43810-fb3c-4385-883f-7a10d983bedb"
                }
              }
            ]
          },
          {
            "id": "0bd75de7-6009-471e-bc34-2e1aea292789",
            "name": "Positive Testing",
            "item": [
              {
                "id": "43e96b4d-eef4-48f9-a872-b2261cfb5106",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "488ab643-b1b6-4c3f-b9f8-0cce16ffcbf9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30e977e2-1f5b-47a6-ba8b-eec31a9c6d62"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "709dd97d-1ab2-49c0-a39c-aece548a2588",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f30c5d6a-cbc7-4169-affd-5298619d7fb7"
                    }
                  }
                ]
              },
              {
                "id": "246d245a-69fc-4f0d-a7f6-4f269e930196",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9950149c-9a4c-4b7c-84a7-08b8c1a81886",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "28e61cca-0ae0-4313-95e8-7abbb03ef226"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8fd9862-e3ca-4268-99a6-552bbfdf9942",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b05203a9-5495-492a-a123-840c3026db1a"
                    }
                  }
                ]
              },
              {
                "id": "5badddf5-2ae8-455a-bde3-d4521f826463",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f72b838-6048-4581-8b19-30f943ac1105",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16e66958-4fdb-4ae8-852d-e5eb1bace8bf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ee96fce-fb41-4452-89e7-c1b85ae1ca3b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "64f1705b-b836-4240-b373-089454e9a7c8"
                    }
                  }
                ]
              },
              {
                "id": "db5ec600-597a-416c-a92c-db919e3a859f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0974bbc-ea6b-4fb9-997c-253249c7f813",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "347d09c6-3d5a-4891-bd18-7d9892df8fb4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5fce1b6-145d-461f-b05e-85c3c85085d5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "294c4afd-235d-4593-afe7-dbe15c6382ad"
                    }
                  }
                ]
              },
              {
                "id": "96630b53-d2ae-4d7d-ad78-b3dff1c62a21",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "808c7d81-2118-43da-8900-237a90e99f72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98fda79c-7a78-4b3e-ae96-ad83c528195f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "763447c0-7dd8-40b5-a548-7777bab83f28",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c4d50eba-86cf-4161-a729-8608119b87fe"
                    }
                  }
                ]
              },
              {
                "id": "6e35f712-db05-4a75-b98a-d355450094d4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f22a673-6388-4931-82e3-51fc07b57544",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7fcb307-0ac4-4a61-9d06-faa1f041fc88"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87ee4a53-e2e7-4188-87fd-8384f86feaab",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e4c5f1d6-ff3d-4998-83b3-a6dffe7ef272"
                    }
                  }
                ]
              },
              {
                "id": "c0df7ab0-74c2-4f0a-b2b5-9f8b2d0ca092",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5803efdd-166f-44b6-a9b1-142ad6f08565",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "67e0af04-d7b9-4024-a20c-e8572bbc06a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27ec2881-262d-4dd3-829d-9c8d841a6cb8",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5d6a4ac1-babf-4985-80ec-a5d18b7b60e6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "58254072-5b00-42ab-9a8a-9b8ddeddc738",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca5ad4a5-87af-4f95-b7da-54ec4594f14e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b633fce1-08aa-4cb3-9427-0ad2638f1d55",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fd6b8333-8186-40a2-8346-81c5763c64ff"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a60ba9c6-17b7-4e0f-b455-3abef8cdd982",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "82b0375c-792a-49bf-9a3c-6f6c89ef953b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8f1c58e-d994-47c0-b5ce-2e1db8d5b181",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e83fb73a-f11f-40c7-be5d-b58afa09889c"
            }
          }
        ]
      },
      {
        "id": "e4da94c8-1401-4b58-aec3-16cada9dc332",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fe79909c-4c0e-4058-bffd-93ecc954124a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "55ebb66d-42c1-41d4-80ec-54e93ae10a5a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "768ec8ad-fa8d-4553-b20f-0339041650dd",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be0a394-dedf-4903-b73f-21b7f7145a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18575687-bd91-47dc-b4b5-884f597c266f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6a1362-11a0-4331-93d5-d1c6616970da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "261b6101-246d-4791-9d2a-a9e50a859bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867a5c19-e6dd-424d-9313-5fb1ba3edac5",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3885df-7576-49c0-bbde-539902f62e2e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "aa2bea2b-dd11-4318-a163-426ed46df54e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5525c9a0-58a1-4f3f-a747-19078f0a3145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af0de771-df51-4c1e-bb1d-2f8af55c1c28"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0bf0bb8-50c0-4f74-abc6-e99476a91ea4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aecbfd88-bf4a-4374-b047-bef5f1009925"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3854bc7e-1600-4500-92da-c231650673e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd10084a-4424-42f6-809b-85cb0288761f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bfebba8f-901a-47bf-9f58-ef3915169d7e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "00244ca8-8695-45fe-95cb-27ad48695359"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0355a84-f3fb-41ae-87e4-4cdf539bca4d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab57bb98-4f19-44c2-a929-81369099896f"
            }
          }
        ]
      },
      {
        "id": "c9959256-6fdc-4dbf-a7dd-5623dab4392b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c9e505d5-0953-408c-82a8-2355c3ef033e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "72f2dfb6-64ed-45ea-bcc2-8d4dd602cd7a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "41d214e3-8a87-4acb-8035-2a09914966c3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910b376a-cfad-43b7-8968-e8a763269e20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28d4785b-7e88-41d3-80b9-240435c78fd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "822dcc69-e471-44ff-bd3e-20a9c097ae20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d7c991b-8ef8-49e6-8b2b-0b25f25121f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623795a7-9411-4c45-bc30-c9984558de15",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4968453b-c8db-4e13-a143-430b83ade5f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abfed048-f215-4a7b-94c2-9ffe1b80764a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9ba5ff-7c78-4d9e-ac5b-acd68045b670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9642263f-3329-4a64-b829-428e2cc42584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f2d9ee-aec4-46d3-8ffe-15701a6b1659",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a840a94-5e74-4114-9312-52f057e52221",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "206db92b-a36c-4e0d-90c6-4b812d776f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbafc59-df0a-4567-926a-2953b5460e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc11e0a5-af0e-4a29-b0de-31be35880737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d688a544-cbf6-4c9e-b946-6ea20c152da1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbfeb0f2-b607-4e1a-8925-f7b539899ddc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66c45c26-b598-4bd6-92e6-7c94ebad8cde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd34e80-5330-4586-8fd9-3b8026365f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b00bc7e-fb3b-45c1-8fa8-dbea63456677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8f63ee-559a-4b59-ba6a-a69d16a9b226",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d88a1e8-7fa7-408f-a1ea-115267228ebf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c01fc58-80fd-4a6a-884e-346d64882d7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4567b0-44a1-4806-ba74-c26d4d20d4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fee4034f-9776-423c-a7b1-63b54ef678ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873f04ba-dc37-4ad8-a6b7-98873593bfc8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a897f4a-3689-4f1c-a2a6-e3f58b09bb0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5364ae8-3f7c-4133-96a9-5f4ead9eac75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76101558-57a6-462d-b8cf-43f96e3e2b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc30a9db-f7b5-4b36-8916-3c6713b41745"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "07468d78-9790-4a88-af65-d893d86dae92",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6e770551-a187-49a2-bd4a-38685f0471d0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f8a69c-51fd-43a7-8a72-cb1f88f9f59e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "8a5b0f57-b0d5-4b97-a2b4-72c9abf46b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa7d8cd-03b3-4e35-8322-1d6b48001e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d1b89e0-1505-43da-a0bb-fb2c47d5fd44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9305c461-81c0-4c14-994b-3cb1ed4e642d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad4bccd-ecfb-4c6c-b90e-004bbf0af257",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "0e7dcb7e-5f66-4267-91a4-9fcd81489d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ea7013-ad94-438d-9729-6c9d5c127f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f2e3c03-f871-4fad-a168-8ca262916372"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa65465c-5ec3-41fe-ad48-509089f1659f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b6b85d5-1b7e-47e0-8cea-fbe7899dbadd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ebeff0ff-4e22-4854-80c7-3df60b4b34ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b7a703b-824a-4057-90e4-a1de0a701eac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1d6c7ce-081a-408e-a8f8-96d50af39ca7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8b9ceaf0-05bd-4b52-8544-4371bfb06d46"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6f28d15-3001-471a-8d18-4e920bd82edb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9707a298-ef38-4b9d-84f1-5145cef34b53"
            }
          }
        ]
      },
      {
        "id": "51dd47cb-c240-4f36-be92-6166463b073f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0597b9fe-c191-4d46-9cdf-be505690c988",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e17ad803-f834-4a30-9251-c210d0530d52",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "84c74a05-34fd-435f-a732-d34ee6a70a9f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76171fc3-9bfe-4492-a5b1-7b9f5ad6d8c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7a49bb-1bc4-4ef0-8d50-6443fe5e1fd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d886a9-35de-45a6-aebd-ce2a70c50623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15502065-00a2-4fab-8ccf-e780ef98cba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91e1abe-4084-4f4d-ad16-266f107a8d1f",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94c4caa-27e7-4aa1-a22c-1c0a1eb2f965",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0d704a16-a3a3-448a-bef6-dba7beb481f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c01da6-30dd-46e4-bdfb-9f59c54336c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92a53941-e958-4547-90ba-6e2c78581eb0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e7a319c-81d8-48d8-b440-c5a50a99529b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e9fd5ef-2d37-457e-941a-4595b7d7758e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "45e4dc7e-6bb1-4775-9118-caad9029135f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fca099f-4883-45e7-9fcd-2e14d2002976"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43818130-ae47-4db0-97a3-a846a3c6110d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "daf946a6-b05c-48d1-945e-433550f02806"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "74ede45e-04d8-41b1-8578-677e974813ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa646799-c959-4278-a7e9-5ecb74cba5b0"
            }
          }
        ]
      },
      {
        "id": "833b1de8-7115-4cbd-a68b-9c4eb667e67f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "76680c72-b22e-4616-93f3-66ad05f29eb3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eef6d278-d9f3-44d2-86ef-6c5db58bf6f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2708a5d8-d7fd-4035-9b38-ceeb4c8c61db",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42453113-baa1-40da-9ae3-517b020654db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79817e9c-447a-415c-b49c-ee13587c54d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b78d46-e085-4d9a-b655-77055350bfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41e1cac3-a0a5-4271-8f83-4ae0ac9309ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91dbd47d-5756-4b53-9afd-91b17759e0ba",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a226f07-63b7-4660-914b-c51edae0c6b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e576e3a7-7b38-4ec9-ad75-48e2450347a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c6f38f-cf29-4e4c-bca4-aac8b8deadb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00e06247-3155-4f6d-844e-0a6b1b85b4fb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71391a29-6c61-472e-b6ae-79443c5e4a76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f076ede9-94f1-48b3-9f0e-ad269440ce41"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dea0c2a4-bf3e-4d2c-ba0b-b0c9ec12f8c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73c3451b-d03f-4e8d-8a68-14324a40bc04"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d562cf5-5cba-484a-b79d-b399733f7139",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "d680cd1a-6f09-4dfd-b079-50fe816d3861"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0270587d-e7bf-4a66-940c-45a113c18879",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fef3cea9-9a78-4932-8661-92a4eb150645"
            }
          }
        ]
      },
      {
        "id": "e918f297-1be7-404b-bab4-23324c457a45",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8c425308-24c0-4afe-a022-b73b17d45917",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64855b4a-687c-41a0-957c-99ca3fac8290",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "15c8208f-9dd7-45f2-9b98-c0487378c24e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed87530f-5b21-4a0b-a8ba-cd3b53df88e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c308fca9-6e9a-425d-83d0-c6a29f233749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd19fb1-2319-4c87-99ac-c52f22558bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ffcca16-3dc2-4a14-a19d-716548a65fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b640dbdc-38cd-4470-9d9c-0a2cbd002e53",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa3830b-0bc6-45b3-ad86-77728c7d2442",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "f962fb86-ee83-4092-8210-f1b85b717826"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbdcb4a-8ab8-4ac4-897f-5bdd7ebcd90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe075651-084c-464e-9a03-c6928485a280"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56c62c43-28f7-4e1b-a7ae-0dcf01de65d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b486db3d-dcaf-4230-9cc4-962cae8616ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a54f8e4f-3b5e-4b5a-a51b-f435d461428d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a263c666-fe25-4568-8aa4-428f803f94d5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a5fb10c-8b17-493b-a3b9-97ce91433030",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "2a6d4fbe-34ca-4ea8-893b-5540cabea27e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b7e5e84-ec47-4e39-b18b-36405e9c02d1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ddfb27f6-ba61-4637-a158-26070bb4ba21"
            }
          }
        ]
      },
      {
        "id": "f76e25d0-8a91-478b-b66a-12cb16b196bf",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "9fbefcec-fe7b-4801-ba85-d83d60a9ff47",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 8
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 56.828828828828826,
      "responseMin": 11,
      "responseMax": 754,
      "responseSd": 116.23205074052967,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1663116624777,
      "completed": 1663116634859
    },
    "executions": [
      {
        "id": "3776def9-d296-453a-b4a7-d01c75fff4b4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ca09b283-6d5f-4f4e-b3a8-0553f32d348d",
          "httpRequestId": "ced2d2da-9e26-4b60-b4d8-0073f1166907"
        },
        "item": {
          "id": "3776def9-d296-453a-b4a7-d01c75fff4b4",
          "name": "did_json"
        },
        "response": {
          "id": "198e689f-008c-4d09-b5f8-46edec9d2e9f",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85926546-87e6-4ce9-8c74-f2ed950b3db5",
        "cursor": {
          "ref": "769ae0cf-7dd7-4f18-8d67-eb319ef9d029",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c90392ad-787a-4e3c-95e0-36ed8dc78e5c"
        },
        "item": {
          "id": "85926546-87e6-4ce9-8c74-f2ed950b3db5",
          "name": "did:invalid"
        },
        "response": {
          "id": "becabb42-dc00-4374-96e9-ef74ae2e0cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85926546-87e6-4ce9-8c74-f2ed950b3db5",
        "cursor": {
          "ref": "769ae0cf-7dd7-4f18-8d67-eb319ef9d029",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c90392ad-787a-4e3c-95e0-36ed8dc78e5c"
        },
        "item": {
          "id": "85926546-87e6-4ce9-8c74-f2ed950b3db5",
          "name": "did:invalid"
        },
        "response": {
          "id": "becabb42-dc00-4374-96e9-ef74ae2e0cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfa3224-9d3b-4160-aa21-4987c1a6b0af",
        "cursor": {
          "ref": "d71a9b6a-e48b-455b-9c18-f2a5d0c2c20b",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d819741d-ad45-4225-8398-7f3e5f7e91b0"
        },
        "item": {
          "id": "4cfa3224-9d3b-4160-aa21-4987c1a6b0af",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "086054a5-7e0f-4e79-ad9b-a56cce64aac8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626aba8c-fbbb-40dd-a1d4-d2cb92f4c0c5",
        "cursor": {
          "ref": "f34d883f-ed2f-4a6b-9ce1-61342a12615d",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "53dad792-3454-4502-9311-ffa774cc110d"
        },
        "item": {
          "id": "626aba8c-fbbb-40dd-a1d4-d2cb92f4c0c5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cb18cb6c-ac34-418c-9007-4770b1c6eb1e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 14,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769333c5-c6ba-4fd4-af63-72ed69c60367",
        "cursor": {
          "ref": "1ee45ef5-7d7b-4040-ac6d-c688841029c3",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "760c1636-d22c-42c8-bffe-bdee1b32e3ca"
        },
        "item": {
          "id": "769333c5-c6ba-4fd4-af63-72ed69c60367",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5aa1c28c-958c-48d1-a906-566eb71778fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bdfe14e-a05d-4ed9-a8e0-a0378f3fc41c",
        "cursor": {
          "ref": "97f063a2-7544-4e0a-8086-339e6fc4bd2e",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0caa8be1-84ed-4c29-bf55-35b5bf4acebc"
        },
        "item": {
          "id": "3bdfe14e-a05d-4ed9-a8e0-a0378f3fc41c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6ed91ef4-b003-4559-8ffc-9152d214d176",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bdfe14e-a05d-4ed9-a8e0-a0378f3fc41c",
        "cursor": {
          "ref": "97f063a2-7544-4e0a-8086-339e6fc4bd2e",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0caa8be1-84ed-4c29-bf55-35b5bf4acebc"
        },
        "item": {
          "id": "3bdfe14e-a05d-4ed9-a8e0-a0378f3fc41c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6ed91ef4-b003-4559-8ffc-9152d214d176",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b7aa5b-9e27-4536-80d3-137b8a6e66d9",
        "cursor": {
          "ref": "22be1e2f-a0cf-4ef1-9914-819c7ce1811c",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e32b6800-2ea9-4b8d-9f75-f2c20142b953"
        },
        "item": {
          "id": "20b7aa5b-9e27-4536-80d3-137b8a6e66d9",
          "name": "identifiers"
        },
        "response": {
          "id": "02daa01a-90a5-4fc1-b1b2-0d9f7e907a01",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e503889-723a-40bd-bec0-ac5a130ce3e6",
        "cursor": {
          "ref": "a45a3fe6-5f0c-40e7-83b2-50921187c1bd",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c9ff9f17-f394-4e43-8126-8ff684d49228"
        },
        "item": {
          "id": "5e503889-723a-40bd-bec0-ac5a130ce3e6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5f552ee1-0a67-49c3-bbd3-d5432063806c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e503889-723a-40bd-bec0-ac5a130ce3e6",
        "cursor": {
          "ref": "a45a3fe6-5f0c-40e7-83b2-50921187c1bd",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c9ff9f17-f394-4e43-8126-8ff684d49228"
        },
        "item": {
          "id": "5e503889-723a-40bd-bec0-ac5a130ce3e6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5f552ee1-0a67-49c3-bbd3-d5432063806c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e503889-723a-40bd-bec0-ac5a130ce3e6",
        "cursor": {
          "ref": "a45a3fe6-5f0c-40e7-83b2-50921187c1bd",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c9ff9f17-f394-4e43-8126-8ff684d49228"
        },
        "item": {
          "id": "5e503889-723a-40bd-bec0-ac5a130ce3e6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5f552ee1-0a67-49c3-bbd3-d5432063806c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee65263d-4953-49f2-a594-fc0030b6d1b9",
        "cursor": {
          "ref": "d483b211-544c-4e8b-9280-33f2c79f7c40",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "182dc84b-a00f-4ad2-bb41-0094bb113bc2"
        },
        "item": {
          "id": "ee65263d-4953-49f2-a594-fc0030b6d1b9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3a74d717-1ee4-4a1e-9874-8c9b94b314d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee65263d-4953-49f2-a594-fc0030b6d1b9",
        "cursor": {
          "ref": "d483b211-544c-4e8b-9280-33f2c79f7c40",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "182dc84b-a00f-4ad2-bb41-0094bb113bc2"
        },
        "item": {
          "id": "ee65263d-4953-49f2-a594-fc0030b6d1b9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3a74d717-1ee4-4a1e-9874-8c9b94b314d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5355fb5b-c833-49f4-8c4b-394d1c736842",
        "cursor": {
          "ref": "33ddbc7f-01e4-47fd-8ded-f790c50fa615",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bdd90c9d-4657-4a42-b333-eaad9d7c2fdf"
        },
        "item": {
          "id": "5355fb5b-c833-49f4-8c4b-394d1c736842",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "2ae5e73a-a561-401c-b626-97106227aeb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5355fb5b-c833-49f4-8c4b-394d1c736842",
        "cursor": {
          "ref": "33ddbc7f-01e4-47fd-8ded-f790c50fa615",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bdd90c9d-4657-4a42-b333-eaad9d7c2fdf"
        },
        "item": {
          "id": "5355fb5b-c833-49f4-8c4b-394d1c736842",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "2ae5e73a-a561-401c-b626-97106227aeb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8629794-4463-4ffa-a687-306e3ca2de7c",
        "cursor": {
          "ref": "85b1e123-2726-4c87-ae58-9007f6637947",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a8b249c2-7380-4249-ac70-d015988941e5"
        },
        "item": {
          "id": "d8629794-4463-4ffa-a687-306e3ca2de7c",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "7ea5d738-380b-4d3b-8bcd-08ef5c06d2e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8629794-4463-4ffa-a687-306e3ca2de7c",
        "cursor": {
          "ref": "85b1e123-2726-4c87-ae58-9007f6637947",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a8b249c2-7380-4249-ac70-d015988941e5"
        },
        "item": {
          "id": "d8629794-4463-4ffa-a687-306e3ca2de7c",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "7ea5d738-380b-4d3b-8bcd-08ef5c06d2e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0534f28d-23ea-461b-8674-35d2ae67a7cf",
        "cursor": {
          "ref": "7c5f8c59-1c03-4a1b-b3fd-b8b5aa67dd9c",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "63244928-af53-46b9-b13d-e26b70cb015f"
        },
        "item": {
          "id": "0534f28d-23ea-461b-8674-35d2ae67a7cf",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "7c2db0ab-a5fa-4544-b245-a234928dcae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0534f28d-23ea-461b-8674-35d2ae67a7cf",
        "cursor": {
          "ref": "7c5f8c59-1c03-4a1b-b3fd-b8b5aa67dd9c",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "63244928-af53-46b9-b13d-e26b70cb015f"
        },
        "item": {
          "id": "0534f28d-23ea-461b-8674-35d2ae67a7cf",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "7c2db0ab-a5fa-4544-b245-a234928dcae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc91ca0-7d12-4ed1-81f5-c984d1dd4fd7",
        "cursor": {
          "ref": "ba3e7d4a-e67f-4ff8-9416-625b68056f2a",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "98e63510-3ccc-4833-85f6-1151eacb09b8"
        },
        "item": {
          "id": "5cc91ca0-7d12-4ed1-81f5-c984d1dd4fd7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "039a0140-1dce-4a26-a2e7-c3b7edfd27d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc91ca0-7d12-4ed1-81f5-c984d1dd4fd7",
        "cursor": {
          "ref": "ba3e7d4a-e67f-4ff8-9416-625b68056f2a",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "98e63510-3ccc-4833-85f6-1151eacb09b8"
        },
        "item": {
          "id": "5cc91ca0-7d12-4ed1-81f5-c984d1dd4fd7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "039a0140-1dce-4a26-a2e7-c3b7edfd27d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a1e0bd4-5da1-4784-a584-f438835f43e6",
        "cursor": {
          "ref": "760033cd-3713-4cf9-a1e0-c4660bad38cd",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "935a7fdf-9aca-44e0-81be-506cd64b55d5"
        },
        "item": {
          "id": "5a1e0bd4-5da1-4784-a584-f438835f43e6",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "6d5a46d7-e3bf-4190-8511-ae0fe501c54d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a1e0bd4-5da1-4784-a584-f438835f43e6",
        "cursor": {
          "ref": "760033cd-3713-4cf9-a1e0-c4660bad38cd",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "935a7fdf-9aca-44e0-81be-506cd64b55d5"
        },
        "item": {
          "id": "5a1e0bd4-5da1-4784-a584-f438835f43e6",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "6d5a46d7-e3bf-4190-8511-ae0fe501c54d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f84d434-41f3-46a0-99a6-e53df193ed01",
        "cursor": {
          "ref": "08097d8b-fbd9-4f47-b632-910a868832fb",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9e03ae76-ee7f-40fb-b2ca-eb11f140d256"
        },
        "item": {
          "id": "7f84d434-41f3-46a0-99a6-e53df193ed01",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "aa1b4cfc-c241-4cc5-9a21-360c1806018f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f84d434-41f3-46a0-99a6-e53df193ed01",
        "cursor": {
          "ref": "08097d8b-fbd9-4f47-b632-910a868832fb",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9e03ae76-ee7f-40fb-b2ca-eb11f140d256"
        },
        "item": {
          "id": "7f84d434-41f3-46a0-99a6-e53df193ed01",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "aa1b4cfc-c241-4cc5-9a21-360c1806018f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09a47d5-aeb7-4793-b4de-905d9e8980c8",
        "cursor": {
          "ref": "7c1471a3-6ee8-41e9-bbc3-ef54f08025bd",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ec39e283-7059-438d-86d9-a37ad0564e52"
        },
        "item": {
          "id": "d09a47d5-aeb7-4793-b4de-905d9e8980c8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7fc46419-7063-4227-8df4-b779196c6c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09a47d5-aeb7-4793-b4de-905d9e8980c8",
        "cursor": {
          "ref": "7c1471a3-6ee8-41e9-bbc3-ef54f08025bd",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ec39e283-7059-438d-86d9-a37ad0564e52"
        },
        "item": {
          "id": "d09a47d5-aeb7-4793-b4de-905d9e8980c8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7fc46419-7063-4227-8df4-b779196c6c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768f3d7d-4d40-4a8f-94ea-00f716d6d608",
        "cursor": {
          "ref": "991917cd-9c0c-4948-b48f-46e1a6e5a6c3",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "df8a0540-1f8d-4e12-86c6-88daeb4c34cb"
        },
        "item": {
          "id": "768f3d7d-4d40-4a8f-94ea-00f716d6d608",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "3b0ff878-4a91-47d2-9545-77674e238424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768f3d7d-4d40-4a8f-94ea-00f716d6d608",
        "cursor": {
          "ref": "991917cd-9c0c-4948-b48f-46e1a6e5a6c3",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "df8a0540-1f8d-4e12-86c6-88daeb4c34cb"
        },
        "item": {
          "id": "768f3d7d-4d40-4a8f-94ea-00f716d6d608",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "3b0ff878-4a91-47d2-9545-77674e238424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb06a70-f440-4789-8456-5e5088fef1e2",
        "cursor": {
          "ref": "7396c325-65a5-4dbb-9506-6e338de5130a",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b485ddce-7b84-428b-9f0b-d04e0d97c495"
        },
        "item": {
          "id": "feb06a70-f440-4789-8456-5e5088fef1e2",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "24430230-324a-46d0-a02a-11105b5b6efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb06a70-f440-4789-8456-5e5088fef1e2",
        "cursor": {
          "ref": "7396c325-65a5-4dbb-9506-6e338de5130a",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b485ddce-7b84-428b-9f0b-d04e0d97c495"
        },
        "item": {
          "id": "feb06a70-f440-4789-8456-5e5088fef1e2",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "24430230-324a-46d0-a02a-11105b5b6efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836074d8-853c-4d61-9188-a976cec407fc",
        "cursor": {
          "ref": "0e310ac5-758a-4265-a3d1-316bd65d4190",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "aa4ae02d-b3a4-46b3-ae40-2968ccddb2f4"
        },
        "item": {
          "id": "836074d8-853c-4d61-9188-a976cec407fc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0ad0a1c4-340e-4fa5-9202-7a9921f91cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 754,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836074d8-853c-4d61-9188-a976cec407fc",
        "cursor": {
          "ref": "0e310ac5-758a-4265-a3d1-316bd65d4190",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "aa4ae02d-b3a4-46b3-ae40-2968ccddb2f4"
        },
        "item": {
          "id": "836074d8-853c-4d61-9188-a976cec407fc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0ad0a1c4-340e-4fa5-9202-7a9921f91cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 754,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e340e57-b532-4313-8a4d-5d1b6f265840",
        "cursor": {
          "ref": "03a3811a-828b-402f-98d6-24113f4a5f71",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3c655110-f7c4-4cf2-a6dd-3090a754d37f"
        },
        "item": {
          "id": "4e340e57-b532-4313-8a4d-5d1b6f265840",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1374c458-8028-4559-b3df-d2a9ee314011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e340e57-b532-4313-8a4d-5d1b6f265840",
        "cursor": {
          "ref": "03a3811a-828b-402f-98d6-24113f4a5f71",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3c655110-f7c4-4cf2-a6dd-3090a754d37f"
        },
        "item": {
          "id": "4e340e57-b532-4313-8a4d-5d1b6f265840",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1374c458-8028-4559-b3df-d2a9ee314011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269d18a6-6ddf-46ca-96ac-e2abfee94ee9",
        "cursor": {
          "ref": "cd2edfc0-63fa-4479-93f0-3e0ff468d4de",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8a1269b4-875a-4ac1-8dbf-eeb984cbfcc7"
        },
        "item": {
          "id": "269d18a6-6ddf-46ca-96ac-e2abfee94ee9",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "a1f71060-cf56-4790-80da-099ff0600361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269d18a6-6ddf-46ca-96ac-e2abfee94ee9",
        "cursor": {
          "ref": "cd2edfc0-63fa-4479-93f0-3e0ff468d4de",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8a1269b4-875a-4ac1-8dbf-eeb984cbfcc7"
        },
        "item": {
          "id": "269d18a6-6ddf-46ca-96ac-e2abfee94ee9",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "a1f71060-cf56-4790-80da-099ff0600361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76004de3-8ae2-4a5f-a492-cb35008511ec",
        "cursor": {
          "ref": "cc51cabe-66ba-4472-879d-3414e487448c",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fd80e6ac-d719-467a-90b4-12746bb784cf"
        },
        "item": {
          "id": "76004de3-8ae2-4a5f-a492-cb35008511ec",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "a3e1f919-56ba-414c-a77e-0c8304c5de16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76004de3-8ae2-4a5f-a492-cb35008511ec",
        "cursor": {
          "ref": "cc51cabe-66ba-4472-879d-3414e487448c",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fd80e6ac-d719-467a-90b4-12746bb784cf"
        },
        "item": {
          "id": "76004de3-8ae2-4a5f-a492-cb35008511ec",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "a3e1f919-56ba-414c-a77e-0c8304c5de16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159dd882-45f2-436a-bdf2-fccaecd3cec4",
        "cursor": {
          "ref": "beac4b77-9941-4b5e-9c21-a9a6ecd6f2ae",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1a46ba56-b44c-4bba-b1a4-e0f2ed45d680"
        },
        "item": {
          "id": "159dd882-45f2-436a-bdf2-fccaecd3cec4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fa53a1d8-846a-4fb4-9471-c8a0341181ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159dd882-45f2-436a-bdf2-fccaecd3cec4",
        "cursor": {
          "ref": "beac4b77-9941-4b5e-9c21-a9a6ecd6f2ae",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1a46ba56-b44c-4bba-b1a4-e0f2ed45d680"
        },
        "item": {
          "id": "159dd882-45f2-436a-bdf2-fccaecd3cec4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fa53a1d8-846a-4fb4-9471-c8a0341181ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5f8149-0ada-4967-8a32-babb28755cd3",
        "cursor": {
          "ref": "7a4e7687-3a84-4e37-ae97-548280fcd990",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "76d337a0-960e-465e-9de3-fcf6c5c1c925"
        },
        "item": {
          "id": "9c5f8149-0ada-4967-8a32-babb28755cd3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7c99a29f-2c21-4fdf-842b-1229cdb0590b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5f8149-0ada-4967-8a32-babb28755cd3",
        "cursor": {
          "ref": "7a4e7687-3a84-4e37-ae97-548280fcd990",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "76d337a0-960e-465e-9de3-fcf6c5c1c925"
        },
        "item": {
          "id": "9c5f8149-0ada-4967-8a32-babb28755cd3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7c99a29f-2c21-4fdf-842b-1229cdb0590b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ef6535-b0f6-4b3d-9195-dbf0210a7906",
        "cursor": {
          "ref": "6cd8b885-a685-43ea-add9-9ce841be7b65",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a04924ac-4128-4813-8b22-11ae0f9f8098"
        },
        "item": {
          "id": "48ef6535-b0f6-4b3d-9195-dbf0210a7906",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "8dcdb5af-b3ec-473c-9f3b-a5b3c158dcc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ef6535-b0f6-4b3d-9195-dbf0210a7906",
        "cursor": {
          "ref": "6cd8b885-a685-43ea-add9-9ce841be7b65",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a04924ac-4128-4813-8b22-11ae0f9f8098"
        },
        "item": {
          "id": "48ef6535-b0f6-4b3d-9195-dbf0210a7906",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "8dcdb5af-b3ec-473c-9f3b-a5b3c158dcc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebc9ee5-0678-4c52-8496-68a221d47145",
        "cursor": {
          "ref": "581091ed-9f42-4945-8654-57e9c2497065",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8640ad71-31a6-4299-b94f-61dc6380b1b0"
        },
        "item": {
          "id": "bebc9ee5-0678-4c52-8496-68a221d47145",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f2c0f5fa-3f62-4847-8c67-c23e888d6b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebc9ee5-0678-4c52-8496-68a221d47145",
        "cursor": {
          "ref": "581091ed-9f42-4945-8654-57e9c2497065",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8640ad71-31a6-4299-b94f-61dc6380b1b0"
        },
        "item": {
          "id": "bebc9ee5-0678-4c52-8496-68a221d47145",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f2c0f5fa-3f62-4847-8c67-c23e888d6b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0bd68e2-d82c-4681-b528-c787ce35dcc8",
        "cursor": {
          "ref": "dfda35a2-1603-4e34-8d63-d2560a2c59c2",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "552c6a0d-7035-424c-b324-cafd8ef96946"
        },
        "item": {
          "id": "f0bd68e2-d82c-4681-b528-c787ce35dcc8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5da7953e-4d41-4f77-933b-065f0011b953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0bd68e2-d82c-4681-b528-c787ce35dcc8",
        "cursor": {
          "ref": "dfda35a2-1603-4e34-8d63-d2560a2c59c2",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "552c6a0d-7035-424c-b324-cafd8ef96946"
        },
        "item": {
          "id": "f0bd68e2-d82c-4681-b528-c787ce35dcc8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5da7953e-4d41-4f77-933b-065f0011b953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b5fce3-0c67-43c2-8355-74163f189ee7",
        "cursor": {
          "ref": "3d494867-cc01-4eaf-98c8-f06534c73370",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f76c5695-d943-47e2-bbe5-7b06396e6f79"
        },
        "item": {
          "id": "40b5fce3-0c67-43c2-8355-74163f189ee7",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "e7577a1e-5d73-4ae1-ba12-7a42baa5de60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b5fce3-0c67-43c2-8355-74163f189ee7",
        "cursor": {
          "ref": "3d494867-cc01-4eaf-98c8-f06534c73370",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f76c5695-d943-47e2-bbe5-7b06396e6f79"
        },
        "item": {
          "id": "40b5fce3-0c67-43c2-8355-74163f189ee7",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "e7577a1e-5d73-4ae1-ba12-7a42baa5de60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be549f2d-d9ec-4413-88e2-fbbc02a753c8",
        "cursor": {
          "ref": "3ac49c61-5a44-4e81-8b88-54a39e244972",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9c60dbc0-6acb-4068-92b1-deafeb5d5c0b"
        },
        "item": {
          "id": "be549f2d-d9ec-4413-88e2-fbbc02a753c8",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "e1c5c558-78b7-4198-9ef5-d0d65e6fd9ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be549f2d-d9ec-4413-88e2-fbbc02a753c8",
        "cursor": {
          "ref": "3ac49c61-5a44-4e81-8b88-54a39e244972",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9c60dbc0-6acb-4068-92b1-deafeb5d5c0b"
        },
        "item": {
          "id": "be549f2d-d9ec-4413-88e2-fbbc02a753c8",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "e1c5c558-78b7-4198-9ef5-d0d65e6fd9ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f070a273-5edb-4288-ad68-eb5f7a4d9d1d",
        "cursor": {
          "ref": "75f823d6-b7b8-4498-9670-7dd5832d1ea6",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "aea72512-c664-48ed-8e2d-0360c246eddc"
        },
        "item": {
          "id": "f070a273-5edb-4288-ad68-eb5f7a4d9d1d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3b8460be-b4fc-4ab4-b1a1-0dd6fa5163bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f070a273-5edb-4288-ad68-eb5f7a4d9d1d",
        "cursor": {
          "ref": "75f823d6-b7b8-4498-9670-7dd5832d1ea6",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "aea72512-c664-48ed-8e2d-0360c246eddc"
        },
        "item": {
          "id": "f070a273-5edb-4288-ad68-eb5f7a4d9d1d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3b8460be-b4fc-4ab4-b1a1-0dd6fa5163bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832a067a-ac50-49f7-b13b-3cf5ed984664",
        "cursor": {
          "ref": "b51dda47-aa4f-480c-91ae-7736385af771",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5a367416-49d5-49b6-8109-bb52874732cc"
        },
        "item": {
          "id": "832a067a-ac50-49f7-b13b-3cf5ed984664",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "0cc413fa-2394-4954-8089-78c702209552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832a067a-ac50-49f7-b13b-3cf5ed984664",
        "cursor": {
          "ref": "b51dda47-aa4f-480c-91ae-7736385af771",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5a367416-49d5-49b6-8109-bb52874732cc"
        },
        "item": {
          "id": "832a067a-ac50-49f7-b13b-3cf5ed984664",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "0cc413fa-2394-4954-8089-78c702209552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb96e35-aa6d-479c-9374-d34f71e369ce",
        "cursor": {
          "ref": "b2caadb8-8b2d-4caa-8ca5-7b5791dd287c",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "662b5831-dbf6-47cc-a04c-0c198917578e"
        },
        "item": {
          "id": "7eb96e35-aa6d-479c-9374-d34f71e369ce",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "63bb2542-a83a-4ac9-b866-08b39dcc5d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb96e35-aa6d-479c-9374-d34f71e369ce",
        "cursor": {
          "ref": "b2caadb8-8b2d-4caa-8ca5-7b5791dd287c",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "662b5831-dbf6-47cc-a04c-0c198917578e"
        },
        "item": {
          "id": "7eb96e35-aa6d-479c-9374-d34f71e369ce",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "63bb2542-a83a-4ac9-b866-08b39dcc5d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69eec586-0b4e-421e-874a-b486da0fc175",
        "cursor": {
          "ref": "1db5db9d-b21c-424f-9619-6488d80f4bd4",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7124ec05-681e-41fe-98e5-64b0ac3ec2e5"
        },
        "item": {
          "id": "69eec586-0b4e-421e-874a-b486da0fc175",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "07da3d5a-15a9-42c5-8487-fe1ff5441f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69eec586-0b4e-421e-874a-b486da0fc175",
        "cursor": {
          "ref": "1db5db9d-b21c-424f-9619-6488d80f4bd4",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7124ec05-681e-41fe-98e5-64b0ac3ec2e5"
        },
        "item": {
          "id": "69eec586-0b4e-421e-874a-b486da0fc175",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "07da3d5a-15a9-42c5-8487-fe1ff5441f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3224cdd2-1eab-4e92-9341-bbff80306989",
        "cursor": {
          "ref": "fc04496d-f148-4a0d-aa2c-5fa583014848",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f3da2471-e85e-4358-b41b-e03aa3994643"
        },
        "item": {
          "id": "3224cdd2-1eab-4e92-9341-bbff80306989",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1a7a0ec2-5494-4925-bb42-c4ef5acb09ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 669,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3224cdd2-1eab-4e92-9341-bbff80306989",
        "cursor": {
          "ref": "fc04496d-f148-4a0d-aa2c-5fa583014848",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f3da2471-e85e-4358-b41b-e03aa3994643"
        },
        "item": {
          "id": "3224cdd2-1eab-4e92-9341-bbff80306989",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1a7a0ec2-5494-4925-bb42-c4ef5acb09ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 669,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96644c8d-5770-485a-a0c7-038cbef6c266",
        "cursor": {
          "ref": "d74ae28c-776c-4de5-8587-563e21bb6524",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0d035653-6f90-4f47-9b54-227628abcd10"
        },
        "item": {
          "id": "96644c8d-5770-485a-a0c7-038cbef6c266",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "d59db06f-b2ed-453a-b71e-080bf4bb99a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96644c8d-5770-485a-a0c7-038cbef6c266",
        "cursor": {
          "ref": "d74ae28c-776c-4de5-8587-563e21bb6524",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0d035653-6f90-4f47-9b54-227628abcd10"
        },
        "item": {
          "id": "96644c8d-5770-485a-a0c7-038cbef6c266",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "d59db06f-b2ed-453a-b71e-080bf4bb99a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d2b0af-ea74-4d70-b1b5-41c82d241679",
        "cursor": {
          "ref": "20d801bf-edbc-450a-b2ce-bb22e43cd0dc",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5287630f-9ad4-42e1-82ff-8f0f31e4b4db"
        },
        "item": {
          "id": "d6d2b0af-ea74-4d70-b1b5-41c82d241679",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "dbf62c9f-d9b2-42cc-9a01-3b5395786aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d2b0af-ea74-4d70-b1b5-41c82d241679",
        "cursor": {
          "ref": "20d801bf-edbc-450a-b2ce-bb22e43cd0dc",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5287630f-9ad4-42e1-82ff-8f0f31e4b4db"
        },
        "item": {
          "id": "d6d2b0af-ea74-4d70-b1b5-41c82d241679",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "dbf62c9f-d9b2-42cc-9a01-3b5395786aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bcf80f0-c13b-4368-bd73-ded4a354e4ff",
        "cursor": {
          "ref": "73f69fe6-1711-4c55-8251-f0071ef21ed7",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bfceb0bb-5319-47e1-847b-35d504037a9e"
        },
        "item": {
          "id": "8bcf80f0-c13b-4368-bd73-ded4a354e4ff",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "1c87c3d3-4da5-42b9-a59d-fe4f3293dada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bcf80f0-c13b-4368-bd73-ded4a354e4ff",
        "cursor": {
          "ref": "73f69fe6-1711-4c55-8251-f0071ef21ed7",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bfceb0bb-5319-47e1-847b-35d504037a9e"
        },
        "item": {
          "id": "8bcf80f0-c13b-4368-bd73-ded4a354e4ff",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "1c87c3d3-4da5-42b9-a59d-fe4f3293dada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9425567a-3cd4-4f76-987a-8ade30b39331",
        "cursor": {
          "ref": "e95046f3-7976-4d7d-a141-6e4663d9f30a",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d7343a8a-3cd8-452a-a6b8-fd3b46409e9a"
        },
        "item": {
          "id": "9425567a-3cd4-4f76-987a-8ade30b39331",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "e365bdbd-5754-48f9-9ed2-252b5003bacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9425567a-3cd4-4f76-987a-8ade30b39331",
        "cursor": {
          "ref": "e95046f3-7976-4d7d-a141-6e4663d9f30a",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d7343a8a-3cd8-452a-a6b8-fd3b46409e9a"
        },
        "item": {
          "id": "9425567a-3cd4-4f76-987a-8ade30b39331",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "e365bdbd-5754-48f9-9ed2-252b5003bacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd32a29-7123-4527-b1f0-2772186680b7",
        "cursor": {
          "ref": "a5aee74b-e647-4f52-87fc-9e0e3675abd9",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6c317552-9306-4431-b7ca-d5a7633156bc"
        },
        "item": {
          "id": "5cd32a29-7123-4527-b1f0-2772186680b7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "241d0ddf-09dd-47bf-a362-8248a581a196",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd32a29-7123-4527-b1f0-2772186680b7",
        "cursor": {
          "ref": "a5aee74b-e647-4f52-87fc-9e0e3675abd9",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6c317552-9306-4431-b7ca-d5a7633156bc"
        },
        "item": {
          "id": "5cd32a29-7123-4527-b1f0-2772186680b7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "241d0ddf-09dd-47bf-a362-8248a581a196",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85aef680-69c2-413a-b6e6-60d2029de5eb",
        "cursor": {
          "ref": "9f7cec9a-8b6a-43f1-ba24-96787f0a1ade",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9f958f7a-230e-42a1-bbe5-13e1e77fa600"
        },
        "item": {
          "id": "85aef680-69c2-413a-b6e6-60d2029de5eb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a33c2b2e-042f-4a32-9994-fef72bc4a5a1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 12,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85aef680-69c2-413a-b6e6-60d2029de5eb",
        "cursor": {
          "ref": "9f7cec9a-8b6a-43f1-ba24-96787f0a1ade",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9f958f7a-230e-42a1-bbe5-13e1e77fa600"
        },
        "item": {
          "id": "85aef680-69c2-413a-b6e6-60d2029de5eb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a33c2b2e-042f-4a32-9994-fef72bc4a5a1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 12,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e96b4d-eef4-48f9-a872-b2261cfb5106",
        "cursor": {
          "ref": "8319a732-1699-4457-8e49-7c0140a598be",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6ed7ec4d-7257-45df-99f8-5f93c96bea2a"
        },
        "item": {
          "id": "43e96b4d-eef4-48f9-a872-b2261cfb5106",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6f270fcf-4de8-41a3-b67d-0e02b3dd78d4",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e96b4d-eef4-48f9-a872-b2261cfb5106",
        "cursor": {
          "ref": "8319a732-1699-4457-8e49-7c0140a598be",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6ed7ec4d-7257-45df-99f8-5f93c96bea2a"
        },
        "item": {
          "id": "43e96b4d-eef4-48f9-a872-b2261cfb5106",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6f270fcf-4de8-41a3-b67d-0e02b3dd78d4",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "246d245a-69fc-4f0d-a7f6-4f269e930196",
        "cursor": {
          "ref": "adbc7395-cd0a-452b-98b6-077cded6b585",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3514e27b-523f-4c55-8c25-190ac510c9e0"
        },
        "item": {
          "id": "246d245a-69fc-4f0d-a7f6-4f269e930196",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "7d9b6440-721b-4c12-ac30-a43d8b1655ac",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246d245a-69fc-4f0d-a7f6-4f269e930196",
        "cursor": {
          "ref": "adbc7395-cd0a-452b-98b6-077cded6b585",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3514e27b-523f-4c55-8c25-190ac510c9e0"
        },
        "item": {
          "id": "246d245a-69fc-4f0d-a7f6-4f269e930196",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "7d9b6440-721b-4c12-ac30-a43d8b1655ac",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5badddf5-2ae8-455a-bde3-d4521f826463",
        "cursor": {
          "ref": "795d4450-5b3b-4fe2-b5b2-ee360b11685b",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cd69f0c9-eefb-4c1b-a548-f2a7a8be698a"
        },
        "item": {
          "id": "5badddf5-2ae8-455a-bde3-d4521f826463",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b54cff5a-9dbf-453a-81d0-1baf3063ce58",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5badddf5-2ae8-455a-bde3-d4521f826463",
        "cursor": {
          "ref": "795d4450-5b3b-4fe2-b5b2-ee360b11685b",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cd69f0c9-eefb-4c1b-a548-f2a7a8be698a"
        },
        "item": {
          "id": "5badddf5-2ae8-455a-bde3-d4521f826463",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b54cff5a-9dbf-453a-81d0-1baf3063ce58",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5ec600-597a-416c-a92c-db919e3a859f",
        "cursor": {
          "ref": "4f697688-149d-4737-a31c-4b3b3ca0a9e1",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fa227997-2e8d-4c10-9fc5-b903b20e1558"
        },
        "item": {
          "id": "db5ec600-597a-416c-a92c-db919e3a859f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e7f18c22-cd8a-4e78-a08c-90e49628f4ba",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5ec600-597a-416c-a92c-db919e3a859f",
        "cursor": {
          "ref": "4f697688-149d-4737-a31c-4b3b3ca0a9e1",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fa227997-2e8d-4c10-9fc5-b903b20e1558"
        },
        "item": {
          "id": "db5ec600-597a-416c-a92c-db919e3a859f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e7f18c22-cd8a-4e78-a08c-90e49628f4ba",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "96630b53-d2ae-4d7d-ad78-b3dff1c62a21",
        "cursor": {
          "ref": "fd121787-9775-4e0c-98a9-a91376ccbc84",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f10b0d7a-6c6a-40d8-b3c5-ee1c5b11c234"
        },
        "item": {
          "id": "96630b53-d2ae-4d7d-ad78-b3dff1c62a21",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "796c5ae6-59bd-4524-9a68-b8369a3867be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "96630b53-d2ae-4d7d-ad78-b3dff1c62a21",
        "cursor": {
          "ref": "fd121787-9775-4e0c-98a9-a91376ccbc84",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f10b0d7a-6c6a-40d8-b3c5-ee1c5b11c234"
        },
        "item": {
          "id": "96630b53-d2ae-4d7d-ad78-b3dff1c62a21",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "796c5ae6-59bd-4524-9a68-b8369a3867be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6e35f712-db05-4a75-b98a-d355450094d4",
        "cursor": {
          "ref": "64bb0de7-0b05-4d7b-b6e4-5af28a4e87aa",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "660125b3-48a3-4c70-a22d-e37daab43736"
        },
        "item": {
          "id": "6e35f712-db05-4a75-b98a-d355450094d4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3e2c0172-a124-431d-b87f-fb7ade1acb9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6e35f712-db05-4a75-b98a-d355450094d4",
        "cursor": {
          "ref": "64bb0de7-0b05-4d7b-b6e4-5af28a4e87aa",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "660125b3-48a3-4c70-a22d-e37daab43736"
        },
        "item": {
          "id": "6e35f712-db05-4a75-b98a-d355450094d4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3e2c0172-a124-431d-b87f-fb7ade1acb9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c0df7ab0-74c2-4f0a-b2b5-9f8b2d0ca092",
        "cursor": {
          "ref": "2e92f991-cf25-4d43-8e87-1a71c557709b",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "50ba8ec9-c22a-4d4a-915a-a9f2088ae7f9"
        },
        "item": {
          "id": "c0df7ab0-74c2-4f0a-b2b5-9f8b2d0ca092",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "e6442353-85ad-4127-919d-982e5c837581",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0df7ab0-74c2-4f0a-b2b5-9f8b2d0ca092",
        "cursor": {
          "ref": "2e92f991-cf25-4d43-8e87-1a71c557709b",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "50ba8ec9-c22a-4d4a-915a-a9f2088ae7f9"
        },
        "item": {
          "id": "c0df7ab0-74c2-4f0a-b2b5-9f8b2d0ca092",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "e6442353-85ad-4127-919d-982e5c837581",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768ec8ad-fa8d-4553-b20f-0339041650dd",
        "cursor": {
          "ref": "9397663e-6e15-4b55-b265-69354b07d605",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6e6b3154-971e-48ea-b3ad-f6d4b62ccb21"
        },
        "item": {
          "id": "768ec8ad-fa8d-4553-b20f-0339041650dd",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3a79d0b8-3385-498e-9476-e7d2bb451731",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768ec8ad-fa8d-4553-b20f-0339041650dd",
        "cursor": {
          "ref": "9397663e-6e15-4b55-b265-69354b07d605",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6e6b3154-971e-48ea-b3ad-f6d4b62ccb21"
        },
        "item": {
          "id": "768ec8ad-fa8d-4553-b20f-0339041650dd",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3a79d0b8-3385-498e-9476-e7d2bb451731",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867a5c19-e6dd-424d-9313-5fb1ba3edac5",
        "cursor": {
          "ref": "cb8f8c94-7498-4df3-8fb2-4366ddaa0ccb",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "90ac62c1-122b-4baa-a3c0-4b7a9f89bfc2"
        },
        "item": {
          "id": "867a5c19-e6dd-424d-9313-5fb1ba3edac5",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "b02d9b8c-0709-46ed-8e1a-9daa7ff38887",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 15,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d214e3-8a87-4acb-8035-2a09914966c3",
        "cursor": {
          "ref": "ea61e2e2-41a7-407f-b1a7-07b7ba27db7f",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2d53d611-358e-443f-a2ac-1853ba4a72c5"
        },
        "item": {
          "id": "41d214e3-8a87-4acb-8035-2a09914966c3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8d756ef4-9b8d-4336-9820-4fce059a7fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d214e3-8a87-4acb-8035-2a09914966c3",
        "cursor": {
          "ref": "ea61e2e2-41a7-407f-b1a7-07b7ba27db7f",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2d53d611-358e-443f-a2ac-1853ba4a72c5"
        },
        "item": {
          "id": "41d214e3-8a87-4acb-8035-2a09914966c3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8d756ef4-9b8d-4336-9820-4fce059a7fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623795a7-9411-4c45-bc30-c9984558de15",
        "cursor": {
          "ref": "8a9ab395-af54-41f0-8661-03fb2a711f27",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "846104c1-4d50-44c6-8ef0-0f2251bed159"
        },
        "item": {
          "id": "623795a7-9411-4c45-bc30-c9984558de15",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9bf46db4-3bcd-4a45-b376-25c92dc0ae65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f2d9ee-aec4-46d3-8ffe-15701a6b1659",
        "cursor": {
          "ref": "01779826-d578-44a3-b85e-94224ba3e3e9",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ddd0a064-014a-4a72-b287-ed7e038f088f"
        },
        "item": {
          "id": "c2f2d9ee-aec4-46d3-8ffe-15701a6b1659",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "64517d45-2d9c-4a47-a22d-dd0e118e5276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d688a544-cbf6-4c9e-b946-6ea20c152da1",
        "cursor": {
          "ref": "7b1b2b63-27e3-4d50-a14b-3728455db493",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "04640e64-e9ed-49e5-ab83-6b0596df11ed"
        },
        "item": {
          "id": "d688a544-cbf6-4c9e-b946-6ea20c152da1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b96c54bc-918c-47d3-ae7f-a958632ac24f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8f63ee-559a-4b59-ba6a-a69d16a9b226",
        "cursor": {
          "ref": "1ef2bfd0-abf7-4632-8d51-201daecc4972",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d2647b6a-b5cb-4727-b4c1-fa745a05e735"
        },
        "item": {
          "id": "1f8f63ee-559a-4b59-ba6a-a69d16a9b226",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "38889f03-e1f5-462d-a65b-6aa5f18140ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873f04ba-dc37-4ad8-a6b7-98873593bfc8",
        "cursor": {
          "ref": "9e540376-cd39-4165-8285-d2a6a6cf3129",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a6c4612c-6906-4754-b8d1-7d2aef4502fd"
        },
        "item": {
          "id": "873f04ba-dc37-4ad8-a6b7-98873593bfc8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "19287162-1586-4e56-9393-b3814fd442d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e770551-a187-49a2-bd4a-38685f0471d0",
        "cursor": {
          "ref": "7342c45c-c666-4ba0-9b29-00db79836cb1",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "993e81d9-e479-4a25-8f48-9a83a62ac4f7"
        },
        "item": {
          "id": "6e770551-a187-49a2-bd4a-38685f0471d0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6b66054e-29f5-4363-9085-b3fd3a0f2a86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9305c461-81c0-4c14-994b-3cb1ed4e642d",
        "cursor": {
          "ref": "dab8ab18-febf-4302-8d7f-beab882e3969",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "35e474a2-1b1a-41a0-b850-d7c02ca7920d"
        },
        "item": {
          "id": "9305c461-81c0-4c14-994b-3cb1ed4e642d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "b853e81d-dd3e-4cd4-87a4-90c45ddfb192",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 13,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c74a05-34fd-435f-a732-d34ee6a70a9f",
        "cursor": {
          "ref": "bec2063a-4df6-4329-8b51-827499f37caa",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5776750d-3094-4030-bb62-cf2337f104f3"
        },
        "item": {
          "id": "84c74a05-34fd-435f-a732-d34ee6a70a9f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "752331d7-45f0-4719-8be7-b91a52ac7679",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c74a05-34fd-435f-a732-d34ee6a70a9f",
        "cursor": {
          "ref": "bec2063a-4df6-4329-8b51-827499f37caa",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5776750d-3094-4030-bb62-cf2337f104f3"
        },
        "item": {
          "id": "84c74a05-34fd-435f-a732-d34ee6a70a9f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "752331d7-45f0-4719-8be7-b91a52ac7679",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91e1abe-4084-4f4d-ad16-266f107a8d1f",
        "cursor": {
          "ref": "ce766d5e-c20e-4b8a-9879-7acbf8f55eea",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e6d05738-9513-4c07-8f4f-0d3e5b9eed20"
        },
        "item": {
          "id": "c91e1abe-4084-4f4d-ad16-266f107a8d1f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a7ead9ad-6bcb-4aed-98c7-e09990aed5b4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 14,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2708a5d8-d7fd-4035-9b38-ceeb4c8c61db",
        "cursor": {
          "ref": "be27aa56-87d3-4722-bda2-a33b1e067694",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ca25fe43-8699-4e75-939d-465d5ee62f5f"
        },
        "item": {
          "id": "2708a5d8-d7fd-4035-9b38-ceeb4c8c61db",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0b413bad-3ed1-47ca-b02e-6d56c14b559a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "2708a5d8-d7fd-4035-9b38-ceeb4c8c61db",
        "cursor": {
          "ref": "be27aa56-87d3-4722-bda2-a33b1e067694",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ca25fe43-8699-4e75-939d-465d5ee62f5f"
        },
        "item": {
          "id": "2708a5d8-d7fd-4035-9b38-ceeb4c8c61db",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0b413bad-3ed1-47ca-b02e-6d56c14b559a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "91dbd47d-5756-4b53-9afd-91b17759e0ba",
        "cursor": {
          "ref": "dc3843c8-7081-4ad6-be62-6ce2d1ce0d82",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b67c4231-4be4-4883-a2d2-c5a698893642"
        },
        "item": {
          "id": "91dbd47d-5756-4b53-9afd-91b17759e0ba",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "1b197118-607f-4251-8d08-e03c68bd02e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "15c8208f-9dd7-45f2-9b98-c0487378c24e",
        "cursor": {
          "ref": "4b6d0a5c-07bc-43f6-8c19-523f5aa4fdd9",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "00b83d78-9340-49b3-af4d-e51de4eb5b63"
        },
        "item": {
          "id": "15c8208f-9dd7-45f2-9b98-c0487378c24e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "345059b0-f36e-443b-8cca-356d74bfc565",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c8208f-9dd7-45f2-9b98-c0487378c24e",
        "cursor": {
          "ref": "4b6d0a5c-07bc-43f6-8c19-523f5aa4fdd9",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "00b83d78-9340-49b3-af4d-e51de4eb5b63"
        },
        "item": {
          "id": "15c8208f-9dd7-45f2-9b98-c0487378c24e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "345059b0-f36e-443b-8cca-356d74bfc565",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b640dbdc-38cd-4470-9d9c-0a2cbd002e53",
        "cursor": {
          "ref": "a2dcf3f0-60a4-4c45-a0da-696841f534a8",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0c30f5b9-07e3-499a-a867-7d579d2a0c70"
        },
        "item": {
          "id": "b640dbdc-38cd-4470-9d9c-0a2cbd002e53",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "58621bcc-18d0-46e1-bd41-f0a141ddcec3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 14,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}