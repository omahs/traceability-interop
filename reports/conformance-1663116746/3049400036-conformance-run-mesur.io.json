{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "cc2ba74e-f99c-4350-ad00-ddb43c031142",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "33cb30cb-f249-416c-a700-a6a96917aafc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aa4a2843-341d-4f78-9f07-85643d030fc0",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91e67b5a-b280-4ec9-82b6-a0a325dd5af2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "78fa3835-14b5-4c5a-864f-d9248f12e2f6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "4ce2e602-016d-4c1e-b7a3-85b282d01199",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "218c22e5-9ba7-47af-8cc8-500717fac51e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0ed49196-fae6-4b24-94a8-687dfef50ef4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a772b2cf-77c1-4043-bd74-910735226867",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ea649c-3300-4d7d-911b-7e5e59556524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d74163ff-95fa-4a2e-83cd-e8aa3f980b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad617d2c-507b-464f-8069-49518994e787",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4410b4a0-18f9-4f03-9077-4c4b219e21ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d58ac684-d0f8-4432-ad2d-8cb10b66095e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35de9ce4-6d63-450e-8133-06d8de6165d6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5911611-0068-4cc9-81d8-90aa3ced1ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "165ef143-7d6b-4d35-8768-19e2bf357a69"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "511e6960-8fe5-46b4-81f4-e74795877dd2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "afe26590-9398-49f8-962e-5a798bde3030",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f747bc-1667-448c-b6e5-cf989a1393c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8afb7037-49e7-488e-86db-c8d15bdca0c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf50b9e-002e-45fa-a448-b69ff1bacbbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ac1cc3-303f-4c25-b2cd-b3dbede359d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890903d0-9787-428f-8f5e-5d7638287c22",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06503710-40aa-4ea1-89d3-c8071d42b9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66f5d6c4-8b80-4d55-8f72-a106789ba16d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ef91c1-1676-425e-adcd-79a1c7ec4545",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "0b8030eb-a380-4dbd-9508-22031e34b1f3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "860e0966-ab0b-4c87-a0ba-030ab466f2eb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cf3dcb0b-476e-4cd4-a9c9-63bba2b06df0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9b1fec4-ae87-4b5d-955f-490746b7beb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1b9a91a6-1c42-44a2-ba79-6154ac6f4021"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6199f009-1247-4797-ba38-17c08e22af5c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "884b1109-41fc-4795-8912-df2fccb9022c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "29e6213c-cf0d-4815-b262-b6b541303829",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b299d4b0-2d6d-4d36-b580-cfd653fd3736"
            }
          }
        ]
      },
      {
        "id": "a6465540-05bd-4016-b757-e6e1da451f0b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b7910c51-e52c-4d79-be9d-2c5963de7020",
            "name": "Negative Testing",
            "item": [
              {
                "id": "411b05c3-c5ac-49f4-b413-c6d511ffe752",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4f3d91ee-c0fc-4558-a761-fd5d90c3a12f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d3a5c5-17c7-4b90-85da-ba0a5773667a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d4786c-29bb-406b-82be-9974ca5bdca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e0c786-741d-4eee-bc5e-878116ad3bdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a7dd3a4-3d77-4398-bb67-1d8d095c6b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052d37c5-4954-4043-a5c2-e6ad4a026b08",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbebff9-0bf0-46a6-8c38-11b2f6225683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68ebb6d8-4710-48d2-940a-3f9856e5c4a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9070d6f9-d1e8-44d1-b9e7-9d489d440f3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed11fea8-fbe5-4041-99df-67965b64f80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737d37c5-059f-4018-bd36-ec20a1075faf",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149639dc-32f4-49cf-a045-3134a71ce666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcba5cec-fbe1-4476-bbab-6ea49e516084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690741e3-e55e-43dc-8e6d-9cf53ac607af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4f6780d-516e-4f41-80cc-96d4c416247c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c65548a-8afe-4c51-a6a8-af16a6dcc3e0",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e03117a-f120-4963-8d64-9ee75ab1c171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf934b59-fae7-4bdd-b3e5-6e4c9619bd19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d36cb8-445a-48c1-afe5-3d5edb2d3ee4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b9c6b4e-8404-4662-b10f-84b417335531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49afba9-c917-4c82-acb9-cd5f80c35992",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e802c861-4f7f-4a1b-90a8-583c2414a674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "654e579e-e476-4d20-a161-c44ae17be766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bcd05f0-150c-4c00-9ac9-9cc205d2e117",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfd39b17-f480-41e9-ae38-9901a0c92292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1f77d6-e44f-41a4-9ba9-a74b8a365336",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd6083e-3b10-4cc3-bac1-3ac5417df499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb848684-23c1-4e90-bd21-e03d3a984967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6c4d4e-4bc2-472d-8bbd-7ff83056db3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b4b9e4e-4f7e-41a6-9b49-777ce922a6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a119bf88-590e-4cb6-b8db-ddc15d43412a",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85615e85-2535-4ad9-9f78-a994ee181dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ae534d-09d3-4cb9-8a8e-e0bf09c30feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c1e35f-1c16-48f6-979b-4a20c10dca40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5607d17e-7801-4af1-ace4-8dbb41497b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6157a8-d106-4846-9174-eba32c443120",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10deda7-c360-4d9b-b91f-b940482192f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c74948f-9d5b-4653-89e2-98771c693ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22938f84-d1da-408f-98a9-8d2a2d3374e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bfe5c7d-6327-45c1-9865-38d0b0071f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d428d2-c02b-4392-bfe7-cc6b1052ba33",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f7e8db-7fe5-45c1-9d7f-d54bd92df35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3783ff8d-f718-493c-a889-2d5b78dfdd48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d3db3d-484a-4618-a0a7-1e3409b2d805",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6449cb75-5ea8-4c00-ab85-202da8410d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38dc44bb-491d-4472-bbbc-0afece8cf4e5",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80eac407-e1d0-4ded-a388-0efbd0daf5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d659fb25-5641-483e-94a4-ae7368feb103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ea4e05-6ab9-4c23-a709-d71badd542d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a56baf29-aa23-4fef-b1d3-d29dff8ad258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2158ae20-e65d-40da-8950-9627a033f56f",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251268a8-8c82-4547-a58f-d61ab36c93b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f614ddf-8639-4ae2-9009-7b87c573cbd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2ff283-bda9-4eb4-bda1-649135ac02d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "7f63fc29-37a6-49ea-8262-df76d7073bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0677231-10e8-4c71-96f4-1e8e4d5d7723",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b759f65c-874b-4dbe-95b8-380b089e6281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c8dd540-8d3b-4f9a-82a0-390fb69a359a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739a3342-9f2e-4885-9795-bd6c26107924",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "b954e433-6110-4958-852a-aed79b692e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c595cbb1-4735-4e98-9c47-c584b105669d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60ce8fe-3524-4abd-b3a2-89b5930fafa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d9d424f-820a-45c4-bc79-630702b5c51d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09db874f-cf21-409c-9c84-d400256fc262",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9a38c34-38ea-49b5-8c88-89604deae9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f27366-bb4e-4502-9dca-484085c0af9f",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d8400e-e123-4af2-898e-598a26440bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7920c199-7fba-42a4-a48e-fc869b01209c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28e82a7-7285-4330-be77-0e65cd26af61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6d6f52a-ded1-45f8-b8f1-fee3907a0a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0239fc-2668-4bff-9a35-afaf2804b252",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4ea91c-1f7a-4650-b028-1ca37c8ad66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fed7cc72-9733-44f3-b242-8cfbbf529344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09daf9b-7298-464c-aae6-f9a8e24cce36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "ffc4f80e-cee2-4c41-b083-c87d9814e393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3444c4-36de-47b9-a3c4-4c8503d9fb78",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4c0080-b1c2-44a1-bed9-f03dfce945dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "550a509c-a94b-4749-a19c-719e6975e992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54fe35df-73e3-475e-8920-8795b4ad1ac6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "177610f6-8ba2-48fd-b2b0-9e11d92dd64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5c4769-13a1-46ed-8ae9-805f3d639217",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0389e1f5-8504-4414-856c-a62b99a3f30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee34ee87-0003-4024-89d6-a3052f2fd677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae46285-f964-4223-b312-9c63220cc65b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca814809-48e4-4192-8b5d-f3526a760b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deabc2ba-0745-4cfe-b7c9-0d9d7e9519df",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ba05c2-79fb-44ba-b58d-7ad27359249e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2eee50-ebee-4ea0-9941-bc87eddc9584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd75fe2-16f7-4937-b8b6-5637e2f417d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff799d43-6094-4900-9e2f-cc584e0f2ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24803d56-a8bc-4f3f-9c1c-67f7c1188141",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7591da1e-1f37-4fb0-a034-469149c2c0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3b7838-f188-4df2-b220-23a9945f6635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa5b6e2-5301-4351-9c24-53a686680bf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a017ec8d-cb0f-4f91-9cb3-d1028a4ecd37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac158787-0280-4f9f-a8fe-54bea36f84ad",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5167ef4-7056-4013-a1ac-96b951490dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cefd3bff-da99-4d60-93d7-9ddb2a100b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7f4f3d-82c6-4d7a-a771-a1fec77b7d1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d5e8a41-f5a1-48d3-b2eb-ab21d2d13131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5780b1-44f3-4f3d-a390-4e335fd98722",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9993da-0c35-4b29-933d-246b2585b8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17076245-6ee3-43df-9613-afd9e055f9ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519ae1bc-88d6-413b-b2c0-5e845a918fa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dbe4931-e2eb-4f67-87c8-dcef3ad5050b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b51f021-d0f4-499b-97b3-ad1d37acf178",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d35f8c-9a4e-40e6-b1ce-bd1858f9143c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece36b2a-9006-44c7-8c96-af08910d5e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ee819f-e088-4ec2-b38c-133e15b06716",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8345cc92-17b7-4fbf-b51d-c48a80df1809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda410cd-5cd2-4f5b-ace0-a4165e4a6383",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca357f2-34dd-47af-88df-e3f39f957028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dbbe69d-358a-41a7-b8ed-20bcb65d413b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e3d00e-abc4-4244-9cac-38ec02abedbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37a593c2-3704-4289-b214-51c45d66e711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254b0f8a-e83c-47b9-bd91-5b15c292ed4c",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0e4856-2b44-4114-9e05-42cac57dc3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d83c88-75ae-4dcb-ad82-b4afd9288f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2f976e-e29e-43b3-bf05-aafcc3226da3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b54e19d-5e63-432b-b823-63619df83312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacd599f-530a-41ef-8aa1-c09625e1bfc9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ca4f26-d025-44ff-ace5-7a36d939567c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2ff260-24a4-4e49-b44d-b9d47fb8193b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cda9175-847c-4408-b64d-28225abe1471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00a97dcb-e511-4b9d-a076-4bcb9c9650f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ef2b4e-3deb-4472-abc5-a7c3f52b1205",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b62d62-69e8-4a78-8eb8-636e2273cf53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4efe934-183e-4cd9-a1d5-2e6c260d1913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a34c582-4e13-4aed-a7de-6b7eb5837fb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d0f7344-f63e-4e03-b0fe-989b19efbd13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32af2be-71cd-4720-891d-9622c6f58e58",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85185ec8-7cf4-4444-a3cf-9ad99077e47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630edefa-58c0-4d03-912b-5269a12000b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690bd7b6-b71d-4409-bc8a-e37726df57d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df929665-b309-4b06-abcf-bb36fb7911f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a143d1aa-4d83-4809-bc5a-1ce919ca89bf",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ef9c79-dd6b-4188-a85d-8d3c098bbfdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58044b51-e496-41c2-ae6f-219dfda132fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ab5adf-4627-4194-92b0-e85d95988f18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f470f80-40e6-49d9-8798-04354ea40217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf0478c-e001-44dc-88ec-fbce06047e67",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64042452-e6aa-4049-826b-dd7996b54bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d50cb5da-9845-475b-a0b9-f211b1b6f73c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6390081b-52b4-4141-9b9d-753f68568608",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24f0d7fe-8b7c-4ee6-89cc-8973815bd006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7080bd-bddf-4309-9f3a-ceb0d71ac77b",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1aefaeb-6fd3-4afe-8e07-f82ac50d23f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "445bf985-9acb-4444-998c-4e3cea613153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823b132d-8531-4e91-9fdc-5914328aaee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "396d6c2b-1852-4599-a25a-48021e368a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73ca448-dc40-477b-8408-877ddd408834",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a0e46c-08b0-4886-8f72-434a39136c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8f41abc5-dcac-4c7b-9bc3-23c953a7397e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c79ebc7-5311-4977-915d-5157b2553fb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f927abe-1ef6-46f1-9c31-915b06ac5fd0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1bd861c9-1cf1-487f-baea-c91936b3b945",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "daa616f1-9f23-4225-bfbe-c35bfc4f4ca3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11a2f04-769d-4718-87f4-fe8012681f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc68b042-4b91-400f-9fb8-ba128e0486cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af02f3d8-f280-417f-9c76-7d0789bdc47c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8ed8a375-d495-4aaf-8257-87115ddb9a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf15d73b-8919-48dd-8d46-001c834addf1",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bdbd3e1-d38a-4b65-841c-e5ca3c4ee9e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9903edad-1663-40f6-9ca7-91dd93dd28c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdcac36-7e8f-4882-82e8-359cb6d30056",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "45844a72-e4e0-46c3-b1c6-9944140bb094"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45b7ebb3-3e66-4df9-a89e-f2b1bba810e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5dd075a-a498-4da1-903c-aa153be3fe4d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0ae86b6-39ca-4dd3-ae6d-2ee4681a8e7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2f91d41-cbf2-4b5b-8970-acf518adb879"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ef6af874-fceb-4ea4-b2ed-06decc69b4d3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8bbf8c58-4d03-4d70-96c8-47dd1182b56b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a09a64e3-dfb3-418e-a394-ae9eb8a740c1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7e9f73d8-bf42-4ee3-a566-79922e315ff8"
                }
              }
            ]
          },
          {
            "id": "323ab34e-daf2-4476-9a5c-2a1ea92470d6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bb04616a-c7e0-4cc9-9682-e04bdca5cf1f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "591cc4f1-9ca8-4cf5-adaf-6773fabd4376",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16697da6-86b3-450c-be36-2e6307bd6d87"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2fb86508-8c56-42f9-82e3-048328ce2962",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c87da98e-fdd6-45b6-84d3-95485cd6fa59"
                    }
                  }
                ]
              },
              {
                "id": "03eb723e-1f72-4937-a4d8-881c1a8bed22",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff6d8efb-3911-43c1-a632-690c7754766c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "122d492a-02de-4456-b842-d2269355db1c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1dc426f4-1a7d-43ff-a0ea-00efd396826d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a9c89c0b-b71b-42ca-8eac-eb30826790c0"
                    }
                  }
                ]
              },
              {
                "id": "6a3710f4-7586-4747-a7d4-a801640ac2d4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "961f105e-3c67-4997-b1f9-7081f66031a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "19e9cd2e-5e02-4cad-8c16-7a148ac7cd19"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da688001-ad6d-48d0-b1bf-1fe0f548edee",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1814875f-2e4c-4e98-869c-72f97015c00e"
                    }
                  }
                ]
              },
              {
                "id": "07b0db59-212c-4aec-b8dc-7c08a6457cbd",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27ef4ace-e527-4965-bcc4-2077e5396625",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50880a00-5209-4fa6-8919-b6e1d40bbff5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c69a52ff-455b-4dad-9b98-4ee8b1611b12",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "77cee989-b4e2-4654-94ad-558075575923"
                    }
                  }
                ]
              },
              {
                "id": "54e71425-fbfb-4acb-8f9d-30c4d5757b8f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f7b65fb-5016-4129-8e24-b9202547ea09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "143f5b45-a7f1-4f6c-95cf-d12e1123c2e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "603d7791-df22-4c70-8333-37223c5be3d9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "3b082c18-95b4-4406-bbcf-7a242a05ed73"
                    }
                  }
                ]
              },
              {
                "id": "d48f9766-d68c-43a3-9964-e2c6edd9934b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b8782f9-fa3f-48f8-958d-2bf9703e1146",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4ebbd2cc-398e-4969-8c76-d72014dcdd0e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "712c2571-6613-4f3e-8734-7f8da29b89b9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "6d66ea2d-3185-4573-bf4f-65c64ccd83b2"
                    }
                  }
                ]
              },
              {
                "id": "a55be860-6287-4c89-859b-b60b73267a75",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "245b542c-3ce2-443a-ad40-0c210e3f136a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "90efcdd3-058f-4dd6-abe9-fac38c300907"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5716b383-ae82-4fe3-a85c-5e674716c274",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "31568269-5ae9-4886-ad85-e906eb72d6e5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "71810832-be8c-4abd-a97b-f4a36fce3767",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "157559e1-cbfa-4db3-817a-b04cdc44861c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e1d68b0f-7bd0-4419-922e-2c0cccc26b44",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e2f97f09-4284-48d0-9d48-d7898ea6555c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c53809d3-df7d-4622-9f57-8fb509aadd75",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "5e091224-9b43-45c6-9c2e-c74b6338d6fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "32cdd405-75fe-4962-8b8e-2736a835a09e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "58b43125-54af-437b-abbd-5a2d25bf22af"
            }
          }
        ]
      },
      {
        "id": "7733294d-72a3-4f0a-97d8-4fbb7a48190b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0eb13b3c-4189-4ed2-91b8-a782829346a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c8552e1e-8c88-4a15-a95e-f2459a9054d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5de3ca2-58a2-47fb-8f5e-3a4743ea251d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8043b1c5-e367-4ae1-9614-9a6137763952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cecda651-eb9d-45bc-a0fa-7e652b6dda20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ffb7dec-bfc9-41f7-a95c-af078737af1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c92a868-c76a-4946-92ed-a025e344b05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e54af7-8d9b-452c-a1d9-d00a7a0b52af",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1bc3523-14e7-404a-be21-976140121e95",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d114cd44-d551-4034-9350-a8c92e60908b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6e3d6a-976d-46b0-8499-b2aa999cb2e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05ba65d4-049c-4d4c-af84-5187f4e45984"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6093cb02-a743-4db9-88b2-a7d4176bb5da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "085828f6-3670-4d3a-813c-8928c6c6b385"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0479a22-c2c7-4548-9a1a-582abd4691f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc1a1b60-4ceb-411c-bf5e-8df1c0c99edd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "205f1b78-75a9-4e00-9e2f-47c01f01ebda",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "59eea015-d8e5-450b-97c5-cd786bab1820"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a9f999d-373d-4979-90dd-8174f2cf2fe5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6aaa62d5-73f7-45f7-a852-a227acb9d987"
            }
          }
        ]
      },
      {
        "id": "34159fc0-82af-4262-93bd-1f2d9cce4fdd",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2287bf74-1075-458c-93d5-82dd3fa0ba65",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04b2c95a-b618-4c61-b981-32e6caf7c365",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "efd26bd0-530c-413a-9788-786e39f81a85",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600bbde1-a4cf-4ac7-9ef0-c189e608861c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07120fc2-3e62-4de3-bdaf-6a6357844ade"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5738a532-7576-45e9-b8b0-04100a348ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28ca550f-3d7c-4a48-8861-881ef957e8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbce57d-b9d9-4d7c-9141-a48dae718957",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ba7609-9333-4093-a445-e3d488feb2e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de815c07-2be1-4dc5-8af2-e5fea5dcbd42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a5b74f-1111-4db2-ab57-0028e9abef79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "455f3f29-abf5-4f41-ac29-56a89cc2032e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568efc44-8c02-4c01-8519-1690c0206a43",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43117459-1c58-4d50-afcf-2e7f980ba255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b36c98a-2d2d-4234-a957-7a67361e4f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5955fc90-0ce3-4338-b77e-8b7633094097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d55eecc-1d97-4796-8d1c-f1b27f2b85ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b687699-cc57-4a51-91ae-b9a9484a9901",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8d7d39-b7bb-4de7-9adb-8b12f3441bb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e4b1d79-d9e0-44f6-93cf-48fc0f62723c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3efb418b-5862-4815-9060-51de5a0adbf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb6316ba-3348-4c41-8e8c-507dfd774185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c572cf11-c21e-4960-80e2-e093cc19261e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec005724-7578-4366-913f-a9878de07cf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c541686-7b17-4601-9bff-0241d1588b96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee9625d-79b9-4903-8c09-ec2dbf42c1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59b09001-6081-482f-b277-996dc894cc65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b010cb9-a270-4849-aec8-7ce3a6c7c9c0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0948eb9a-51ef-435b-8492-a3fab44f098d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14ce1a67-fa58-428f-95ba-ca791ebccfa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2528a727-664e-4c74-b7c1-35c68eea06ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eef2c275-63f5-4174-9676-65d22c34566d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2e7c91d6-1213-452d-8cf0-0ae8b7e8dc6a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3af00407-4d01-4e1e-9862-a4b23b6a1bea",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c618f10-325f-4a63-b620-5a381346d4f9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "ebd4eea1-307a-43de-9ae0-bc54c88282b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc9aab4-b030-4c49-bd1f-3d24a0dad8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d45b0b0-59b1-421b-bdef-2484093f0a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d626b1-c3f7-4e63-8ac6-fa0ba7e67080",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3807029c-57a9-438a-a407-0a6fe7f1fd23",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "6ac345d2-210e-4cb2-bce3-6b0bf7b45a0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0beb7ac-e5b1-40a6-ab5c-be0e9fd6326e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07850d04-98d1-4db9-83d9-92bfae4a8ac9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84ef9925-6dec-4c8d-9efe-3b2154dc15e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a021d141-4f32-4642-bf06-928ad3173716"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10e4dbce-8cb6-4c16-a13a-aec221eb8501",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8dfd7c36-6714-444d-bd97-e2fe4f14250a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2a29985d-3d6c-4707-b99c-a3ed49fa2cbc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "798cf0f7-1542-4350-885a-70483dec22cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f6aab9c-5ed5-4a7c-bc90-31300df225ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9de40a5e-d2e0-4458-92c8-71a2621e146b"
            }
          }
        ]
      },
      {
        "id": "8bb3156a-c0ff-4737-96ff-c7ac8fb08269",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c6688017-cc8a-4a83-a29c-62c04678cc16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "01bf1854-0d8a-455f-a879-41d960407df0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f9134ba4-ded4-4434-898d-506aab5ebfef",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b9c7951-73ff-4195-8c72-9a3e3a0fd106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b9b1cbb-c194-49e4-b49e-48b5a46285d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c13153-7de4-4a91-a7a7-45ec31375a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8161620-173d-499f-a2b6-313cd7daa6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d0bf68-ad28-4c55-a50e-c5934ec45dea",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbef0b41-7ec0-43ed-ba04-2d4781cefd43",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e1b8eede-b49b-4c6d-94f3-1f8a7eb17d19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7a2f6a-2060-4e77-943e-3d4b170e6dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f421eca5-79ec-4f79-9f9d-7590a3196294"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c60da7f4-d615-4a3c-abcd-2e07cbe0b89e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4b83d3e-6160-4b87-82bf-16cea36eb0b9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "72fdb7d1-4e70-4509-a818-a6c704e3a884",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd0a6cbd-9c1a-446a-b82a-0136cee9d10c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e6c0ca0-8d1d-422b-b7e3-97fe1963da41",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "f094d210-79b1-4776-8c62-cc179fb705ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a6755985-0232-49b4-83b4-a385f8a6eed9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a4467e93-c74f-4a29-ba76-96062c888a2f"
            }
          }
        ]
      },
      {
        "id": "c4f34b94-b9e2-4194-a759-0beed348dcb5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "26ba6e48-7655-4e51-8185-dff3ef8119e4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4d7c591a-0c52-4493-878c-37b95e92b798",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cd550e68-6b41-4ac3-a860-acfab1c1b638",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d4f850-16fa-4f1d-9f46-f15f429bfb5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe35242-739b-4894-827e-cfc8da72315b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a15c325-c8b7-498a-89d0-684b31bdcd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36ecb344-0ada-4f0e-984f-0c6956bdb200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea361ba-a3d8-43d3-bb1c-20b8c3a7323d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eceb646c-b100-4527-be67-eb429b53a286",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "1d8a23fd-6dcc-4020-9524-d5f489e1ea65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "974e69ba-667a-48fb-8abf-611b6f414cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "021a563e-400f-4764-afb9-1571d7e05fb0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2283cc45-8ed1-4f60-a22b-f3e10b95d177",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "870ebe22-2716-4f6c-bbb7-6ae0b2dec20b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f4c4798-5d12-4ac0-86eb-6c6225caf446",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3742a5c8-5d59-41ea-864d-5b048c354c5f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b8551706-d553-42a2-bbee-ce488e715fc7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "1a650acf-7ce2-49b8-af4b-b2886e60b6c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f669844-9f82-464c-b24b-97bb46f8cda1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b732f4f0-ecc8-47ad-abd5-58ee0b7aa3d5"
            }
          }
        ]
      },
      {
        "id": "8dbf5824-0d95-44d8-b24d-c43e17b24aad",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9a9df2cb-b91d-4663-8559-c5517855c60a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "20ddc326-f067-438f-b095-f3d7f4045568",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8036665e-e178-48ad-80a1-61f59c056c1a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1db6e4-452b-471e-a408-cce4accce980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8850ad73-ccc9-4ee7-bf34-570c17c1f9c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "779099e1-fb15-4fea-884a-83f32c0ac4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1dae10bb-ee8d-4536-af2a-3d38217e767e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364d59cb-fce6-473e-a840-8d3f9dbdff23",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4365de1-d6ef-4bb0-a01e-8f72867324b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "31f53096-8c8d-46e8-a31b-9aec75ce3938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4bc652a-8d14-4f96-a7ab-4934ddd37ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "632a3793-a751-412f-b443-f502e9ff71cc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea276d1f-213e-44b2-9a38-f68b62d41802",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf4c75af-1567-4487-9d4d-1d13a95451d3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fa9c18c-433a-4f11-9b80-c4f982dd0800",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "052935fd-d0c2-4189-ae14-ea4c85eedc3a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f09c6235-8553-449a-903b-fde3de8bca6c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "47bb393e-13a4-41dc-9902-48cae70eee1c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8cb768ab-b927-48f5-8a90-2d4c464100a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e322a69c-1b9a-4e71-8d13-b055558be4aa"
            }
          }
        ]
      },
      {
        "id": "dc384246-336e-41c5-8301-c4faaf3fea7e",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "80fe53f4-07ac-4d5c-abb8-3fa84d1839af",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 102
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 83.61261261261261,
      "responseMin": 32,
      "responseMax": 401,
      "responseSd": 66.99417363011106,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1663116627154,
      "completed": 1663116640053
    },
    "executions": [
      {
        "id": "aa4a2843-341d-4f78-9f07-85643d030fc0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8b0e61c8-6c35-432c-84e7-6de14f4175d7",
          "httpRequestId": "3e9c24bc-ed5f-46e2-8968-e27eab8978ed"
        },
        "item": {
          "id": "aa4a2843-341d-4f78-9f07-85643d030fc0",
          "name": "did_json"
        },
        "response": {
          "id": "4c8b0434-3643-4dd5-9044-dd7e6b99f808",
          "status": "OK",
          "code": 200,
          "responseTime": 233,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a772b2cf-77c1-4043-bd74-910735226867",
        "cursor": {
          "ref": "54cbc2a8-f41d-41fa-9015-f5985e08e10a",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d3477e22-da1b-412e-8be5-6b38783f49ce"
        },
        "item": {
          "id": "a772b2cf-77c1-4043-bd74-910735226867",
          "name": "did:invalid"
        },
        "response": {
          "id": "253f2ebe-dbe8-4fec-802f-ec300aa5f596",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a772b2cf-77c1-4043-bd74-910735226867",
        "cursor": {
          "ref": "54cbc2a8-f41d-41fa-9015-f5985e08e10a",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d3477e22-da1b-412e-8be5-6b38783f49ce"
        },
        "item": {
          "id": "a772b2cf-77c1-4043-bd74-910735226867",
          "name": "did:invalid"
        },
        "response": {
          "id": "253f2ebe-dbe8-4fec-802f-ec300aa5f596",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad617d2c-507b-464f-8069-49518994e787",
        "cursor": {
          "ref": "fe75bcb2-db5c-4bb2-a9fe-4e88a4cb7886",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f1556fb7-031b-4cd4-883b-3f2bdd91abc9"
        },
        "item": {
          "id": "ad617d2c-507b-464f-8069-49518994e787",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "88de2c73-b6f7-41ad-b78b-2cb5b3a9cf86",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 126,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "35de9ce4-6d63-450e-8133-06d8de6165d6",
        "cursor": {
          "ref": "20a811aa-3881-48ea-8a77-f3eef681ee92",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f84d41a9-69e4-4e04-abd3-c089e257ce52"
        },
        "item": {
          "id": "35de9ce4-6d63-450e-8133-06d8de6165d6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7544711d-441c-4170-89b8-a27091f62dcb",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "afe26590-9398-49f8-962e-5a798bde3030",
        "cursor": {
          "ref": "e1873ff5-ed4e-4ce9-a4be-402c4bf6348c",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "79c488f1-d58d-40d0-af19-71a6caae3953"
        },
        "item": {
          "id": "afe26590-9398-49f8-962e-5a798bde3030",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "276a15d3-5445-4618-923d-97d308934b09",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "890903d0-9787-428f-8f5e-5d7638287c22",
        "cursor": {
          "ref": "2f365907-4c8b-46e9-bcbf-c19811f6fb6a",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "be7fea33-dfa1-4164-8551-218be06fecd5"
        },
        "item": {
          "id": "890903d0-9787-428f-8f5e-5d7638287c22",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "47ab04d1-76a9-4f62-95a6-796dd76535fd",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "890903d0-9787-428f-8f5e-5d7638287c22",
        "cursor": {
          "ref": "2f365907-4c8b-46e9-bcbf-c19811f6fb6a",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "be7fea33-dfa1-4164-8551-218be06fecd5"
        },
        "item": {
          "id": "890903d0-9787-428f-8f5e-5d7638287c22",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "47ab04d1-76a9-4f62-95a6-796dd76535fd",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "cf3dcb0b-476e-4cd4-a9c9-63bba2b06df0",
        "cursor": {
          "ref": "52242e34-3025-4398-a194-c2f926f2fc20",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c6ef38ce-df6f-42bc-9135-6f4897593175"
        },
        "item": {
          "id": "cf3dcb0b-476e-4cd4-a9c9-63bba2b06df0",
          "name": "identifiers"
        },
        "response": {
          "id": "dbebd419-35ec-4769-9d24-f027ab23d55b",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3d91ee-c0fc-4558-a761-fd5d90c3a12f",
        "cursor": {
          "ref": "e7e8e03b-6419-4680-a65e-c7c761c26106",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fd495811-b4a9-47d6-8f2a-f16635184543"
        },
        "item": {
          "id": "4f3d91ee-c0fc-4558-a761-fd5d90c3a12f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b87021b8-220a-4e08-8480-6f2c5661fef1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 401,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4f3d91ee-c0fc-4558-a761-fd5d90c3a12f",
        "cursor": {
          "ref": "e7e8e03b-6419-4680-a65e-c7c761c26106",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fd495811-b4a9-47d6-8f2a-f16635184543"
        },
        "item": {
          "id": "4f3d91ee-c0fc-4558-a761-fd5d90c3a12f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b87021b8-220a-4e08-8480-6f2c5661fef1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 401,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4f3d91ee-c0fc-4558-a761-fd5d90c3a12f",
        "cursor": {
          "ref": "e7e8e03b-6419-4680-a65e-c7c761c26106",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fd495811-b4a9-47d6-8f2a-f16635184543"
        },
        "item": {
          "id": "4f3d91ee-c0fc-4558-a761-fd5d90c3a12f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b87021b8-220a-4e08-8480-6f2c5661fef1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 401,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "052d37c5-4954-4043-a5c2-e6ad4a026b08",
        "cursor": {
          "ref": "82fe722f-5efd-4515-b81e-a8461358c0bd",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4076867f-7c13-4054-a91f-d958738e7897"
        },
        "item": {
          "id": "052d37c5-4954-4043-a5c2-e6ad4a026b08",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d6b3ba0e-9c10-4f1f-81f3-ccbf388c9bcf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "052d37c5-4954-4043-a5c2-e6ad4a026b08",
        "cursor": {
          "ref": "82fe722f-5efd-4515-b81e-a8461358c0bd",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4076867f-7c13-4054-a91f-d958738e7897"
        },
        "item": {
          "id": "052d37c5-4954-4043-a5c2-e6ad4a026b08",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d6b3ba0e-9c10-4f1f-81f3-ccbf388c9bcf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "737d37c5-059f-4018-bd36-ec20a1075faf",
        "cursor": {
          "ref": "e9d7866e-af14-472d-b79a-d3fa0db8ee1d",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "062bd4fe-cbc3-4873-953b-342ea065338e"
        },
        "item": {
          "id": "737d37c5-059f-4018-bd36-ec20a1075faf",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "f007a992-d787-4157-b00d-5003fd742169",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "737d37c5-059f-4018-bd36-ec20a1075faf",
        "cursor": {
          "ref": "e9d7866e-af14-472d-b79a-d3fa0db8ee1d",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "062bd4fe-cbc3-4873-953b-342ea065338e"
        },
        "item": {
          "id": "737d37c5-059f-4018-bd36-ec20a1075faf",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "f007a992-d787-4157-b00d-5003fd742169",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "3c65548a-8afe-4c51-a6a8-af16a6dcc3e0",
        "cursor": {
          "ref": "91f5db68-0c2b-4c60-8523-a9996eab7e23",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "16b0886b-b3d7-4384-9ee3-c76847f4ae75"
        },
        "item": {
          "id": "3c65548a-8afe-4c51-a6a8-af16a6dcc3e0",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "efc2c744-de19-4826-a150-e3f313f1499e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "3c65548a-8afe-4c51-a6a8-af16a6dcc3e0",
        "cursor": {
          "ref": "91f5db68-0c2b-4c60-8523-a9996eab7e23",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "16b0886b-b3d7-4384-9ee3-c76847f4ae75"
        },
        "item": {
          "id": "3c65548a-8afe-4c51-a6a8-af16a6dcc3e0",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "efc2c744-de19-4826-a150-e3f313f1499e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "b49afba9-c917-4c82-acb9-cd5f80c35992",
        "cursor": {
          "ref": "abbfe319-19b3-4ecc-8bc6-01f4567b80db",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8b528d17-87ab-4aa3-adf9-3d32cecdb22e"
        },
        "item": {
          "id": "b49afba9-c917-4c82-acb9-cd5f80c35992",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "f40d338f-f292-476d-a06e-8e706acbcbdd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "b49afba9-c917-4c82-acb9-cd5f80c35992",
        "cursor": {
          "ref": "abbfe319-19b3-4ecc-8bc6-01f4567b80db",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8b528d17-87ab-4aa3-adf9-3d32cecdb22e"
        },
        "item": {
          "id": "b49afba9-c917-4c82-acb9-cd5f80c35992",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "f40d338f-f292-476d-a06e-8e706acbcbdd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "6b1f77d6-e44f-41a4-9ba9-a74b8a365336",
        "cursor": {
          "ref": "6e6979bd-f783-4e06-b8e7-23a8d775dcf9",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bfae75e0-7bb5-4fbd-8eca-3a94d6b2a1a0"
        },
        "item": {
          "id": "6b1f77d6-e44f-41a4-9ba9-a74b8a365336",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d5d7d95c-8e09-4526-851a-9d845bc5e91e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "6b1f77d6-e44f-41a4-9ba9-a74b8a365336",
        "cursor": {
          "ref": "6e6979bd-f783-4e06-b8e7-23a8d775dcf9",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bfae75e0-7bb5-4fbd-8eca-3a94d6b2a1a0"
        },
        "item": {
          "id": "6b1f77d6-e44f-41a4-9ba9-a74b8a365336",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d5d7d95c-8e09-4526-851a-9d845bc5e91e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "a119bf88-590e-4cb6-b8db-ddc15d43412a",
        "cursor": {
          "ref": "c6ccb5fc-91b7-45fd-a6fa-f17a6078ffa2",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3105311c-49ff-4402-a501-127f539b42c4"
        },
        "item": {
          "id": "a119bf88-590e-4cb6-b8db-ddc15d43412a",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "cad23f39-d755-486f-9180-1606c6928320",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "a119bf88-590e-4cb6-b8db-ddc15d43412a",
        "cursor": {
          "ref": "c6ccb5fc-91b7-45fd-a6fa-f17a6078ffa2",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3105311c-49ff-4402-a501-127f539b42c4"
        },
        "item": {
          "id": "a119bf88-590e-4cb6-b8db-ddc15d43412a",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "cad23f39-d755-486f-9180-1606c6928320",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "fd6157a8-d106-4846-9174-eba32c443120",
        "cursor": {
          "ref": "eaddaf3a-efa5-412f-af1a-ab9f339edad5",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a5d63c5a-832f-4938-9f57-b9e924bd9e1a"
        },
        "item": {
          "id": "fd6157a8-d106-4846-9174-eba32c443120",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "280e822a-feef-4137-af0d-0e838f2630aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "fd6157a8-d106-4846-9174-eba32c443120",
        "cursor": {
          "ref": "eaddaf3a-efa5-412f-af1a-ab9f339edad5",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a5d63c5a-832f-4938-9f57-b9e924bd9e1a"
        },
        "item": {
          "id": "fd6157a8-d106-4846-9174-eba32c443120",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "280e822a-feef-4137-af0d-0e838f2630aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "e9d428d2-c02b-4392-bfe7-cc6b1052ba33",
        "cursor": {
          "ref": "96ca2f48-39df-422e-98ff-164b87f1b9f3",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c3adae42-ae61-4504-a16b-8909adcabbe6"
        },
        "item": {
          "id": "e9d428d2-c02b-4392-bfe7-cc6b1052ba33",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "eee425c6-e409-49ed-8690-6cae07ffee17",
          "status": "Created",
          "code": 201,
          "responseTime": 157,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "e9d428d2-c02b-4392-bfe7-cc6b1052ba33",
        "cursor": {
          "ref": "96ca2f48-39df-422e-98ff-164b87f1b9f3",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c3adae42-ae61-4504-a16b-8909adcabbe6"
        },
        "item": {
          "id": "e9d428d2-c02b-4392-bfe7-cc6b1052ba33",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "eee425c6-e409-49ed-8690-6cae07ffee17",
          "status": "Created",
          "code": 201,
          "responseTime": 157,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "38dc44bb-491d-4472-bbbc-0afece8cf4e5",
        "cursor": {
          "ref": "d380854e-f1fb-43bb-8e72-25b724663371",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0e85b8d9-dad7-42cd-b2a0-9ace3ef22fa9"
        },
        "item": {
          "id": "38dc44bb-491d-4472-bbbc-0afece8cf4e5",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "fb482d07-bcd6-4cc5-b374-bd91a523e075",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "38dc44bb-491d-4472-bbbc-0afece8cf4e5",
        "cursor": {
          "ref": "d380854e-f1fb-43bb-8e72-25b724663371",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0e85b8d9-dad7-42cd-b2a0-9ace3ef22fa9"
        },
        "item": {
          "id": "38dc44bb-491d-4472-bbbc-0afece8cf4e5",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "fb482d07-bcd6-4cc5-b374-bd91a523e075",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "2158ae20-e65d-40da-8950-9627a033f56f",
        "cursor": {
          "ref": "9faf584b-9184-40db-aa91-6ef6833b646a",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "19a6e93a-a0a7-45cd-a0ca-5309ac45a010"
        },
        "item": {
          "id": "2158ae20-e65d-40da-8950-9627a033f56f",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "d70335ce-d01d-404d-b603-882246ec4a53",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "2158ae20-e65d-40da-8950-9627a033f56f",
        "cursor": {
          "ref": "9faf584b-9184-40db-aa91-6ef6833b646a",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "19a6e93a-a0a7-45cd-a0ca-5309ac45a010"
        },
        "item": {
          "id": "2158ae20-e65d-40da-8950-9627a033f56f",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "d70335ce-d01d-404d-b603-882246ec4a53",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "a0677231-10e8-4c71-96f4-1e8e4d5d7723",
        "cursor": {
          "ref": "a38c0478-8260-4e48-8d0d-8236507e747f",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6724eb8f-3c7e-42a4-b9e8-1f6106f0bb53"
        },
        "item": {
          "id": "a0677231-10e8-4c71-96f4-1e8e4d5d7723",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "da8d00b0-88ac-4a67-bba5-84d9dfc12388",
          "status": "Created",
          "code": 201,
          "responseTime": 80,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "a0677231-10e8-4c71-96f4-1e8e4d5d7723",
        "cursor": {
          "ref": "a38c0478-8260-4e48-8d0d-8236507e747f",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6724eb8f-3c7e-42a4-b9e8-1f6106f0bb53"
        },
        "item": {
          "id": "a0677231-10e8-4c71-96f4-1e8e4d5d7723",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "da8d00b0-88ac-4a67-bba5-84d9dfc12388",
          "status": "Created",
          "code": 201,
          "responseTime": 80,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "c595cbb1-4735-4e98-9c47-c584b105669d",
        "cursor": {
          "ref": "a1be5b5f-a4d6-458b-85a5-9b7278681a79",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "193e8af2-1a42-4cdc-8466-6c4e3e39af82"
        },
        "item": {
          "id": "c595cbb1-4735-4e98-9c47-c584b105669d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cc2165b6-f500-4c45-91d6-b4b32cded169",
          "status": "Created",
          "code": 201,
          "responseTime": 75,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "c595cbb1-4735-4e98-9c47-c584b105669d",
        "cursor": {
          "ref": "a1be5b5f-a4d6-458b-85a5-9b7278681a79",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "193e8af2-1a42-4cdc-8466-6c4e3e39af82"
        },
        "item": {
          "id": "c595cbb1-4735-4e98-9c47-c584b105669d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cc2165b6-f500-4c45-91d6-b4b32cded169",
          "status": "Created",
          "code": 201,
          "responseTime": 75,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "60f27366-bb4e-4502-9dca-484085c0af9f",
        "cursor": {
          "ref": "fd2cf363-e63e-40a8-bf10-7d196a2f2ab8",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d8628a1e-7e8a-470a-a14a-78750abeddad"
        },
        "item": {
          "id": "60f27366-bb4e-4502-9dca-484085c0af9f",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "49b8b6c7-baed-4ca9-bb21-fc53e3e3b3a5",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "60f27366-bb4e-4502-9dca-484085c0af9f",
        "cursor": {
          "ref": "fd2cf363-e63e-40a8-bf10-7d196a2f2ab8",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d8628a1e-7e8a-470a-a14a-78750abeddad"
        },
        "item": {
          "id": "60f27366-bb4e-4502-9dca-484085c0af9f",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "49b8b6c7-baed-4ca9-bb21-fc53e3e3b3a5",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "fc0239fc-2668-4bff-9a35-afaf2804b252",
        "cursor": {
          "ref": "b66a0aab-9893-47d3-b436-b4df9b8ef24c",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3df15c49-39da-4343-976c-9a3dae9586cd"
        },
        "item": {
          "id": "fc0239fc-2668-4bff-9a35-afaf2804b252",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "f707046a-4551-4eb4-9907-1e1196f7cf3f",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "fc0239fc-2668-4bff-9a35-afaf2804b252",
        "cursor": {
          "ref": "b66a0aab-9893-47d3-b436-b4df9b8ef24c",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3df15c49-39da-4343-976c-9a3dae9586cd"
        },
        "item": {
          "id": "fc0239fc-2668-4bff-9a35-afaf2804b252",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "f707046a-4551-4eb4-9907-1e1196f7cf3f",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "8e3444c4-36de-47b9-a3c4-4c8503d9fb78",
        "cursor": {
          "ref": "94a813c7-ecbb-4b71-9961-4a426b47628c",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "337686e2-8e8f-483e-87b2-86df68addcec"
        },
        "item": {
          "id": "8e3444c4-36de-47b9-a3c4-4c8503d9fb78",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f62b1d71-6a81-4472-907c-98661fd75daf",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "8e3444c4-36de-47b9-a3c4-4c8503d9fb78",
        "cursor": {
          "ref": "94a813c7-ecbb-4b71-9961-4a426b47628c",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "337686e2-8e8f-483e-87b2-86df68addcec"
        },
        "item": {
          "id": "8e3444c4-36de-47b9-a3c4-4c8503d9fb78",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f62b1d71-6a81-4472-907c-98661fd75daf",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5b5c4769-13a1-46ed-8ae9-805f3d639217",
        "cursor": {
          "ref": "64b294fb-c4f8-4da1-bd78-f95ba51a747a",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f01d52fa-208b-45b3-921a-82bdc4be637b"
        },
        "item": {
          "id": "5b5c4769-13a1-46ed-8ae9-805f3d639217",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e3e8bd21-b8f4-4e4d-8e94-eb640ba71d5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "5b5c4769-13a1-46ed-8ae9-805f3d639217",
        "cursor": {
          "ref": "64b294fb-c4f8-4da1-bd78-f95ba51a747a",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f01d52fa-208b-45b3-921a-82bdc4be637b"
        },
        "item": {
          "id": "5b5c4769-13a1-46ed-8ae9-805f3d639217",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e3e8bd21-b8f4-4e4d-8e94-eb640ba71d5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "deabc2ba-0745-4cfe-b7c9-0d9d7e9519df",
        "cursor": {
          "ref": "5b4d4672-d939-4c68-a90f-516ad65b1b97",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "bad4fa5c-9357-4a9b-a9dd-52ef78bfa0b0"
        },
        "item": {
          "id": "deabc2ba-0745-4cfe-b7c9-0d9d7e9519df",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "fe43963d-6f97-4358-9c48-7cf313ed8c9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "deabc2ba-0745-4cfe-b7c9-0d9d7e9519df",
        "cursor": {
          "ref": "5b4d4672-d939-4c68-a90f-516ad65b1b97",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "bad4fa5c-9357-4a9b-a9dd-52ef78bfa0b0"
        },
        "item": {
          "id": "deabc2ba-0745-4cfe-b7c9-0d9d7e9519df",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "fe43963d-6f97-4358-9c48-7cf313ed8c9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "24803d56-a8bc-4f3f-9c1c-67f7c1188141",
        "cursor": {
          "ref": "9d83a05e-6c45-4dcc-86c6-0abd8316f333",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "56e8a251-59f8-46bf-bcd5-b8f1b3f01b62"
        },
        "item": {
          "id": "24803d56-a8bc-4f3f-9c1c-67f7c1188141",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "41fd6ac9-5750-4fef-9513-7f4384707cad",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "24803d56-a8bc-4f3f-9c1c-67f7c1188141",
        "cursor": {
          "ref": "9d83a05e-6c45-4dcc-86c6-0abd8316f333",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "56e8a251-59f8-46bf-bcd5-b8f1b3f01b62"
        },
        "item": {
          "id": "24803d56-a8bc-4f3f-9c1c-67f7c1188141",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "41fd6ac9-5750-4fef-9513-7f4384707cad",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "ac158787-0280-4f9f-a8fe-54bea36f84ad",
        "cursor": {
          "ref": "9a0afbba-8fcb-4899-8def-467c3a84032a",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bab9b29f-4d21-41f2-abfb-9aa557a623a6"
        },
        "item": {
          "id": "ac158787-0280-4f9f-a8fe-54bea36f84ad",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fe606f4e-9888-4958-ba20-ee4a3fec5038",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "ac158787-0280-4f9f-a8fe-54bea36f84ad",
        "cursor": {
          "ref": "9a0afbba-8fcb-4899-8def-467c3a84032a",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bab9b29f-4d21-41f2-abfb-9aa557a623a6"
        },
        "item": {
          "id": "ac158787-0280-4f9f-a8fe-54bea36f84ad",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fe606f4e-9888-4958-ba20-ee4a3fec5038",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "2a5780b1-44f3-4f3d-a390-4e335fd98722",
        "cursor": {
          "ref": "36a8e0f8-bc9d-4d86-8aae-96e82c0cbeec",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e54f0d3c-b34a-41ff-938d-1f43a0ab6db4"
        },
        "item": {
          "id": "2a5780b1-44f3-4f3d-a390-4e335fd98722",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "793f37d5-0cb6-4526-8ca3-ea34acd454c9",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "2a5780b1-44f3-4f3d-a390-4e335fd98722",
        "cursor": {
          "ref": "36a8e0f8-bc9d-4d86-8aae-96e82c0cbeec",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e54f0d3c-b34a-41ff-938d-1f43a0ab6db4"
        },
        "item": {
          "id": "2a5780b1-44f3-4f3d-a390-4e335fd98722",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "793f37d5-0cb6-4526-8ca3-ea34acd454c9",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "7b51f021-d0f4-499b-97b3-ad1d37acf178",
        "cursor": {
          "ref": "766b8d07-3802-4e11-9dc5-63bc636bc7c9",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "589052e0-820d-4dc6-a35b-858d3b959f2e"
        },
        "item": {
          "id": "7b51f021-d0f4-499b-97b3-ad1d37acf178",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "b9521e6f-b00a-4400-a7e3-143c4b080cc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "7b51f021-d0f4-499b-97b3-ad1d37acf178",
        "cursor": {
          "ref": "766b8d07-3802-4e11-9dc5-63bc636bc7c9",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "589052e0-820d-4dc6-a35b-858d3b959f2e"
        },
        "item": {
          "id": "7b51f021-d0f4-499b-97b3-ad1d37acf178",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "b9521e6f-b00a-4400-a7e3-143c4b080cc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "fda410cd-5cd2-4f5b-ace0-a4165e4a6383",
        "cursor": {
          "ref": "e0d8e32c-3cc6-4ab2-8d80-021369f97a3a",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d7a10de6-ea4c-4a30-b0c0-aa0b5237e486"
        },
        "item": {
          "id": "fda410cd-5cd2-4f5b-ace0-a4165e4a6383",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "91a8e0e6-404e-42bb-8d1c-8e3099bc4247",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "fda410cd-5cd2-4f5b-ace0-a4165e4a6383",
        "cursor": {
          "ref": "e0d8e32c-3cc6-4ab2-8d80-021369f97a3a",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d7a10de6-ea4c-4a30-b0c0-aa0b5237e486"
        },
        "item": {
          "id": "fda410cd-5cd2-4f5b-ace0-a4165e4a6383",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "91a8e0e6-404e-42bb-8d1c-8e3099bc4247",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "254b0f8a-e83c-47b9-bd91-5b15c292ed4c",
        "cursor": {
          "ref": "95f5993d-47a0-4e8c-9f88-dea7002b2408",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bd261d2e-2874-43ce-867a-ad966eb24cff"
        },
        "item": {
          "id": "254b0f8a-e83c-47b9-bd91-5b15c292ed4c",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "1234b219-6cc1-49be-b657-ebf612070bb0",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "254b0f8a-e83c-47b9-bd91-5b15c292ed4c",
        "cursor": {
          "ref": "95f5993d-47a0-4e8c-9f88-dea7002b2408",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bd261d2e-2874-43ce-867a-ad966eb24cff"
        },
        "item": {
          "id": "254b0f8a-e83c-47b9-bd91-5b15c292ed4c",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "1234b219-6cc1-49be-b657-ebf612070bb0",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "dacd599f-530a-41ef-8aa1-c09625e1bfc9",
        "cursor": {
          "ref": "0af2ff68-5bcd-4238-b0a1-40066d69619e",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c3d3b2e4-1a5c-42b5-be9f-0ad9b87c94b4"
        },
        "item": {
          "id": "dacd599f-530a-41ef-8aa1-c09625e1bfc9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "04aacab5-8e83-46d3-b030-cc7bc88492dd",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "dacd599f-530a-41ef-8aa1-c09625e1bfc9",
        "cursor": {
          "ref": "0af2ff68-5bcd-4238-b0a1-40066d69619e",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c3d3b2e4-1a5c-42b5-be9f-0ad9b87c94b4"
        },
        "item": {
          "id": "dacd599f-530a-41ef-8aa1-c09625e1bfc9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "04aacab5-8e83-46d3-b030-cc7bc88492dd",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "80ef2b4e-3deb-4472-abc5-a7c3f52b1205",
        "cursor": {
          "ref": "4d26ac3c-3122-4d08-a882-bb270b62ed47",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5413f6c2-ef4a-49fb-b377-40153152dbdd"
        },
        "item": {
          "id": "80ef2b4e-3deb-4472-abc5-a7c3f52b1205",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "130dc38d-9119-4c34-bc80-924ed9318471",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "80ef2b4e-3deb-4472-abc5-a7c3f52b1205",
        "cursor": {
          "ref": "4d26ac3c-3122-4d08-a882-bb270b62ed47",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5413f6c2-ef4a-49fb-b377-40153152dbdd"
        },
        "item": {
          "id": "80ef2b4e-3deb-4472-abc5-a7c3f52b1205",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "130dc38d-9119-4c34-bc80-924ed9318471",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "e32af2be-71cd-4720-891d-9622c6f58e58",
        "cursor": {
          "ref": "0bd32222-1d83-497c-8ade-efedad12e17b",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8e7776e1-2b22-48b4-ac6a-634b10f1206a"
        },
        "item": {
          "id": "e32af2be-71cd-4720-891d-9622c6f58e58",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9431a09a-ed25-4cf3-98d7-c29eef54ef7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "e32af2be-71cd-4720-891d-9622c6f58e58",
        "cursor": {
          "ref": "0bd32222-1d83-497c-8ade-efedad12e17b",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8e7776e1-2b22-48b4-ac6a-634b10f1206a"
        },
        "item": {
          "id": "e32af2be-71cd-4720-891d-9622c6f58e58",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9431a09a-ed25-4cf3-98d7-c29eef54ef7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a143d1aa-4d83-4809-bc5a-1ce919ca89bf",
        "cursor": {
          "ref": "8a4d09eb-bacf-4bfd-9041-627cae2f87d3",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "443adeb9-c7aa-46ca-b7ab-c61d7cb87e49"
        },
        "item": {
          "id": "a143d1aa-4d83-4809-bc5a-1ce919ca89bf",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "c1a18a88-0bbb-4717-8463-3c7f29d89993",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "a143d1aa-4d83-4809-bc5a-1ce919ca89bf",
        "cursor": {
          "ref": "8a4d09eb-bacf-4bfd-9041-627cae2f87d3",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "443adeb9-c7aa-46ca-b7ab-c61d7cb87e49"
        },
        "item": {
          "id": "a143d1aa-4d83-4809-bc5a-1ce919ca89bf",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "c1a18a88-0bbb-4717-8463-3c7f29d89993",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "6bf0478c-e001-44dc-88ec-fbce06047e67",
        "cursor": {
          "ref": "50917d5a-faca-4cb7-bd73-ab61e75883a7",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1c604c4e-0e9e-462c-bb31-b00f693addb1"
        },
        "item": {
          "id": "6bf0478c-e001-44dc-88ec-fbce06047e67",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "312d4cf9-eef1-4ef9-bcc0-27ea7b33acf3",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "6bf0478c-e001-44dc-88ec-fbce06047e67",
        "cursor": {
          "ref": "50917d5a-faca-4cb7-bd73-ab61e75883a7",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1c604c4e-0e9e-462c-bb31-b00f693addb1"
        },
        "item": {
          "id": "6bf0478c-e001-44dc-88ec-fbce06047e67",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "312d4cf9-eef1-4ef9-bcc0-27ea7b33acf3",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "9f7080bd-bddf-4309-9f3a-ceb0d71ac77b",
        "cursor": {
          "ref": "730612fb-4790-471f-a3f9-767d69daf912",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "10c531e7-dfcb-4953-8d0d-c125bc51de8c"
        },
        "item": {
          "id": "9f7080bd-bddf-4309-9f3a-ceb0d71ac77b",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "d19adf72-7c83-4a55-b2be-bd11ac8c68fd",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "9f7080bd-bddf-4309-9f3a-ceb0d71ac77b",
        "cursor": {
          "ref": "730612fb-4790-471f-a3f9-767d69daf912",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "10c531e7-dfcb-4953-8d0d-c125bc51de8c"
        },
        "item": {
          "id": "9f7080bd-bddf-4309-9f3a-ceb0d71ac77b",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "d19adf72-7c83-4a55-b2be-bd11ac8c68fd",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "a73ca448-dc40-477b-8408-877ddd408834",
        "cursor": {
          "ref": "f46b66a4-5565-446a-a9cc-d4924ded60a1",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fbd3a420-000b-4c0c-8c3c-c4c4e991be85"
        },
        "item": {
          "id": "a73ca448-dc40-477b-8408-877ddd408834",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "35d7d6ff-9bdf-4456-98d4-ee44bc23846a",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "a73ca448-dc40-477b-8408-877ddd408834",
        "cursor": {
          "ref": "f46b66a4-5565-446a-a9cc-d4924ded60a1",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fbd3a420-000b-4c0c-8c3c-c4c4e991be85"
        },
        "item": {
          "id": "a73ca448-dc40-477b-8408-877ddd408834",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "35d7d6ff-9bdf-4456-98d4-ee44bc23846a",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "daa616f1-9f23-4225-bfbe-c35bfc4f4ca3",
        "cursor": {
          "ref": "8f776dd0-114a-48ba-9af3-72a4a7e2f56e",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e94a972b-8b5d-471e-805a-eb06465d46db"
        },
        "item": {
          "id": "daa616f1-9f23-4225-bfbe-c35bfc4f4ca3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fe54fda7-ae96-4d1a-86f6-d3826cf6b463",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "daa616f1-9f23-4225-bfbe-c35bfc4f4ca3",
        "cursor": {
          "ref": "8f776dd0-114a-48ba-9af3-72a4a7e2f56e",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e94a972b-8b5d-471e-805a-eb06465d46db"
        },
        "item": {
          "id": "daa616f1-9f23-4225-bfbe-c35bfc4f4ca3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fe54fda7-ae96-4d1a-86f6-d3826cf6b463",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "cf15d73b-8919-48dd-8d46-001c834addf1",
        "cursor": {
          "ref": "965318cd-537b-4a64-b20d-708386f3a1a8",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "74678df2-3e18-48eb-bfaa-e3d2c654fee8"
        },
        "item": {
          "id": "cf15d73b-8919-48dd-8d46-001c834addf1",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "d4c8ad9b-05fc-4b1a-b76c-2099ae92a855",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "cf15d73b-8919-48dd-8d46-001c834addf1",
        "cursor": {
          "ref": "965318cd-537b-4a64-b20d-708386f3a1a8",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "74678df2-3e18-48eb-bfaa-e3d2c654fee8"
        },
        "item": {
          "id": "cf15d73b-8919-48dd-8d46-001c834addf1",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "d4c8ad9b-05fc-4b1a-b76c-2099ae92a855",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "bb04616a-c7e0-4cc9-9682-e04bdca5cf1f",
        "cursor": {
          "ref": "1edbd6aa-3d4d-4af8-9ac4-dabfef23656e",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6a8ea617-8bfb-4f79-af75-6f3ada801e37"
        },
        "item": {
          "id": "bb04616a-c7e0-4cc9-9682-e04bdca5cf1f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "85b575f4-1e63-4a2a-89e9-cb6ae14ec61b",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb04616a-c7e0-4cc9-9682-e04bdca5cf1f",
        "cursor": {
          "ref": "1edbd6aa-3d4d-4af8-9ac4-dabfef23656e",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6a8ea617-8bfb-4f79-af75-6f3ada801e37"
        },
        "item": {
          "id": "bb04616a-c7e0-4cc9-9682-e04bdca5cf1f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "85b575f4-1e63-4a2a-89e9-cb6ae14ec61b",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "03eb723e-1f72-4937-a4d8-881c1a8bed22",
        "cursor": {
          "ref": "85567a51-5858-42c1-96d5-1ff7ba09b243",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c5b13a8a-0c90-425c-b329-aac14a0fef51"
        },
        "item": {
          "id": "03eb723e-1f72-4937-a4d8-881c1a8bed22",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "0df2e99a-786e-4766-a1a2-091b66b3b551",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03eb723e-1f72-4937-a4d8-881c1a8bed22",
        "cursor": {
          "ref": "85567a51-5858-42c1-96d5-1ff7ba09b243",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c5b13a8a-0c90-425c-b329-aac14a0fef51"
        },
        "item": {
          "id": "03eb723e-1f72-4937-a4d8-881c1a8bed22",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "0df2e99a-786e-4766-a1a2-091b66b3b551",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3710f4-7586-4747-a7d4-a801640ac2d4",
        "cursor": {
          "ref": "89ab7b08-e4c9-4f8d-9802-28d4fd6c26dd",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3857cc18-e59e-4e14-897b-73fcb819b42a"
        },
        "item": {
          "id": "6a3710f4-7586-4747-a7d4-a801640ac2d4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "843cde2d-9b17-4ff5-bc00-51be006481b7",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3710f4-7586-4747-a7d4-a801640ac2d4",
        "cursor": {
          "ref": "89ab7b08-e4c9-4f8d-9802-28d4fd6c26dd",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3857cc18-e59e-4e14-897b-73fcb819b42a"
        },
        "item": {
          "id": "6a3710f4-7586-4747-a7d4-a801640ac2d4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "843cde2d-9b17-4ff5-bc00-51be006481b7",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b0db59-212c-4aec-b8dc-7c08a6457cbd",
        "cursor": {
          "ref": "d0f430c1-131e-4343-ac34-1b0914131ccc",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "83c3486c-6dab-4303-91f7-51b87d70de98"
        },
        "item": {
          "id": "07b0db59-212c-4aec-b8dc-7c08a6457cbd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1f2ac191-93aa-44c3-8027-8ba6eca28673",
          "status": "Created",
          "code": 201,
          "responseTime": 78,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b0db59-212c-4aec-b8dc-7c08a6457cbd",
        "cursor": {
          "ref": "d0f430c1-131e-4343-ac34-1b0914131ccc",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "83c3486c-6dab-4303-91f7-51b87d70de98"
        },
        "item": {
          "id": "07b0db59-212c-4aec-b8dc-7c08a6457cbd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1f2ac191-93aa-44c3-8027-8ba6eca28673",
          "status": "Created",
          "code": 201,
          "responseTime": 78,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e71425-fbfb-4acb-8f9d-30c4d5757b8f",
        "cursor": {
          "ref": "d70662af-3d6c-44fc-bbd7-25598acbbfaf",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "337cda61-8cd8-4b18-80e8-664a815d1bc3"
        },
        "item": {
          "id": "54e71425-fbfb-4acb-8f9d-30c4d5757b8f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9649d27a-12fa-49ce-b65b-139b54bc4ec1",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e71425-fbfb-4acb-8f9d-30c4d5757b8f",
        "cursor": {
          "ref": "d70662af-3d6c-44fc-bbd7-25598acbbfaf",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "337cda61-8cd8-4b18-80e8-664a815d1bc3"
        },
        "item": {
          "id": "54e71425-fbfb-4acb-8f9d-30c4d5757b8f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9649d27a-12fa-49ce-b65b-139b54bc4ec1",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48f9766-d68c-43a3-9964-e2c6edd9934b",
        "cursor": {
          "ref": "b8310114-d0bd-4910-8f40-7c0f06d05081",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3c558891-f3c9-4c2f-acb8-ccc3f7d3a373"
        },
        "item": {
          "id": "d48f9766-d68c-43a3-9964-e2c6edd9934b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4425fe75-10a9-494a-8e3f-9232d29e4ae5",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48f9766-d68c-43a3-9964-e2c6edd9934b",
        "cursor": {
          "ref": "b8310114-d0bd-4910-8f40-7c0f06d05081",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3c558891-f3c9-4c2f-acb8-ccc3f7d3a373"
        },
        "item": {
          "id": "d48f9766-d68c-43a3-9964-e2c6edd9934b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4425fe75-10a9-494a-8e3f-9232d29e4ae5",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55be860-6287-4c89-859b-b60b73267a75",
        "cursor": {
          "ref": "b495c2de-492e-4e56-9a44-c28eea700034",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "939b4289-dbe0-4642-857d-fbdd3ca3bdc8"
        },
        "item": {
          "id": "a55be860-6287-4c89-859b-b60b73267a75",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "9b2029b1-9b12-4482-a7b0-be0beb89efbf",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55be860-6287-4c89-859b-b60b73267a75",
        "cursor": {
          "ref": "b495c2de-492e-4e56-9a44-c28eea700034",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "939b4289-dbe0-4642-857d-fbdd3ca3bdc8"
        },
        "item": {
          "id": "a55be860-6287-4c89-859b-b60b73267a75",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "9b2029b1-9b12-4482-a7b0-be0beb89efbf",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5de3ca2-58a2-47fb-8f5e-3a4743ea251d",
        "cursor": {
          "ref": "11a20bf1-c7e3-4002-8667-c7493b495feb",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6734794d-8992-4d0e-aa5d-cd91cd81890c"
        },
        "item": {
          "id": "e5de3ca2-58a2-47fb-8f5e-3a4743ea251d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "13319aa3-57be-43e7-a195-e3bfa0a2bfb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e5de3ca2-58a2-47fb-8f5e-3a4743ea251d",
        "cursor": {
          "ref": "11a20bf1-c7e3-4002-8667-c7493b495feb",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6734794d-8992-4d0e-aa5d-cd91cd81890c"
        },
        "item": {
          "id": "e5de3ca2-58a2-47fb-8f5e-3a4743ea251d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "13319aa3-57be-43e7-a195-e3bfa0a2bfb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "21e54af7-8d9b-452c-a1d9-d00a7a0b52af",
        "cursor": {
          "ref": "966e2e4a-2684-42eb-8cdb-b3b923813b11",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7a173800-537f-455b-aed2-296c4e429150"
        },
        "item": {
          "id": "21e54af7-8d9b-452c-a1d9-d00a7a0b52af",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "43857fe2-3c46-4a8f-a97d-169a11b39024",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 44,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "efd26bd0-530c-413a-9788-786e39f81a85",
        "cursor": {
          "ref": "d0e0d18f-0702-470d-a5f6-d0ab23ed5545",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ff33e3b3-369f-4db1-870b-9666a902f4d4"
        },
        "item": {
          "id": "efd26bd0-530c-413a-9788-786e39f81a85",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7d611904-9aae-47a5-9d1e-d9bc8b875f70",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "efd26bd0-530c-413a-9788-786e39f81a85",
        "cursor": {
          "ref": "d0e0d18f-0702-470d-a5f6-d0ab23ed5545",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ff33e3b3-369f-4db1-870b-9666a902f4d4"
        },
        "item": {
          "id": "efd26bd0-530c-413a-9788-786e39f81a85",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7d611904-9aae-47a5-9d1e-d9bc8b875f70",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6bbce57d-b9d9-4d7c-9141-a48dae718957",
        "cursor": {
          "ref": "a1caab44-3f78-487e-8f9d-0c2eb3106857",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4f266642-52e4-4143-a92a-9b28fec806ca"
        },
        "item": {
          "id": "6bbce57d-b9d9-4d7c-9141-a48dae718957",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e7cb6305-88d2-453d-85d2-8d96ca338a33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "568efc44-8c02-4c01-8519-1690c0206a43",
        "cursor": {
          "ref": "5eae746d-eed1-4118-9f88-4af73cc05c32",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0bf76d76-7c6e-40dd-8d28-5cbb95d2f083"
        },
        "item": {
          "id": "568efc44-8c02-4c01-8519-1690c0206a43",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "11e0a355-42be-4fa1-875a-89e3bc7a8e5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "5b687699-cc57-4a51-91ae-b9a9484a9901",
        "cursor": {
          "ref": "8b9c0588-7466-4fb4-9717-64d9ad8aef5d",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "004eb78e-3ce2-4e29-9c1a-35ff11510d9f"
        },
        "item": {
          "id": "5b687699-cc57-4a51-91ae-b9a9484a9901",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "77822dd5-42a5-4223-bb05-16b12822773b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "c572cf11-c21e-4960-80e2-e093cc19261e",
        "cursor": {
          "ref": "11bd2ca4-55f4-45e4-92ce-8372c16a536b",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "253b631f-08d5-4ec0-99de-c1b3ddbafc27"
        },
        "item": {
          "id": "c572cf11-c21e-4960-80e2-e093cc19261e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f4655aad-3038-4153-9d8e-606ad9800ea1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "6b010cb9-a270-4849-aec8-7ce3a6c7c9c0",
        "cursor": {
          "ref": "8caa107d-55bb-466a-9514-a48f4d4f41b7",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "dd390134-e070-4904-952a-6be0976448ec"
        },
        "item": {
          "id": "6b010cb9-a270-4849-aec8-7ce3a6c7c9c0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d8981b63-37b9-4ad2-a438-70ca6c67c4c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "3af00407-4d01-4e1e-9862-a4b23b6a1bea",
        "cursor": {
          "ref": "edfc9772-44b7-478c-91af-daef1c0c2f07",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7539f1ba-8e93-488d-8170-c0c345b6dc54"
        },
        "item": {
          "id": "3af00407-4d01-4e1e-9862-a4b23b6a1bea",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d38570a4-3bd5-41aa-9950-40d6d8f8b441",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "83d626b1-c3f7-4e63-8ac6-fa0ba7e67080",
        "cursor": {
          "ref": "a7089838-d4ea-4c98-8fd2-ee502d14551c",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e7f547d4-a840-4f1f-b66b-8d85b23b5b99"
        },
        "item": {
          "id": "83d626b1-c3f7-4e63-8ac6-fa0ba7e67080",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "050984ad-ffdd-47be-83ec-201c5bb98756",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "f9134ba4-ded4-4434-898d-506aab5ebfef",
        "cursor": {
          "ref": "5ff82b96-afbd-4917-ac69-6cf7254c3f78",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d5201385-1c51-4676-b73c-70f163481bc4"
        },
        "item": {
          "id": "f9134ba4-ded4-4434-898d-506aab5ebfef",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f355a8b1-ed1b-40e3-afcc-80d7d0c37464",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "f9134ba4-ded4-4434-898d-506aab5ebfef",
        "cursor": {
          "ref": "5ff82b96-afbd-4917-ac69-6cf7254c3f78",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d5201385-1c51-4676-b73c-70f163481bc4"
        },
        "item": {
          "id": "f9134ba4-ded4-4434-898d-506aab5ebfef",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f355a8b1-ed1b-40e3-afcc-80d7d0c37464",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "c0d0bf68-ad28-4c55-a50e-c5934ec45dea",
        "cursor": {
          "ref": "1e23154b-7dd7-4801-8689-540f8c867630",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b7df2269-689c-42de-bf81-55cbab3cf36b"
        },
        "item": {
          "id": "c0d0bf68-ad28-4c55-a50e-c5934ec45dea",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "5a549d13-cc79-40c4-a63e-b7df80f7ac63",
          "status": "Not Found",
          "code": 404,
          "responseTime": 51,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "cd550e68-6b41-4ac3-a860-acfab1c1b638",
        "cursor": {
          "ref": "8e0228d2-40d8-43ce-a74d-cccbcb1e3a35",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "dcfb72b9-fa7f-4827-b16c-ea8a671afd68"
        },
        "item": {
          "id": "cd550e68-6b41-4ac3-a860-acfab1c1b638",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f811865f-8e03-45a5-adf9-8d85826d75e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "cd550e68-6b41-4ac3-a860-acfab1c1b638",
        "cursor": {
          "ref": "8e0228d2-40d8-43ce-a74d-cccbcb1e3a35",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "dcfb72b9-fa7f-4827-b16c-ea8a671afd68"
        },
        "item": {
          "id": "cd550e68-6b41-4ac3-a860-acfab1c1b638",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f811865f-8e03-45a5-adf9-8d85826d75e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "4ea361ba-a3d8-43d3-bb1c-20b8c3a7323d",
        "cursor": {
          "ref": "47c33551-f5e5-4517-9d7c-08c45b169d66",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "12308062-ac2e-46b9-b6c3-475be3564437"
        },
        "item": {
          "id": "4ea361ba-a3d8-43d3-bb1c-20b8c3a7323d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "531e0504-1a29-4b7c-b2a9-98b1da9b5940",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 130,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "8036665e-e178-48ad-80a1-61f59c056c1a",
        "cursor": {
          "ref": "5f5745be-12fd-4e9c-9db8-44c89dc335c0",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "121445ad-a397-4faa-ae06-7f02e0260c18"
        },
        "item": {
          "id": "8036665e-e178-48ad-80a1-61f59c056c1a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4adb2d0b-34b8-4205-830b-7a8be157c230",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "8036665e-e178-48ad-80a1-61f59c056c1a",
        "cursor": {
          "ref": "5f5745be-12fd-4e9c-9db8-44c89dc335c0",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "121445ad-a397-4faa-ae06-7f02e0260c18"
        },
        "item": {
          "id": "8036665e-e178-48ad-80a1-61f59c056c1a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4adb2d0b-34b8-4205-830b-7a8be157c230",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "364d59cb-fce6-473e-a840-8d3f9dbdff23",
        "cursor": {
          "ref": "f96bfcb7-7bb5-4c07-a17d-032bc0b339a6",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c4847f4d-b4e2-458a-b0be-45928006d6ad"
        },
        "item": {
          "id": "364d59cb-fce6-473e-a840-8d3f9dbdff23",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f536eded-ef7a-4836-bb47-1620554d9169",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      }
    ]
  }
}