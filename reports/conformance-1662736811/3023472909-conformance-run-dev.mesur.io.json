{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4bc2fe98-5a64-4a93-96f9-4914cc71e5df",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8d298006-a621-4d4f-b5e5-cafe000a9fcb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7979155e-5388-4915-968c-dffa848e01ef",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7cd0dba-0da8-4596-b581-d5e6c4872122",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8b46ebc5-7f23-4fa7-a5d2-546b301921a9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "13890163-1bef-4103-a0ab-71129259d899",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4a1283af-e665-40bb-ac8d-4a2febb62a16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3fc08eb6-9aab-4d19-a95f-e94651260154",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d1d7789e-f8cc-4888-914a-624a6c080db6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f623e6fa-0b07-4423-8997-7384dfe7b2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5dc87b84-b11c-4777-8160-7d9b6f82fe36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c9b21a-45e3-4c91-a6c6-574c7b2c0d23",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ac3fe1-b737-486d-a578-6295bf7b7838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5f61af5-c53e-45eb-886d-27dff8df3a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6529ed1-f2a1-4fb8-a5fa-c31300ac2cf8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e58822-62fa-4312-a798-0ff1c4bfe2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7306b3ec-702c-4a7b-a6f8-d5ad169a9fec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0e071177-bdb5-4afe-8040-54152b8abdae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7bfa5132-ea65-47c4-ade5-d4bace43898f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c658229-e5a0-48dd-8ab4-101c0dff9383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12d4150e-be30-462d-93ae-c8eb7425fabf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238a7525-1950-4e51-a2f3-be187098e57a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44477aa-6cd3-46a8-830e-4c966f4ba36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e1c984-4df5-4427-8caf-dba98e3f9ab0",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0375e34-f411-458d-9dd1-b5c797a6321d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b8a0e60-fff3-4dd7-809f-7e6aba100ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1069d7c1-ef6b-4ce8-bcb6-90df8dbf2dab",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "60e638f2-adff-460b-be2b-b604b6eccb4d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "078b6945-6a34-4dfc-8651-17f6130e35c5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b3c99f3f-1065-4092-b087-3da804c5537a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ba7d96a-e1b0-40a8-9db0-4f072e827d16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "324e61b4-e01e-4bd4-9bfc-340b002e01d0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00f7476d-61b5-4e9a-8a7c-7ce467c143be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "ac699c9f-c0d6-41e4-b17d-57d65421f36a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f3f06205-033f-4a1b-b7aa-8ed2c09677fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a5266835-e267-4a2d-a52c-ba3f4c8de0dd"
            }
          }
        ]
      },
      {
        "id": "4ffaaeb5-095a-4b6b-a8a3-015ae168e598",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5aae3265-924f-4412-bb15-de85f0437bab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a8faf96-8c52-42f1-a0fb-eadfcf0b6021",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3fb50f27-26f5-4601-a02e-b8e1db70c1af",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0acb1d4-3821-4817-8f09-64474e8dbbca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa84bc6a-4136-42ec-a8e9-07a8564a2ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5aec2f-087f-4bb9-bb35-950e4154a986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50a1dc98-629b-4270-9d78-241c8ee78e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ced46e-b72e-4bc2-841f-2427559d0d57",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4f1cdc-d3d1-43da-9f55-99f6082dfc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "731ecb5a-9994-42cb-997b-77c2c609d1f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8326f8d-7b44-45bb-909e-23497f4906e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12d7e0cb-a307-4971-8e2a-06a789c3e8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8d8741-c9ab-433f-a713-d3990cad6b25",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edf6710-77df-4553-a394-c9eb8a377376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1558abda-8afa-476e-a0f9-6fe64f2e279f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa8f2ec-3c88-4b62-aaf5-eb4453e98616",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ace9e20-7678-454a-9d1c-648a12827420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e01a24-068e-4e8b-bce4-9ab7f573dae1",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3403342c-7627-4259-8404-09b8f7475c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c652e69d-36f6-4053-a13a-e1be79a2cdf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f25ed50-9a6b-47f0-845d-ef8d523241f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04790f42-42ca-41d9-8a22-3b0600689a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a44abb-e944-4f4e-af01-311cecd45c98",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d40b06-6835-449f-81ed-51e7d22c79f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf12a912-66fc-420a-98c8-98fb78701071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414d2825-6b39-4108-9574-fd9224b54bbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcebd4bb-a37e-4df5-b6b8-86181ece9bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1284fe8b-62fd-49b5-81d5-d0e478f20d66",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f3580e-0e99-413b-9079-c59af3d4ce2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73ab596d-7827-4fcb-afa4-c16c472823e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0def4d3b-9772-403f-b9b6-21f28ddc87b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfe13916-44d5-4241-bcc2-7e584bed67e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ff675f-6fb0-4b85-90f5-aedd48d18a8c",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "137fa9d0-03c9-4fe9-964a-dc394a05132b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b16129c4-3bc7-464a-afba-6ed5079687d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6a717c-cfd7-4758-a848-91d2ec98b5c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "794a47c3-37f2-47d8-8a04-ac582b518c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a69a4a-f448-41ca-89f8-80df90f42ead",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec362ebd-dd83-4296-a085-0d835b925a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e834f956-7a46-421d-86e0-0804ce38838f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c7a630-19e1-46cf-8822-165edd9d6164",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f38a501b-457e-4237-ac56-9d43c51b6e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc5569f-80fa-4775-8baf-52fed0ab8b1d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ebb58d-9abf-4773-aceb-8fb3922b0cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9272083-3816-4af2-ac5c-1e9f1717ddfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a149a954-fd31-4615-bf27-4e9581c9e773",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "182f9df1-4511-46f5-bd7b-40a9366d54b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fdd24ba-920f-48fb-8a7e-884cb1f761e7",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e157c0-7118-45f5-bfae-19be17904cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da69dff7-57bb-4481-ba0c-9958a361d135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42993d4-6724-4358-8deb-fbb1178dcf22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6530ebd-6545-4484-a0c2-80323e8bdb3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "088b95ad-995c-4927-937b-c66426ee48b7",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10048b8-0b6f-495e-8b14-74a04982607f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47750c36-332a-41dd-a18b-72ec894a6288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb93006-9083-423a-86e5-4723404eca20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "cf2d2e5a-df92-4676-9a52-9af7c9ed7377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac709b8-c73d-40d2-bc82-65646227c2d3",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95828342-9d9b-4d3f-8802-3f8ba50d7423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2191aba1-92bb-4b72-894d-cdd3fe53fd93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3395e987-7445-4386-b0ff-f45ddd1aef12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "53e6b7d8-8423-4093-b564-7463c08829d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1468166-b621-47f3-9734-99540492bc9d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f484f34f-ff7d-468c-a0c3-172ffdc0f732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4e9536-6395-4e32-96a1-c798fb6e75d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54419df-25f2-4870-b38e-ed9d8bec2d93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d414c8fb-e60e-46d2-aabe-99a2c29f5500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2f4a16-6ebb-487c-8aae-87d6b02dd65b",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b39be5-3ffd-41a7-9240-c44dc23df07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a8bf0b-b681-47d6-b3a0-c25c6caac1aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b5db41-f59b-4b5d-9a1b-15ecf6d41bb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d8dd4e8-9801-46a5-898a-77bebf9768fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6173ff9-1e63-4ea7-ae1f-d1661b4d1e2d",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ea9e88-cc47-4eb4-abeb-026c4afc9c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51317745-604f-44cd-8871-4fc77a1debf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff78776-eb3b-40c3-87a5-a692381f3f1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "aebcd01f-66a9-4713-8571-35d98d2ffb99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea14ca4d-fa05-4be9-84d7-6b3266852236",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ee5a51-ec7b-435a-8de6-40e11112fd05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e07d4422-27d6-4631-930b-170bb84a0f9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ffc95b-97d0-4d0d-9671-39b8cc2149d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "80e69c7a-fc18-4a2c-9c00-a337e36ff06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c186724-854f-473c-bb53-594b8c793f06",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddae54d9-1471-4b1b-93ef-3a072c755a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e290a439-5b30-483d-a811-be7f275a4c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b5efc1-fb5c-43c5-8c96-a3f7b8317f11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3107c263-8588-449c-86ed-8b133c549e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642cae29-3b3a-444e-8dd5-7eb46c2f5b38",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b55f18a-bcf2-4cb8-a9ca-a32f11d7327f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28c4205-f670-4198-8043-8860eeb44437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aaaf566-141b-46fb-969d-d3d3055dee7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47eac764-e8fd-4ab4-a2ae-7ae294453e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443263d6-b6ee-454f-8a93-add410e0369e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce8bb3f-d97c-48b9-97d5-db6e8f453621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e511e618-d0c0-457e-a491-5913bc7220a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23516f4-90d0-4433-95b2-7cf6de69a1af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "999a4f9d-c843-43f8-9cd4-d515665f2f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8cc169d-fc79-4390-98b2-2f20a9fbad4d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35999e7f-d0e5-456b-897b-319d36444dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cccd251-acb8-4d8b-b79f-5ad9cdb9430f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26535931-504d-4f41-b73f-0f715a970dfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d60c8c7a-ffcf-4ecf-ab8b-b3c80309d430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3318099c-3e4f-49ca-bd30-92ad1f947295",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d96f62-03e6-4dc7-9fad-34cf1afdbc0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce6e024-bc91-4b35-98bf-53b2eb80ff41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b871cd14-7079-4645-9d19-8fa8c02b53fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "360769d8-af5a-420f-8e36-86b8a76fa54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b19ed5f-8926-4a00-85b4-4a329a72f09c",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70834702-f7cc-401d-ae36-10a892b714e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0e36894-04be-4999-b77c-460207f5793d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a50b1b-2208-4be2-be3a-7e8d5bc863fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f110bc02-b71a-4180-a180-199cbcfc708e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e0d7b2-39e6-4514-ac95-38232dbf8af2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ba9652-e214-467a-862b-6bd42bcb2105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d4850e4-aad1-4eee-9e47-156e249dada6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9b2f5c-842f-48aa-a1f6-37147a9688f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4734b5d1-1876-4333-8441-9cddee24a7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927c406c-100c-4dd3-a0e1-798ee9f9ddeb",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd062c9-6e48-454e-8c26-b4a24aceb906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b70051e6-d2ce-4dd6-b73b-1f92e45eef5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471065e8-271e-4bec-b82e-55d23eb9ef09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d366552-6655-4502-8ad1-5d4be0167111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4dd0e5a-8c27-4727-bb43-1354012b4d66",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9fb254-42c7-4863-8341-07ec4fef9022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3340776-ce1c-4180-ab0e-ecbae4a9e9b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c70c5d-859f-46bc-a508-8a7cd441907a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e43f94d9-f02f-4cce-a0aa-afe563ad6cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77570796-d4a2-4761-9080-f6a7c42d3d9a",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "101eb6ce-6556-4f0d-9838-3c6999d481c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df30568a-2395-47ce-bd07-3a435d7598de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcba4d8a-3a13-4c08-9b52-a296a316b9aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e00cc53f-2d01-43f5-b8d0-72576a258c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c52e62-5463-4e40-b425-02bfb99e434c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "933b33ad-a5b9-44a2-a5b3-e467739c746a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5128ecf1-ae10-4c9b-af60-78f3e69078e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53bf87ae-6b2e-4b1a-b1ad-5196abb769c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "619c16d2-ae2f-411a-b533-25a7a37938af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f16eb4-1209-41a8-94b5-4f398bc0be03",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b6743c-f8c5-4fac-a215-4b8ffedab736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b726b87-356f-4799-bab1-92699faeb5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc9c602c-b68b-460a-8d61-1dd97a57175e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd4074a9-765b-4a77-ba57-7ce0557a9e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddff41d0-d2c0-45be-ae3e-ae4f9234e231",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95689e60-1826-4687-9e72-da7dae62e32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc6d7af9-96e2-49f6-8906-e111bb814d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca0ee15-f2a4-4eec-8d9a-b195f759bb88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5cdaac9-8b3f-4374-b37a-6af54fcacc51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1785a86-78ae-4238-b03f-a8568891de2a",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10dc63e7-6b3c-489b-b763-96927ae14231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "335007ef-17d7-4662-9901-2a36158200c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e95d71-f3ab-4fe2-8f46-f077ec16186b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d54f49e-c874-4f63-bcf8-7585b3e0dc77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20f6e0b-b055-41f2-bd90-f5e9d9d3fd67",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3daf21-c8f3-442c-926c-3d129add6565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "209035a2-0afc-412e-82ba-d7ec88112689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074ae833-88f7-4567-b060-973610c43126",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbad6d47-c32d-4e76-ad89-1e5ff2538fdf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ee68884b-be25-407a-a00b-7b0af0b5692a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7c07c1b2-b97a-4d48-8031-f28184ff9e56",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72926868-504a-4e94-83b3-4a3cf0a95717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ab8c9be-f515-4b4e-8ead-a3d86f5e3b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cf588d-c003-4aad-b6ec-b28a30c46978",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "990648c2-130b-4a86-a028-1131b0b4df7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34c538c-3606-460e-8423-19d84680b0dd",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782f8c4c-506e-4700-8669-a0248dab71fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe64e167-932e-4475-8f02-7f76e44606b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b859e1a5-6a92-4b28-a5bc-35412c5b48db",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "324c5a22-6b1a-4fd5-a5b4-4a9dc892de50"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7cad36d-fe67-4923-b084-45291f59dc27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60c001f1-0263-476c-8842-9cf292338fce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "16f88da2-13ce-47c1-a9ec-4741f8cd20a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef9210c0-d54a-4d98-ab39-ffe27cf894e3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ef656685-3b8f-4a28-8d63-b6f182850d0b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "81fc2ab0-ceff-4969-afbc-f2d44e531b90"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "76b919b7-64ed-405a-b906-1b95e86920aa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "40fe3105-fa10-4ce3-852b-24a8c657b4b2"
                }
              }
            ]
          },
          {
            "id": "15ed9636-15df-42bc-9192-86d2b66c7a27",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a6ad0bd4-aa4e-49fa-bf89-d3eb9d02b4dd",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b13b7661-5c14-4c47-a4d6-5ef547ea5c1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a97c5865-953b-476b-b016-be494516094f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4dc39fe-a1d5-4858-acc0-3ef8463a60b6",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "fec086d8-2807-47fb-9e50-41ed22cd19b8"
                    }
                  }
                ]
              },
              {
                "id": "a1ef4eb5-b32d-42a5-b4cd-23717d1b140b",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0586f306-ed03-4640-a606-9c30effea830",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b75b6d2-357c-4236-8038-ca590bedef94"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8380943a-0fdb-44a1-aaf2-8d4cad1370bd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c983f414-37a7-4f76-a36f-3e73227136c1"
                    }
                  }
                ]
              },
              {
                "id": "cde5e8aa-799c-4477-97ba-42372cdae7c7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf7e1d51-1363-435f-96ec-75069f5e2c6b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6a69fd8a-f066-4d64-addf-f751ef0cdbc8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0440d34f-3040-46e7-a1a2-e5f06a52cd89",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e78c7532-a690-4a0c-9573-aa4771fe7a8a"
                    }
                  }
                ]
              },
              {
                "id": "38f0076a-467a-4081-a977-a9379d06c426",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53bebbef-23de-4367-a375-2a859144fe5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a0fd1eb0-b4d4-4a37-a91d-7c50f49dd531"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ded705f4-527d-4eb8-a9c6-29fb1a1cf437",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "55f76552-428e-4bb4-93cd-139f392f2db5"
                    }
                  }
                ]
              },
              {
                "id": "744bec0f-4e50-42b7-afb6-1e318e1ef96b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28532161-5391-4798-96e8-c7667741956f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ccde06d8-b1d3-4a90-8399-56ad61f42eed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5146e0fc-7cc6-478c-a177-27ef98afd65f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c38d0a2f-8a8c-492f-b31d-6ac5cfb5d315"
                    }
                  }
                ]
              },
              {
                "id": "9bce0021-13bd-4850-beeb-40e3b5c09e24",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af285840-9cbb-45cf-a247-79eee0e2523b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3fad8e17-6852-4daf-a73e-1bf3ba5a3943"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3624f98b-8964-4a0e-907c-ec3b1cc6d100",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "384e3004-ed3e-4d6d-9b89-7ba71233c98a"
                    }
                  }
                ]
              },
              {
                "id": "8f9fce1a-13ac-4974-8238-227bcf54c908",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0a853c0-851c-446a-926d-032cf278ad83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "38fca589-98ca-44f8-a84a-ed6f4370a453"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32976af5-1eac-4bf2-b6f4-15d9a951893b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "86517161-985b-4780-91f9-9d560c26bd7a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6b299506-b86c-4e6f-99a3-6ac864f27d78",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "51bef697-3ed9-467f-8407-d9dce115be21"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3e5212cf-c6a8-494a-b9da-42f2cdb18310",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "29c84abf-966e-4b8f-b508-0af406987369"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ceb70616-cccb-4172-9702-0a9ec252eafc",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "2bf0bddb-e701-4bfd-aa81-12661fe4d9fb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56373c12-7f42-4c8f-a790-0c9c77c6a30f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f9eeb20-c1fd-42f0-9b63-71a8705fc587"
            }
          }
        ]
      },
      {
        "id": "d31798e4-fe3e-42c4-834c-311589c4604c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "68a2a197-ae3c-4786-b23b-690eeabfc5c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d2c27b8-fb79-416a-ad34-3e61f2e828a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3bf5bf72-eaed-420a-9844-bd525e54d74a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37326b18-7373-4717-afca-abd6feb9f6f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e006e18-e3a7-46dc-b3b0-7c221f85b0c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6232324-66bd-434b-95f1-9934006a82b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f015929-d659-490e-a0f5-0bfd1d57ad21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01fa5c2-216f-4207-9441-a71adad04c23",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed119f7-848a-47ac-bcdf-23aaee65a892",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "4df6df74-eff2-4a98-8f44-0ea729eaf04a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "251d0bee-79d3-4298-bac1-5ff889f9a69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea6337d7-40c2-4980-95f7-bc5a9d05453b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ca36f79-32b2-46e4-ade0-b000657485a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddccdd09-0098-45aa-8d2d-e549540683fc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed09b99a-6e44-484c-b678-d05a9aba4570",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de604ddf-b707-4b2f-8178-ac2efeee98af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c81e0446-fbd6-48b6-a4d9-4d0904a7c78c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "7f581a46-e2a6-4ce4-9219-e4012063fb45"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f159f85-c4ed-4c1a-b59b-629d4ef1277a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b9896b7c-b4bf-437a-afb5-ee2ccd25191d"
            }
          }
        ]
      },
      {
        "id": "dccf5801-09a1-4f6a-8cf4-518f4cb9ea75",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "728fa9f6-09d6-48e7-a3d4-0bfeee00b9d4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "83d039a3-3fcb-46c8-9eb2-817d03674329",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "99f3311d-23d2-45bb-90f5-d755c6a0e636",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e52507-0689-4598-96df-41819da9cefb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eb37a94-7f48-4769-bedc-b74c9bd246ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c40fe01-152e-43dc-adf4-100f5b2e1a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cfcfefd2-ce59-4840-bf70-eceec3836426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6882cb4d-a6f9-4ffd-90e0-84c9fceebe1c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc8fac6-9da1-4369-b897-6486bbed919f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95dcf1dd-ad51-4163-aafb-c0c8f6275392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b540566f-de7b-4c8d-97ad-fca2ca38342a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a54b05f-83a4-4bdd-8c4c-136cdc08a87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9dc123-1e99-4773-ae07-0cac331645ab",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f898a9-f3ad-46e9-8e29-aaf41df9a2bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f938ee3-7325-495b-8b87-530d39df6ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "202eb5e0-2ec8-4051-93bb-e76ddfc93475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80fdb6e8-e29f-4fda-90db-de185194052c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf6504e-e734-4bd6-ab86-bb7257bba855",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7a564e-4141-4d12-8ca2-11b4ed994ba7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a60cc6f-b30a-42e9-8cd1-41d39d5e3b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b2184c-b67a-4537-aa7f-f910a6cda505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28e4a79c-ef7c-4d80-b02c-450b8b3da690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d223c61-77c4-4942-84a4-9f2804708e24",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "705eb59e-9e24-4bef-a7d5-f46da7309b78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4763c309-4b34-4f62-a31f-16d32fba1ef3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cc1ff0-f714-41ba-9e03-2153dd3f21ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7866393-e9f0-4504-a442-8117e9715779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac8d060-7805-48c6-8b04-6d319ca1d6a6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ed96ed-6d88-4bc2-9f9d-1dee82c2cd97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "092ffba5-9cce-4e15-a33b-30e2862fb9c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96c2134-6a7c-488d-add7-c1db12be86de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0aca58a5-b6ea-4a59-a057-4d2f13018fe9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "99b2aeb9-9756-4c4f-8ca1-af5dd5171704",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "942d4ffe-6744-4472-bb2a-2596215e7577",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615d7186-62dc-46d0-8d1e-83d5f4996181",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "bbf7ef54-81b2-4f71-b99d-a8a802cfdaba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3547ebf-08ce-4f0c-b2d3-21b27017fdd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7849ba9-4f33-4fcb-a23f-5340b12d96ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084ce166-5a39-4932-a734-f13027bebe9f",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8c6204-c753-455a-bb99-963a295bc86b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "89050059-cc91-47c3-8bf9-502501415268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f4a9ca-514d-4a65-9923-7063e60f553b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2720555-9287-48e8-86af-26234d4a7290"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7402a80b-99f2-47fc-96cd-8e6aa4125a5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f96e088-2d31-4ae3-8204-e6e560189425"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fba1b746-44db-465a-8b16-a66685e0ed27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92adab9c-2256-4fca-a5f1-4a56aed4c9cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98fe3c81-f7b3-4366-9535-2da9e8787f17",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "eacadb24-f3c8-4595-abef-319e8d394175"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "971373d9-6491-4c17-b9f9-7092017da6fd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa4de9da-e48f-4623-aeda-894f40e7e19a"
            }
          }
        ]
      },
      {
        "id": "3c4f4b50-1be3-460e-a521-34c274a21f58",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "76aecb5f-1b38-46ee-9216-8aed1a0ebc6b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2fef42e8-7831-4198-9603-7b3aa33ee1e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5039ef4d-f387-4f77-94e9-3431e814c7cc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fdb640-db9f-4031-af54-c0e2be2e4ee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b516b9-de29-48e0-978e-8bbea51a92ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a072fcf-3d5c-4998-a758-5c5e6a5f2142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15296e7b-7a2a-4287-8dee-9dbbfbec6b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375c855d-7187-4c8f-a123-804d71c8342d",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33066af9-4f08-49c6-870c-e1ea49bef010",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "904abaa7-40d8-4221-a69e-880298a053fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9f5596-eb09-454d-ada6-f40d6cfd3175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0408366-17b3-49eb-9195-7927ff795efb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07beaa53-993d-46eb-adc9-c9c0f54f572d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40770b9c-083a-4592-86b6-8285e7c50b4a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8f0fa0b-64f8-4809-8c67-c2a337c9dc80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c66cf36e-9c39-4586-a303-d588b29762fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab58a473-3a41-426b-98d3-fcfe3fe9ab0e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "72978113-ed6b-404b-80ee-c30a2f70d7a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b790c8fd-bef4-4c9a-ad26-d3adf2098d1f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e83047b1-1fc6-49bd-9e28-c1e4c2496fcb"
            }
          }
        ]
      },
      {
        "id": "c4cb73f0-83a5-4d8b-a0b2-bd36eb606325",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "828ea19d-de4f-4f7d-b83d-e0f9607f6036",
            "name": "Negative Testing",
            "item": [
              {
                "id": "abbfd950-022a-4502-9b31-4a1d073ae952",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c6b12c41-2a82-4d64-aa8b-3dfde790e1c2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81464bad-ccd2-40e3-89ca-80c72c5f137c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60290d34-b628-4e15-9791-52fede2dcc60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a70512-c0b8-4c61-a701-18d25f5be767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02f37373-917f-40d8-8d38-31179e8cbdfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c7e50a-bfde-4284-b8c3-0b79214b31a4",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdab52c0-0f54-4e37-a0a7-972d20c1c4f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c3d8077f-967c-43f7-a478-f54df43f2388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e3f85b-1926-40fc-86d3-175ede9a3c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ea06748-2011-4075-9293-62790ac6ccfc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41882b99-2057-4ee2-8f1b-3ff00be61c12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b056e7c-a5ee-4653-bdfd-253a12beda0c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ddcbcc7-0ae9-4f37-bd45-0461cda13914",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b7f1cdd-f621-41b6-8c94-b73a8aebfa37"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4939343-d928-4cf0-a3a0-f1c3ad748978",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "40ac0762-b147-4262-a236-33ae224bc0ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f84a5ca-5c5a-4a68-bf75-3880581619c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd1f1578-4e64-45ca-93f3-767da4332278"
            }
          }
        ]
      },
      {
        "id": "1dc6c9b8-f9a7-4c94-a63e-196352ad9ccb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8b3c3795-54e7-4862-b4ea-dba5696bcece",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c0b37d0-8c77-4c9f-8f14-893bf80ec64b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0862127c-7f5a-43be-8c4e-e8e56d2b49c5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7de5b7a-3632-4506-ada0-1e2efada0a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b883a14-651c-4bde-812a-a4ca45364716"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f140f82-dc13-4856-a440-f860a94128fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c8f55a7-3410-4a50-88db-fdf782803723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ee1a20-5b42-4c9e-a05f-33b717d51425",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55214d13-ccda-4470-9578-701db2f83dfe",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d7a45998-37fe-4273-a819-7817e442033c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb63093-423c-4214-b315-e3c44e588c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4170143-bb76-4bbf-b419-87c5bf914bcd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bffa45e-26c9-4773-bfb0-96087880cc83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d708842f-43d8-41f7-9b68-5460847c5401"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbdea30b-c44c-4a1f-9a85-88930f2ffd49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5696f71-3e30-455b-8f31-73a0c478cd30"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f6e3282-3e98-4a51-95b7-6963455a3062",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "b62627ff-5a37-4742-9ccd-ebe4b2e146a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab0b7bc4-fffc-426c-a3cd-b95c128e1a1a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "98928505-7c12-489d-abe9-70da5770c88e"
            }
          }
        ]
      },
      {
        "id": "2b8d7732-66e4-4a80-ac9f-95c0b1bbbb2e",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "5a010e88-ec63-4609-8cd2-739686192bfe",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 475,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 111,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 63,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 131,
        "pending": 0,
        "failed": 8
      },
      "testScripts": {
        "total": 240,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 235,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 40.68468468468468,
      "responseMin": 5,
      "responseMax": 309,
      "responseSd": 75.40389527802107,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662736663785,
      "completed": 1662736671311
    },
    "executions": [
      {
        "id": "7979155e-5388-4915-968c-dffa848e01ef",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 63,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ac0c1922-f51b-495b-95ec-19740c6ffe0e",
          "httpRequestId": "b1ef6157-c66b-40d1-a54a-7df911ada098"
        },
        "item": {
          "id": "7979155e-5388-4915-968c-dffa848e01ef",
          "name": "did_json"
        },
        "response": {
          "id": "5318ebe3-38b6-40f2-85fb-412437b1e2ac",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d7789e-f8cc-4888-914a-624a6c080db6",
        "cursor": {
          "ref": "36c888ec-20e4-4a3f-9d5f-2f4dd43ef979",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f632ca9b-dc08-451b-93a2-d4cf4d7546ea"
        },
        "item": {
          "id": "d1d7789e-f8cc-4888-914a-624a6c080db6",
          "name": "did:invalid"
        },
        "response": {
          "id": "07c020d5-0fbb-486b-8bf9-9fdfa2560bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d7789e-f8cc-4888-914a-624a6c080db6",
        "cursor": {
          "ref": "36c888ec-20e4-4a3f-9d5f-2f4dd43ef979",
          "length": 63,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f632ca9b-dc08-451b-93a2-d4cf4d7546ea"
        },
        "item": {
          "id": "d1d7789e-f8cc-4888-914a-624a6c080db6",
          "name": "did:invalid"
        },
        "response": {
          "id": "07c020d5-0fbb-486b-8bf9-9fdfa2560bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c9b21a-45e3-4c91-a6c6-574c7b2c0d23",
        "cursor": {
          "ref": "bb2c0ccb-5e20-411a-a129-345cc026b3c3",
          "length": 63,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f9bbe670-4505-4cd8-b2c4-02d178208e69"
        },
        "item": {
          "id": "a2c9b21a-45e3-4c91-a6c6-574c7b2c0d23",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5f899341-1229-4d55-80f7-b264a51f6981",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6529ed1-f2a1-4fb8-a5fa-c31300ac2cf8",
        "cursor": {
          "ref": "c397ef54-1cf3-4c45-9fbf-ddb9e21e4eb6",
          "length": 63,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5d4e991f-f902-4419-b9e9-76cf9c5c766f"
        },
        "item": {
          "id": "a6529ed1-f2a1-4fb8-a5fa-c31300ac2cf8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "65236787-d61c-4a7e-9ba7-00fcb8988f20",
          "status": "Not Found",
          "code": 404,
          "responseTime": 8,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bfa5132-ea65-47c4-ade5-d4bace43898f",
        "cursor": {
          "ref": "4a638a08-2909-4b52-b2ac-7775b01b63fa",
          "length": 63,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "65ca0162-e33e-49ab-9e42-f67e2573ad71"
        },
        "item": {
          "id": "7bfa5132-ea65-47c4-ade5-d4bace43898f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b06d3b45-ae4c-483c-8532-c831ad11e70f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e1c984-4df5-4427-8caf-dba98e3f9ab0",
        "cursor": {
          "ref": "c618e817-fa03-4811-b197-323d473c4ce2",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "969794af-eb8d-472a-a32b-53e5c7687a4e"
        },
        "item": {
          "id": "e3e1c984-4df5-4427-8caf-dba98e3f9ab0",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7f28f2ed-df77-454a-b405-7aad2afa4b2b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e1c984-4df5-4427-8caf-dba98e3f9ab0",
        "cursor": {
          "ref": "c618e817-fa03-4811-b197-323d473c4ce2",
          "length": 63,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "969794af-eb8d-472a-a32b-53e5c7687a4e"
        },
        "item": {
          "id": "e3e1c984-4df5-4427-8caf-dba98e3f9ab0",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7f28f2ed-df77-454a-b405-7aad2afa4b2b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c99f3f-1065-4092-b087-3da804c5537a",
        "cursor": {
          "ref": "9057a008-c3f9-4ecc-aca1-2d4b6339113c",
          "length": 63,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4480f1eb-f352-4d13-a8e7-e8ed048683ab"
        },
        "item": {
          "id": "b3c99f3f-1065-4092-b087-3da804c5537a",
          "name": "identifiers"
        },
        "response": {
          "id": "0f200790-a8f6-48b4-b52b-c72adaeedc7e",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb50f27-26f5-4601-a02e-b8e1db70c1af",
        "cursor": {
          "ref": "88b9b59d-71df-4d75-b917-8339df1df37c",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e32d23e1-96f0-45cd-a644-26387c706b8a"
        },
        "item": {
          "id": "3fb50f27-26f5-4601-a02e-b8e1db70c1af",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "192ac7af-876b-4d48-94fc-0eefba726abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb50f27-26f5-4601-a02e-b8e1db70c1af",
        "cursor": {
          "ref": "88b9b59d-71df-4d75-b917-8339df1df37c",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e32d23e1-96f0-45cd-a644-26387c706b8a"
        },
        "item": {
          "id": "3fb50f27-26f5-4601-a02e-b8e1db70c1af",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "192ac7af-876b-4d48-94fc-0eefba726abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb50f27-26f5-4601-a02e-b8e1db70c1af",
        "cursor": {
          "ref": "88b9b59d-71df-4d75-b917-8339df1df37c",
          "length": 63,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e32d23e1-96f0-45cd-a644-26387c706b8a"
        },
        "item": {
          "id": "3fb50f27-26f5-4601-a02e-b8e1db70c1af",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "192ac7af-876b-4d48-94fc-0eefba726abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ced46e-b72e-4bc2-841f-2427559d0d57",
        "cursor": {
          "ref": "555680bb-7c85-4f08-a3e9-8f3581b4162c",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f5587827-0ac9-4937-a0a9-3047df0d98ce"
        },
        "item": {
          "id": "71ced46e-b72e-4bc2-841f-2427559d0d57",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "41a4cc92-43a1-4a49-8625-f0407bfab107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ced46e-b72e-4bc2-841f-2427559d0d57",
        "cursor": {
          "ref": "555680bb-7c85-4f08-a3e9-8f3581b4162c",
          "length": 63,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f5587827-0ac9-4937-a0a9-3047df0d98ce"
        },
        "item": {
          "id": "71ced46e-b72e-4bc2-841f-2427559d0d57",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "41a4cc92-43a1-4a49-8625-f0407bfab107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8d8741-c9ab-433f-a713-d3990cad6b25",
        "cursor": {
          "ref": "49f5eaeb-5e20-47e2-a209-7a9946e297dc",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d172f668-ac15-41bf-bfee-611fb0f8b036"
        },
        "item": {
          "id": "db8d8741-c9ab-433f-a713-d3990cad6b25",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "4204548e-e440-47f0-9713-b01d3d6e3f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8d8741-c9ab-433f-a713-d3990cad6b25",
        "cursor": {
          "ref": "49f5eaeb-5e20-47e2-a209-7a9946e297dc",
          "length": 63,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d172f668-ac15-41bf-bfee-611fb0f8b036"
        },
        "item": {
          "id": "db8d8741-c9ab-433f-a713-d3990cad6b25",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "4204548e-e440-47f0-9713-b01d3d6e3f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e01a24-068e-4e8b-bce4-9ab7f573dae1",
        "cursor": {
          "ref": "40e3e3a9-e4b2-4df8-9e76-8451eb3ed986",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d3e0e742-02ed-4ba2-95cb-b592176be63e"
        },
        "item": {
          "id": "d6e01a24-068e-4e8b-bce4-9ab7f573dae1",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "e2b414b1-0030-41f8-9b2b-8f5d94d1d9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e01a24-068e-4e8b-bce4-9ab7f573dae1",
        "cursor": {
          "ref": "40e3e3a9-e4b2-4df8-9e76-8451eb3ed986",
          "length": 63,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d3e0e742-02ed-4ba2-95cb-b592176be63e"
        },
        "item": {
          "id": "d6e01a24-068e-4e8b-bce4-9ab7f573dae1",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "e2b414b1-0030-41f8-9b2b-8f5d94d1d9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a44abb-e944-4f4e-af01-311cecd45c98",
        "cursor": {
          "ref": "8849e94f-d46a-4ef3-bfea-8eca99c1f7ba",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2536ec56-866a-489e-b9c6-8e5bfc6cdccf"
        },
        "item": {
          "id": "f7a44abb-e944-4f4e-af01-311cecd45c98",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "b5e0ebd7-98c2-4963-acd1-a5e3e861ffd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a44abb-e944-4f4e-af01-311cecd45c98",
        "cursor": {
          "ref": "8849e94f-d46a-4ef3-bfea-8eca99c1f7ba",
          "length": 63,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2536ec56-866a-489e-b9c6-8e5bfc6cdccf"
        },
        "item": {
          "id": "f7a44abb-e944-4f4e-af01-311cecd45c98",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "b5e0ebd7-98c2-4963-acd1-a5e3e861ffd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1284fe8b-62fd-49b5-81d5-d0e478f20d66",
        "cursor": {
          "ref": "da222951-e206-4981-a33e-8189320a8854",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1310e3c1-5938-4437-8649-83ba3af7b363"
        },
        "item": {
          "id": "1284fe8b-62fd-49b5-81d5-d0e478f20d66",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a759d9a0-c2d9-4acc-9fb2-9ae26cf34c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1284fe8b-62fd-49b5-81d5-d0e478f20d66",
        "cursor": {
          "ref": "da222951-e206-4981-a33e-8189320a8854",
          "length": 63,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1310e3c1-5938-4437-8649-83ba3af7b363"
        },
        "item": {
          "id": "1284fe8b-62fd-49b5-81d5-d0e478f20d66",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a759d9a0-c2d9-4acc-9fb2-9ae26cf34c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ff675f-6fb0-4b85-90f5-aedd48d18a8c",
        "cursor": {
          "ref": "47ad6bef-5f8b-43c6-aca5-1b387aed874f",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "10d70c50-2951-47de-b936-0b27b0d54711"
        },
        "item": {
          "id": "35ff675f-6fb0-4b85-90f5-aedd48d18a8c",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "ef876985-1cb4-49e1-9a42-5fc8f4830d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ff675f-6fb0-4b85-90f5-aedd48d18a8c",
        "cursor": {
          "ref": "47ad6bef-5f8b-43c6-aca5-1b387aed874f",
          "length": 63,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "10d70c50-2951-47de-b936-0b27b0d54711"
        },
        "item": {
          "id": "35ff675f-6fb0-4b85-90f5-aedd48d18a8c",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "ef876985-1cb4-49e1-9a42-5fc8f4830d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a69a4a-f448-41ca-89f8-80df90f42ead",
        "cursor": {
          "ref": "382bec72-5ade-482f-b4ec-f15b8e3c85cd",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4376f65e-aa1b-4bd8-90f9-02c9018ca0e9"
        },
        "item": {
          "id": "40a69a4a-f448-41ca-89f8-80df90f42ead",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "b70484a7-b5ff-4888-8641-a17a3abf7a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a69a4a-f448-41ca-89f8-80df90f42ead",
        "cursor": {
          "ref": "382bec72-5ade-482f-b4ec-f15b8e3c85cd",
          "length": 63,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4376f65e-aa1b-4bd8-90f9-02c9018ca0e9"
        },
        "item": {
          "id": "40a69a4a-f448-41ca-89f8-80df90f42ead",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "b70484a7-b5ff-4888-8641-a17a3abf7a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc5569f-80fa-4775-8baf-52fed0ab8b1d",
        "cursor": {
          "ref": "fa10c32c-7b6f-4b69-890f-2e383b26fbdf",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6eb47c02-c184-42a5-b7dc-579c110dc6fb"
        },
        "item": {
          "id": "adc5569f-80fa-4775-8baf-52fed0ab8b1d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "af81d5ee-e105-4784-a2aa-f8af31a8c029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc5569f-80fa-4775-8baf-52fed0ab8b1d",
        "cursor": {
          "ref": "fa10c32c-7b6f-4b69-890f-2e383b26fbdf",
          "length": 63,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6eb47c02-c184-42a5-b7dc-579c110dc6fb"
        },
        "item": {
          "id": "adc5569f-80fa-4775-8baf-52fed0ab8b1d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "af81d5ee-e105-4784-a2aa-f8af31a8c029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fdd24ba-920f-48fb-8a7e-884cb1f761e7",
        "cursor": {
          "ref": "8902ee8f-d3a0-48ae-9a9d-0b7f7c36791e",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f4fa357c-106c-4652-ba0e-027c0b2e3a4c"
        },
        "item": {
          "id": "4fdd24ba-920f-48fb-8a7e-884cb1f761e7",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "7f354c8e-1dfc-44e8-9a7b-0c65ea2c1a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fdd24ba-920f-48fb-8a7e-884cb1f761e7",
        "cursor": {
          "ref": "8902ee8f-d3a0-48ae-9a9d-0b7f7c36791e",
          "length": 63,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f4fa357c-106c-4652-ba0e-027c0b2e3a4c"
        },
        "item": {
          "id": "4fdd24ba-920f-48fb-8a7e-884cb1f761e7",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "7f354c8e-1dfc-44e8-9a7b-0c65ea2c1a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "088b95ad-995c-4927-937b-c66426ee48b7",
        "cursor": {
          "ref": "eb8aa0fb-44d5-468f-a28d-b45a616ba74d",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c84a060c-f87f-41ff-8b7c-820cbb122aa2"
        },
        "item": {
          "id": "088b95ad-995c-4927-937b-c66426ee48b7",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "79ab6f39-3541-4aef-acfc-09603dca02f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "088b95ad-995c-4927-937b-c66426ee48b7",
        "cursor": {
          "ref": "eb8aa0fb-44d5-468f-a28d-b45a616ba74d",
          "length": 63,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c84a060c-f87f-41ff-8b7c-820cbb122aa2"
        },
        "item": {
          "id": "088b95ad-995c-4927-937b-c66426ee48b7",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "79ab6f39-3541-4aef-acfc-09603dca02f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac709b8-c73d-40d2-bc82-65646227c2d3",
        "cursor": {
          "ref": "c1c6ab6b-bf35-4e03-ac0e-1d2812de91ee",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1c19f920-a12e-4b5e-b511-a6ea3a515dc9"
        },
        "item": {
          "id": "8ac709b8-c73d-40d2-bc82-65646227c2d3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "49faa84e-7983-4180-a542-6fc042a95993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac709b8-c73d-40d2-bc82-65646227c2d3",
        "cursor": {
          "ref": "c1c6ab6b-bf35-4e03-ac0e-1d2812de91ee",
          "length": 63,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1c19f920-a12e-4b5e-b511-a6ea3a515dc9"
        },
        "item": {
          "id": "8ac709b8-c73d-40d2-bc82-65646227c2d3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "49faa84e-7983-4180-a542-6fc042a95993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1468166-b621-47f3-9734-99540492bc9d",
        "cursor": {
          "ref": "b8c66237-0c10-488c-bc37-f4e6013b6231",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d9f20f79-4bbf-4e76-9e85-370977706596"
        },
        "item": {
          "id": "d1468166-b621-47f3-9734-99540492bc9d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f18f1a00-7538-4886-9bfa-57c6583383ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1468166-b621-47f3-9734-99540492bc9d",
        "cursor": {
          "ref": "b8c66237-0c10-488c-bc37-f4e6013b6231",
          "length": 63,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d9f20f79-4bbf-4e76-9e85-370977706596"
        },
        "item": {
          "id": "d1468166-b621-47f3-9734-99540492bc9d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f18f1a00-7538-4886-9bfa-57c6583383ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2f4a16-6ebb-487c-8aae-87d6b02dd65b",
        "cursor": {
          "ref": "f65f8608-f318-4f33-bd71-4fc0d16a7ea4",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "da0fc0b2-1b73-43aa-9dca-df313dcbfe2b"
        },
        "item": {
          "id": "ed2f4a16-6ebb-487c-8aae-87d6b02dd65b",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "e9c39be8-8280-4312-8513-4039f27f4e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2f4a16-6ebb-487c-8aae-87d6b02dd65b",
        "cursor": {
          "ref": "f65f8608-f318-4f33-bd71-4fc0d16a7ea4",
          "length": 63,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "da0fc0b2-1b73-43aa-9dca-df313dcbfe2b"
        },
        "item": {
          "id": "ed2f4a16-6ebb-487c-8aae-87d6b02dd65b",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "e9c39be8-8280-4312-8513-4039f27f4e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6173ff9-1e63-4ea7-ae1f-d1661b4d1e2d",
        "cursor": {
          "ref": "62853369-4493-4d50-b730-4e9d044ec1da",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1fb8b046-f592-4632-a2b8-5806e7e03aeb"
        },
        "item": {
          "id": "b6173ff9-1e63-4ea7-ae1f-d1661b4d1e2d",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "08e7b78e-8d1c-466c-86a3-8bc661a2bf4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6173ff9-1e63-4ea7-ae1f-d1661b4d1e2d",
        "cursor": {
          "ref": "62853369-4493-4d50-b730-4e9d044ec1da",
          "length": 63,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1fb8b046-f592-4632-a2b8-5806e7e03aeb"
        },
        "item": {
          "id": "b6173ff9-1e63-4ea7-ae1f-d1661b4d1e2d",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "08e7b78e-8d1c-466c-86a3-8bc661a2bf4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea14ca4d-fa05-4be9-84d7-6b3266852236",
        "cursor": {
          "ref": "817c9af9-6914-4811-8811-ab6da7e636f9",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b515b271-32e6-4b75-b6c0-ade023290827"
        },
        "item": {
          "id": "ea14ca4d-fa05-4be9-84d7-6b3266852236",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "94164bf3-0828-4205-a8d6-9a658a95ea72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea14ca4d-fa05-4be9-84d7-6b3266852236",
        "cursor": {
          "ref": "817c9af9-6914-4811-8811-ab6da7e636f9",
          "length": 63,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b515b271-32e6-4b75-b6c0-ade023290827"
        },
        "item": {
          "id": "ea14ca4d-fa05-4be9-84d7-6b3266852236",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "94164bf3-0828-4205-a8d6-9a658a95ea72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c186724-854f-473c-bb53-594b8c793f06",
        "cursor": {
          "ref": "526e2be7-10bf-4e46-beb5-5a213fc6eede",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d3ff14a8-841c-4efa-b372-18579cdd5cbe"
        },
        "item": {
          "id": "5c186724-854f-473c-bb53-594b8c793f06",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6bf7071f-d9ed-4de5-8741-edadf4d11a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c186724-854f-473c-bb53-594b8c793f06",
        "cursor": {
          "ref": "526e2be7-10bf-4e46-beb5-5a213fc6eede",
          "length": 63,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d3ff14a8-841c-4efa-b372-18579cdd5cbe"
        },
        "item": {
          "id": "5c186724-854f-473c-bb53-594b8c793f06",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6bf7071f-d9ed-4de5-8741-edadf4d11a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642cae29-3b3a-444e-8dd5-7eb46c2f5b38",
        "cursor": {
          "ref": "455d5581-44c5-4d74-80d6-dd7376dd482d",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c19065e1-7f83-4526-ab33-02647ebde324"
        },
        "item": {
          "id": "642cae29-3b3a-444e-8dd5-7eb46c2f5b38",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "6acf37d2-9e1c-40a7-b334-2248f01887c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642cae29-3b3a-444e-8dd5-7eb46c2f5b38",
        "cursor": {
          "ref": "455d5581-44c5-4d74-80d6-dd7376dd482d",
          "length": 63,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c19065e1-7f83-4526-ab33-02647ebde324"
        },
        "item": {
          "id": "642cae29-3b3a-444e-8dd5-7eb46c2f5b38",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "6acf37d2-9e1c-40a7-b334-2248f01887c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443263d6-b6ee-454f-8a93-add410e0369e",
        "cursor": {
          "ref": "38940daf-be56-4a69-9aaa-ecae3feebd9c",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c72d3943-6292-4dc7-8e42-e796f9305ddf"
        },
        "item": {
          "id": "443263d6-b6ee-454f-8a93-add410e0369e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "317105b2-6f26-436c-b83f-ff1d51b8f18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443263d6-b6ee-454f-8a93-add410e0369e",
        "cursor": {
          "ref": "38940daf-be56-4a69-9aaa-ecae3feebd9c",
          "length": 63,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c72d3943-6292-4dc7-8e42-e796f9305ddf"
        },
        "item": {
          "id": "443263d6-b6ee-454f-8a93-add410e0369e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "317105b2-6f26-436c-b83f-ff1d51b8f18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8cc169d-fc79-4390-98b2-2f20a9fbad4d",
        "cursor": {
          "ref": "f678c2b3-336f-405f-b5e3-0d3f4f0cd676",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f8f495dc-8e1f-4bc0-86d0-e40881fa4189"
        },
        "item": {
          "id": "b8cc169d-fc79-4390-98b2-2f20a9fbad4d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4b6d5031-0dba-461d-8ca4-67237662c478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8cc169d-fc79-4390-98b2-2f20a9fbad4d",
        "cursor": {
          "ref": "f678c2b3-336f-405f-b5e3-0d3f4f0cd676",
          "length": 63,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f8f495dc-8e1f-4bc0-86d0-e40881fa4189"
        },
        "item": {
          "id": "b8cc169d-fc79-4390-98b2-2f20a9fbad4d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4b6d5031-0dba-461d-8ca4-67237662c478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3318099c-3e4f-49ca-bd30-92ad1f947295",
        "cursor": {
          "ref": "69cdfafb-3acb-4c52-8b73-b181b2bd3b79",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c5787844-f5e3-4434-8e33-5471cabad571"
        },
        "item": {
          "id": "3318099c-3e4f-49ca-bd30-92ad1f947295",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "88a3de3d-eab2-42c3-8c9b-06682113e399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3318099c-3e4f-49ca-bd30-92ad1f947295",
        "cursor": {
          "ref": "69cdfafb-3acb-4c52-8b73-b181b2bd3b79",
          "length": 63,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c5787844-f5e3-4434-8e33-5471cabad571"
        },
        "item": {
          "id": "3318099c-3e4f-49ca-bd30-92ad1f947295",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "88a3de3d-eab2-42c3-8c9b-06682113e399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b19ed5f-8926-4a00-85b4-4a329a72f09c",
        "cursor": {
          "ref": "890ad5ea-4be4-4b12-b832-67a4349396a6",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2814e4fd-f69c-425c-8454-faa53be52d56"
        },
        "item": {
          "id": "2b19ed5f-8926-4a00-85b4-4a329a72f09c",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "675917b7-4fd2-4ce9-a2b2-f135cf37d209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b19ed5f-8926-4a00-85b4-4a329a72f09c",
        "cursor": {
          "ref": "890ad5ea-4be4-4b12-b832-67a4349396a6",
          "length": 63,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2814e4fd-f69c-425c-8454-faa53be52d56"
        },
        "item": {
          "id": "2b19ed5f-8926-4a00-85b4-4a329a72f09c",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "675917b7-4fd2-4ce9-a2b2-f135cf37d209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e0d7b2-39e6-4514-ac95-38232dbf8af2",
        "cursor": {
          "ref": "1715993c-2acc-4161-9840-4558b658e09a",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a1d3b0e1-1cf0-4715-aa71-9a5432d13767"
        },
        "item": {
          "id": "64e0d7b2-39e6-4514-ac95-38232dbf8af2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3c345e34-fbeb-48ce-ba13-6256bedad0bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e0d7b2-39e6-4514-ac95-38232dbf8af2",
        "cursor": {
          "ref": "1715993c-2acc-4161-9840-4558b658e09a",
          "length": 63,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a1d3b0e1-1cf0-4715-aa71-9a5432d13767"
        },
        "item": {
          "id": "64e0d7b2-39e6-4514-ac95-38232dbf8af2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3c345e34-fbeb-48ce-ba13-6256bedad0bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927c406c-100c-4dd3-a0e1-798ee9f9ddeb",
        "cursor": {
          "ref": "a2b0afd4-fb62-4540-b312-9c7e15cc212e",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2d320acd-1540-4495-a2e7-abe667c716a6"
        },
        "item": {
          "id": "927c406c-100c-4dd3-a0e1-798ee9f9ddeb",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "84f17c5c-66ea-4197-80e1-34d1d63f97be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927c406c-100c-4dd3-a0e1-798ee9f9ddeb",
        "cursor": {
          "ref": "a2b0afd4-fb62-4540-b312-9c7e15cc212e",
          "length": 63,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2d320acd-1540-4495-a2e7-abe667c716a6"
        },
        "item": {
          "id": "927c406c-100c-4dd3-a0e1-798ee9f9ddeb",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "84f17c5c-66ea-4197-80e1-34d1d63f97be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4dd0e5a-8c27-4727-bb43-1354012b4d66",
        "cursor": {
          "ref": "cc1ad370-e228-40b3-821b-f226692adbff",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "46ca1649-79af-4395-a48d-cd1018603399"
        },
        "item": {
          "id": "e4dd0e5a-8c27-4727-bb43-1354012b4d66",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "78c54b62-e132-409d-9c25-1129b3a35e41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4dd0e5a-8c27-4727-bb43-1354012b4d66",
        "cursor": {
          "ref": "cc1ad370-e228-40b3-821b-f226692adbff",
          "length": 63,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "46ca1649-79af-4395-a48d-cd1018603399"
        },
        "item": {
          "id": "e4dd0e5a-8c27-4727-bb43-1354012b4d66",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "78c54b62-e132-409d-9c25-1129b3a35e41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77570796-d4a2-4761-9080-f6a7c42d3d9a",
        "cursor": {
          "ref": "3dab2464-1105-4ab8-888e-2767220bae44",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "40e2ef06-8eb8-433a-bb49-db71ddf328e4"
        },
        "item": {
          "id": "77570796-d4a2-4761-9080-f6a7c42d3d9a",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "2e61f977-e78f-49c9-9ce7-5e2087c47aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77570796-d4a2-4761-9080-f6a7c42d3d9a",
        "cursor": {
          "ref": "3dab2464-1105-4ab8-888e-2767220bae44",
          "length": 63,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "40e2ef06-8eb8-433a-bb49-db71ddf328e4"
        },
        "item": {
          "id": "77570796-d4a2-4761-9080-f6a7c42d3d9a",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "2e61f977-e78f-49c9-9ce7-5e2087c47aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c52e62-5463-4e40-b425-02bfb99e434c",
        "cursor": {
          "ref": "8b80854b-cb89-47b9-9a54-3b7a2b3be8bd",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bd085a94-4722-43fb-9394-c0f88b2df663"
        },
        "item": {
          "id": "69c52e62-5463-4e40-b425-02bfb99e434c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "908a720b-241d-4230-a5f9-ee6bc539f1a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c52e62-5463-4e40-b425-02bfb99e434c",
        "cursor": {
          "ref": "8b80854b-cb89-47b9-9a54-3b7a2b3be8bd",
          "length": 63,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bd085a94-4722-43fb-9394-c0f88b2df663"
        },
        "item": {
          "id": "69c52e62-5463-4e40-b425-02bfb99e434c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "908a720b-241d-4230-a5f9-ee6bc539f1a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f16eb4-1209-41a8-94b5-4f398bc0be03",
        "cursor": {
          "ref": "9e145c50-6ffa-4b1f-9b6d-317fec2be40b",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3247342c-e595-4c75-b447-bcbcbc74a67b"
        },
        "item": {
          "id": "e4f16eb4-1209-41a8-94b5-4f398bc0be03",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "9825421b-ac51-43ed-aeb2-88fb2096487d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f16eb4-1209-41a8-94b5-4f398bc0be03",
        "cursor": {
          "ref": "9e145c50-6ffa-4b1f-9b6d-317fec2be40b",
          "length": 63,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3247342c-e595-4c75-b447-bcbcbc74a67b"
        },
        "item": {
          "id": "e4f16eb4-1209-41a8-94b5-4f398bc0be03",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "9825421b-ac51-43ed-aeb2-88fb2096487d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddff41d0-d2c0-45be-ae3e-ae4f9234e231",
        "cursor": {
          "ref": "4e8dd544-21e0-4ae7-b353-fcaf37400c95",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d9242e9e-b0d0-47c5-955a-5182774e8543"
        },
        "item": {
          "id": "ddff41d0-d2c0-45be-ae3e-ae4f9234e231",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "93527d35-888b-4b9c-9815-56359a90bfa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddff41d0-d2c0-45be-ae3e-ae4f9234e231",
        "cursor": {
          "ref": "4e8dd544-21e0-4ae7-b353-fcaf37400c95",
          "length": 63,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d9242e9e-b0d0-47c5-955a-5182774e8543"
        },
        "item": {
          "id": "ddff41d0-d2c0-45be-ae3e-ae4f9234e231",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "93527d35-888b-4b9c-9815-56359a90bfa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1785a86-78ae-4238-b03f-a8568891de2a",
        "cursor": {
          "ref": "df27c600-8909-4f53-8ddf-acec22f90bd7",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ac0b845a-fa9d-4191-8af8-75467e63eb7d"
        },
        "item": {
          "id": "d1785a86-78ae-4238-b03f-a8568891de2a",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ecfa6ad5-d4a1-438a-a8ff-c2df12415034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1785a86-78ae-4238-b03f-a8568891de2a",
        "cursor": {
          "ref": "df27c600-8909-4f53-8ddf-acec22f90bd7",
          "length": 63,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ac0b845a-fa9d-4191-8af8-75467e63eb7d"
        },
        "item": {
          "id": "d1785a86-78ae-4238-b03f-a8568891de2a",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ecfa6ad5-d4a1-438a-a8ff-c2df12415034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20f6e0b-b055-41f2-bd90-f5e9d9d3fd67",
        "cursor": {
          "ref": "d771a8d5-6ab2-4630-ba68-74997c7b5720",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "31fbc0af-36b3-4163-bf26-ca5cc3f66148"
        },
        "item": {
          "id": "e20f6e0b-b055-41f2-bd90-f5e9d9d3fd67",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "b6dbebd8-7e56-4c86-959e-c9f94afef4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20f6e0b-b055-41f2-bd90-f5e9d9d3fd67",
        "cursor": {
          "ref": "d771a8d5-6ab2-4630-ba68-74997c7b5720",
          "length": 63,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "31fbc0af-36b3-4163-bf26-ca5cc3f66148"
        },
        "item": {
          "id": "e20f6e0b-b055-41f2-bd90-f5e9d9d3fd67",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "b6dbebd8-7e56-4c86-959e-c9f94afef4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c07c1b2-b97a-4d48-8031-f28184ff9e56",
        "cursor": {
          "ref": "77e20dc2-cd9c-4d86-ba90-82d871488c65",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d9e29720-69e2-4b01-b814-a159ef7ebc9b"
        },
        "item": {
          "id": "7c07c1b2-b97a-4d48-8031-f28184ff9e56",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e450931e-9393-4b68-b047-7c8ab3e6415d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c07c1b2-b97a-4d48-8031-f28184ff9e56",
        "cursor": {
          "ref": "77e20dc2-cd9c-4d86-ba90-82d871488c65",
          "length": 63,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d9e29720-69e2-4b01-b814-a159ef7ebc9b"
        },
        "item": {
          "id": "7c07c1b2-b97a-4d48-8031-f28184ff9e56",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e450931e-9393-4b68-b047-7c8ab3e6415d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34c538c-3606-460e-8423-19d84680b0dd",
        "cursor": {
          "ref": "3dc2eb6e-77bb-4255-abaa-c66d9a79d2d0",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ac3a45b9-167a-469f-a716-8d737c1800f3"
        },
        "item": {
          "id": "d34c538c-3606-460e-8423-19d84680b0dd",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "56a496f1-de08-48f0-a010-614a0793065e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34c538c-3606-460e-8423-19d84680b0dd",
        "cursor": {
          "ref": "3dc2eb6e-77bb-4255-abaa-c66d9a79d2d0",
          "length": 63,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ac3a45b9-167a-469f-a716-8d737c1800f3"
        },
        "item": {
          "id": "d34c538c-3606-460e-8423-19d84680b0dd",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "56a496f1-de08-48f0-a010-614a0793065e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ad0bd4-aa4e-49fa-bf89-d3eb9d02b4dd",
        "cursor": {
          "ref": "a73f0206-ed4e-4095-bb52-d412ac580f53",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "38e44010-37c3-4c54-b71a-c2fdc45ef8aa"
        },
        "item": {
          "id": "a6ad0bd4-aa4e-49fa-bf89-d3eb9d02b4dd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "17e73ed2-4b7e-41e6-9dd3-3354a2803126",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ad0bd4-aa4e-49fa-bf89-d3eb9d02b4dd",
        "cursor": {
          "ref": "a73f0206-ed4e-4095-bb52-d412ac580f53",
          "length": 63,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "38e44010-37c3-4c54-b71a-c2fdc45ef8aa"
        },
        "item": {
          "id": "a6ad0bd4-aa4e-49fa-bf89-d3eb9d02b4dd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "17e73ed2-4b7e-41e6-9dd3-3354a2803126",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ef4eb5-b32d-42a5-b4cd-23717d1b140b",
        "cursor": {
          "ref": "568643b0-7d36-4ce5-822a-6f2826871beb",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "52930a67-3a5c-423f-be6c-3a0394b4fbb6"
        },
        "item": {
          "id": "a1ef4eb5-b32d-42a5-b4cd-23717d1b140b",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "6e899ff3-dbee-47a3-b611-5d58d0bd09e9",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ef4eb5-b32d-42a5-b4cd-23717d1b140b",
        "cursor": {
          "ref": "568643b0-7d36-4ce5-822a-6f2826871beb",
          "length": 63,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "52930a67-3a5c-423f-be6c-3a0394b4fbb6"
        },
        "item": {
          "id": "a1ef4eb5-b32d-42a5-b4cd-23717d1b140b",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "6e899ff3-dbee-47a3-b611-5d58d0bd09e9",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 607
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde5e8aa-799c-4477-97ba-42372cdae7c7",
        "cursor": {
          "ref": "f8e0fc71-5ae6-4b59-979f-2278d38b784b",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ef096ccc-5351-4ca5-95e2-37222c530b26"
        },
        "item": {
          "id": "cde5e8aa-799c-4477-97ba-42372cdae7c7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e9cce070-4773-4b5b-8839-5deaab344b19",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde5e8aa-799c-4477-97ba-42372cdae7c7",
        "cursor": {
          "ref": "f8e0fc71-5ae6-4b59-979f-2278d38b784b",
          "length": 63,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ef096ccc-5351-4ca5-95e2-37222c530b26"
        },
        "item": {
          "id": "cde5e8aa-799c-4477-97ba-42372cdae7c7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e9cce070-4773-4b5b-8839-5deaab344b19",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f0076a-467a-4081-a977-a9379d06c426",
        "cursor": {
          "ref": "fc8d8910-dadb-4c32-a932-e15d4fb88bae",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "53d84cbb-33f5-48f3-a8eb-44c42125b1cf"
        },
        "item": {
          "id": "38f0076a-467a-4081-a977-a9379d06c426",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4b02e831-82cc-4956-b184-15fba5173e78",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f0076a-467a-4081-a977-a9379d06c426",
        "cursor": {
          "ref": "fc8d8910-dadb-4c32-a932-e15d4fb88bae",
          "length": 63,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "53d84cbb-33f5-48f3-a8eb-44c42125b1cf"
        },
        "item": {
          "id": "38f0076a-467a-4081-a977-a9379d06c426",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4b02e831-82cc-4956-b184-15fba5173e78",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 576
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "744bec0f-4e50-42b7-afb6-1e318e1ef96b",
        "cursor": {
          "ref": "90806934-0027-4e24-a5ab-b638efe695a5",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f4c3a25e-a9d8-4a2d-aa81-8ed551be22f5"
        },
        "item": {
          "id": "744bec0f-4e50-42b7-afb6-1e318e1ef96b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ed4b1a58-f276-4c45-83f5-8ac993c8147f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "744bec0f-4e50-42b7-afb6-1e318e1ef96b",
        "cursor": {
          "ref": "90806934-0027-4e24-a5ab-b638efe695a5",
          "length": 63,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f4c3a25e-a9d8-4a2d-aa81-8ed551be22f5"
        },
        "item": {
          "id": "744bec0f-4e50-42b7-afb6-1e318e1ef96b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ed4b1a58-f276-4c45-83f5-8ac993c8147f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9bce0021-13bd-4850-beeb-40e3b5c09e24",
        "cursor": {
          "ref": "c2edcfb4-ad40-47dc-bb64-c915fc4c5d49",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "eef417ae-1f18-46ee-a550-f87a5f8b8091"
        },
        "item": {
          "id": "9bce0021-13bd-4850-beeb-40e3b5c09e24",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "272ed8e4-1da2-4926-bf4b-edac272c3724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9bce0021-13bd-4850-beeb-40e3b5c09e24",
        "cursor": {
          "ref": "c2edcfb4-ad40-47dc-bb64-c915fc4c5d49",
          "length": 63,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "eef417ae-1f18-46ee-a550-f87a5f8b8091"
        },
        "item": {
          "id": "9bce0021-13bd-4850-beeb-40e3b5c09e24",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "272ed8e4-1da2-4926-bf4b-edac272c3724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8f9fce1a-13ac-4974-8238-227bcf54c908",
        "cursor": {
          "ref": "2246ed84-3070-41d9-854e-3667f8441a75",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d766d43e-edaa-47ab-9528-6dae547ca7e5"
        },
        "item": {
          "id": "8f9fce1a-13ac-4974-8238-227bcf54c908",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "de68a822-eab6-4d01-a92a-faf1cd046fcc",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9fce1a-13ac-4974-8238-227bcf54c908",
        "cursor": {
          "ref": "2246ed84-3070-41d9-854e-3667f8441a75",
          "length": 63,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d766d43e-edaa-47ab-9528-6dae547ca7e5"
        },
        "item": {
          "id": "8f9fce1a-13ac-4974-8238-227bcf54c908",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "de68a822-eab6-4d01-a92a-faf1cd046fcc",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 554
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf5bf72-eaed-420a-9844-bd525e54d74a",
        "cursor": {
          "ref": "ec12991b-42c8-4a88-b58a-8d3e603f6470",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c0d57ba8-e4de-4943-9385-c55c9a500eb2"
        },
        "item": {
          "id": "3bf5bf72-eaed-420a-9844-bd525e54d74a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "76122690-0d6d-4d97-962f-1ee7e9144eba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf5bf72-eaed-420a-9844-bd525e54d74a",
        "cursor": {
          "ref": "ec12991b-42c8-4a88-b58a-8d3e603f6470",
          "length": 63,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c0d57ba8-e4de-4943-9385-c55c9a500eb2"
        },
        "item": {
          "id": "3bf5bf72-eaed-420a-9844-bd525e54d74a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "76122690-0d6d-4d97-962f-1ee7e9144eba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01fa5c2-216f-4207-9441-a71adad04c23",
        "cursor": {
          "ref": "70d643d6-9a6a-4857-9982-3ebe9351a4f0",
          "length": 63,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "476e76db-3d92-4b52-9825-dcf795622439"
        },
        "item": {
          "id": "b01fa5c2-216f-4207-9441-a71adad04c23",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "acd0d422-157f-48df-a1ae-cf1d9aff4cc8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f3311d-23d2-45bb-90f5-d755c6a0e636",
        "cursor": {
          "ref": "35dd9fa0-9d0c-488f-9b21-7ff521af237e",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c8c74b55-bdc1-4810-bdd8-aa25531b2dc6"
        },
        "item": {
          "id": "99f3311d-23d2-45bb-90f5-d755c6a0e636",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "33166d49-bd74-441b-9863-b73d1d4a0674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f3311d-23d2-45bb-90f5-d755c6a0e636",
        "cursor": {
          "ref": "35dd9fa0-9d0c-488f-9b21-7ff521af237e",
          "length": 63,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c8c74b55-bdc1-4810-bdd8-aa25531b2dc6"
        },
        "item": {
          "id": "99f3311d-23d2-45bb-90f5-d755c6a0e636",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "33166d49-bd74-441b-9863-b73d1d4a0674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6882cb4d-a6f9-4ffd-90e0-84c9fceebe1c",
        "cursor": {
          "ref": "10b45dae-cf8d-46fc-970a-96eda43688f2",
          "length": 63,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c31f12ff-2080-4f34-8337-c01dd2fd6452"
        },
        "item": {
          "id": "6882cb4d-a6f9-4ffd-90e0-84c9fceebe1c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c348d096-5ad1-437c-9e2a-d5cdd1d9fc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9dc123-1e99-4773-ae07-0cac331645ab",
        "cursor": {
          "ref": "5ba1da52-2dd8-4f08-b71e-8407a4afa60c",
          "length": 63,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8e872de8-cebc-47f4-beac-1d9784c614ba"
        },
        "item": {
          "id": "ef9dc123-1e99-4773-ae07-0cac331645ab",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ccd13115-ae4e-47d8-8f51-5c1ad4cba561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf6504e-e734-4bd6-ab86-bb7257bba855",
        "cursor": {
          "ref": "f3df1411-7b96-4ddd-a419-7f3bc72d0ace",
          "length": 63,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "40e6040e-c1ac-4326-b52d-9f41b990bba0"
        },
        "item": {
          "id": "ccf6504e-e734-4bd6-ab86-bb7257bba855",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4d1b9214-564f-4fbe-8b2d-e8c3d642d6cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d223c61-77c4-4942-84a4-9f2804708e24",
        "cursor": {
          "ref": "44e105e8-9b80-4636-b32d-9f7e849d489c",
          "length": 63,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "50854943-1d5b-48ee-b715-cc4a80638c66"
        },
        "item": {
          "id": "3d223c61-77c4-4942-84a4-9f2804708e24",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "862c2d6c-e7b0-4ffd-99e8-fb463ff68aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac8d060-7805-48c6-8b04-6d319ca1d6a6",
        "cursor": {
          "ref": "b0637126-7422-4c26-81c1-697ccb8ad053",
          "length": 63,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "deb21949-fba6-4ec3-8d43-c0d1af9e2c7f"
        },
        "item": {
          "id": "eac8d060-7805-48c6-8b04-6d319ca1d6a6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0df84a18-f695-4a0e-acbf-58757a73fe80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942d4ffe-6744-4472-bb2a-2596215e7577",
        "cursor": {
          "ref": "ed375ff7-f1a9-4f3c-aee0-e399ade08c63",
          "length": 63,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6ab5c23a-0323-4552-9a47-b20d034590ab"
        },
        "item": {
          "id": "942d4ffe-6744-4472-bb2a-2596215e7577",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "145dba1c-04fb-4443-abf1-60f6949ea7ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084ce166-5a39-4932-a734-f13027bebe9f",
        "cursor": {
          "ref": "8e381e12-6a93-4953-9722-a14c367eccda",
          "length": 63,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fce3ad2d-cdbf-4196-9c74-784417d024c9"
        },
        "item": {
          "id": "084ce166-5a39-4932-a734-f13027bebe9f",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "eb516854-5bea-4881-8c88-cf7d421e9013",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5039ef4d-f387-4f77-94e9-3431e814c7cc",
        "cursor": {
          "ref": "6197022c-d962-4b6b-8ff5-b1fa6e672920",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ca3bc19a-7a35-4041-aa69-32023dc78a75"
        },
        "item": {
          "id": "5039ef4d-f387-4f77-94e9-3431e814c7cc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "220d0232-bd32-4f3b-b594-2c49442e672c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5039ef4d-f387-4f77-94e9-3431e814c7cc",
        "cursor": {
          "ref": "6197022c-d962-4b6b-8ff5-b1fa6e672920",
          "length": 63,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ca3bc19a-7a35-4041-aa69-32023dc78a75"
        },
        "item": {
          "id": "5039ef4d-f387-4f77-94e9-3431e814c7cc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "220d0232-bd32-4f3b-b594-2c49442e672c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "375c855d-7187-4c8f-a123-804d71c8342d",
        "cursor": {
          "ref": "48d1d179-974b-4c67-a90b-fcd1ff0b6d95",
          "length": 63,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "70dee5e1-01eb-4212-9f0a-617c5652ba44"
        },
        "item": {
          "id": "375c855d-7187-4c8f-a123-804d71c8342d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "27960567-2d80-402b-9fee-c34011d17fe6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b12c41-2a82-4d64-aa8b-3dfde790e1c2",
        "cursor": {
          "ref": "80806425-575a-4f49-b225-7deab90b388f",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "61828041-56c5-4e93-a42a-fb059a52784d"
        },
        "item": {
          "id": "c6b12c41-2a82-4d64-aa8b-3dfde790e1c2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bfec4145-64f8-470e-8b18-ea0cb6091bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "c6b12c41-2a82-4d64-aa8b-3dfde790e1c2",
        "cursor": {
          "ref": "80806425-575a-4f49-b225-7deab90b388f",
          "length": 63,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "61828041-56c5-4e93-a42a-fb059a52784d"
        },
        "item": {
          "id": "c6b12c41-2a82-4d64-aa8b-3dfde790e1c2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bfec4145-64f8-470e-8b18-ea0cb6091bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "46c7e50a-bfde-4284-b8c3-0b79214b31a4",
        "cursor": {
          "ref": "9c9467ac-7298-4b7b-8aac-bd69e987f2b6",
          "length": 63,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1ff29061-a947-42f5-abe4-9df29b600487"
        },
        "item": {
          "id": "46c7e50a-bfde-4284-b8c3-0b79214b31a4",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "5f6e02a8-3ed5-4e03-b1ca-cd7f6604214d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "0862127c-7f5a-43be-8c4e-e8e56d2b49c5",
        "cursor": {
          "ref": "be87dbb2-e448-4c65-89fc-810a20561ad4",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6af7191e-29c8-48b5-9d15-0158bf251780"
        },
        "item": {
          "id": "0862127c-7f5a-43be-8c4e-e8e56d2b49c5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "190cec23-8175-4864-abb1-012e1221389f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0862127c-7f5a-43be-8c4e-e8e56d2b49c5",
        "cursor": {
          "ref": "be87dbb2-e448-4c65-89fc-810a20561ad4",
          "length": 63,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6af7191e-29c8-48b5-9d15-0158bf251780"
        },
        "item": {
          "id": "0862127c-7f5a-43be-8c4e-e8e56d2b49c5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "190cec23-8175-4864-abb1-012e1221389f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ee1a20-5b42-4c9e-a05f-33b717d51425",
        "cursor": {
          "ref": "e3c53e4a-a114-420d-b6b0-32f7c33533fe",
          "length": 63,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "11595e7f-3867-4c1e-a029-dc9d9b38efec"
        },
        "item": {
          "id": "91ee1a20-5b42-4c9e-a05f-33b717d51425",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "df2e00a1-1566-4220-8acb-f115c53558fd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}