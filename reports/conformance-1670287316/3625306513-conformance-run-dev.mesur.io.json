{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "245dcca5-03d4-4624-9375-0c7fe79ffb45",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4274f281-a4b2-4b63-aba1-37058dfc820d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9cd87173-9ecc-4449-9878-1b12ae284774",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5346adbd-8a03-4f0b-9c99-3731b40d90fd"
                }
              }
            ]
          },
          {
            "id": "6ec78f0f-13de-4771-b366-50da18505db8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f960dee4-5fd3-41db-a491-28f2a4d4d94f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "22b0b8d7-25c2-48d8-8d52-aa92183bfc22"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "91d9884d-e4ea-4a6a-a93b-a7c2448cbaee",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0b54b80a-ead4-472e-9c07-68df40898b25",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c1793d5e-f9ce-4825-9fad-f394eb9b2f99",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "20671a71-23d8-4430-b563-6a70dcf82535",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b0a61d1e-984a-4a1a-8db8-195b9a464569"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a9741406-cd36-419f-bd4f-86e72555e93f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "78d7e555-4dbb-4a86-841e-f693e81b06be"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0b890c6b-427e-42da-805e-0910d72c0162",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9a578df0-2072-446f-b779-629705570fb7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6974ad4-22c5-4a7a-8fe6-69dd49cbd96b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "264ff05a-0456-4a29-82e7-6b0e86152917"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "190da69f-5bb5-4611-9bf8-91ddaf3f7eea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab514191-e313-4512-aed0-76d017169174"
            }
          }
        ]
      },
      {
        "id": "c74f65bc-f33e-4a91-bd94-0826a74a5f9c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "dfcd0820-d34f-4f90-ae57-833368585a5e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1788856e-3f63-43d8-90f6-1efd3abefbbe",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2a441c34-803a-4204-aa2d-7677cd5298d6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c48057-7b96-46d7-b41a-5c8a727c0a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "61b390fa-5355-46e5-84fa-cbb3f551472b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca88a596-287b-4333-9729-abc994afb647",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe135eae-82ed-464b-9e42-41c376067335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b4e08ba-45ee-4c42-b13e-c5d364b7d617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046349df-e3de-4f11-a459-81781ad1a961",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f7198f-014e-4059-844d-e864970fae05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5fe901a-2918-4955-934b-47f76505aacd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6ec8f959-a146-4764-9aa1-b630ab3d9e7d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "915dbd55-2d40-470f-9fb5-40383261056e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7590c2d-fdce-41d5-871c-6df6a6233ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f89f052-6266-4a77-9186-370c8273089a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f51e3d8-0f78-433d-9b75-25bfe2e7aab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7390eaa5-7e38-4d3a-b22a-80e300cec77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706e723c-f12a-40d4-b1bc-c17106299f52",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e7f82b-9b41-436a-9c81-f4eeb1ecbf18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adfc383d-01be-4915-b326-b2c2e1b6990c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c3a8d3-40ab-4dd9-a859-e588c92cf80d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "2fe2f700-3ed3-4e9c-a437-f106c7a6845f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ff044b54-943f-4826-9f66-d322fad0c751",
            "name": "Positive Testing",
            "item": [
              {
                "id": "57f84a9d-57d8-4afe-834c-3f6f24388d4a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c8cff60-fde1-4c93-9003-8c70dc50a597",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "25f90c45-165e-4cf5-9a80-e05fdeba7808"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "644143b9-c473-470f-917c-f7141a8e6c00",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "dc943e41-70d1-42d0-bd3c-ddf72cabc01c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "604afd28-062f-4b27-8557-2696305bc17d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e88880f-3f68-4744-b3da-672b7e595f28"
            }
          }
        ]
      },
      {
        "id": "0e0d3576-526c-4a25-a6ec-41c0355ba08d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c3dbc8b3-c011-4267-bda1-db861eb1d6ce",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77451dd5-b128-4a46-8994-6d7b01861716",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0d70909f-be87-450a-91e8-c1c97525028b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d735ea-c649-4589-a580-df672afc5d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09bde06-8c70-470f-97e7-e298ee9ccd2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90598891-376b-4747-8cca-301713ea36ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3876344-a329-4de7-afa0-d18ae6cecb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb220ce-71d3-4361-8a19-ba947d5f0eb2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f3bfd8-1da9-457b-a052-51d70f27db59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0070e2d8-edea-4805-8c75-5ae95129fb1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0f1cbd-e5d5-4dc6-ab36-c9e5f2f9caca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70a402b4-1785-448d-92e6-54ea2be86d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4113b1f-001b-41fb-b250-cd9d98c19ff2",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93faf1d-12bf-4253-848f-4bf7aa51c442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88d2668-7f8d-4b25-8b41-341ae3e09e1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734d6df1-ea3a-4674-b613-d1f9c980786e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80b06a6d-f2d8-4803-94a0-af2c1e1bbcd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df5858b-42fd-44f2-888e-4dfc58c6add9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97da851-0339-472f-9f13-68261672c42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74310cc6-1119-4fe8-931e-9b47f55422e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232d5f68-ed60-4a4e-b447-8113b39d01c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5427edf7-56cb-4da9-978b-638a9e88c929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f958a0-8223-404b-95bd-99441e3b5c34",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f9bbe3-16e5-4ff1-83a0-95e085aa236d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87895c80-c351-4c40-b695-e6d339a6fdd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b20114-bbdc-4bd9-a03c-847292d53b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a7cff38-3ffd-4f99-8d1d-e931909dfe75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a1a665-867e-4488-9c93-d5c678af1624",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14f2448-b378-4564-b99b-cdd0df20109f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4eb328-a727-4ed5-977e-512a1fb16867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730d37e0-cb71-4083-9e69-70e83a553733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff210f1c-bf2e-45c7-87c9-0a4c25342972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41422bb2-8490-4c33-b62f-13d5beebc7cd",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3506f80-d194-4941-8b4c-8ecba4ed2a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63ca7d7-3c10-49be-870c-3e3597d58d75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac869b1-6e40-4e2e-85f2-dcf159bf8583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "717b5ce8-bb2c-4acc-b176-cd6287abf94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd3d99a-32b5-41e6-8b1d-fefc1ac4bad8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4830eb63-0ed9-44cf-b3af-06517f6fcdff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33251b04-9c8a-4581-815a-d450be7db3bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f161f6-0e10-4fd9-b44c-8fc76919a002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f13f613-a97b-4f63-86a3-9ff77cefd097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27f78d7-dc50-45fa-9458-a8c2fd8b3b10",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79bb022-c898-46cb-ad7f-17dadf60934b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3aed7a2-40d1-43e7-a2ea-19fc5b7e9e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf124e3-76d9-4ca8-8a2b-83cf3174bc87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6df0efb5-6371-4002-ba35-6335663d8baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859781c4-ca85-4b2c-8608-813b2547054b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2255c480-b972-4d7c-945c-e8539000467c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1837d1b-280f-40a4-b030-76025b03f221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01bb0684-48fb-4d1b-a206-da123e80ead4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e1f255e-9703-4c49-b72a-a8fe72009aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7d96c8-69cd-41b4-8665-dadc3f00dcb4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "883d0ece-6978-4fee-92da-dea15c69618c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e8db0d-62b4-4157-ab26-64ba34dac913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8859a5-e21f-4d70-b119-fc5fe88d9f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ced0454-c5a6-4977-8925-c644fd55f1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0c6ff1-1aa4-4acf-80a8-cf3319e1cf95",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4903f3-470f-49f6-a431-c29c9ae4a059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6936e664-30a2-4652-94df-d7938a3f27ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ff4b55-e064-46b0-b7be-22750914d38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a9dec2c-6fb9-4c81-881d-45ed63d2b29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0180d5d2-d8ba-4f87-92b1-2fe4a2892f6a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51044998-53c4-46c8-ad73-2c04612cb960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500b9756-2858-49d6-b94b-93d10498933f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4a62f2-2bc9-4db8-8dd0-9ab6374433a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9399605b-0b84-4f56-bf6f-50361e32e396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f2d5fa-1058-4782-a615-c47d6d3aafc3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3247ba8-b579-402e-887b-593f1cc19a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48836bcb-6ae1-48c1-a512-4391ab4e33cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ccba7a-a956-4fea-96e3-ec0c6675858e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b73ac26d-0bea-4fa6-b0c2-7b4886a4a673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27740355-22ba-4c3f-baf3-65cc9c829bec",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248f0349-e7e9-492a-bcd5-2e2bc57c5ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a43cf2-1b01-4ca5-a7cd-48b86c2ec157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b212c10-cf2a-4eb8-a8f1-c60f72d3e2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12c5a007-9f7f-43f1-aa66-26714ac9ec67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3c6c86-829b-4811-8b7a-586541c40aa3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73a41a9-722d-4829-82bc-42fb176729ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37bff2f-7066-4764-944b-20398a438a1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b6ccce-69a1-45f8-a6b7-dee58263a317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4175ad5f-7691-468b-8626-baec3d6b7903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aefc0c8f-34fc-4148-93e1-9476b20fc137",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079bac45-968f-4b6e-a500-18074ff4fcea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6deab99e-5f4e-422c-931e-194db0926edb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1aa3e1a-ada3-43f1-a0b0-f8bcf50c46e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "808f7921-da06-41e3-9b56-f42caea7ee44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d41f0b-06fd-45d9-8658-2c868f08cd8b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da0e335-1f3b-4ef0-881b-202c04f55ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f0afdf-123f-446a-a1c3-868d9744ef10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543dc4fe-8a53-4e27-b56f-14a57b6c2771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "054ead58-6dfe-4597-9d2f-5d33209333b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad1a465-f8f7-4c68-bc20-1f36c7b51525",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1199cbd7-70d6-45fa-acf1-44188d273cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a00cc92-03d3-4e09-9765-de2126474900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31029811-4a5d-471d-8c91-1af11fcd4159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d7c251f-b770-44e3-957a-0b68f15c52ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e5a42d-8de8-4d83-9441-12b22b19d240",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea83ae37-d89f-462e-99f8-f3be25ed4e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c68ce1d5-24fa-4a61-ac03-8bf2d74f99c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67654c40-0824-4367-b3d0-dfaef1997d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bc6b55a-1b54-4233-8878-5197f86c9add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f91e744-d693-4df6-9003-5ca941ca81c7",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f56e70-3467-4ee1-a244-8099312cd6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440ffb7b-ceeb-45c9-abe2-26dc6a5fde06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26ab9de-60c4-487b-99f2-43a2698e550f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1d78a33-0c41-4b22-ada2-33ff905b8c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec1b715-a0ce-429c-8ddd-2f1360c8f732",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a1f133-25c7-4bd3-8806-e19c7f19d622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01abb99c-4219-4d73-8385-cf73c2b0a505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7613f7-08d6-4e2c-aabf-31d080eab5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a890550d-4b64-4a7c-ada8-88533e6910b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837ac42a-cf7a-49f6-a640-34c746d64987",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6697b840-aa83-4575-aa06-75c741f0f7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80419b1-5297-4680-b720-1dbe8a1ecc82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20896e90-05a5-4a1a-97f6-a5a2061d129d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "51ee4c0f-ac68-4010-811c-5da10cc2dc5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5262fa70-3df7-43ce-874b-23828b781bc0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2929a1d5-a673-4475-8b74-bb20490afc73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd461dc-b1f6-4f73-8e9f-bd0f185297d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc760987-e4e7-49a8-b616-bfb82e344231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "746e1f80-9914-4a45-94bb-870319baf9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7332d2-d0e8-4899-a06a-ec39862f83ff",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e533ffd6-a1c7-4788-9b45-9d55312cd326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "590ea229-4ff1-46f3-a2c1-5a3c64109d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e888b1e-ce23-42cb-842f-219f0078a02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fbab87a-9709-402c-96c1-8739714a4428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81fbf661-6a9a-45ae-aaef-7124fc5a8cb4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "694ca49e-14e4-46ed-9ca5-3ffaac5a6915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea63c771-6326-40d3-a4ff-025961319017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53168ba0-b678-4931-8681-8778d0517536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd61b57e-301b-42ea-bdda-301b3677bfdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a3b19e-7e31-4329-a553-f9a5a4cb9e35",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10800b6b-9c97-4a51-bb99-acb93504d32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f471143b-ac17-4fd0-b9df-09d4f017fd40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e35fbd4-5739-4ea7-b694-e6cd4bbdd199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb337eec-5c51-4d50-b5f0-ffe30e6605ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e8ca6f-52f0-4b0a-bec3-d8f6c77b6ce4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7505a8d7-3510-490e-8b8a-e64f67bbc6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a26a48-0dda-4f90-9adb-b51ec46bab39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6a28c7-8e74-4deb-9675-34abeb18d942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00809270-154e-49ba-b3d7-e9547604bebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5569d67-91d2-4365-8481-6481644864c0",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e68da7-40d5-4400-9791-1adbf985d44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f10318-711d-4e1d-a7b6-bf7359a4adf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab68651e-0ad9-4a0b-b7b9-56a511a51cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "406ec587-6e7d-4115-866f-14c1a7a90229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b99292-f007-4791-9b9e-5cda1b26c4db",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6735eb-4cb0-4f29-af9a-d43241412418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e31cc9-5901-4a2e-982c-15b39577c5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46bf26da-1f42-48d4-ac7e-26edc93dbf87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1534ebeb-ce6b-4276-b633-d5b6d0c27046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db11fbe1-3936-4159-a04a-9d03c0550291",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "583ba345-8f43-4c02-8dbb-fc3c9574cdbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27efa82d-52bd-44b4-aab6-8ea66cac222f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf47342b-63b5-4412-b74e-bd577d07170d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "67a1ce03-5c41-46dd-ab03-56c35ee594a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be0be35-937a-466b-b31a-7796ee95577b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc62670-ce14-4900-80b8-9dbc343a4429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42a04b6b-0089-4195-98fa-b7884ff3b925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5990bf2b-5ad7-475f-813d-8b3647f516d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a81bfd3c-6f31-4c17-8acf-a98aeca31247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ccb6d9b-5203-428e-b0e1-6bf58dbb445d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f125899d-95a1-4de2-b608-870a8e562827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "048c93c6-197f-400d-9ccb-faca65e52c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6498b245-a330-4734-afc7-0bd18fb39bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc90bdbb-b6c8-4911-9100-6fb68643a719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c99e269-e8c1-47aa-a0fc-b0690ffb75a5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb885f5c-d60c-42ad-b35e-4c14f07708e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e43ef92-db4b-4fc9-ba7d-794b7aec7809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97af01f1-2b40-4383-a753-cb1d06df77c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbce3599-1aae-4273-bf97-32dd4773b2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa31dc4-6ebb-4284-b6c0-583ebe8b327e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b01498-d2ef-4059-ba4c-36776bcb71f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d41727ba-fbba-49a2-a941-99f4b7eb0753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8866fc-637c-4c8e-865b-2e92d7d177dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "296aa8f9-1f8f-4bd9-ac9e-120c6156bd95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59d64c1-24d7-4043-8cac-83478d939e1d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc7d697-085e-4011-b02d-8dc84a9b0a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5cc25b22-7e06-4350-955e-d6ab71f720d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9366ea-2674-4523-81b6-b0a6cb3d73d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a78869-40d4-44e7-8008-7fdb55e80983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0ac450-c23e-47ef-bf91-801e295ac649",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de00592-56a4-4d3a-84ec-9c6cfe864782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781267b2-512f-4751-95e3-486083b0c096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be412f9-388f-40f5-9384-d3ac1ec50abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "74f1a2e0-3cb6-4ab5-9c38-1313b22ace79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74944f8-4149-4b42-bcc9-d01ebadb72ac",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e1c9d7-8509-4078-adf6-01b4aaad6c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46aedf23-0e00-46b0-a941-69f1c7a7c745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5af007d-a19b-4b93-b4c4-ebfffc569b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "377bb1d9-8b42-47bf-a3a1-711dd2fcb779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f4dc6b-db44-46b2-acb0-d2db2ce4a95a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6002ca97-e80d-403e-96f3-b4e1005d4451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b76d6ca-603e-448f-8a78-692d174973fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2576149a-544e-4efc-a066-c35353699429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebce26eb-63f8-4108-b97a-0d77a8477355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b223c0cd-635b-46ef-8298-dd34a50bbd12",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ff9285-4949-49d0-a314-a714e77efac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f999789c-abfa-4625-b95f-273a61b7181d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80ba648-5582-4fd7-9784-ac4f3238089f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "082936c9-33fe-474d-90c9-c97f6dc596a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b37f323-0389-4900-9291-584bebadc946",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f2498b-5835-49ca-b93d-766edb5fa17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c978983-5305-4517-bef9-4959cad8cf58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1d2d74-3b4a-4b8a-a830-e3b264c310e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c2a0da0-3e47-42a0-adc7-1e9f692223bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986264bb-7bbe-47e2-b77c-da00f9e93259",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579b9bc2-aa7c-429f-9089-f8b4cb872ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5082ed7f-dee3-4561-b6e5-4036b2926438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a8c0a7-a828-4c8f-9909-d5acb8301d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1116f9a1-d8d1-4579-a479-f1389573cd5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aeedcab-eda2-43d7-9074-8f8bc888fd23",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b858cf1-3736-4a1c-a6ce-a6d561500741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd10934-a206-4389-a20f-685ab4692366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2696d3f0-6c5a-4ef1-952d-1ee89819cd1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "16769acb-f41e-4a96-b1bc-5d2b455f7a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3795bfbf-ad96-4245-94ef-b126b21bcc36",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "398f82bd-04db-4a20-ba68-b28124eda1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93b1caa8-dd32-465c-b298-8f07b1cfa692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4d3015-b88f-4ba2-b763-bd1550e67a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca8a8e9-2cc4-48a9-8ec6-89a6c4d77ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3833b3-356a-4449-a186-8b662d52ec22",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfaa9980-5b75-442d-8d36-855d0e240421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f250e587-5f5e-4240-9a14-7f4b6175fded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1608020-b60c-4ae0-9b08-4c3f92acab8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3abe0f37-0937-47ac-ac11-50a841a49cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f74b661-5dda-4400-a1e6-3927f9684e97",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b68c92-b218-4da3-9927-9fcd8b8922ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa4bcc7-c160-4673-9979-2fa943280561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bcc3eac-e6c3-49ca-97b0-36183a456085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "080a481a-7199-4ac3-bde7-63368911d1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e81a02e-0114-49f6-899b-3a380d7fb668",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fca7d69e-cc82-4df8-8c24-29b284fb9b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "322ff9b1-06b1-4312-b633-6000825318a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f475e1-0736-4f6f-94db-31f16469ba7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a88d41d-a564-490f-a5cd-7626b95b9602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61304fa6-5e34-48a7-95f7-aace7a3e72df",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866d3858-65ab-457d-9428-e584d6a6e517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ca75b3-274f-4012-9718-6319a731216b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d32915-6350-4cd5-9c03-5898f6e46e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f34b6f78-86b9-4f65-841a-4b00cc3d3272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb49329-4736-47d2-9885-319d5d2a0592",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ac00cb-3398-4043-a3ed-696e4d63f094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73961778-9cfd-423b-a687-dfdff7026b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7cdc70-9fad-43ca-9059-159e4da242b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc1b1b4d-5355-4efc-8832-6abfde3600fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3844b82c-2422-4fb2-953d-b63358249016",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a66e73-d01d-4a00-bd2a-58715aadc789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d57145-343c-4f25-8849-1d107790c9cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a741c89-1ed2-4a42-a10d-ebcb03cfb02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ad38ed32-74ee-4ba0-8ec4-269b34d5a155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8300664f-6d05-4fb2-8b94-6174a8162da6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0c59fd-4d7a-4219-b16a-38c1653f3148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db4f4ce-c1a2-4d20-a804-1252d567a8a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7179224-3391-4e03-8268-76164bbcfec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "01b1a3f2-1a55-4dd1-8354-df42aad6c9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc991210-f300-4c30-80c0-e21bc6ccb0a4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d15815-5885-4d70-ae9e-c863aae4496e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cd03114-5856-4930-8b6d-ab72f6486078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b04bfa-3776-444b-a661-67a57cb7f7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe9bf3b-1d3d-4275-9ba3-b7e144819524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5cd7338-f145-418f-adbf-d5bab5b2e88e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c7ddff-a004-4b3f-9a43-35fb9805d91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87be3a2f-ad45-42f2-b55d-15747721b07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2025c073-1e97-45dc-b78c-3a6681774f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8644f153-cb86-4ce0-a180-dce5b6360474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7fa3404-5ac9-4d56-8e5d-88e05161b6e5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e303c584-e753-4518-9459-8916f3880890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d72e68b-f97a-44a5-b655-41472f5bd3ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eff5bd5-6e8e-4ce0-8b41-ff614d60bfe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "362072e7-b856-4bcb-8530-b2510be18159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f81ac3-10a0-4c2e-8ab5-44b576abdce6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8bda909-292d-4d9b-ae06-40b9c94d4bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7103034-d9ec-4161-b842-00457e12c521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70059446-04ca-4f48-8103-a48a3331cf8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a7821e1-c1ab-4330-b811-992b19df314c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f4c483-6ad8-45d7-bddb-c9d13c92f849",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1cd2ab-f002-4d90-9a5a-64034b64974d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb442473-cb15-4a25-a71c-11dd6dee6931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f333e035-14b4-42a1-ad0e-5ea4c2e271b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1a5e0a8a-75e0-4345-932f-2a87a9eb583a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97aa89cd-f83d-438b-8b6b-6be89c241af9",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d047c5-b6e7-47eb-85f7-a622d5b39f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d01be50c-b0e0-4997-846e-a7dce0bee1bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d840b070-3cd1-4d74-b00a-1481596d8dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6191fd3-9159-41ce-90cf-11fe0c2896e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887e8c18-a7ac-4485-aa8e-02ef4deab906",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a354a36c-660c-46fd-92b3-9259c69dbb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b1cf88-5e09-4a3b-afd1-bbb2e32e430e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d207720-8913-4640-9187-fb26bf4577e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6107a8d9-3e2a-42dc-8a87-9970605419ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d498e9f9-1b8a-4ccc-bfd6-685c30c520e0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ca73bc-9504-4b8d-a124-5622113e1021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f9e8e2-8e52-49fd-834f-6eb8a16c988b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a884726e-75da-4df7-a6e8-4d771069a8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "97284222-f6c0-4199-b868-5adee595793b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca4e7a2-b672-4bb4-88d9-9f1866c88024",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2f0f09-0940-4880-9a02-8322bfb0fe57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b1f420d-df45-454d-8026-3045e05833f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc04424f-11b2-46f0-8c63-e481bc2df230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f92f36cf-3957-40ea-910a-48c465d69c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8f0773-8ad3-47c3-ae82-a425c1b57434",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f5bc93-ee6d-4998-bad2-649e7a5b94c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fabb7dac-dc97-44ed-b443-a02bb187121d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59e8f8d-7b62-43c7-b182-2f4911269ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4add7e35-faaa-4be9-b358-570d06f142f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f1e0af-ffc4-4b65-abf3-a4ffe766868e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30de6ecf-8c34-4f43-a7af-a575c8fbac43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48104da4-e81e-4612-9a30-1cd73b8521c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e882b389-f90b-475a-85cf-24f05ff4887e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf068bc0-af64-4a2a-a5c5-c5a91270e557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9689061-96fb-461f-afac-785f1517b6bb",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e9e083-aa3e-4555-a497-9e244eda5a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a7f375-0b5d-40f6-ba34-4a4187c15c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ffd642e-7c1e-4c16-8579-b00b735b7d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "02c6b893-7f71-420b-b4f4-d4529a3351db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a0ce6a-e3c2-48cc-bd08-02a1546ab934",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e9d76ea-d6e8-4f93-820e-3173488790cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6c7f30-c16d-4392-b034-6aa89e7d363a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0c2711-c7b5-4888-9507-e15e8b89985b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f5c655-5503-44c3-997c-1330b7df9624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47efcde2-460a-4392-83f5-bf6b81a05b65",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75970602-13e1-4f6b-bf41-ba81812619cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07d67ff-5bf9-4bab-8a36-2f6ebf704cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986e6144-b54a-442d-b890-8bdf5dca0e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b1968b7-bea5-468f-8f00-19f6d2a7e43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6547df35-2135-41cf-bb5a-52c5632499e9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872e90d5-cda0-4cdb-b32d-80ee74fbb81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb57dba-b1f5-4ee9-9a72-12f7aef5e1a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35a2b6a-8b49-46f0-a09c-aa358ea3c595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "adfac73a-72b1-4d9b-b552-d11e4cc024c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a231c2-cc2b-4d0f-b3c4-c6b333a74780",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "704cec9c-71d0-47dc-94da-606b3937e507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53365b57-0d71-4b26-9636-4cf3420d266f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f490f94-41e3-4fe4-a5e0-67e5d2a4be40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2fe815-fa64-493d-b530-8701da0988d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15634d10-cd1e-4085-a2f5-6e695f3cea1e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ca77bf-0ea6-4491-a71f-c1b22d13a8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9bc075c-0ba3-44a5-8ae7-7a84c18c4ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e85ab1f-327e-4633-8119-4b5d53be2b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "de8b8fb4-94e6-4056-aa38-ad82d99927f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0ceefd-d804-4ab0-abf6-dfd3b53af88b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9e60d0-e81f-4e43-a427-11954ba53382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afdca660-4d47-4f33-8415-069560ad828c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb7bd9a-584b-4942-ab74-4efa02411e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "26aa5808-3d40-4796-aa69-ba69f29df1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e5b778-d1f9-499b-8684-bef4d2c5c1f1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b390b05-abab-4ea7-aadd-e25215ad0ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bd71636-774b-462a-9d5e-644dbae0916d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb229f0-5b49-44ee-8d4e-01db5b7aa248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d7ad99a-b3c4-466d-ac42-6c3752aedd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71cb026-e5bf-40e5-83db-84a192d85300",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab288970-2dbd-4072-8f5f-b538a258903f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f7b81c-1f56-40e1-b7a4-023906fafd21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1644a8-f4a9-4eb9-a55b-0c7acb918ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f1f388f-cc72-4343-b782-e8562a34af04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae1123fa-dc77-498c-bfaa-83869b3dcdfb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc907de-52d7-4d2a-bd4c-d2f45e4a95cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c51d19f5-45f8-48a1-b739-49baf0a46f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185b7bae-02b8-4a83-a25c-cea77b309923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3da782fd-8d38-4f46-bd1f-d9bd7b973d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77c2307-5c68-4f04-a059-0e3f32935edd",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2be80f-db59-4efb-9d53-af1e0ee392d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de01c916-5c6a-4bb5-8fa3-a258aceaaeeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1680ecb6-ad5f-4078-86b3-a2b023bab9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "961f9cf1-b87e-4448-a498-9c986fe76f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a68be61-155c-44f0-8f41-7a8a4e51ba83",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662a5dba-9c40-4145-bc29-852bf08f0bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a761ff52-89bd-45a6-b6b6-72d8d30fabf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5899e5b9-7251-41de-a2de-c8261de9f8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "469dcdf2-057f-4b5b-aa4b-724b45d54de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd7b086-739f-4be1-9f33-80f3d5d6634a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dab3691-79c1-4cd3-a480-a2ca9f2617e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71107139-f7ec-4ba4-8f2d-0fccc84fb65e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d1a3f1-17ba-4c8a-9b78-65cc94cc691d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "57c6faa4-9823-4784-b594-f4525473ca76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19ca952-d1d7-46e0-9ab5-e608bc773ec5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "145ebd9e-ce55-4031-85f9-08b03e8ee049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea3cdb4c-6dff-4178-b039-fa406216f8c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade82ee9-56f3-43e8-bbf7-300fdd50465a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c6763f-d87f-427d-ab8e-f7c966663adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55c102c-2572-43fb-be2b-4eabdce3e9d0",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ee5919-adf0-4af6-a3e0-1b7edbb3985a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1bd8c6-9d2f-4acd-ae2b-dddf1b2cac33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309a6ec6-79af-4566-9d72-6e79ffb8ec61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8726452b-c452-44d0-8af2-f0a1a610f587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17e9747-ad3b-4c15-98dc-44cd1328fb26",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d71f3c-3428-4835-9323-251c3c7d252c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08139601-0316-4760-a009-e94dcce38913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61379ba4-77b9-4d4e-afd1-5ae5485f6560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a04425d9-53ce-4c23-b4c6-ce0960bf9bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af55428-c5e5-420b-93b1-203fbc307b18",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8152b063-3ca5-451c-94c1-3199526a217d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44c4e8f0-d37c-4790-9a15-cf77b9e82cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17543e7f-6e76-49c6-be91-a81e33e179c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8dbcd983-133d-42b8-904d-b604b031bc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb28a7f-b99e-45e1-9db1-c8f80a8058cc",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6608798-5d80-4cd0-b870-64f7d08cf225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fce9edc7-5228-4bd4-92f6-90131576f05d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52792d6e-6b03-4623-801b-bfb8f73777ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4833a748-f714-4cd0-b49d-e003d50faa0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68515c23-2597-4cd2-938d-fb0b0f88fb38",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7540ecd-c92c-4bff-bfc2-6d6daa742d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc4b022d-7964-402e-8931-c2e8464f054a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4ccbae-a02f-42c5-bc69-a2f4a1e582c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9ab3b15-51f1-4caf-9d7c-46e8e043addf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa1a749-0e7a-4234-abf3-ae165c972fe9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61cf5ad8-8f6a-4f53-9479-bc1f1bdaac38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78e76c9-9370-406b-ad66-e0b681ff5fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e8239a-0f05-4f90-bdc1-4007b39b8104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a40a8f9-3746-46e2-aed5-c30a05714165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c82b0fb-8cff-48c7-954c-fe0b0c111b9d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d1fb5e-dae5-4b15-9805-dbb06394d567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4a61580-3b03-4bd4-af96-c66b746ab269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1c978e-b304-452e-8515-089cf5a8669e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f90c7fd8-befe-418a-84e4-e5d3b76d365b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b684f7e6-e3fb-4018-9365-397bf6b6bd70",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e748a71-7806-475f-85ed-44f9096a3522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ae4ab67-9de3-49b7-85a9-3fa151a5d19f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0820de2d-61ce-4285-a554-de340abe8780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a5839a-7b0a-4408-912a-3d577afd6b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1e5039-ab07-4847-a2ac-48b97ee136bb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec84771e-2251-464a-949e-fc88baa6646f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03caa355-b8ec-4e38-8e4b-83eb622921f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b0fbae-d3d4-4fbd-bac4-6142fe530c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "222c21ec-a0ec-4ac7-a132-f70d4eeb83d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7a3fb3-5252-49bb-b6e8-024edae097c8",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "078f8a0e-2d5e-4b14-8a3f-fb0566c21229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a59f22b-608c-4e28-9f49-26b5568fa5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c016eae-15ac-4bb1-843a-e679d8e3f834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2e8e5a0-2420-4dcc-8571-e9a6b7b6eac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232c76f9-ef90-4fe2-90db-937a7206b756",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38f8ede-5023-4a8f-a0c3-9b045bf9cf17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f9f13fa-0531-46bd-acb7-35f47da23452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740ab86d-229b-405a-b671-805e8f33c2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "266cd47a-3e6a-4c60-b794-e761f92ece6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f69fb8-6552-4a6f-ac25-03f9ffb4dd8b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d346113e-ab83-486a-a8ea-81ed0f2e2d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841b17a6-10be-4acc-bea2-c81c3ddfd8e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9775b6-c442-46a6-a2ad-9dc89b38de68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca9bae3-62d0-411b-ba1c-6159b16fd4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbbb474-e757-4b3e-b531-b135563f79b8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96dbac39-3e5f-4477-b14d-7745f4ccdd12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e3bc1a-bde8-47f5-ae5c-42fe1ad35cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9a7fe1-9d99-4adc-b70a-ed72761aa3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "97f307a1-cd2c-4edd-81d1-c658a54935d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866da829-1857-4f94-8338-0c4b2713aba7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c429e12-c32a-4aaf-b1f9-9b4cc82aeb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f49cec27-00c7-4ba6-be98-f44275aa4a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dad9494-f6e2-403e-99ea-75b712df526e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "419ac0c8-600b-455e-b5b3-a47e9f8c40fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ec6782-e69b-46e1-9be9-330e495f5e86",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a8ac78-2b2b-449c-b469-169b9cc71120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92138520-fcaa-4c62-9acc-5d7855bc786f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f711bd2-799f-4ded-95be-eae3ad24bc88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "741a668b-ffa5-4a93-979e-e24c8dda3ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068b0505-226c-48a7-bd92-5cc335300c92",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85dc5384-cffa-4e13-96e0-e21e2267a13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3d93c163-c4d5-48ed-b84d-46f7c0b69f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a10efc8-9c42-4e45-9e67-5e753c5d29ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "34494db6-0012-4268-ad97-7e7d131d1c26"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "834a4f0d-7630-478a-ac07-59ed4124a60c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f7e5105-873e-4ace-9955-30ecdc7a0659",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a2dc16-ee10-4e99-9e5d-2ece669e8779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "733b05b5-b810-4429-8e43-d598a9d868d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903ede3a-56bb-4dde-9ce2-bac20ac674d5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "41a893e5-39c7-4e4a-9fb4-50d11cd9be20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44c19de-dc26-45e1-ab67-22b7b0952258",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e725f875-e0fb-43c2-9243-0e74b4dbd99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34512683-669f-4bb9-8f1f-f4188b6697b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f7fa0a-b304-4e15-a942-06fea30e081b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "12d58c22-205c-486a-bfc4-18a1ab008d91"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a28c7885-3f47-44a1-9238-afdf8eb9fde3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82f28db6-ee8a-40a9-844a-cb10353069e8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05d50027-7899-4ae0-a9b5-ed2ba3874417",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "160630d4-219c-427f-bb7f-a48bd1c84f36"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f0826f75-3a79-41ac-9ea6-117ca4cd52df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d0ff3e90-a9bf-44ce-b064-802aab11bad9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4ea1b5bc-c8d3-469c-8f06-09738130fc73",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8488461d-59ef-476f-8aa4-85f4a7e624a5"
                }
              }
            ]
          },
          {
            "id": "2bbfdfd7-73aa-4ea1-84ea-8da0abe8da73",
            "name": "Positive Testing",
            "item": [
              {
                "id": "296199d6-562f-4888-beca-416859fe8672",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0721d6b-ee0f-4d0e-b9ea-11b647178eb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8deb2279-5eec-491b-9aaf-516247ff51e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5cc35a1-421d-427e-9e89-a1dda03556e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "09980528-076e-456e-9de0-1014a40308b2"
                    }
                  }
                ]
              },
              {
                "id": "f24be71f-2d99-4d4c-95ec-1e96cb24d3d7",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d598607-8254-4452-94bb-197524513952",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b14baa81-e9b2-4a0a-9bba-6ac23ec56580"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4d76681-75fb-47b4-a6ce-0305f35f1b21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "778d250f-a78f-42a3-8514-74b2028701d0"
                    }
                  }
                ]
              },
              {
                "id": "30fab44c-79c9-4b49-8fb2-036cd6dd19c0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "29fa949c-434f-4e81-89a7-fef17db7641f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5dffc1ed-e4e8-4a04-888f-57819ebfdbe4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc0f2039-7e34-4671-8ea4-1a9cdedd2849",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "afb50c8b-0e59-4aa1-855b-3f2394bc9fe3"
                    }
                  }
                ]
              },
              {
                "id": "c550b37a-279d-4c2b-8d8e-f4aea9fc305e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5323eb7c-75df-422f-9e29-5801f28474b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a6f00bc-a251-4409-b9d8-3f425f96de30"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69745ee2-c46e-489e-91ce-4b1cea69e3a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "997f9ca7-eaa6-498b-99c0-87b04f8f6786"
                    }
                  }
                ]
              },
              {
                "id": "5e70c29c-92ce-4305-a43b-ff11dad0e898",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b70b10b9-84a6-453d-aa18-a9bb0e599d49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "350b124b-b416-4d12-a103-f1dd15857b25"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "398bf885-9d2b-4f07-b4f7-c4ebd8166a6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c793bd32-6654-46c0-89a3-6ca904335218"
                    }
                  }
                ]
              },
              {
                "id": "6b11eec3-6341-4d90-aee7-2747e48502ea",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "597c8a2d-7597-40bd-908a-4c72bf67623b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f5c43fee-9191-4cd0-9a5e-def2d7fbb3af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ed40f0f-7d7b-489a-a51c-7383d784704b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2c1714e9-d8d9-4448-acfc-6aa76f3ca8c5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "afa27bbe-b8dd-4c43-91bd-d60615aafeb9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "39b147e0-1333-4647-a3c8-811244f22834"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c737833f-f0b5-4592-a3c1-4967c4484a0f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02f801f4-601a-4ce0-9b22-c6e7a7996f51"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59a9c1f3-250c-458b-8577-2e9e6b08e821",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7683a91c-7e48-496a-ac34-ae71d29f3331"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f9cf5dd5-9233-4891-8859-fcfe057e6f04",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "798b51da-d991-4570-95b0-f48b4f035adb"
            }
          }
        ]
      },
      {
        "id": "3ca2ff32-4ba3-46de-8d22-621a54b89781",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "9b355ab0-4173-48ec-80a5-ba21ee135b37",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aa254254-2dee-4b8b-88fe-0b686f21ebea",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0b34be07-5011-43f0-81ab-d7d0ea95ef05",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b617ab-f0ee-4bb8-95e1-f04b30cdec03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc32153-c1e0-4bbe-b26d-1107637f6007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c449af-8459-40eb-8ed9-6cd1165bbc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "708bc078-592d-4e0b-9741-4214b7e8dcf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "817717e1-b132-4c03-861b-2b6b3457617a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d9ae78-d3c8-4f56-a628-a0570cc532a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cb7d7ed-ce89-43b8-93e7-d055f91cd0ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e18cd0-11f9-417f-aa13-37208faf7cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "916f8bcc-77fc-433d-874a-47351347bb1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f0cd15-9fd9-4aeb-9b5d-1196a889f795",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d947d41d-c843-4f95-8221-621fe7b64bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b50113b8-59cc-4ad7-a0ec-0297e8690a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3b6e03-dc7c-4c20-bd03-e13f91e5ef28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44035a56-fb18-4136-be68-fe0935b246c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb68254-45ea-4a61-8660-5989969955eb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85fe933e-53ce-449a-9af0-19719a588354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b71e88f-cda7-4fc3-b29c-b24406e7bbf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9961ad5-4188-40e5-b822-a3ae0f4fb3b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "851a9304-d041-4aae-a3da-b0e7bbc8763d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cc8507-27f1-4283-be4c-e4a10b1bf9f9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38f9d11-9d39-4a1a-902f-605f585edd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee2be9c-790d-410d-92c4-e459a6767a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da4a0f8-c3a9-40ce-95d5-a303f5a84e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b374438d-11df-4851-9659-b529e9a69be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1341df-4823-475f-a09e-2f2eb80f39e4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a0cfcd-c26a-45bb-9cc8-90bcbf64d01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f18c3e0c-7f23-4653-bd72-48a51398a30b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fcfd792-4ff1-4677-af27-8db33e505ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24e676ad-bcd6-470b-83e4-568e48846e85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f6f71f-d5a1-4b89-9516-5174c78217f9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64b6761-3cd7-4a17-afff-39696e34eec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7296ea6-557b-4575-9e3c-adbede196fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c402f64-8ed6-46ba-8c69-0eb8cd84dc46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8727f4a-0b09-431e-82c1-0e1eea1cc376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea918a2c-ac5f-4ab3-a41a-30ca30b11c5d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04942225-1b45-4d77-bc5a-e02b7fbeacd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44a7aadb-b1e2-49a7-adc2-aff150f2a535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136df229-839c-41f5-a930-554f6b3b7ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50773b29-64a9-4978-b52f-05b7d6ec9ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbd6ae3-11ec-4a06-bb03-e3a1569ede15",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d91f56-d6a1-4fca-95a8-c9f11e43d2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e501618-33a4-4cf9-844e-0cf74eb747c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f516cfa8-f0a1-423d-a680-074183603bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e94d1a0-6eb0-4ac4-8223-c9d8b982150e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6316acf5-5ffa-43b9-918f-46bc4fe0ebfb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "730cc772-ff79-4ac5-aafd-2e8f6c14947f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d708adc9-6c3c-4f97-82c3-8dd21b1b583a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c672f3ad-8fa6-4049-a96b-ed2aa937f031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5e43ed-180c-407d-b2c5-6d00da326c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25002f6f-8694-454f-bd4f-16ca2e9534cf",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c0734a-0b19-4219-826f-e8cc4a9ea6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa6a3fbe-0be3-418c-bcdd-c8c97d299cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e301b7-8bc0-4714-ae86-b8a789df6316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9ceb0d8c-a738-4cd9-896e-a8e969b078e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb4b4b4-42a6-458e-8831-fb1411349efb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c1e487-78bc-4260-90cd-b7ea236734c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b09ba57-c1cd-4e70-8dc5-82016a202088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433fbd6e-53c6-46b1-9b17-7f881e4b4b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7864a583-79ef-4ffb-b94c-68a5cb143348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9534a70e-cf55-4828-85af-57fe14881b2c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c024353d-97fd-4a68-abb7-3955fc51c7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "494423d3-2aaa-49aa-b8b6-b46f428a5429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248af114-3bd5-4d58-95f4-ccb3e660550a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "39b97253-1bc9-4692-8303-eff341e2883f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8727c0-438c-4d5f-b399-1f61cd5ae2a7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91accad0-98fa-48d1-a401-95d3cde68cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf6b6d58-6c68-491e-8423-05dfe4aa9d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6f9e84-beb1-4124-9577-ef0e0deeafb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e45ad3a-e1ff-4af1-96a6-02ee43564207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc15ef9b-45e9-4643-9efc-3d45e6e1f78b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "631526ff-55b5-48bd-b7b8-d5b0d7b4165d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e41131-7a96-41ac-a340-50e04c411b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745962a8-809f-49df-b885-4453a93e1eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecb5f0f2-99cf-4b97-ad26-a2b108353c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7084b0c5-63af-4498-be46-24a76b3cee41",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0cefa6-18d6-4f91-89d8-6d8077f6af52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a13d3e0-b8ad-43cf-8c51-44bdd6701318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90439fb-d726-4c8f-b27b-e4c194c2f42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb32be81-81ef-40a0-88cc-3ef9fd8bea17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ff9fd7-6732-450c-808c-3fa9b4201f32",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2425f4-9f0c-4f69-bb1b-2bf4ae65d236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6cc3528-faab-44d3-88f0-e29e5d4102fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc5d5d3-b108-4656-b988-469705a3d371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c33aad20-a29a-4371-9bce-13d1681627bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c554ffc1-c970-484b-8708-9dcc329b7ba7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e28555-fe7c-410f-aeaf-bd933f021472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df1e36a9-fd7b-43a4-8117-165a7f28fc38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfafa7f8-7f69-4499-ba8e-39b5165007b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca17867b-94b1-4b69-974f-a94c71a4377b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d9bddf-e0fe-4356-ad50-276bae08c566",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37dffd2a-d2f9-4557-b9d4-96bbd5b6e2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af08d79-c552-4fac-b712-e124aeac5ca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc3660b-08a1-41c1-840e-7383f3316969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "876d475d-1687-4654-bd99-2f15eeb92c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21c6996-2fc0-4ff6-bd06-985678048011",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7f569a-a8d4-4041-b5f9-c3df3525b4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf90d74-97c0-4045-97fc-649e50a143c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce4375a-3967-4c14-a6ad-03eeb71934ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "638857de-9e62-4895-b4b4-d41ef59646f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958cde2d-ab31-4684-87ef-d4bccdd8bdce",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "278f3b23-50d5-4fcb-a3ce-f2b3a8f6be85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "307c3544-ea12-4256-b14e-8c545664300f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77257be7-d6f9-4056-9f78-65c922f19ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c3b719-51e8-4e65-8c78-ae418d2d5a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2478d92-0200-4037-baf8-6ee122d9c860",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d82426-361d-47f5-8cc9-8f605f8b90a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e96de710-0a49-46d7-abfe-ebed7326e4b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9646ee5-0cd1-4be2-aa44-e96996c6f5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3986db7-4aba-4da0-adb7-e7ae65dd5dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab2f340-c631-497f-96fe-25c216d98840",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3635d3f-2fad-49ed-ab0a-36bd7061ccc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4e8b94d-5c30-444c-b568-6bb5f6fdd924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d591cf-4bf8-42f6-adbf-361c091a3b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17cc392e-5b6c-441b-8edd-d911f0ec0029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ecd8435-b84f-4a33-be89-82d5fef694ed",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2ec365-5559-41e7-b82f-33cb24a5294b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3716bae2-c673-4aaa-8b5c-04493fa97170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a06e8d-ca34-45a1-a7d0-a8c979d2a99d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02d4dde2-5a85-46c1-8d8e-b5fa38094b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e4b748-24f0-4cf7-804e-591fad1b2d78",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9881f2a-c662-4394-95a1-269fa284da20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93088836-bac6-4e4f-b834-3e3b3ca33183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ed7c35-0676-4364-97b0-ea51b3a292c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "753596b9-d457-425e-9d4f-6f85435b49e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bda2c7-64e8-4758-adf7-110d8fe4c370",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e358b714-d672-4595-9efb-a12a6e32d844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd2f107-ef4e-47d7-bab4-084b9e71eba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7d95d4-f26c-49dd-863e-3cf626157723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57c6a86b-34ca-4df8-a642-f0a6de62147b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313c6a68-1170-4419-a91f-68f382eef0a4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc39e5f2-6c2d-4c21-8d5c-3e31e70bf80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e6405e-b457-4f46-b004-19856ca10aaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c273a4-84ea-402a-80ee-bc13046b8a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb5c1877-52b1-4240-ba2d-209fb9a89ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4c9853-6efb-4f26-9b57-1a3d4f6c4072",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8f0ef2-367c-4e81-8c7f-6e3ca75bf271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e745747-f044-47e3-b2ab-135456e21c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca55b1c7-7ed4-492a-83e1-66e97378309c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68ccf7a8-338e-40eb-bb8a-4dbba527c4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9af9d3a-2804-4938-8265-63990c1c2904",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b0be4c-f9a2-4dfc-ba21-027f3ff42476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d012d73-b3fe-4dc8-8a51-6b359b75f68f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0100c7d7-e1d2-449a-9ef7-66122c980e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a0d6d14-3987-4dc4-abb8-93954ddbda17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf8eefe2-bcdc-4deb-a7c9-1d0a7a8dfd26",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eebb3e3-9dbe-4595-b344-e9dd18d45772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26837fb2-4387-405c-9a24-c7eeb4f8b0c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6b81b6-1fa6-4bca-b01c-ace08d379070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaab89a0-e2fe-4986-abf4-22fb4258954a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615763d0-dbd7-47ac-84db-38d4c754d864",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b753867f-7cf8-4f21-961b-c58227da9a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9731f286-6017-4aba-bc7b-e74e1fbcd3f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0533dc63-8bca-40b2-957c-f83a80d5346d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d790114-1428-438d-b66e-ae918f231e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701534d6-8979-40c6-86ee-5119adf10270",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3dd9d6-0e4b-40d2-9898-9909f07e321b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c95de9-f02a-486b-89fb-1df49d02e47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c392ccee-c2fa-421c-a892-73cb6705a986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "189a5e53-54ce-4997-8655-8458cd5f6bfa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "635f89fc-1938-4236-9b97-2976193f69d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24486aef-c2c0-42dd-9bfc-9bb7146c5c00",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2685300-dbf5-4f19-8b2e-e402f61b21c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383d08b0-ef0f-4c0c-8069-14816fc732cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e449044-7fef-4add-ae70-1143784b29bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf68e7b8-80df-4667-9411-e51662027aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beacab82-6634-4e8f-bf6e-62f7ca753f22",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea28104-d54f-42af-a138-1f5c027b4dc1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "f020e3db-63c1-475c-afd4-ad96400dcd29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d7af15d-d0a4-4707-b43b-fd3c50ddff68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76390b46-88d2-4132-bc18-64a9f6bed5f1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9abe5917-d9f1-44ce-889c-1ed34ab93093",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "970fff90-9f95-40ec-8c21-8a87ed1d7d6e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddac4167-f038-4071-8d8f-e85910b2c581",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39b6bb78-c5a9-49c2-80b9-692bb9c25ac1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40389859-cb85-45ef-810b-ef71df7bd670",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0049a124-0fcd-406d-a855-bf4b188a18d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "647f9d80-dc6c-4b43-881a-eb9c8c9436bd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "40506ac7-299d-4875-a1b3-fb051128de60"
            }
          }
        ]
      },
      {
        "id": "dbddc2c5-4066-4558-a8e1-b6fee15782aa",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "dd2b50fb-2cb6-4ca2-940d-c668d4e3e3df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "70b8df59-2420-43a8-a329-6dcfb74db45a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1690f964-a447-49ab-8f45-d1a2bbe7a0be",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def9a4d9-2161-41d2-ad58-9c1480044060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf138e78-4c4d-4ecf-b7e4-6ed0f419bd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33094b4-0b06-4a09-a426-416a6590c02b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80edc48-f84f-4336-b01e-4c0aa3ac2cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7fb931-af71-4730-891e-a7fb45d1409c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf2a238-0573-4760-8ec9-4c746dce7bdd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b71f6b-cee5-43f2-ad75-da29bef16acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a822db-3ede-4e61-886a-4825b2152022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7bd1110-1ea0-4d89-8f2f-a22eb67bd21c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46050e0-3a49-43cb-aace-ec494c83589f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f21388-56a6-4b4a-8266-41f4e33b5865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "122d8b33-ee79-4ae8-bbe7-45a775dc8d81",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e80559-a47f-4ebf-9778-3683101043b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aebada17-948b-4f3c-84f2-116a3215068f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55cd963-7021-4b44-9d4a-f5497d9764af",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d39e6b-2f83-4dfc-a69c-e72474035c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc72e1ab-4a62-41a4-8605-c874d783a60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f8ffc3-23ce-427f-83f6-380fbbef1c4c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ae25b7-ad50-4ca7-b9b0-dba53f244a34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81796d3d-d291-4c3b-8ab8-b782adf65b93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71cba468-076c-4b1d-b5da-4f6296b8644c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "421ece36-c031-4410-b743-eddbb1a3fcef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104dd6dd-4726-490f-bda6-71c0705308c9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e157d1e0-2999-4d9b-8ce5-5360f34d68b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9e3a769-9c42-4e46-aa08-54c127746c89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cf7139-5852-4e03-b091-fcce288999c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c62f08-0d82-46db-acb5-682220cfecce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7622ea38-e514-4432-8342-0f6bf74fa412",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880e2472-1779-4d82-b3c3-3d4a0be4e7a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f86ef33-90d9-47fb-841e-7ff9918035c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b9257c-21f9-4595-9d7d-faa260645e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d77594-1790-4a11-b0c8-3a44ecb3b62a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a66497-a540-4f40-88ef-0264b37d6673",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1801991c-4506-4b19-bf87-33c2e9ebce19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfd48989-4c6d-4961-9c93-9999cc11f58f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2413d2e2-bf5d-4241-8b53-9758c606fad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02db7207-79e0-4c4d-a888-6bfa84c7acc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e08f73-8c37-47ed-bf8b-a68a41eef525",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35405be5-a382-4e9a-844a-4a033e75c479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e50c1cc3-ca7e-4c1d-9445-b0950c320095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7e60e9-6795-4389-9605-6ed059a6ec19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c4794b-2934-4186-a94d-dadfbf187838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f5b71b-e131-492f-940b-186bff98213e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805183d4-13e3-47bc-8489-bc3f939e069f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e3d4bf-0794-4c63-a145-6628da23a4e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "479ec44c-2935-482f-b400-004c2f81832f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d05e13a-e1e3-44c4-9176-b3d8ab0e7edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a73648-2272-4433-ac48-8fe69c99add4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a4eb2d-70c4-4125-8899-008491cc7091",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a25c088f-986d-4e47-b23d-b79604b314d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eea2e21-44a0-4841-ae46-38a268317338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4217e26-53b0-4f9b-bd56-b111f5c7c000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ffaab3b-4094-476a-be8d-46d3c453cb46",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064a0a97-35c8-46b4-81ce-29f893a4f140",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6173be8c-a9c3-4a4e-a7ba-9945731345b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ea548c-bd43-42d5-a4f5-a66039f87f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a0f56e-c671-4412-9068-e140a8b8a3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7cd46f-8afd-4ed5-b6ec-fe71f8ccecc0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f5bcdf-7ff9-42b1-8e05-6ee529348206",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f131414-cb00-4fe4-8a9b-2bec9f7b2fd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eec0137-874d-4173-a7ca-3ac445ff19a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3290ac3a-9289-4a4d-999e-aa6d8ae401fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42021606-b2b0-4202-bc63-1f6b09c1e8bd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6de770-8ce7-4ce6-91eb-34bfb466adda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fd56dde-a41e-4dc7-a2d1-a99df2671677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcbb25f7-bf89-41ed-a0ab-2549018abd1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7531f14-c133-4f9b-83a8-feca07baa2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078cc750-2107-4c90-adf0-9a5a22435616",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb35b64b-2d2a-48bd-8966-0cbff43128db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34396ab0-8b8a-4fbb-8491-cda2a8417ef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d90074-2c21-46b5-b83a-7bc1e18b5bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81c9737-10bc-4d87-9bd4-64041f8d30aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed82f78-642e-419c-a036-198e06b2fd0c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f435a31-9492-4912-9d94-214ff01ee6b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402fc8ff-0643-40ff-bb27-767d945d2a3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95a0018-deab-4a82-bbb0-d33f904ac047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8140a12-71b0-4c1c-95d3-808b1a83e1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9517582b-1806-4136-9875-7e5db616343b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1967da46-de11-47e8-96e8-0819259f4d69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "495562ce-a63e-40e9-9f91-e30c566e4a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef84c3d-0a0d-479f-8658-5b64fc70efce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf87070d-afa3-4107-b96a-ecfc9ee38e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5ef876-ba70-4b0c-8520-2894e3492a0e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f65b4f-5ddb-4753-a39d-59f0c1229559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c17f2d5f-cc28-48e4-9015-a241249274ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d336993f-7f9d-4a67-94f4-50cfd68e0b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b896e8f6-389d-459e-99d6-581c273fd0fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86e33b9-93c9-49e9-80a5-805e39aaec50",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1676201-3f0d-47fc-938b-668139486928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f8ae3d-ac22-4e93-a6f9-5d38dea152c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cf5832-97bc-4e6b-a33e-9af98db287a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c1b271-1578-4e3b-909c-e8fd4151ee1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e90a69dd-f762-41c3-91ef-9bec83a14d81",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd371486-3b11-4426-be2f-5ae6c410af8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b3c30a4-8a51-4904-b454-435944c4fddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe98dd9-0daf-489e-853c-5a9325be22a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec200ef8-fe0b-4661-ba57-edc1ac6f3e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73439303-1c8a-400f-a21b-474ce724bae9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84446f4b-a743-4e37-8727-d25a1aa6cfbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67cc357-f476-4fee-9588-6cc06fcdfbec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "627bfd8f-d030-49e1-ba74-39ed34ff4aec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a5d522e-0721-427b-bbe3-539c5388611e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec61d04-a706-48c8-8f08-4592fb6431a1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e07cf9a-ad4e-4b87-b921-d8da6f74bd16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fbd07a6-2607-4332-b91e-7b8221e9f679"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e845e17c-eb1c-47f8-81e8-00f429d8d58d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b6e6fac-00c6-4e0b-b583-c3bb34676f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db9f117-1984-4878-bea3-e626337bfc4d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc4861d-09ae-4aa4-beeb-fc61c867b55b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "014f435d-309f-48be-8ff3-1812a65f9cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea5ab1c-0b7f-48d2-9d27-b2a902ad5275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623b9f4a-e3d7-485c-b459-194ca177a161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a05c81-83f2-43fc-ab47-45416969273c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4a757e-929b-47c2-8840-255fd3f41b11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b06c404e-d0bd-406b-80b9-56aa83c5916e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc66a5f-655a-47e2-9b46-1b8be38cb5c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a31a6b64-2ca7-497f-b190-a7af20bca267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d18ccf-46d5-4782-acc4-f391f3cf3442",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0425e6-293b-4172-a749-037cbf0000d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6776ff0-e3da-40b0-a3b6-48c01488e45d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd5e0e6-5dea-48d9-b972-66d7eb6a7e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3108096-9984-475c-9c8b-29bf94ad92f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345d9d5f-21dc-4020-b9f4-f6c23436be1d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16dab203-fec8-47a5-930c-db8de5314a86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d6f50d-f196-4dad-bfa9-39326a92cde9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "188b959d-8704-485e-a7d0-d9c80d7048f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bcfd042-92fe-4992-b0fe-c7ffd8acb198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec648197-5aad-4edd-bc30-f80a68429a34",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2a4098-ddba-4431-8cbb-386d54fdb53a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1323f014-8871-45bf-9fc7-1c888aa7e84a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8b3ee0-97a6-431a-98a1-f70a4369701a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d06de35-270a-4396-b9e8-f71e3e4e2f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd46f791-20f4-4b4b-bdca-ad8b22f35726",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9d89b3-6e47-495a-9624-3673ab8605e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34a85581-9ac3-49af-8fdf-799332784efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f03403d5-9214-4c6e-ad4f-2e28cd9e3fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f8c8ae-6a63-49eb-b3b1-e20704f8f6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1937260d-1976-4f69-b9e8-815e51740fbf",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37380e3c-1897-457e-82fd-c360729a7363",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "416748a1-edba-4e61-924d-22330b39a69e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf71997-48cc-466c-b17b-ded133b17554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c86ebe-73d5-49a3-86f1-52a65f88b685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7421f3c7-b5ee-4897-b856-b91e473a21c8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511c52dd-263a-44bb-8033-663efb82bd09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5875661-ea21-4b74-9e35-f3e1a5080ca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4219a75-b18c-4a27-92e6-1d412a05c36c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee4dd8e-e994-467a-ac14-ef8e2f91a440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43c07f9-1a25-4ba7-8a10-7496e2c3748e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0bc9e5-27e8-4db8-87b7-e4af38f9e74c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb154b35-6acf-444f-be9b-6a67658ae4c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3692c34-2c4c-4fdb-9d5a-85adc47c378f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "600f0441-11cb-4ab7-af97-83f16ab8e2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d0b5ec-2ac5-4e44-bc2c-c252989648fd",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc15c88-67e0-4f59-a977-93adfc6fd828",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ad31d15-231c-4f54-a2e8-e1c27c09138a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c49189-797b-40bd-b30c-893ad9008f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15d51399-f243-44b7-b2cb-ad1f6d7ac879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fcc7979-ade7-4a7c-8d3b-6354ade1af4e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e68c8d-696b-4c53-9b60-0d2fb605c8a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517ff790-9992-4833-98a0-0e269bbcb0df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "909f3c70-cf31-47c1-920a-bfbd7e15a4bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d66f6b-69b2-4390-b796-c5a334eba301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3670706-1a1a-425b-8034-c749b888ad4d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51d81e2-8bfe-488a-9566-379d47ca9c87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9fea49a-82e3-4548-95af-ad32b41015da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada5b031-a697-4e2d-9355-ce74d908a0d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50344dd3-edec-4832-b229-b9bc4ed563f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e37759-b58f-4145-ab41-d86a4cb05387",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7416580f-8ca4-40ca-89b0-bf8ae179f76b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b558067-0a7e-4cb5-9f8b-e9cfbf0b93f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c81f75-6172-4f1a-a8a9-2f3025d840b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675e508b-2b70-43df-b2ea-ebebb87d2956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc48fc2c-75f6-44a4-bda4-82302f2bceb7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461802e5-1b85-43fb-b028-2a4a702a729d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2495017-c6bc-4fe6-8927-b2bfc058f1eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d557e8ac-a784-4d4e-8516-63d56b5ea653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb721019-dbba-48d1-bea2-afd9eafd8e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b2229d-4c4f-4aba-8a77-8cfdd0025472",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964aab55-57ab-4511-abb5-f4239c51dc01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83074084-4a82-46c8-99b2-76d2cd336051"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f932fa-84a6-4d88-8b48-ac4344183976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45900d2c-13eb-443b-a3c4-0d0a03d4cf36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4e5f21-7038-4ac7-86a2-6c23fc94c910",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc2aaa7-75b1-4aac-9f0e-7a7b0cc7deca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952ce016-34c1-4100-8e93-b3756fa64b2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3a1160-21b0-4ba7-967a-3336cb8a32ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c906a5d2-b579-4fc5-9347-ce5b057d8845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb8a8b5-f0f5-442f-b7e7-9ff27fc27f4c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca16f67c-dcb7-43a8-991d-6d060627a2c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce413b28-ca29-487a-83d1-5d85c3ed53b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "739c785f-bf64-4abe-9638-4621cad413b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63921b22-c518-4fd2-847b-f22ee10c6393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf10e47-102b-496c-8b49-99dc9d360f95",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163ebeb2-c993-49f4-ba0c-bafa2bb08876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1fa5c64-4140-4bb2-b9c4-def711cba7d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c732439f-4cc1-4fc7-b282-020a48a85d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eff3f6a-bbba-4fcc-8243-9d5815932306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddfe5a16-16f0-41e8-b1a2-47e1455768a1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd6f911-fd15-4114-8357-b67eff25efdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7015a71-3a4d-4561-8d5c-60df14c1c081"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac929379-ace5-4345-b4b8-9a8b2c00a308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba78b667-328c-49fc-a598-90ac0de65d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb7d08e-f0bd-42e3-af3b-f2fee5647314",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192d2f3d-53a0-421d-8a5f-b3039e36478e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a04c15f-0b8d-4dc3-a79c-caff34451ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7e802b-721d-4cbd-b0bf-31262b857b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc403f8-4a95-4a13-b332-cfea0ffbc209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf0311c-3ce2-45cd-9e24-206bcd31b503",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde697ec-1a91-4d2f-8ccf-499b4476486a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089f313b-ec1a-4ac5-a470-7fd4ea758e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd41e09b-975a-4318-9eb6-4cf0fac47479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d79d5d-e837-4b6b-9bfe-a908a0d4613e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4acbd1a1-4652-464c-90d6-848b863413b0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466ef3dc-e776-4135-9791-00c86f791ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaffabaf-ebae-47b4-bb60-6476f9d8b98f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b21a06b-2e4a-42a2-afed-6c0e2cb7008c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d8cfe8-83fc-4206-9f9d-cb87c004d517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfbc651-e85b-4e86-a5b8-af18f55de76c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3cb1c9-af4f-4a8f-9c36-9f9d1d41633e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf9c9aa-b5f4-481d-9f2e-d0a8d543445c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3b23ba-59a7-4139-bfb4-fceb84061419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819e928c-a741-4776-8639-99f00c0a9f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39b15ee-a546-4a08-9485-2d237d7ac74d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ab8391-722e-4903-8418-157c47f84246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a3eb96-d4e2-412d-a60e-9a5431c8d67e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f8969f-913d-4252-bb93-d7172dc963c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2594a5cb-ec8e-49e3-83a3-a9f712f150ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfbde6c-dd52-4644-acf2-5b733ca92bb4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811950ce-2614-4ce1-ba63-b0e01136598a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b63210d-7283-4d96-affd-a54082f409ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef60a1c6-b6a5-41c2-ad8e-262ab1fed9eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c4b97f-698b-4ed4-8a0c-93f2b4a2962e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9898aeec-29ec-478f-bc00-c77c55040c68",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4e6ffd-1402-4251-bc2c-13296543fef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a3b2e8-8aed-44ad-b2a1-3fe9db1d99e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f396e1c7-78c8-484d-aa99-540007c7b5da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e72158-17e7-4940-8997-103c4ea2cd0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4567a91d-273e-4b70-8e5a-7365178e3427",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f59cdb-deed-4706-85f9-2319ec8f8fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6273b72-e3b1-4be3-b132-3a32abd878ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c386cfb-ef48-49e0-8772-1165e13a0479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "082fcce2-4db5-4d23-96be-45d9efb0995a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae64f58-3187-4b83-bcec-00be51662a0c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46700d5a-e5aa-47bf-9e61-d2acab73883d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d62c6b20-fce3-48e8-96b9-dc9c83d6109e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfad4ff-2eba-41e2-a493-f9d7b8c2ae35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "434ce5ac-1f8a-402e-98f8-ecbb89784c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fd16d6-8c05-4c8c-88c6-beac42a5d077",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0eeb74d-e5bd-41fc-8188-13a0fa958bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e80db00-83e9-4d4d-9fdb-27059bec7a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c6250f-5c30-49af-a547-0ea75c0406ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2765e270-1e59-4e18-95c9-70ab52afa50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad1a740-14a5-43c8-b335-670e26c6588e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab48a84-6b22-4ebf-8b8c-efe1743b7f1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1222f279-3f43-4dff-b334-33cc4ee728da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "463ec5ce-27a4-47e7-902c-4e7f6c00acaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ced68af-6681-4900-8bb3-ff6c42d511ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541571c3-3f94-4366-8378-e7fcd907d028",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc36a3b-935b-483e-8048-e1f383180e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb6920a-9056-4ba9-a2de-c53adbed81b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8168bb-ce73-4a82-b89f-a5cbf32be4c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11dd4828-67e0-4f64-8be5-77306a8718b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893b1278-552c-4bee-9b78-b01848253dde",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5484ab-fa75-4ffa-8b2b-8cc5ec2c0dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95c0fb35-0835-457b-8d6d-58222db314da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0689682a-c7f9-4a00-8441-2f2e09d623ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00944ec2-f522-47a4-b9f8-7935934b07f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1738d84-9432-4e08-8775-85ccf7926efc",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ceef717-fcd7-4f3c-b2c5-41d130f49bd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6257b5bd-0222-4355-9263-78601ef91cd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d1ae98-ce2f-485e-a308-85e398646880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d9aed8c-ec16-4b24-90f5-a90f87f54db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d5348f-a035-4191-a49c-1f879fad4567",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9e4568-ebfb-41d1-a557-dd2bd01f9e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74e1a18f-2f3e-4cbd-b9be-b005f8deb562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46d1781-0943-473b-8fd0-f7fe6508e97b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e26352da-4ce7-480a-89fe-6fff56596795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dceb692d-fe40-4426-b55a-f9fe5df2b814",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5236ce-38e6-4112-afb4-af5d8cd60265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d389fe9e-2b06-4bc5-a9cd-441382f81e97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d667b9ae-0c79-4d6b-9e02-3285ba0e6f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ea7e9ef-d4a4-46cd-980f-73f50d14f8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81128c01-5601-4537-8d22-65e5141ed2bd",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997aaf92-dd64-4b15-a4a2-301a5d301c57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8d7be7f-89fa-4f25-b824-048dc2d4fb8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afc4cef-224b-44df-9516-9ebc567e6312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f4afdd-a4e9-41a4-8ffa-f9b97825c690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b98057-cdbd-4f94-bb17-062a1c864ba4",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f104cf69-1e07-4218-95a9-1b77b87f0738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f53b9de-7b2c-42a5-adab-1b13f7c4ba2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a4e446-8095-481b-996f-fb311bea270a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32835411-7474-453b-be5e-025804b6736c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4260000-6bfe-4adb-ab94-141f5e4ee971",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d52a96-860c-4fd2-9ba9-9f804726b660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ff3fbb-40a5-4777-87cb-da93359f13ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fabb4544-7e3b-4462-af8a-e2f2aaba5edc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7622a0fc-41b8-4a05-9587-2e94f2a1db71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e6fae3-3297-40e3-8ba3-9b8dde1383da",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1870a9-080c-4f69-8563-4517b6f53134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "449d609b-3713-4b83-b72e-c988281ae0b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80ebc48-2b3c-4bb0-8789-2c9591dac1dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f594918-2c8f-4ab4-bb84-cea66011ed36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433cfce9-5d8e-4d6c-b382-45ab6b8550b7",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95440612-297a-49ec-98b1-ba570f72d62d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e881bcf-95a1-4b74-aace-ffb9b1150df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d48ec9-e1a8-4706-8d22-312d1272d977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c43c289-4f57-4a18-9828-498e1128c84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5ccccd-2fd2-4cde-a536-293f19a4f0b4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0198775a-a963-4b53-a204-701ae317da6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b48a374-20d9-4225-8e2f-b21379ae7604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "834be965-1afc-407f-aa42-2c0866a4c3a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9381e7d2-cb5b-4979-8608-ce4b4ae362fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216a5deb-6dec-4f29-95fb-d671a05fc0ee",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075f1bae-532f-4636-9112-7e747a16374a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20c78860-3d16-4452-8fe5-5367566bec51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77aa5ea2-97cc-48fb-9500-0a0788c0aa07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c000e55-7b04-4b1f-8ebd-f45147f60b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32dd9dc8-10ed-4c97-b057-fb03a089cf79",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82727ded-d85a-4919-9411-651d87606db4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fb642c4-8f88-4f91-a9b1-63f4f7181950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edd687c-47f7-40e5-86d6-d429944ec2c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b508f0e7-80d9-4b81-9a23-11e78ef61aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c3d22ea-ad41-4bf1-835a-7f89cc6b5c14",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed199fce-7a15-4aec-a4f7-9b92114733ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d4bfdab-b5d4-4284-835e-4534d2162fc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b001334-5ba5-4882-8f31-bcdfda1fa809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef88efa-6bc8-4fbd-a552-f54c267a823a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94e71de-247b-4cfc-951f-e4c8897e4de2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5e37d9-e974-45ea-ba8d-4c7db51e0211",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "840bb2d0-1477-4206-95f7-e4b8d8b00ddc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e74371b-d4bb-48ac-80d3-91dc2ee4a76d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af050af-f472-49ca-86e3-baf550087b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0539e43-0244-4ab8-9c98-a07bf0ca8955",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a20f8e7-1a43-4c5f-b3ad-50b73982c44f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "860a31ac-d5b2-461e-8c45-64ac65d9e58a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "798c31de-0c71-4dc5-af2c-b9966642221f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a61c44-10d8-48e5-86fb-9214bbf22e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36032c5a-248e-4781-9d86-d0e86e68422e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a70c6aa-6b7d-4128-9152-dbe5357dfba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf78fd6f-c264-4868-8210-2e3fc18636b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "393ddebb-a69f-4094-9c42-cce57dee7036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1f139c8-5213-4664-ba28-0d3e97735671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d414830b-b309-4340-9abf-cfadebeb94de",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72dbc4d-c887-429f-a6f2-574adf239ab8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "123a6a07-0da6-4f09-bf27-6211345a7cc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a86b305-51f4-4c64-9bbb-4c61759449c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af06d08-57c3-40e9-938a-9a06d4336a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385c06a7-7327-44b9-8410-c13ec1dec6e8",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c6fdb7-d4c7-48fa-85b5-761e75e65383",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "122435e6-bc09-4165-b05d-62b0046f7eb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c59f41-0257-4293-8225-238802b6383b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f65ac404-3948-4459-8e3c-e18303292781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c25ab5-a8c4-48f7-bf29-fbd7f065a67d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aee32e0-e5f1-4802-931c-6e3452bf9856",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54c9bb59-fb13-458f-ad9b-00f5b1ef8d0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e5d2ee-d688-4d50-a77e-7978ab0fee2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db1b0456-2273-416e-a993-4e422adfb126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188fa45a-7470-4a63-8f42-f27215685652",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d69692-9540-4015-a2f8-4aece3fbe7d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0963bf47-7a00-448a-9c1d-f0356f47cd82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e497b6a3-07e4-4a9d-a4bd-1b340370c2e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "809ab96b-5f9f-4149-840d-1b252c4b9d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc4a61e-42cc-4912-8874-880f673c6b5d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150292e5-08cd-483c-ab9e-5026222de979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4884f680-ad63-4ff2-9d10-4121bc22b397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbb8f3f-b514-4c26-bca8-149b6fd599ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b93efef-d1dc-4049-9f69-429e5ef04a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09581aa4-974d-48a9-bbd7-275c34339e27",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29564e7-937f-46f2-8ab0-37f0bd71fe2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc8a163c-b418-414b-a507-a7d9c1b99475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c55165-2ac7-4286-9dac-151795d04c01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fddc58f-2b82-4184-9a8e-d6cc5fb7bb8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e97dfb1-45f8-4c0a-9fcf-778e13076c02",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64210333-3762-44c5-9160-961b7822f297",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79a47409-3f6b-4b98-9515-0f6f7cfbe01c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0627721-be9d-4e74-9405-8d207d97fe50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0fa0178-7c61-4395-ae74-d8b7aded4eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c540456-4934-4ab0-ac32-c304cb8037f1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f70771-8d4d-47b8-9a5d-472737c790ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60690144-95fe-435c-a685-4e7118fbc4af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e84ae0-d48d-4872-8f9c-6c10e616ec24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62ed3c8-c3ab-4bf9-bfa7-2ea652eea834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2d928f-5729-4d3a-b594-5143307b4541",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f309a1-b27f-4890-a32d-23244e30b308",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80b06148-8de3-417e-a53d-2de00a43dfd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4552bbe3-f761-4941-9afb-4fc847327c81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d30d26-2e6e-423b-ad58-399433aaa8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d5fd5e-7df9-4420-9349-d94a59d1930a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e35a5b1-751d-4f4d-b995-857aac4e1d35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d58e7a8-c8df-49fc-8111-ac0c5ed6b03d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a8851b-0599-4b23-83e4-e42590a9c8a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6df1d3-1ca5-4962-8831-86d0ea4f4053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd98e02-e7bd-41b3-b01e-f70f42aee729",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4d0189-5cd5-4f61-a846-f815080fa88f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5689aa0d-97d3-4705-9197-87b65c41e5e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "878c99c8-d025-4787-b2a4-c8a875aa0bd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd8bfd50-577e-4291-819c-31ee9df99248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe9e19b-1b0e-4d49-90a6-02c32ceb2809",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60860f77-6d30-40cb-ba55-4a51e1d5679d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7687df2e-b881-4e6d-a92d-1e149caf47ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31503b76-bad8-491b-8580-7ef3070a63a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0920a259-1039-441e-9455-a21f0de6d088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35640328-591b-4518-b6d9-273164b3db2f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac97aee-30c7-47ed-a451-7635cee6f60a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba8cc349-dfca-4cc3-8d15-4a703bed4085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab9efef-65fb-40ed-8caf-39b7c743af0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f05ae7-f1ee-480e-b6ce-36f7ca4f7196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c252c7c9-fd10-484c-91cf-8ef8ba882dbb",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3f9523-8749-4fb5-b617-2c29fafb7aa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c6b6041-aee2-4026-b285-9c3b5de36816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a279b86c-af96-4063-94c0-6e47a3092951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efaee84a-7416-4c4a-bb02-4e140d81b002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b92136a-1fca-4b8d-b512-a5982f52ca1e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7107bf4f-df8b-4354-822d-bee135316b69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dddc125-0fcc-4f1a-aaa8-ad1d880ef4f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c821df-acc3-4578-8f87-915015bfe471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf09362-6b3f-466f-91cf-fc311ff60039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7691a4e-4f55-4062-842e-8e4f12290bc6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34fd4a6b-8195-418f-960a-d29364fda320",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c201aaaf-1110-414c-b2c2-14f73b01c6b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0940559b-9ec2-46b0-887d-fb41082174f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6fefa39-b9fc-45bd-8c3c-5dee3cae7412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2016af-96d4-48e7-9e0d-20c640ab969f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0cc45fe-a084-46fa-9476-a0061f9efb69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "472812c0-49a6-4c18-b2bd-aecc2d7fd46e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a662042-fd05-4f68-a929-6cd1c5a7e636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5a9bf6-9a94-409c-a81e-f10446d2336c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8eb1cd4-c08e-4dfa-9004-1085c0e07b8f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f77cad1-9984-4dda-84e7-6235f36d4d01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "887a0c31-3744-45e2-ae89-4a6e09737307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba823c9-4a3f-4a9e-919c-85c09b9c1627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ac9b87-c6b8-407a-8074-3f93df1b111a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1875e9f-2c2f-49af-b94f-8331e9aba46b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e37aace-920c-4422-8b76-41dd0f012708",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aa6053b-3133-49de-844b-6c8de44f7723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112eb54a-ebb5-4589-aea0-654a1066a71b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f3ae3c1-78e7-44e3-8866-242d3b9aa0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90d7827-6f15-421e-be01-de0a165f653e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797c6404-4c14-4281-954a-59ec6c5ddfdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8171b281-df73-48ff-9397-75ba0b8bfd5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c82ce6c-160d-4af9-8fb4-e98082ce0151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ea08a5-2cdf-4ca8-8925-02e8c0e375fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28982e1-370f-4813-89cc-d5317b1f1bcc",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16c755b-acb0-449d-acfe-7e7ab28933b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98a57063-a971-4ed9-b1e9-865938d77c7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6971639-3b64-4162-8bff-c587639c769c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c771442-335a-486c-9485-7e8dffd74f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283df484-c215-424e-91d4-887a26f6dc70",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4432a8-6e7f-448b-8899-04cab98903c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c3aaa86-a68b-416f-a509-f114f9a9203d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5afdbc-4f9e-4a28-86e1-09ce91e6cdec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750d5e35-961e-44fc-bba2-3801edee7d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9f065f-f9e2-448f-9de7-5fc65f0b0be6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77ae778-ee12-422f-824f-519973e94503",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00ebe38c-b3d0-44b8-a0eb-d430fa6df7e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ccd281-5fff-4639-8041-8dbd4b3c4891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4036e72f-5350-42c1-b51d-22d8c2fb3b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1bd3f9-c2c0-4be8-88cc-565f6050102a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0641b3e2-ed8e-4f32-94b7-48c88cc2e39e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd618f85-0df1-4e2e-95a5-0b7030ef6e8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a7e523-0a87-47b4-a2ab-1cec1c40cd3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75fca50a-dc65-4768-8ef7-97188fd1e283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eab9299-9c5a-42a9-9aac-0cba6f58a59e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8ebdd7-1a26-4501-ba6f-58f8bffba945",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a7d4891-21f9-4503-b613-04b55d63aeab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b16f97-ed03-4794-a3c2-56146656e6d0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c29a57-0987-457b-b6d4-4feeee5cab0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88a211e-de0d-4b9a-ba79-237298488668",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ba11aa-ab76-4c71-9946-aeecc718a1c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00df1fdf-48cd-4846-b13a-cdd0c408505e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4274aadf-b77e-41d5-83d7-faed1acd98b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a18b6e7-7dfd-46e5-8cd5-ff37db7f48e4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "695ccca9-23e4-40a0-a084-e38f3b9134ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8a37d3d-0c6b-46fc-8a12-6ac0770871f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d532dca1-4c03-41a2-918c-204b8a086aec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd6b0a59-f2e1-4549-8e68-2a68ad2d97c3"
                    }
                  }
                ]
              },
              {
                "id": "4c602037-6229-4af6-9f68-feb02c71da4e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "00f771e1-e522-410a-b7fc-710c959b9744",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5343ea00-9e8a-45c6-ad35-2c8478ed6227",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "81790e35-77d3-4e12-875d-35bf9f69bcfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0229b106-c1c2-4e3e-b439-558955398c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "243e15b8-339e-4cca-aa7d-0dfc45668932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc8903c-79f2-4374-9bd3-60ba8e2a7a55",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7deeba4c-b624-43bc-b1a3-337928a3d53e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "70a3fd48-4be4-478b-8c5b-8e551a3299d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5b15e2-2863-44a3-a88f-a78c39cb5daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60165a90-e617-432e-aedd-f7e0dda39adf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8658cb96-49b5-4533-be2d-760050a4307e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e4f9d1a-96be-4038-bbc8-471601a1f5aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad13e657-a2bf-4f01-b4d2-9299cb98ef80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb8732e1-c76d-41b9-9f4c-306b5f85deb6"
                    }
                  }
                ]
              },
              {
                "id": "2f44f020-b170-44c4-8b50-426ddd291fde",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ecfc0d36-02d0-4ee8-b331-60cfe23cf0fe",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f60bb4f-fb69-4929-b09c-5f061019c3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "bfe275b6-9321-44df-844d-4794a89500aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6a5a15-3cd3-4d56-aa1e-d2f7c53f1fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6412254-74e0-49fc-959a-bd48d1aa6bd0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "80fc8d6a-25ed-4e11-a499-899cd7438c62",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4f6309cd-c701-4297-8b6d-70d166c15a02",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a765317-3e12-4037-9723-1168a718c0fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "35c9dba0-9371-4c2d-8fd7-611b33f7f1f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d7e0052-0dfe-4683-a1e9-36f33da4d968",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8cd7b60-c4bd-4862-9411-b28123a98017"
                    }
                  }
                ]
              },
              {
                "id": "ca742fa2-a567-4011-88ae-f2a770172c66",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e638ecc0-3f20-4d78-a33f-d463ffaed2ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3d90b0a2-e888-402d-a390-b66cde926a5d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd8caf2a-7fe8-420c-89a0-fe7ccc256fc6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a4329b8-05ff-401a-b203-2811c13396a0"
                    }
                  }
                ]
              },
              {
                "id": "4b127729-fb41-4364-b154-ada3c668e22d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90740eb1-938d-4b12-9d0a-7cc08c07129a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b6428bd3-93fb-4758-9fe0-68a5aa8ad10e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c511307a-1baa-4ee4-a037-fd7e49b655d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc713ed3-684a-4572-b48f-45b2df8831be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46a595a1-7730-401f-b1ef-fe8d5041dbd4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a2000cf3-0646-4130-848c-de4a4a876303"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84bccf5f-071c-47af-9948-f6006f60b9a7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a18e453-34b2-43b5-bbf5-49a36e7f7b2a"
            }
          }
        ]
      },
      {
        "id": "a524944d-4b5d-457d-96ac-097bbce4a59b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "81984d16-97a1-444a-887c-7dc0ef35af9e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "42cbe3bb-9c10-4534-8058-703fb5d4dccc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ca5e260-8ddc-4e2c-8cac-219176eb9c31",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eef589e-6712-4c3d-a851-d5ed173cb51d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8121c076-9278-42ec-b9ee-9c908ca3af87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a936e68-6984-4dd6-96fc-acd003600141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffdacf57-d9fe-4919-a484-47a3d752d079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d143ef0-63d7-4cb1-9d70-c1295927ba56",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558038d9-c075-4fef-b61a-13088cac913d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0676c42d-17d1-4b80-b33e-57f7c3135156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "040b5aa5-a891-4b97-a27c-73a2c32c0bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef23536a-4935-4ed8-8660-05c8945d5c16"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3dc35416-805a-41bc-a232-6c7e8603e415",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03faf8c3-8e2f-471b-b7df-65fb29059503"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6f91883-6e51-4ec0-b414-b0752b63ea99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a46428a-7e4f-4780-b719-cdb8b14cea49"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57ba9a34-d2b3-42fd-bd7d-ec72160fd767",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "38e36419-8447-418a-8c8e-bea1b0b02173"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f62c6cfc-8a38-48c6-8c18-8921ef6c24dc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ed72b15-0cdc-4600-9632-29e01fdd4509"
            }
          }
        ]
      },
      {
        "id": "8d8adf82-ec8a-4237-b5a3-5b67b508ad37",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "45589923-2ec0-44d2-87f1-9ae5e13e9430",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d504493d-b00a-4412-9700-3defd2c72989",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "068336c0-7ebc-413d-a4f2-972f2c662c3e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34762bd9-b447-4640-a205-41093e88f4d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "502e8ab4-b5db-4e3b-83c4-41c922303505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b6ba28-1a72-4e83-91f2-4e0fda5bd7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e94d19a8-f202-405e-a9ac-e000f768f39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af311bc-d624-4956-b35d-0c8635dcb799",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f19ab7-9cac-4a6a-8f90-c6f19562128b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "512821dd-ee8e-49ad-9ba3-74be78c15516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7140eeb-c04c-4bc2-8937-2f2374f3c30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0bfca1d9-12e0-4ff6-9565-4853a2bad612"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5dcdf79e-4ffb-400a-bb60-db4a5165efc5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "340c7134-cb23-478b-9d23-b44a26a65651"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4280940a-5a11-4750-9741-26b3bcca7075",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d571709-b627-41ae-b02e-abd25d816f38"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14dd27ec-955f-4356-b58b-7f05627dd846",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "90c8043e-a447-4f98-96d3-e5495b7e403b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8329513c-60d4-4306-bc71-45bf6953d161",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9d6a3f26-af8b-407d-85a1-982c1d734131"
            }
          }
        ]
      },
      {
        "id": "d4d12ecc-1f64-4e29-8775-0c584385bad8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "540d8999-9d49-4048-b4ae-72c825816868",
            "name": "Negative Testing",
            "item": [
              {
                "id": "96d36791-e5d3-4cd4-818f-7db4fb359a55",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "add0ab13-0015-4300-87e7-1db27c817deb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f5b015-ca4e-4927-b017-f0a5d917fa1d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0a51f9f4-a06f-4a89-b1e8-28acee520260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "475ffe54-eb00-4631-bffe-c355a2103a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5f10374-8a4d-4759-92a2-cedb648c4ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f5cb66-5013-48c2-bd63-732a78c55ad9",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51051e9f-983f-4b23-9907-7f81231120d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dec4f6b8-4a8b-4144-8977-60c848f244e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1696d6b5-33bf-4039-9c22-876d6ba468bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "843e28b0-eb64-4d0b-9d50-620986622ce2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb605012-623a-43ac-96ef-23a403ac63f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f749e970-ed4d-4b08-809b-fe6ce9b46228"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6846793f-f25f-454c-9964-4fa7be5abf70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1e3d8fe-fa0a-4304-bfe0-80a733070cf0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "915f86aa-81d1-43be-9bcd-903e8891d5bf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "91e0c419-b9c5-4f61-bac5-3ba0fd324f4d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86bc29a6-8a19-4883-9374-2d5b7b061bef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "624b4824-d846-4fb3-8ba8-529f956c1cfc"
            }
          }
        ]
      },
      {
        "id": "6db52fc9-2b99-4f16-8536-2915f1265221",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8082808d-aba1-431d-bf52-190419411dde",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f726a77c-3907-4af2-bca3-ef67b87981bd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3d7388d2-11db-44e3-98e5-07ef09afd808",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0f5c489-3866-447e-9db5-a5da0184c27c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36233df8-df31-4bfa-8831-c0e8b0518eef",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 67.50574712643679,
      "responseMin": 4,
      "responseMax": 621,
      "responseSd": 113.42158905394625,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1670287037118,
      "completed": 1670287065572
    },
    "executions": [
      {
        "id": "4274f281-a4b2-4b63-aba1-37058dfc820d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4fce34f9-294a-443b-b4eb-f8a5fa5aae2b",
          "httpRequestId": "39bc39a4-0386-4707-8fd9-870b65f24449"
        },
        "item": {
          "id": "4274f281-a4b2-4b63-aba1-37058dfc820d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8a6d76a1-aa67-45fb-bcc9-2485b71f98a4",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "6ec78f0f-13de-4771-b366-50da18505db8",
        "cursor": {
          "ref": "ad1ab469-c48a-4df0-9919-6657f8b2f57c",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "be0342fd-c990-4a25-8075-9a370a0981ed"
        },
        "item": {
          "id": "6ec78f0f-13de-4771-b366-50da18505db8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "42a3fb2b-f803-4591-86b2-0dc7cd1250e3",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "c1793d5e-f9ce-4825-9fad-f394eb9b2f99",
        "cursor": {
          "ref": "47f2d9f8-54bb-4328-8ffc-c9c3ef7f83c7",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f1d7e83b-2e76-446a-a524-14d3a07f1960"
        },
        "item": {
          "id": "c1793d5e-f9ce-4825-9fad-f394eb9b2f99",
          "name": "did_json"
        },
        "response": {
          "id": "9b654203-6397-49c1-b6a7-923868a9df08",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a441c34-803a-4204-aa2d-7677cd5298d6",
        "cursor": {
          "ref": "756c4571-ae14-4c50-b2ea-3fe2f8c2a5eb",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2717a766-454f-454b-962a-8ef3027914b2"
        },
        "item": {
          "id": "2a441c34-803a-4204-aa2d-7677cd5298d6",
          "name": "did:invalid"
        },
        "response": {
          "id": "66a8d3a1-d45e-4236-acc5-7e6986fc0d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a441c34-803a-4204-aa2d-7677cd5298d6",
        "cursor": {
          "ref": "756c4571-ae14-4c50-b2ea-3fe2f8c2a5eb",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2717a766-454f-454b-962a-8ef3027914b2"
        },
        "item": {
          "id": "2a441c34-803a-4204-aa2d-7677cd5298d6",
          "name": "did:invalid"
        },
        "response": {
          "id": "66a8d3a1-d45e-4236-acc5-7e6986fc0d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca88a596-287b-4333-9729-abc994afb647",
        "cursor": {
          "ref": "259dfe4c-dc0c-48b2-9eb7-4c29608747c6",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9c826fc7-3780-4678-a4a1-680b94478581"
        },
        "item": {
          "id": "ca88a596-287b-4333-9729-abc994afb647",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7fd74ed6-affe-473b-91ed-63a3dfe7dab4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 236,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046349df-e3de-4f11-a459-81781ad1a961",
        "cursor": {
          "ref": "ab57e5b8-992a-4ed6-9cb8-c8c925022d7f",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8400d8fd-bce3-4309-ac1e-9548e13024d8"
        },
        "item": {
          "id": "046349df-e3de-4f11-a459-81781ad1a961",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "58f87a5c-a9bc-4a94-8b23-421ec3a00a54",
          "status": "Not Found",
          "code": 404,
          "responseTime": 14,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915dbd55-2d40-470f-9fb5-40383261056e",
        "cursor": {
          "ref": "f8962e26-5abb-4227-ad15-683c199fe2d8",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "93ffc93b-3169-4920-bc4f-8957071bdf94"
        },
        "item": {
          "id": "915dbd55-2d40-470f-9fb5-40383261056e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0e42be8a-8c8e-4c2f-a458-1b9f5d60ffe3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706e723c-f12a-40d4-b1bc-c17106299f52",
        "cursor": {
          "ref": "ac8f640a-3b63-4e91-83c1-bfd6c5fa3a85",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8119f921-7e22-4d2e-a2df-2c3ae7a0f37e"
        },
        "item": {
          "id": "706e723c-f12a-40d4-b1bc-c17106299f52",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f013a90b-268c-46c1-8483-45a49a349d38",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 18,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706e723c-f12a-40d4-b1bc-c17106299f52",
        "cursor": {
          "ref": "ac8f640a-3b63-4e91-83c1-bfd6c5fa3a85",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8119f921-7e22-4d2e-a2df-2c3ae7a0f37e"
        },
        "item": {
          "id": "706e723c-f12a-40d4-b1bc-c17106299f52",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f013a90b-268c-46c1-8483-45a49a349d38",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 18,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f84a9d-57d8-4afe-834c-3f6f24388d4a",
        "cursor": {
          "ref": "12ed6be9-3813-49ea-9559-6fdb18007016",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "09182706-8d29-4eca-b8d1-d0542e2943f0"
        },
        "item": {
          "id": "57f84a9d-57d8-4afe-834c-3f6f24388d4a",
          "name": "identifiers"
        },
        "response": {
          "id": "af16f05f-e3f8-460b-a73c-6d91f06f9c24",
          "status": "OK",
          "code": 200,
          "responseTime": 224,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d70909f-be87-450a-91e8-c1c97525028b",
        "cursor": {
          "ref": "371e18ea-ae6f-4989-8648-d86efbafd87d",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "006abe2c-4cb0-4aab-bc36-1c7269ee3a21"
        },
        "item": {
          "id": "0d70909f-be87-450a-91e8-c1c97525028b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "56f424b8-8deb-4372-a607-294f37878500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d70909f-be87-450a-91e8-c1c97525028b",
        "cursor": {
          "ref": "371e18ea-ae6f-4989-8648-d86efbafd87d",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "006abe2c-4cb0-4aab-bc36-1c7269ee3a21"
        },
        "item": {
          "id": "0d70909f-be87-450a-91e8-c1c97525028b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "56f424b8-8deb-4372-a607-294f37878500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb220ce-71d3-4361-8a19-ba947d5f0eb2",
        "cursor": {
          "ref": "e1a72ecc-64d7-4e04-ae11-5f46d4a886c6",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cb903dec-0ade-4c52-be86-7ab41d2a671a"
        },
        "item": {
          "id": "ccb220ce-71d3-4361-8a19-ba947d5f0eb2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a89c1a59-850d-4926-a87c-250465ba4889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4113b1f-001b-41fb-b250-cd9d98c19ff2",
        "cursor": {
          "ref": "88a6e14c-d224-4989-a5aa-b102d0ebd61a",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5c2da349-da7d-41fe-ba7d-03e48d2b1329"
        },
        "item": {
          "id": "d4113b1f-001b-41fb-b250-cd9d98c19ff2",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c409120a-72ab-4825-a66b-3e85edabc713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df5858b-42fd-44f2-888e-4dfc58c6add9",
        "cursor": {
          "ref": "a134d72f-6fab-4b50-86af-50c81abd58c9",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a53c14f8-fe2b-4f25-beeb-3ea0297feb39"
        },
        "item": {
          "id": "3df5858b-42fd-44f2-888e-4dfc58c6add9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "9474bf3b-c514-4ed8-aa66-541ef3f8a322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f958a0-8223-404b-95bd-99441e3b5c34",
        "cursor": {
          "ref": "e46f1e66-e518-4043-bf7a-965ca7daba60",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "48056be6-b3b8-4f03-963b-9d6ac02265b7"
        },
        "item": {
          "id": "94f958a0-8223-404b-95bd-99441e3b5c34",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2a18ccc1-efe5-41fe-a09e-4bf75379582f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a1a665-867e-4488-9c93-d5c678af1624",
        "cursor": {
          "ref": "005fa77f-418f-499a-9430-6fbc2fbc845c",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e79ecb1b-9bf2-4c3e-a8ba-aaccd84358ed"
        },
        "item": {
          "id": "47a1a665-867e-4488-9c93-d5c678af1624",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8c2d153d-6423-4b63-96e6-80287cfcc063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41422bb2-8490-4c33-b62f-13d5beebc7cd",
        "cursor": {
          "ref": "285eeed4-59f2-4cc6-957c-c759fffd2da1",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "90469154-0ab9-42a1-9303-55f0ef1f3c98"
        },
        "item": {
          "id": "41422bb2-8490-4c33-b62f-13d5beebc7cd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "103d86d1-cbe0-4a24-9d22-d16e847d744d",
          "status": "Created",
          "code": 201,
          "responseTime": 621,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "efd3d99a-32b5-41e6-8b1d-fefc1ac4bad8",
        "cursor": {
          "ref": "26919259-0e0f-4344-a853-7692e02d0476",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c2a3b109-e23f-440f-891e-fa8450a55886"
        },
        "item": {
          "id": "efd3d99a-32b5-41e6-8b1d-fefc1ac4bad8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e003334e-c2a2-4968-814b-5765ffb4e992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27f78d7-dc50-45fa-9458-a8c2fd8b3b10",
        "cursor": {
          "ref": "ba6790f2-1a23-494b-bfe6-9628f8aab897",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1132a99a-c144-407a-8900-d3f9fa5d2df9"
        },
        "item": {
          "id": "c27f78d7-dc50-45fa-9458-a8c2fd8b3b10",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "12a8e080-dc92-48c3-990b-cb9e4618ff4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859781c4-ca85-4b2c-8608-813b2547054b",
        "cursor": {
          "ref": "00eff5fe-994a-4de1-98aa-20737015a193",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "57cb46ee-7fcf-4d3f-8b5a-db6e61850832"
        },
        "item": {
          "id": "859781c4-ca85-4b2c-8608-813b2547054b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1a3c421e-afff-4f49-9ecc-2cf3e9168865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7d96c8-69cd-41b4-8665-dadc3f00dcb4",
        "cursor": {
          "ref": "566c4335-83bf-46b6-aae2-defcfab3c40e",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "522bbc17-1d74-43db-be8e-97cefe3692fa"
        },
        "item": {
          "id": "af7d96c8-69cd-41b4-8665-dadc3f00dcb4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e393d22d-5b6e-4324-8c4f-465d22ea1d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0c6ff1-1aa4-4acf-80a8-cf3319e1cf95",
        "cursor": {
          "ref": "c68d8a68-afd5-43ab-8f46-9df256873c65",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f96cf27c-8773-4d90-9da3-4be3dc4b7a17"
        },
        "item": {
          "id": "0b0c6ff1-1aa4-4acf-80a8-cf3319e1cf95",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "00dc1342-6028-44aa-8a91-b9a626225e6b",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "0180d5d2-d8ba-4f87-92b1-2fe4a2892f6a",
        "cursor": {
          "ref": "44704342-c2a1-4b94-9ffc-37baf1b33d95",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "12512b72-a268-44af-b3ac-88f2c5c226a1"
        },
        "item": {
          "id": "0180d5d2-d8ba-4f87-92b1-2fe4a2892f6a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7ec54066-f90b-4671-9d10-b7c0a9782a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f2d5fa-1058-4782-a615-c47d6d3aafc3",
        "cursor": {
          "ref": "d75125d0-b784-474c-b5e2-16e3709bcd7a",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f3b5edac-4f67-4de1-b736-431df1e5ae14"
        },
        "item": {
          "id": "f9f2d5fa-1058-4782-a615-c47d6d3aafc3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c61e8e05-647c-4d4d-a893-b8b2e32e074c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27740355-22ba-4c3f-baf3-65cc9c829bec",
        "cursor": {
          "ref": "7074b2fd-ec99-402c-b2ba-7b76a4396375",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ee5e1d4f-d735-4560-8bee-3d63e43ba571"
        },
        "item": {
          "id": "27740355-22ba-4c3f-baf3-65cc9c829bec",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0e5057be-236b-4db2-bb71-721ed0862948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3c6c86-829b-4811-8b7a-586541c40aa3",
        "cursor": {
          "ref": "3a23b219-06c0-4429-87d2-7b54642f104e",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "adfd4481-8593-4da6-bb96-9f56bd5f9a3b"
        },
        "item": {
          "id": "ec3c6c86-829b-4811-8b7a-586541c40aa3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d8dbee9b-14e6-4d02-81b8-56c14adffb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aefc0c8f-34fc-4148-93e1-9476b20fc137",
        "cursor": {
          "ref": "41bdbf30-580a-495b-93e8-d536bccf030b",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "699dd128-6c31-4606-8b51-8f4b4b39c57d"
        },
        "item": {
          "id": "aefc0c8f-34fc-4148-93e1-9476b20fc137",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "66b10f7b-e81c-4961-a99c-8a77c5a1e917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d41f0b-06fd-45d9-8658-2c868f08cd8b",
        "cursor": {
          "ref": "7dc62693-7475-434e-8b3f-b05f5294893a",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ff2ddbce-bdb3-4f63-8b90-a91ee1d81bf8"
        },
        "item": {
          "id": "e5d41f0b-06fd-45d9-8658-2c868f08cd8b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9a2d0019-4534-41fd-b7ab-3fe5b44823b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad1a465-f8f7-4c68-bc20-1f36c7b51525",
        "cursor": {
          "ref": "657bd991-159a-49fe-bbf7-633ddc15e169",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f93e174f-39b5-4c41-89dc-5c523659cd49"
        },
        "item": {
          "id": "7ad1a465-f8f7-4c68-bc20-1f36c7b51525",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "516744b1-0d5a-441c-bcae-b5a02ba58a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e5a42d-8de8-4d83-9441-12b22b19d240",
        "cursor": {
          "ref": "3ba3b696-bac8-403c-bf3f-d70c31a0a9ec",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "621c6851-79c6-46c7-96a1-3897e5323b84"
        },
        "item": {
          "id": "71e5a42d-8de8-4d83-9441-12b22b19d240",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9db07ce2-3e89-400a-b613-afe61baf9e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f91e744-d693-4df6-9003-5ca941ca81c7",
        "cursor": {
          "ref": "ca3c4427-3558-4e4b-bbde-c9622a2b4f19",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9d12d618-0403-4216-b6d2-5fe685106c95"
        },
        "item": {
          "id": "6f91e744-d693-4df6-9003-5ca941ca81c7",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dddd9db8-ba6e-42ae-bab5-04e4b6758df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec1b715-a0ce-429c-8ddd-2f1360c8f732",
        "cursor": {
          "ref": "1eea789e-7d15-4127-aa5e-1c77167dfe8b",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2ab711e0-dbdc-4df5-8be2-4a037e13439f"
        },
        "item": {
          "id": "4ec1b715-a0ce-429c-8ddd-2f1360c8f732",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "50d35389-d727-4357-9d41-56e5296c4b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837ac42a-cf7a-49f6-a640-34c746d64987",
        "cursor": {
          "ref": "7a599cd5-64db-4a90-8418-1bb3a0e6cfe1",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ccedcf0f-ffd2-4b7b-a2d7-6a69092d6f2b"
        },
        "item": {
          "id": "837ac42a-cf7a-49f6-a640-34c746d64987",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ada5766a-7d35-4ee3-b46e-102ff73125e4",
          "status": "Created",
          "code": 201,
          "responseTime": 404,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "5262fa70-3df7-43ce-874b-23828b781bc0",
        "cursor": {
          "ref": "c507ffaf-ad3c-4ea6-97f6-37f3b5dc6e76",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "801e8a4b-6a87-4d57-abca-073988f7f08c"
        },
        "item": {
          "id": "5262fa70-3df7-43ce-874b-23828b781bc0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "837579fe-5056-45b6-8085-22f5c6dbb6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7332d2-d0e8-4899-a06a-ec39862f83ff",
        "cursor": {
          "ref": "f221b51d-ba4b-455a-98f3-1d3f7bcf2591",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "19837823-f7b5-4946-bfed-1f15f47ea016"
        },
        "item": {
          "id": "4e7332d2-d0e8-4899-a06a-ec39862f83ff",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4ef896df-a896-4a02-abc2-6d0bcee1f09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81fbf661-6a9a-45ae-aaef-7124fc5a8cb4",
        "cursor": {
          "ref": "29f4cc39-ac46-487e-9a7e-fe04cefbfeda",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "17a13158-9e0b-440d-851d-616bebbc7894"
        },
        "item": {
          "id": "81fbf661-6a9a-45ae-aaef-7124fc5a8cb4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5067d6bc-62be-4bcd-b008-b10d104dbb95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a3b19e-7e31-4329-a553-f9a5a4cb9e35",
        "cursor": {
          "ref": "9685b8f2-f7f1-4a03-9f38-4f0b70217607",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d2a49eb0-14bc-44e4-a33e-8a4cc04f83ac"
        },
        "item": {
          "id": "e3a3b19e-7e31-4329-a553-f9a5a4cb9e35",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "71d8a16f-f06c-4bf8-b08a-4ce6047eebc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e8ca6f-52f0-4b0a-bec3-d8f6c77b6ce4",
        "cursor": {
          "ref": "f71e331c-12b8-4b1f-b7ac-1929928ba522",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f2999e90-35b9-412a-ace0-4453cc08973e"
        },
        "item": {
          "id": "58e8ca6f-52f0-4b0a-bec3-d8f6c77b6ce4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a4e4d037-74c7-4407-ac74-8ac87850b840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5569d67-91d2-4365-8481-6481644864c0",
        "cursor": {
          "ref": "bd25138e-743c-4d1f-9cd0-e9d09a179ac8",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a61b8c60-94cf-4065-914d-c7cc6ce4896b"
        },
        "item": {
          "id": "a5569d67-91d2-4365-8481-6481644864c0",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7d623a15-4fdc-4b04-97d5-0e200a242530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b99292-f007-4791-9b9e-5cda1b26c4db",
        "cursor": {
          "ref": "e1dfee88-49ba-4504-ae08-84039b5cee80",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b7942db8-6f7a-4d7d-a884-785324d4de41"
        },
        "item": {
          "id": "c3b99292-f007-4791-9b9e-5cda1b26c4db",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4dd4c0cd-bb66-481d-814b-5099e51a69ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db11fbe1-3936-4159-a04a-9d03c0550291",
        "cursor": {
          "ref": "e225e057-7c9d-48ab-b8a6-9a3ceb35dcde",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "84edbd64-3db6-4975-bb72-b26e19cf5236"
        },
        "item": {
          "id": "db11fbe1-3936-4159-a04a-9d03c0550291",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "54b25c1b-4417-4f3e-979d-3074a271d84c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be0be35-937a-466b-b31a-7796ee95577b",
        "cursor": {
          "ref": "7d2063a8-0201-4a9c-a250-aee08a507fbc",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ac62b447-582b-4210-8490-d7ca3207d44f"
        },
        "item": {
          "id": "6be0be35-937a-466b-b31a-7796ee95577b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8f4ae511-e6f9-44c5-87f2-f8a2b65ba230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ccb6d9b-5203-428e-b0e1-6bf58dbb445d",
        "cursor": {
          "ref": "170ed042-2ceb-4e71-bb7f-7d7992c6865a",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6148a081-e909-4d8b-ab03-89465bba39ad"
        },
        "item": {
          "id": "4ccb6d9b-5203-428e-b0e1-6bf58dbb445d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e3400b41-f7fd-4d05-8f90-7fbaf6b49b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c99e269-e8c1-47aa-a0fc-b0690ffb75a5",
        "cursor": {
          "ref": "a61e916e-674e-45ca-9f93-6a20d230b3a3",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "da63c258-afaf-4a94-8041-d797bcd4461f"
        },
        "item": {
          "id": "8c99e269-e8c1-47aa-a0fc-b0690ffb75a5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7a949f72-7c47-49fe-92a3-1d4b4651d0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa31dc4-6ebb-4284-b6c0-583ebe8b327e",
        "cursor": {
          "ref": "2b025ab1-def7-4f09-83a1-ad62870135a9",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "185c19ea-ee30-4057-ab7a-ff8f019ccb2d"
        },
        "item": {
          "id": "cfa31dc4-6ebb-4284-b6c0-583ebe8b327e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9a2a1693-1f03-478d-8861-b71eb75d9d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59d64c1-24d7-4043-8cac-83478d939e1d",
        "cursor": {
          "ref": "317afb31-ceb3-48a3-82b1-20edec1b23a9",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8d0dae91-7d7b-49d3-8ee3-7ea15e449d01"
        },
        "item": {
          "id": "e59d64c1-24d7-4043-8cac-83478d939e1d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "77bd17ee-85b7-4500-89e8-213da3082761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4f0ac450-c23e-47ef-bf91-801e295ac649",
        "cursor": {
          "ref": "3e9625fd-ba6f-48bc-9e9b-241707fa5563",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "98cbb61b-440c-41f7-8de7-1b94b1f5fe3e"
        },
        "item": {
          "id": "4f0ac450-c23e-47ef-bf91-801e295ac649",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a3583fda-b49b-49b5-86a2-ff104be0eaf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b74944f8-4149-4b42-bcc9-d01ebadb72ac",
        "cursor": {
          "ref": "1b26c10e-db22-48b0-a18c-92a182449509",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "10cf985a-69c6-487e-a844-3e48e9565f77"
        },
        "item": {
          "id": "b74944f8-4149-4b42-bcc9-d01ebadb72ac",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4af246ad-36ee-47f5-b93d-5e2370d48dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f4dc6b-db44-46b2-acb0-d2db2ce4a95a",
        "cursor": {
          "ref": "db3eae45-a36f-4dde-a35b-e6b299b13599",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1e803c58-9f3b-4c52-a283-a24b80aad082"
        },
        "item": {
          "id": "e4f4dc6b-db44-46b2-acb0-d2db2ce4a95a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "907eeb77-447c-4903-acfb-7579a56a803d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b223c0cd-635b-46ef-8298-dd34a50bbd12",
        "cursor": {
          "ref": "7cc7b6d0-eaf1-45ef-a38b-1b0107a7f33a",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6ef2165c-2259-4acc-966e-ec7cf7897791"
        },
        "item": {
          "id": "b223c0cd-635b-46ef-8298-dd34a50bbd12",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a54bb850-3520-435d-a3ac-80187245fdbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b37f323-0389-4900-9291-584bebadc946",
        "cursor": {
          "ref": "2a06123b-21eb-4bf3-ad8b-f553c8724ed7",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "073a35c8-ee6d-4354-a0ce-1bc0596def8f"
        },
        "item": {
          "id": "1b37f323-0389-4900-9291-584bebadc946",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8d825b35-e782-46bd-aaa6-c181e11b1b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986264bb-7bbe-47e2-b77c-da00f9e93259",
        "cursor": {
          "ref": "67f083a3-cae2-4064-b013-7b842439fd68",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "292d63df-7a4e-43bf-adab-ed292a0ae41c"
        },
        "item": {
          "id": "986264bb-7bbe-47e2-b77c-da00f9e93259",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "11698941-6546-4893-bf93-cc761b17062e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aeedcab-eda2-43d7-9074-8f8bc888fd23",
        "cursor": {
          "ref": "f66068d9-cc17-44c7-a170-cba8c20725af",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a5b4bc0f-f2cf-4b3a-acf0-3eb84ed56d54"
        },
        "item": {
          "id": "1aeedcab-eda2-43d7-9074-8f8bc888fd23",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "01709dc1-08b8-4bbc-8f93-abd8d91951ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3795bfbf-ad96-4245-94ef-b126b21bcc36",
        "cursor": {
          "ref": "8959d6ec-53ea-4806-94df-5597bc91ec30",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "51d29228-5e95-41c8-8283-3909927fd0bf"
        },
        "item": {
          "id": "3795bfbf-ad96-4245-94ef-b126b21bcc36",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "45ff0989-f504-4ae0-9944-6435745bed41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3833b3-356a-4449-a186-8b662d52ec22",
        "cursor": {
          "ref": "7fd85169-8da4-4542-819d-56843758d763",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ccc8730d-f33b-4dc0-9245-27999d282fe8"
        },
        "item": {
          "id": "cb3833b3-356a-4449-a186-8b662d52ec22",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "23f5712a-2740-4291-8c48-9ef93327e61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f74b661-5dda-4400-a1e6-3927f9684e97",
        "cursor": {
          "ref": "adde1239-0616-4c22-9bb3-afe2d6b188f6",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "eb32bd0a-70c6-43a7-bddf-fe68c1fe30ad"
        },
        "item": {
          "id": "6f74b661-5dda-4400-a1e6-3927f9684e97",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b75da45a-86c1-4fea-8e8a-77a32771398b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e81a02e-0114-49f6-899b-3a380d7fb668",
        "cursor": {
          "ref": "50fae451-5664-41e6-82ad-b59c8e6b7392",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2b87da33-bcfe-456d-9d10-2506dfee6ff6"
        },
        "item": {
          "id": "6e81a02e-0114-49f6-899b-3a380d7fb668",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "93b537d8-77c8-4102-b64a-4e8c69add753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61304fa6-5e34-48a7-95f7-aace7a3e72df",
        "cursor": {
          "ref": "f2e65333-9e49-44a9-897c-8786e3f9fa96",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5542fd6f-b84b-4900-b4b4-5c564532f3bb"
        },
        "item": {
          "id": "61304fa6-5e34-48a7-95f7-aace7a3e72df",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e73ffdc5-4489-400a-a6a2-8a1bd471bb29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb49329-4736-47d2-9885-319d5d2a0592",
        "cursor": {
          "ref": "a7744827-da41-4d2d-ba3c-e0c6b4470af4",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c65ebf91-9017-48a2-91e5-855cc34d0ac8"
        },
        "item": {
          "id": "dbb49329-4736-47d2-9885-319d5d2a0592",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "815cae55-b1df-4c83-9f48-1f8fbacdea16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3844b82c-2422-4fb2-953d-b63358249016",
        "cursor": {
          "ref": "45956072-4a29-4fec-8bc1-372f5418f688",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d7a56f2b-bb4a-43be-9923-a500433d19b1"
        },
        "item": {
          "id": "3844b82c-2422-4fb2-953d-b63358249016",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "dda67796-fd88-4aba-ab00-ec1f8908db2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8300664f-6d05-4fb2-8b94-6174a8162da6",
        "cursor": {
          "ref": "796183ed-5b2f-41be-8a63-7504799c0a5c",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "87cb0e2e-6b0f-4326-8749-4c559cb3346e"
        },
        "item": {
          "id": "8300664f-6d05-4fb2-8b94-6174a8162da6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9da7fd9c-2db2-41e2-9bfe-0b8c3540f86e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc991210-f300-4c30-80c0-e21bc6ccb0a4",
        "cursor": {
          "ref": "b5a39379-0e46-4b3d-9184-0f91ffb56819",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e9809fbb-b0ef-4b92-b1f6-1514b78020e7"
        },
        "item": {
          "id": "cc991210-f300-4c30-80c0-e21bc6ccb0a4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9501f962-3ca6-4896-a4c5-5af4814ace9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cd7338-f145-418f-adbf-d5bab5b2e88e",
        "cursor": {
          "ref": "6c453ef5-9e76-4418-bc4b-7115c926ebfb",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b9afdd9a-d870-4076-b8d2-90edcaec99e0"
        },
        "item": {
          "id": "f5cd7338-f145-418f-adbf-d5bab5b2e88e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3b1d8c97-da4a-45b1-b62b-ff9240309354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7fa3404-5ac9-4d56-8e5d-88e05161b6e5",
        "cursor": {
          "ref": "50d077a4-97b0-4339-bab7-0f3aa828ae32",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5ff422b1-41b2-4af2-b95d-083801100a04"
        },
        "item": {
          "id": "f7fa3404-5ac9-4d56-8e5d-88e05161b6e5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4d9a0732-32de-470c-81e4-003f014f9283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07f81ac3-10a0-4c2e-8ab5-44b576abdce6",
        "cursor": {
          "ref": "4725bbc6-bdb5-4cb8-9e01-ea5bddbe3b0c",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6a033463-f87c-4ec3-804e-565036a9ad16"
        },
        "item": {
          "id": "07f81ac3-10a0-4c2e-8ab5-44b576abdce6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "85df8236-8c9d-4471-be46-b3dfba3ffd8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f4c483-6ad8-45d7-bddb-c9d13c92f849",
        "cursor": {
          "ref": "744beb0c-8be7-456e-a454-d37970f54e24",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "fdc89985-c3c6-4510-92cd-e81ab93f7006"
        },
        "item": {
          "id": "91f4c483-6ad8-45d7-bddb-c9d13c92f849",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "652e9699-9b46-4a71-b632-81bce00eb5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97aa89cd-f83d-438b-8b6b-6be89c241af9",
        "cursor": {
          "ref": "b83b9fd9-d73f-4d0b-8461-178acdcde01e",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1bba12d8-33c9-4588-8cc8-d1931eaabd95"
        },
        "item": {
          "id": "97aa89cd-f83d-438b-8b6b-6be89c241af9",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "400ea6a1-3f35-4e70-8a8b-f5367ec004ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887e8c18-a7ac-4485-aa8e-02ef4deab906",
        "cursor": {
          "ref": "3c7f3865-dc33-4cac-89fa-9b3a2fae17f1",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4fb486f7-9279-49d1-96fa-1cc40363b60b"
        },
        "item": {
          "id": "887e8c18-a7ac-4485-aa8e-02ef4deab906",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "01eca717-8bea-4627-83c3-2e9137ede053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d498e9f9-1b8a-4ccc-bfd6-685c30c520e0",
        "cursor": {
          "ref": "662730e5-ff10-4e37-a018-e16e28e42d72",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6647fea1-7c73-4e0d-83a3-452d6b9cf41b"
        },
        "item": {
          "id": "d498e9f9-1b8a-4ccc-bfd6-685c30c520e0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "43d78a20-98cd-434b-940d-21dd727d9692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca4e7a2-b672-4bb4-88d9-9f1866c88024",
        "cursor": {
          "ref": "b8cfd99c-bcc4-4372-b983-e98afdeca051",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d2602908-4b48-4895-9c9f-4b72aa80403f"
        },
        "item": {
          "id": "6ca4e7a2-b672-4bb4-88d9-9f1866c88024",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c90da881-84d8-438c-adff-636afe4a6094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8f0773-8ad3-47c3-ae82-a425c1b57434",
        "cursor": {
          "ref": "5837e73f-192b-4978-804b-9145f4c519dc",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9649bf42-e2bb-42c4-91ca-37370ecfc3c0"
        },
        "item": {
          "id": "ea8f0773-8ad3-47c3-ae82-a425c1b57434",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8c136252-c236-4eaa-8002-1a5eeba6052b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f1e0af-ffc4-4b65-abf3-a4ffe766868e",
        "cursor": {
          "ref": "29f59987-d402-4e4b-b6b5-eed5227a5eb2",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d73de0d6-0821-4d43-b5fc-cfef0d15aaf2"
        },
        "item": {
          "id": "18f1e0af-ffc4-4b65-abf3-a4ffe766868e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a668fb62-b574-4e4b-b8fe-1636533c992b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9689061-96fb-461f-afac-785f1517b6bb",
        "cursor": {
          "ref": "4d682c31-8d97-4f2c-aa19-93b08269365d",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "40244fee-7fa7-4252-add0-e281554ed32e"
        },
        "item": {
          "id": "c9689061-96fb-461f-afac-785f1517b6bb",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8fde5437-8c03-4153-970f-2ceb2eb6d9e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a0ce6a-e3c2-48cc-bd08-02a1546ab934",
        "cursor": {
          "ref": "b8eedde7-05bd-43d6-bc20-303d6634ace8",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "452d1c89-63d1-4636-abbb-5d59ce1031b8"
        },
        "item": {
          "id": "27a0ce6a-e3c2-48cc-bd08-02a1546ab934",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d4c0bb93-6ef2-47e2-b1d7-7c5d38a08fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47efcde2-460a-4392-83f5-bf6b81a05b65",
        "cursor": {
          "ref": "2df1e013-cc6a-457d-92dd-08d22804b72b",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8fbd004e-c3c8-46d2-8ed6-50bd3b2f06b7"
        },
        "item": {
          "id": "47efcde2-460a-4392-83f5-bf6b81a05b65",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f273bdc5-a0a3-453e-b23b-92dcf36ebdca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6547df35-2135-41cf-bb5a-52c5632499e9",
        "cursor": {
          "ref": "6dc122f8-1edb-4c23-91d5-11a5037cfb19",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3ea113f8-4386-401e-8709-20256445e9b5"
        },
        "item": {
          "id": "6547df35-2135-41cf-bb5a-52c5632499e9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f8f1eb37-4ad2-455e-8945-0e8274db132b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a231c2-cc2b-4d0f-b3c4-c6b333a74780",
        "cursor": {
          "ref": "bcc283c8-26da-4abb-843e-356d2f47bfaf",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "66eda70a-eccb-4085-8d48-7d859bf457f8"
        },
        "item": {
          "id": "67a231c2-cc2b-4d0f-b3c4-c6b333a74780",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0e3eb289-c545-4a03-9758-3f2d68a7d9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15634d10-cd1e-4085-a2f5-6e695f3cea1e",
        "cursor": {
          "ref": "e1284bc8-87b1-43be-b34a-347d1c223897",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "65f0b1da-9e00-4c45-b373-1f1364d7b45c"
        },
        "item": {
          "id": "15634d10-cd1e-4085-a2f5-6e695f3cea1e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "78c6f8db-b86d-47b8-b0a0-ae8a7f18f8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0ceefd-d804-4ab0-abf6-dfd3b53af88b",
        "cursor": {
          "ref": "7760d163-f9b6-4c24-aea0-3386eed80d89",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b05d43eb-12b5-48b6-a52a-db2a575928d9"
        },
        "item": {
          "id": "ab0ceefd-d804-4ab0-abf6-dfd3b53af88b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "52a30412-0831-454c-88ec-e3cdaa94dd89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e5b778-d1f9-499b-8684-bef4d2c5c1f1",
        "cursor": {
          "ref": "3ccc7ffd-211c-43c1-9a92-23b6cda74d4d",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0d9d6203-f191-4b9e-bcec-6f9f80fcfc41"
        },
        "item": {
          "id": "05e5b778-d1f9-499b-8684-bef4d2c5c1f1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "51add97d-f398-4164-b8b9-a1decaad8ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71cb026-e5bf-40e5-83db-84a192d85300",
        "cursor": {
          "ref": "d6787076-4de0-40d5-8cbf-9d35cef3a296",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e8e38af4-f5c0-4436-9a60-af44217dcb09"
        },
        "item": {
          "id": "c71cb026-e5bf-40e5-83db-84a192d85300",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "47b503f0-d770-4925-bdc9-dd218339db8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae1123fa-dc77-498c-bfaa-83869b3dcdfb",
        "cursor": {
          "ref": "74fccd96-2cef-417f-8283-876ddce0fd6a",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "bb6b4ed1-70d3-488b-9f48-a8e2381c61cf"
        },
        "item": {
          "id": "ae1123fa-dc77-498c-bfaa-83869b3dcdfb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e01c96d0-4dd0-43b4-8106-9f0ae69f26ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77c2307-5c68-4f04-a059-0e3f32935edd",
        "cursor": {
          "ref": "ae5a3381-6f33-46a7-8b93-2bfe7c83231d",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c3760348-45ef-460d-af52-d2738976132e"
        },
        "item": {
          "id": "f77c2307-5c68-4f04-a059-0e3f32935edd",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "84419059-efbb-4f41-b9b2-bc6ece55c763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a68be61-155c-44f0-8f41-7a8a4e51ba83",
        "cursor": {
          "ref": "6adf33fa-364d-4f6f-a487-dd5a4cb4f4ae",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "498be319-872f-40ff-ab57-53769dbad834"
        },
        "item": {
          "id": "7a68be61-155c-44f0-8f41-7a8a4e51ba83",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4ae4b903-fdb0-4af0-ab89-28fc4aed98cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd7b086-739f-4be1-9f33-80f3d5d6634a",
        "cursor": {
          "ref": "1bb5639b-1f34-4aae-8e19-ad419d2be770",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e5612b37-02bb-4bb2-96e7-31e6e94cd8c9"
        },
        "item": {
          "id": "2fd7b086-739f-4be1-9f33-80f3d5d6634a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "88529338-8bfc-4fec-b8d2-287ebf1d3e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19ca952-d1d7-46e0-9ab5-e608bc773ec5",
        "cursor": {
          "ref": "b3df249f-5ff0-4b3d-82b5-087a4cdf096b",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0869fcf5-4d9f-4d0e-b99a-8ca6a82900b0"
        },
        "item": {
          "id": "a19ca952-d1d7-46e0-9ab5-e608bc773ec5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "817f6670-6b70-480c-8c99-53ff3e88eacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55c102c-2572-43fb-be2b-4eabdce3e9d0",
        "cursor": {
          "ref": "7c9e8ca2-8619-4e92-97a9-084c22708e61",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "15601864-f8d8-4905-bed3-ca9dae615272"
        },
        "item": {
          "id": "d55c102c-2572-43fb-be2b-4eabdce3e9d0",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "828452d2-a279-4cc8-8139-99f5f453875c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17e9747-ad3b-4c15-98dc-44cd1328fb26",
        "cursor": {
          "ref": "7a05e208-03f6-4f64-b250-c96274a13e8e",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7c455316-08c4-4d6a-9453-49c96d242614"
        },
        "item": {
          "id": "e17e9747-ad3b-4c15-98dc-44cd1328fb26",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "93c7a007-fd1b-4ece-898b-107042dfc0b9",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "5af55428-c5e5-420b-93b1-203fbc307b18",
        "cursor": {
          "ref": "67d3ec9e-dec4-484b-90e8-9c217cbee76b",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "691a27bb-8edb-411f-a097-f468e50e9d44"
        },
        "item": {
          "id": "5af55428-c5e5-420b-93b1-203fbc307b18",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5eca18f5-2bf8-45f8-975a-c191ee62059c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb28a7f-b99e-45e1-9db1-c8f80a8058cc",
        "cursor": {
          "ref": "3941cb48-0271-488e-a117-79b2fed84779",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d7910744-5988-41e4-a546-3977afc56766"
        },
        "item": {
          "id": "ecb28a7f-b99e-45e1-9db1-c8f80a8058cc",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "35236204-e2d7-40ce-a575-2b07d492de86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68515c23-2597-4cd2-938d-fb0b0f88fb38",
        "cursor": {
          "ref": "fef3ac6c-e746-42f7-9ad3-43c2c748fe95",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4c5deed8-12b6-4757-ba70-85da3a71afd2"
        },
        "item": {
          "id": "68515c23-2597-4cd2-938d-fb0b0f88fb38",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3f5bbf94-435b-49b4-960b-bd4f8eea6c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa1a749-0e7a-4234-abf3-ae165c972fe9",
        "cursor": {
          "ref": "ad9a2f2f-9f2c-42ea-8cc8-4b29679537af",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7408068b-c1da-49b3-a86b-ee6f22907701"
        },
        "item": {
          "id": "baa1a749-0e7a-4234-abf3-ae165c972fe9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f462e8a7-b026-42a1-a942-489c7d40aa22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c82b0fb-8cff-48c7-954c-fe0b0c111b9d",
        "cursor": {
          "ref": "dfa9aa98-bde7-423a-9db4-cfa6b7aacd43",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c018fb42-1f00-430e-817b-a1bbbe3134f8"
        },
        "item": {
          "id": "8c82b0fb-8cff-48c7-954c-fe0b0c111b9d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "eb37f5bd-9bf1-4770-93a3-4ff66af3c766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b684f7e6-e3fb-4018-9365-397bf6b6bd70",
        "cursor": {
          "ref": "02d3748c-18a9-4885-b4f7-e0637aea9eda",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "10540515-318c-4aa9-83cb-113c85fddbd3"
        },
        "item": {
          "id": "b684f7e6-e3fb-4018-9365-397bf6b6bd70",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f21fb8a5-c1d4-46cc-ae24-d1d9aac6b1f4",
          "status": "Created",
          "code": 201,
          "responseTime": 423,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "8d1e5039-ab07-4847-a2ac-48b97ee136bb",
        "cursor": {
          "ref": "1f0b3763-2416-4175-a2ae-30d455bf2414",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1080d2f6-d18c-4b1c-8fd5-18886871aff5"
        },
        "item": {
          "id": "8d1e5039-ab07-4847-a2ac-48b97ee136bb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c23edb88-2ed4-445d-bafa-8dab6004d9e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7a3fb3-5252-49bb-b6e8-024edae097c8",
        "cursor": {
          "ref": "dc7a9b01-161e-43b8-a332-6b9a8556a1e8",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ed0ddd33-a692-473b-ad04-ca2ee6dd381b"
        },
        "item": {
          "id": "6e7a3fb3-5252-49bb-b6e8-024edae097c8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fb862997-676c-4cdc-b001-6949b9990875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232c76f9-ef90-4fe2-90db-937a7206b756",
        "cursor": {
          "ref": "3da9fff3-6c5b-4f0a-8d64-8352d426b4ac",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d41d0919-f787-486a-972f-1ec90c154233"
        },
        "item": {
          "id": "232c76f9-ef90-4fe2-90db-937a7206b756",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b69246f1-ac2d-42bb-96f0-745bb7b66b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f69fb8-6552-4a6f-ac25-03f9ffb4dd8b",
        "cursor": {
          "ref": "01f19240-1fb8-45be-90b3-6d37018b032e",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "aa32b4f2-0ebe-4ab8-bc32-9e9997e84cf7"
        },
        "item": {
          "id": "a2f69fb8-6552-4a6f-ac25-03f9ffb4dd8b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ec6f296a-c916-402e-a980-8cfed3340aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbbb474-e757-4b3e-b531-b135563f79b8",
        "cursor": {
          "ref": "78de22c3-fd5c-476e-bf17-593290de2f06",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ff2e7a47-89ac-4a49-86c8-9306c8384b3b"
        },
        "item": {
          "id": "bbbbb474-e757-4b3e-b531-b135563f79b8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "125f6382-c9e4-4967-86b1-fece29efbe03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "866da829-1857-4f94-8338-0c4b2713aba7",
        "cursor": {
          "ref": "301dfeb2-6de9-4d8f-8b5c-bf554969d679",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5606b1ab-963f-4e65-8f34-6a6412826b44"
        },
        "item": {
          "id": "866da829-1857-4f94-8338-0c4b2713aba7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a7304a16-84de-4c8a-801e-b5f814b18bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ec6782-e69b-46e1-9be9-330e495f5e86",
        "cursor": {
          "ref": "d7c0c3f1-6ee1-4e70-b217-1fb77f10e8aa",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "255d9955-5ce1-49fa-8696-0badac9f37d5"
        },
        "item": {
          "id": "99ec6782-e69b-46e1-9be9-330e495f5e86",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "45746569-5daa-4f26-b980-b41475ec0a35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068b0505-226c-48a7-bd92-5cc335300c92",
        "cursor": {
          "ref": "af96aa30-1e2c-4ee7-8d05-60c42ae119e9",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "86b2b536-5948-4fca-bea2-a7252d3a5222"
        },
        "item": {
          "id": "068b0505-226c-48a7-bd92-5cc335300c92",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "713ac823-6124-48ba-addc-fd7dc690a541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7e5105-873e-4ace-9955-30ecdc7a0659",
        "cursor": {
          "ref": "312a5f20-390c-4384-88de-46dd93579e29",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ece433a9-41f6-4ec6-a4b3-2bb4b2fe4cab"
        },
        "item": {
          "id": "6f7e5105-873e-4ace-9955-30ecdc7a0659",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b700ff2e-2dee-4a4f-b553-f59995907cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "a44c19de-dc26-45e1-ab67-22b7b0952258",
        "cursor": {
          "ref": "9aed08d1-fd57-4940-86a7-b588a7758822",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "799febf2-2525-4181-9773-d933acec4313"
        },
        "item": {
          "id": "a44c19de-dc26-45e1-ab67-22b7b0952258",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "67bb63bb-115c-4ba0-b447-278948ea4609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "296199d6-562f-4888-beca-416859fe8672",
        "cursor": {
          "ref": "e6a6a638-bc28-4d57-9705-1126cfcbd2da",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c69d8235-b360-4ba7-8b96-78573db43aef"
        },
        "item": {
          "id": "296199d6-562f-4888-beca-416859fe8672",
          "name": "credentials_issue"
        },
        "response": {
          "id": "90962b3c-342b-43d2-a7b7-22a18ca2975b",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24be71f-2d99-4d4c-95ec-1e96cb24d3d7",
        "cursor": {
          "ref": "736dacce-89fa-41a7-8b35-c4b7a9cbf810",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b64c4c6f-3eac-4b92-87b7-82505dfdb946"
        },
        "item": {
          "id": "f24be71f-2d99-4d4c-95ec-1e96cb24d3d7",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "99486a9d-73eb-453c-ac88-629ce4191da4",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30fab44c-79c9-4b49-8fb2-036cd6dd19c0",
        "cursor": {
          "ref": "f9b3b424-6f14-4fa0-916d-d8fe83475d7b",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b34199df-2440-4381-8087-0baf0b53f4e3"
        },
        "item": {
          "id": "30fab44c-79c9-4b49-8fb2-036cd6dd19c0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c4593dbf-6322-4c76-b6ba-0ff22b27a975",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c550b37a-279d-4c2b-8d8e-f4aea9fc305e",
        "cursor": {
          "ref": "d4ea9596-7502-4e5e-a848-b554e83e47b4",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1970c9f1-6ada-4822-abf4-7d51ef8d87af"
        },
        "item": {
          "id": "c550b37a-279d-4c2b-8d8e-f4aea9fc305e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b3d5ac8b-a8f1-44a3-b0bf-af4b743a9829",
          "status": "Created",
          "code": 201,
          "responseTime": 393,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e70c29c-92ce-4305-a43b-ff11dad0e898",
        "cursor": {
          "ref": "3d183861-3f70-4e02-9c99-270a346005df",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "700b93ba-a1ab-4292-bb4b-7a84c5e58b1c"
        },
        "item": {
          "id": "5e70c29c-92ce-4305-a43b-ff11dad0e898",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8ccdb7f6-9e54-4758-8213-3bd61362edd2",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b11eec3-6341-4d90-aee7-2747e48502ea",
        "cursor": {
          "ref": "781fd547-dfdf-486a-baa6-f3f87b6ecb8b",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ea6a239f-dca9-40a3-89f4-5aa8a065693c"
        },
        "item": {
          "id": "6b11eec3-6341-4d90-aee7-2747e48502ea",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5b247106-b099-48e0-a604-ece4f7af5b04",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b34be07-5011-43f0-81ab-d7d0ea95ef05",
        "cursor": {
          "ref": "218af948-fda9-4de4-b648-ad5a08070d59",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0bf3eda4-3c8a-48ac-a572-a787c78b2b26"
        },
        "item": {
          "id": "0b34be07-5011-43f0-81ab-d7d0ea95ef05",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d2bbb97f-f4ef-4a1c-a3f6-96e26e13c7be",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "0b34be07-5011-43f0-81ab-d7d0ea95ef05",
        "cursor": {
          "ref": "218af948-fda9-4de4-b648-ad5a08070d59",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0bf3eda4-3c8a-48ac-a572-a787c78b2b26"
        },
        "item": {
          "id": "0b34be07-5011-43f0-81ab-d7d0ea95ef05",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d2bbb97f-f4ef-4a1c-a3f6-96e26e13c7be",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "817717e1-b132-4c03-861b-2b6b3457617a",
        "cursor": {
          "ref": "728fcffd-0caa-4caf-a0a5-6166dae883cc",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2ab6d7f2-0eed-4103-b107-a27d52a60c70"
        },
        "item": {
          "id": "817717e1-b132-4c03-861b-2b6b3457617a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e1da12b6-f957-40f8-98de-3dc55673b78d",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "b5f0cd15-9fd9-4aeb-9b5d-1196a889f795",
        "cursor": {
          "ref": "c427575e-4eeb-4cfc-ba95-028c5b4de853",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2f797966-e2fd-42fd-84e3-0ba34c6e1882"
        },
        "item": {
          "id": "b5f0cd15-9fd9-4aeb-9b5d-1196a889f795",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "18c40974-1fee-4395-9086-86ffbbfdfd08",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "7bb68254-45ea-4a61-8660-5989969955eb",
        "cursor": {
          "ref": "6e3c21c0-76d5-4268-8f35-64cf97a1ef79",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a51a9132-b221-41bb-8743-5eb79fce750a"
        },
        "item": {
          "id": "7bb68254-45ea-4a61-8660-5989969955eb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "dc4b66e6-26a3-4222-9da9-e5b893b4d373",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "25cc8507-27f1-4283-be4c-e4a10b1bf9f9",
        "cursor": {
          "ref": "40a5e334-f823-4eed-b221-42dc3073137a",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c125ba3c-62eb-45e6-b773-a05f7663d243"
        },
        "item": {
          "id": "25cc8507-27f1-4283-be4c-e4a10b1bf9f9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "48c31e14-62e1-4745-a07e-7db98471f45b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "4a1341df-4823-475f-a09e-2f2eb80f39e4",
        "cursor": {
          "ref": "01b16667-d7ba-4a3f-a648-28528350597c",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "361f6b77-d66c-4bdd-bc3c-5b69ed545271"
        },
        "item": {
          "id": "4a1341df-4823-475f-a09e-2f2eb80f39e4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "60e81582-7352-447c-adf8-c30978248f88",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "36f6f71f-d5a1-4b89-9516-5174c78217f9",
        "cursor": {
          "ref": "666c4d65-e505-4a73-9bd7-99607ae770bb",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5128826b-a139-415e-b9ee-b046e97630c3"
        },
        "item": {
          "id": "36f6f71f-d5a1-4b89-9516-5174c78217f9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "245a8530-184b-4d7f-82a1-9e386cf29b9b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "ea918a2c-ac5f-4ab3-a41a-30ca30b11c5d",
        "cursor": {
          "ref": "66fb05ca-31e2-43f0-8847-7f864f351c2c",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "29724937-2cef-493a-bac0-3ea2b503129b"
        },
        "item": {
          "id": "ea918a2c-ac5f-4ab3-a41a-30ca30b11c5d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e49dd673-c673-4627-aa88-7ba000833bfd",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "5dbd6ae3-11ec-4a06-bb03-e3a1569ede15",
        "cursor": {
          "ref": "41854cc7-4461-47a8-8e6a-07c73a861502",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "779183fe-3929-4e03-b1c6-00f675b90cbf"
        },
        "item": {
          "id": "5dbd6ae3-11ec-4a06-bb03-e3a1569ede15",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1e21f9a2-553b-4bb9-87a4-41e99745b9e1",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "6316acf5-5ffa-43b9-918f-46bc4fe0ebfb",
        "cursor": {
          "ref": "1213099b-886b-41d8-b273-dfec334a3f2e",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "04899429-3ab9-49b5-83f6-7818b1723333"
        },
        "item": {
          "id": "6316acf5-5ffa-43b9-918f-46bc4fe0ebfb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "721c2e4c-c0fe-4a1b-a04c-3e627502188c",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "25002f6f-8694-454f-bd4f-16ca2e9534cf",
        "cursor": {
          "ref": "f71d7551-0489-4b19-b8e2-92305d9d5ba1",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b2a1a661-df85-4b03-9d94-561b0d10b91c"
        },
        "item": {
          "id": "25002f6f-8694-454f-bd4f-16ca2e9534cf",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dcf19410-59a3-416a-a800-eb285a7e9c66",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "0eb4b4b4-42a6-458e-8831-fb1411349efb",
        "cursor": {
          "ref": "d4cb9452-73a5-483a-b928-13e4abf31c20",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8b771c44-740d-449d-b792-e317135db17f"
        },
        "item": {
          "id": "0eb4b4b4-42a6-458e-8831-fb1411349efb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "46752671-fdaf-4821-9e73-5dd4e9c28c0b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "9534a70e-cf55-4828-85af-57fe14881b2c",
        "cursor": {
          "ref": "05c1e8b5-0439-4450-b3ec-d2af27b0a8f7",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8288f6d8-e503-4444-8394-b7df34558215"
        },
        "item": {
          "id": "9534a70e-cf55-4828-85af-57fe14881b2c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9d286706-e399-4a61-ac70-f389bb4d48fc",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "3b8727c0-438c-4d5f-b399-1f61cd5ae2a7",
        "cursor": {
          "ref": "c247fec3-8c4e-4121-9833-a7865d178c28",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7ad2e3c7-f992-4198-a002-35e255fe4dfe"
        },
        "item": {
          "id": "3b8727c0-438c-4d5f-b399-1f61cd5ae2a7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "880fc9a9-b3af-4b07-bb0e-96ec3c68f2e7",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "dc15ef9b-45e9-4643-9efc-3d45e6e1f78b",
        "cursor": {
          "ref": "7a2351d1-6b21-403b-8395-77c386efcbb2",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e46e8cb7-5e4c-4543-926b-50a3a948c02f"
        },
        "item": {
          "id": "dc15ef9b-45e9-4643-9efc-3d45e6e1f78b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8e0169f2-cda0-4ee8-9426-d83c52932849",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "7084b0c5-63af-4498-be46-24a76b3cee41",
        "cursor": {
          "ref": "423ef547-430e-4217-aa38-08d40637d139",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "deda23af-70c4-4bed-a090-a7aebdb9a559"
        },
        "item": {
          "id": "7084b0c5-63af-4498-be46-24a76b3cee41",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a2f53cc2-6eb9-4e54-8c46-0ebd986fee43",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "18ff9fd7-6732-450c-808c-3fa9b4201f32",
        "cursor": {
          "ref": "e0ee52e9-ead3-4b40-83ed-8331109d7e34",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "671cf767-425d-45ff-976c-2be8d5d747ba"
        },
        "item": {
          "id": "18ff9fd7-6732-450c-808c-3fa9b4201f32",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "884940ad-df3a-40d3-9a60-20a089b91d8a",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "c554ffc1-c970-484b-8708-9dcc329b7ba7",
        "cursor": {
          "ref": "f4705c0c-a93f-4cc1-9446-d20608acc3a7",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "eeb1bb10-b92a-422b-84d0-f300976c0c8d"
        },
        "item": {
          "id": "c554ffc1-c970-484b-8708-9dcc329b7ba7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c1fbd61e-15b5-41cd-a858-c9fb8613bfd9",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "21d9bddf-e0fe-4356-ad50-276bae08c566",
        "cursor": {
          "ref": "f875780d-4ee5-4c65-b4a5-87caac7cf141",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "5076c611-cb27-4896-92d1-8827f7b3e7e6"
        },
        "item": {
          "id": "21d9bddf-e0fe-4356-ad50-276bae08c566",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "49061df3-32c7-4088-a5ee-37729accd70e",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "f21c6996-2fc0-4ff6-bd06-985678048011",
        "cursor": {
          "ref": "7ec2c52c-bb35-4b0a-b90f-8e490f9adab6",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4c2d061a-4383-4391-ab13-023350a1b015"
        },
        "item": {
          "id": "f21c6996-2fc0-4ff6-bd06-985678048011",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7b39e2d4-13f6-4ba4-affa-92b515b51200",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "958cde2d-ab31-4684-87ef-d4bccdd8bdce",
        "cursor": {
          "ref": "18bd1440-8d49-41f5-8bc8-79d6ca5d7ec0",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f28ffb35-d403-4463-9b0f-55ee4b13dc56"
        },
        "item": {
          "id": "958cde2d-ab31-4684-87ef-d4bccdd8bdce",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d3448950-d73b-4e17-8e10-99363aa43a75",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "e2478d92-0200-4037-baf8-6ee122d9c860",
        "cursor": {
          "ref": "6e7ba531-f44f-4842-9a83-a1ab455ee27a",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ca08a517-8a72-45eb-8a2a-2536071f03c0"
        },
        "item": {
          "id": "e2478d92-0200-4037-baf8-6ee122d9c860",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "436703d0-0b6f-4b9c-b46b-40d74dab7667",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "fab2f340-c631-497f-96fe-25c216d98840",
        "cursor": {
          "ref": "97c310c2-6f1b-49da-b464-177cd6a090ec",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "195179b6-e8ae-4e07-9c8c-d641f185e301"
        },
        "item": {
          "id": "fab2f340-c631-497f-96fe-25c216d98840",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "346a0fdb-f12b-4371-95ac-c3dbfa236554",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "4ecd8435-b84f-4a33-be89-82d5fef694ed",
        "cursor": {
          "ref": "43c0f846-6765-48a0-9ea0-6a1fc8802e13",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "27555b1b-5584-40ec-81e8-1f9e34db0f28"
        },
        "item": {
          "id": "4ecd8435-b84f-4a33-be89-82d5fef694ed",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4ad0f5a5-61b5-4909-9e8e-f08c727b108a",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "88e4b748-24f0-4cf7-804e-591fad1b2d78",
        "cursor": {
          "ref": "66755a23-56ff-4d76-b2ad-b36ac747a701",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "559c74de-538c-49cb-ae21-6f5fcdf0832a"
        },
        "item": {
          "id": "88e4b748-24f0-4cf7-804e-591fad1b2d78",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6cd0cfa8-12e6-419a-ade5-db25db36ce40",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "34bda2c7-64e8-4758-adf7-110d8fe4c370",
        "cursor": {
          "ref": "8247ad76-6e95-4807-bff4-0b8fcfac8e1b",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7ded6d05-928b-4d3d-98da-5954ecf620e0"
        },
        "item": {
          "id": "34bda2c7-64e8-4758-adf7-110d8fe4c370",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8e7707c6-706a-46c9-a693-6344db67d4c9",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "313c6a68-1170-4419-a91f-68f382eef0a4",
        "cursor": {
          "ref": "3f91811a-5de6-44b2-a22b-c0a4becddfa3",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4bfa5568-be5f-42b8-84fa-aed55e620706"
        },
        "item": {
          "id": "313c6a68-1170-4419-a91f-68f382eef0a4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "aea2dea1-eb71-4919-a386-31d033c5d06a",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "ee4c9853-6efb-4f26-9b57-1a3d4f6c4072",
        "cursor": {
          "ref": "6ea2d7ed-f572-44c8-95dc-18fbc8ac817e",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2fd12dfe-f58e-40ec-a3be-3e8bc0bf208f"
        },
        "item": {
          "id": "ee4c9853-6efb-4f26-9b57-1a3d4f6c4072",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "52ed8b54-dde7-4edb-b3a1-17cfe68f68c9",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "e9af9d3a-2804-4938-8265-63990c1c2904",
        "cursor": {
          "ref": "7cca36f6-33c1-4a29-abb2-a11f32cf63b6",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "74ac15a2-1df2-4bab-a970-9b26cad53e0f"
        },
        "item": {
          "id": "e9af9d3a-2804-4938-8265-63990c1c2904",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "383dfb72-1416-42ee-8107-288b4b5fe312",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "bf8eefe2-bcdc-4deb-a7c9-1d0a7a8dfd26",
        "cursor": {
          "ref": "2caca01f-867f-4d22-adfe-dfec47a91dfa",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "896c0be6-02e1-4313-99af-0be698cc1efe"
        },
        "item": {
          "id": "bf8eefe2-bcdc-4deb-a7c9-1d0a7a8dfd26",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fda9ea49-1bf5-4b5a-8ce4-d0ed927e5ff6",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "615763d0-dbd7-47ac-84db-38d4c754d864",
        "cursor": {
          "ref": "a8454f48-290b-4dd9-8905-33784a31579a",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "66d041b8-8f50-4340-a091-49dc4dffe325"
        },
        "item": {
          "id": "615763d0-dbd7-47ac-84db-38d4c754d864",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8928ba99-08f6-46a8-b50c-fbdfc136414e",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "701534d6-8979-40c6-86ee-5119adf10270",
        "cursor": {
          "ref": "87eee9b1-6b05-4c7b-84ae-8de544b1f8cd",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "549e7636-30b3-479e-8132-7e0e0f74535e"
        },
        "item": {
          "id": "701534d6-8979-40c6-86ee-5119adf10270",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2ecee28e-cddc-4c17-bcd9-d281f8f06d99",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "24486aef-c2c0-42dd-9bfc-9bb7146c5c00",
        "cursor": {
          "ref": "26cda9f2-253e-475a-88bd-3e42ef521e8e",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c73948fd-7264-4f0a-8e95-e45084a9beee"
        },
        "item": {
          "id": "24486aef-c2c0-42dd-9bfc-9bb7146c5c00",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "84517b2e-a297-4aca-92cc-342b303d9605",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beacab82-6634-4e8f-bf6e-62f7ca753f22",
        "cursor": {
          "ref": "d650d118-79a8-48fa-ad2a-e8e9410a65bc",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f9fc8800-09f9-4d12-b079-3b0aff126e44"
        },
        "item": {
          "id": "beacab82-6634-4e8f-bf6e-62f7ca753f22",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d76d5f70-e613-45b4-aaef-f1101d397a07",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1690f964-a447-49ab-8f45-d1a2bbe7a0be",
        "cursor": {
          "ref": "c12365a1-5efc-4bdf-b961-7ca0ab371acf",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "56c017e5-4105-4bba-955a-00e0b50f9430"
        },
        "item": {
          "id": "1690f964-a447-49ab-8f45-d1a2bbe7a0be",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5bdc3c3b-b179-4b74-ab10-4cbc59f0c1fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1690f964-a447-49ab-8f45-d1a2bbe7a0be",
        "cursor": {
          "ref": "c12365a1-5efc-4bdf-b961-7ca0ab371acf",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "56c017e5-4105-4bba-955a-00e0b50f9430"
        },
        "item": {
          "id": "1690f964-a447-49ab-8f45-d1a2bbe7a0be",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5bdc3c3b-b179-4b74-ab10-4cbc59f0c1fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33094b4-0b06-4a09-a426-416a6590c02b",
        "cursor": {
          "ref": "2f79b3a5-f537-4cb7-871f-b25c81715b22",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2636bda0-1115-47a7-a9d6-e2228067389a"
        },
        "item": {
          "id": "f33094b4-0b06-4a09-a426-416a6590c02b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fd5c9a19-58de-4bfe-82e4-5325d3ad380d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf2a238-0573-4760-8ec9-4c746dce7bdd",
        "cursor": {
          "ref": "c073d045-e557-40b8-a236-76904483823a",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4634c426-dd26-46b9-9843-2487706ee9e9"
        },
        "item": {
          "id": "bcf2a238-0573-4760-8ec9-4c746dce7bdd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fd1220bc-73b3-46a9-aab0-6929ffebf2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7bd1110-1ea0-4d89-8f2f-a22eb67bd21c",
        "cursor": {
          "ref": "1460debd-0890-4ebd-9df2-168e2438e013",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c03be697-b8c3-40fd-8e80-f73c74404271"
        },
        "item": {
          "id": "a7bd1110-1ea0-4d89-8f2f-a22eb67bd21c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "316d8ad6-5606-4767-9260-9e5c46e00f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122d8b33-ee79-4ae8-bbe7-45a775dc8d81",
        "cursor": {
          "ref": "3515d60d-ef5a-4f8f-8b7f-7fe34938c7e3",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "88897f7d-c481-4008-938b-0eb191a41611"
        },
        "item": {
          "id": "122d8b33-ee79-4ae8-bbe7-45a775dc8d81",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2a02066e-566c-4680-94d1-d0d6bdbccd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55cd963-7021-4b44-9d4a-f5497d9764af",
        "cursor": {
          "ref": "95b638f2-206d-41cd-ac0c-a65384366b50",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8a616c4e-4439-49bd-acbf-579012d5449f"
        },
        "item": {
          "id": "a55cd963-7021-4b44-9d4a-f5497d9764af",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c4f13541-e6cd-4c4f-a279-91a182b6b7a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f8ffc3-23ce-427f-83f6-380fbbef1c4c",
        "cursor": {
          "ref": "94ca8340-59f2-4391-b93f-abf0a33c68cd",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f8dda58f-6454-4a3e-b77a-5e7b1047a503"
        },
        "item": {
          "id": "05f8ffc3-23ce-427f-83f6-380fbbef1c4c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fd3cf1ee-a4ed-43fd-a90f-1645cb98ba0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 579,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104dd6dd-4726-490f-bda6-71c0705308c9",
        "cursor": {
          "ref": "959132df-82ff-435a-bda4-5983faad1c27",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a4d58628-ebe1-4dd8-9c9e-7bdccbca7639"
        },
        "item": {
          "id": "104dd6dd-4726-490f-bda6-71c0705308c9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e79c4c19-ce72-49b9-9017-4f73fd5f69b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7622ea38-e514-4432-8342-0f6bf74fa412",
        "cursor": {
          "ref": "5188cb00-e4a0-42f3-9cb3-4964dbcadf93",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7de31052-f580-4907-9158-b56ce588ae55"
        },
        "item": {
          "id": "7622ea38-e514-4432-8342-0f6bf74fa412",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7ab3708a-e402-4f5b-9245-67e99645fd3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a66497-a540-4f40-88ef-0264b37d6673",
        "cursor": {
          "ref": "1c9a61aa-308b-4af1-83d7-81434152ca64",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5fc007e4-8b3c-4583-8a70-9b155c1c8102"
        },
        "item": {
          "id": "d7a66497-a540-4f40-88ef-0264b37d6673",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "22a96ed1-d609-467f-a7d7-052ea13e2de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e08f73-8c37-47ed-bf8b-a68a41eef525",
        "cursor": {
          "ref": "abfc8e61-fca9-4a1b-80f1-38bcb5b55501",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c63e246e-37d0-49cb-b04a-ab9993c5f88c"
        },
        "item": {
          "id": "60e08f73-8c37-47ed-bf8b-a68a41eef525",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b6e5efe3-4017-498e-b6d7-d38c79026535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f5b71b-e131-492f-940b-186bff98213e",
        "cursor": {
          "ref": "6847b07e-5552-414c-bbf0-babbb11cf43d",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "cd55c28d-7de9-4f5c-b740-8ee2a06834cb"
        },
        "item": {
          "id": "e3f5b71b-e131-492f-940b-186bff98213e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2be0b68a-a71d-49d1-b07a-61b2cf126cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a73648-2272-4433-ac48-8fe69c99add4",
        "cursor": {
          "ref": "b76c5415-88b9-4f0e-85e8-07e69e6335ea",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "49a53bbf-eb95-4134-a4f6-c335a2de31be"
        },
        "item": {
          "id": "d9a73648-2272-4433-ac48-8fe69c99add4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "28986a6f-0242-4b9a-af68-71c620bd451e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ffaab3b-4094-476a-be8d-46d3c453cb46",
        "cursor": {
          "ref": "71d3ff83-d42a-4ab7-8f85-6fd39d297ef6",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "41389269-7e84-4eaa-9589-4329a4f0c1c8"
        },
        "item": {
          "id": "5ffaab3b-4094-476a-be8d-46d3c453cb46",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e3b213f4-f61a-472e-9d70-28f43ec4d209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7cd46f-8afd-4ed5-b6ec-fe71f8ccecc0",
        "cursor": {
          "ref": "5c8c0c4c-3a07-4b21-902d-5c493ce38212",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5c603056-ee0e-493c-9501-e21751736c12"
        },
        "item": {
          "id": "bc7cd46f-8afd-4ed5-b6ec-fe71f8ccecc0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5978b026-6726-4992-9937-d3a9b68d9b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42021606-b2b0-4202-bc63-1f6b09c1e8bd",
        "cursor": {
          "ref": "8b061ca6-e6e9-4299-838a-c08b1f405a60",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d2f0e64a-8a30-44ff-b461-1ff37dda287c"
        },
        "item": {
          "id": "42021606-b2b0-4202-bc63-1f6b09c1e8bd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7f759cf9-dfd1-4d0b-9bc6-7f262b55d6e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078cc750-2107-4c90-adf0-9a5a22435616",
        "cursor": {
          "ref": "fde7e15a-a7fd-4e18-b34c-7e97d2bad58f",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f56da127-903c-4c2d-ac45-621f1085504c"
        },
        "item": {
          "id": "078cc750-2107-4c90-adf0-9a5a22435616",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e7bb81fa-24da-4cd5-92c9-8119a78ea6d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed82f78-642e-419c-a036-198e06b2fd0c",
        "cursor": {
          "ref": "f1a4f2dc-d71f-45f8-a600-68c41a355df3",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b1d84424-6351-443c-aefc-81411f84a3da"
        },
        "item": {
          "id": "aed82f78-642e-419c-a036-198e06b2fd0c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "daa72c09-c011-49ad-94e3-21dc6b7c3341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9517582b-1806-4136-9875-7e5db616343b",
        "cursor": {
          "ref": "12d5609d-ecc7-4914-93fb-1fcec693b883",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6cec5e1d-503e-4076-8eea-87bd810bef02"
        },
        "item": {
          "id": "9517582b-1806-4136-9875-7e5db616343b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6265b110-d2a8-4768-bdbc-21d602932141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5ef876-ba70-4b0c-8520-2894e3492a0e",
        "cursor": {
          "ref": "49ec0031-3430-4bec-85d5-fb7ba29587a6",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8945997d-16be-4d5b-9692-3eda96944a2c"
        },
        "item": {
          "id": "9f5ef876-ba70-4b0c-8520-2894e3492a0e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c13d1994-defa-4def-adc2-0ed83c3e1938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d86e33b9-93c9-49e9-80a5-805e39aaec50",
        "cursor": {
          "ref": "39039e95-2531-460b-a39f-8852720e147f",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a5d1ce0b-dc4d-4738-90a1-ce25eb713626"
        },
        "item": {
          "id": "d86e33b9-93c9-49e9-80a5-805e39aaec50",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ed13fe37-c22a-4641-9547-cbc752fff373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e90a69dd-f762-41c3-91ef-9bec83a14d81",
        "cursor": {
          "ref": "9cbdb744-ddb0-4488-9914-20ad267e9eea",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e7030bb8-f13e-41d8-80dd-4f79016b1eab"
        },
        "item": {
          "id": "e90a69dd-f762-41c3-91ef-9bec83a14d81",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0a553b3e-6b9a-4057-8ea7-afecb852f290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73439303-1c8a-400f-a21b-474ce724bae9",
        "cursor": {
          "ref": "696f778f-497a-49ce-b359-9a02853a1c68",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9f8c8821-27b8-4964-b6b4-f8b12dceba45"
        },
        "item": {
          "id": "73439303-1c8a-400f-a21b-474ce724bae9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "87f92096-8b06-4d0c-9da1-3678f29fd1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec61d04-a706-48c8-8f08-4592fb6431a1",
        "cursor": {
          "ref": "e1f28d17-bb53-46c4-adc7-5e2acd925111",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bfa97327-3782-4843-b99d-81be5ead7fdf"
        },
        "item": {
          "id": "dec61d04-a706-48c8-8f08-4592fb6431a1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e3b937d8-75c9-4b58-a22c-984077393280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db9f117-1984-4878-bea3-e626337bfc4d",
        "cursor": {
          "ref": "ced69f87-a257-41e6-9d64-dbca632ef884",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3f8f2e65-77ce-4d14-9c49-7ff5fddce43b"
        },
        "item": {
          "id": "3db9f117-1984-4878-bea3-e626337bfc4d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5da2517f-4c40-4a04-b699-2239246cb79a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a05c81-83f2-43fc-ab47-45416969273c",
        "cursor": {
          "ref": "531974a6-c93d-471b-89d9-dde82a2dc187",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f6191e0c-a620-4286-9b21-30a7b1bd4546"
        },
        "item": {
          "id": "53a05c81-83f2-43fc-ab47-45416969273c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b234dda0-31bc-4598-a619-0df09823cde4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d18ccf-46d5-4782-acc4-f391f3cf3442",
        "cursor": {
          "ref": "8f2c45cf-cb60-4be7-aab6-47355e752e0e",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f8c2f3b4-78e7-4710-b34e-0c61986bf9b4"
        },
        "item": {
          "id": "03d18ccf-46d5-4782-acc4-f391f3cf3442",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1f77944a-c3f9-461a-a6d4-831cc6b9717b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345d9d5f-21dc-4020-b9f4-f6c23436be1d",
        "cursor": {
          "ref": "87fce447-ec25-42a0-8a59-59367142d038",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "eb67c733-9f5e-4bb3-92f9-a2316bce7438"
        },
        "item": {
          "id": "345d9d5f-21dc-4020-b9f4-f6c23436be1d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f47062ba-27bb-4860-8733-23cc92e97445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec648197-5aad-4edd-bc30-f80a68429a34",
        "cursor": {
          "ref": "6398d15c-5ab4-4b3c-aeeb-d5cc19b58ba9",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cabf9d5d-25fd-460a-8f6b-d487d82cb0cc"
        },
        "item": {
          "id": "ec648197-5aad-4edd-bc30-f80a68429a34",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f2287d50-9eb9-4358-9da0-d1388f6192f7",
          "status": "OK",
          "code": 200,
          "responseTime": 187,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "bd46f791-20f4-4b4b-bdca-ad8b22f35726",
        "cursor": {
          "ref": "b95b500e-6f80-4fc1-8815-5e45d9743fd0",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2af85a36-06ae-409f-bd0d-25d61a696edd"
        },
        "item": {
          "id": "bd46f791-20f4-4b4b-bdca-ad8b22f35726",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "90a4906b-3d89-452c-97e0-5dd835507346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1937260d-1976-4f69-b9e8-815e51740fbf",
        "cursor": {
          "ref": "68fbd54f-ede2-4203-bee8-dda9da7fdb63",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c4124d22-f18f-4196-9f64-8315e6898f20"
        },
        "item": {
          "id": "1937260d-1976-4f69-b9e8-815e51740fbf",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3ce46a24-328f-4a14-bfd6-5b5684bded19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7421f3c7-b5ee-4897-b856-b91e473a21c8",
        "cursor": {
          "ref": "1ec02dc3-3559-4cb8-bd53-bdd321002c7a",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "05b7d799-0990-46c8-899f-f1df09b16789"
        },
        "item": {
          "id": "7421f3c7-b5ee-4897-b856-b91e473a21c8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "304b4bf3-2468-4093-8b4f-39bb53a591f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43c07f9-1a25-4ba7-8a10-7496e2c3748e",
        "cursor": {
          "ref": "e529f53c-22e0-49e1-b2ee-a0663d882717",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6494b03b-de40-4653-b27e-cf490631c3ce"
        },
        "item": {
          "id": "e43c07f9-1a25-4ba7-8a10-7496e2c3748e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1a730611-0201-49ef-81d1-6a5be5cedd2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d0b5ec-2ac5-4e44-bc2c-c252989648fd",
        "cursor": {
          "ref": "8a07966f-fbf1-4ea7-86ca-63b09667f01a",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "abc90424-e553-45d9-a5cc-40fac7f766d5"
        },
        "item": {
          "id": "39d0b5ec-2ac5-4e44-bc2c-c252989648fd",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c671978e-cb1d-46af-aad2-6ad80e61bbfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fcc7979-ade7-4a7c-8d3b-6354ade1af4e",
        "cursor": {
          "ref": "ef95ee98-a8a4-4a1e-a155-a86f3486bb68",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "af208011-e091-4272-86d5-ec18a7237093"
        },
        "item": {
          "id": "6fcc7979-ade7-4a7c-8d3b-6354ade1af4e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "0d17938b-0870-4cde-83de-fb59827be392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3670706-1a1a-425b-8034-c749b888ad4d",
        "cursor": {
          "ref": "bca67093-f16c-41ee-b256-d07d084699aa",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0619eeb8-38db-4766-8e78-7face4e2b7be"
        },
        "item": {
          "id": "b3670706-1a1a-425b-8034-c749b888ad4d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "129f21e8-a1d3-4804-9607-514b8bcf2f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e37759-b58f-4145-ab41-d86a4cb05387",
        "cursor": {
          "ref": "447a3522-d3ab-44e7-ae43-c91220f15068",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "77f61ceb-2986-49ad-88e0-593c961e2f10"
        },
        "item": {
          "id": "64e37759-b58f-4145-ab41-d86a4cb05387",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6b87cdd6-2865-47ec-bb70-4110083f4952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc48fc2c-75f6-44a4-bda4-82302f2bceb7",
        "cursor": {
          "ref": "bb88fe41-b2b2-40a0-ae38-3368818e4300",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "42bb1729-b17f-41bf-824b-e3d99ae1ee64"
        },
        "item": {
          "id": "dc48fc2c-75f6-44a4-bda4-82302f2bceb7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f36525fa-7db8-4f34-9049-13b405fe0aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b2229d-4c4f-4aba-8a77-8cfdd0025472",
        "cursor": {
          "ref": "27b54b5d-26a4-472e-80ed-649d5e910c11",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5c8c7129-e222-4878-a723-e023ebf23149"
        },
        "item": {
          "id": "f9b2229d-4c4f-4aba-8a77-8cfdd0025472",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "35de39ad-6918-466d-9c00-d3a8f782a81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4e5f21-7038-4ac7-86a2-6c23fc94c910",
        "cursor": {
          "ref": "c17cdc16-07d9-474e-a06b-85a33a05e067",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "406b51d0-f1ec-4ce2-913b-798bbc4ce693"
        },
        "item": {
          "id": "6f4e5f21-7038-4ac7-86a2-6c23fc94c910",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7c9b7914-c9f1-4a00-b222-95f07a8907b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb8a8b5-f0f5-442f-b7e7-9ff27fc27f4c",
        "cursor": {
          "ref": "ad1f447a-04cd-4404-8e50-3f9b9ee03abf",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1d9c9b14-2fe3-43e0-aca2-90507f7039b4"
        },
        "item": {
          "id": "9cb8a8b5-f0f5-442f-b7e7-9ff27fc27f4c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "40cf5d29-3811-44c6-8f22-f874a849dcb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf10e47-102b-496c-8b49-99dc9d360f95",
        "cursor": {
          "ref": "75001433-bf52-433b-99be-5a645b202428",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4b292a7f-8d4d-4702-ab86-c494c777ba51"
        },
        "item": {
          "id": "eaf10e47-102b-496c-8b49-99dc9d360f95",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "67500748-1b85-406c-a6e2-1ee885517a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddfe5a16-16f0-41e8-b1a2-47e1455768a1",
        "cursor": {
          "ref": "a6275cf0-f4e1-4c54-b211-c376fd63f934",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "70599db4-943c-4712-978d-c22dc13e41cb"
        },
        "item": {
          "id": "ddfe5a16-16f0-41e8-b1a2-47e1455768a1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "db8b22b8-d825-4a09-a68c-424f2301b42d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb7d08e-f0bd-42e3-af3b-f2fee5647314",
        "cursor": {
          "ref": "1da0cecf-143d-489a-9b6e-a699a3e99eef",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e7da374c-e2e0-4be8-8436-b4c20ebd229a"
        },
        "item": {
          "id": "4eb7d08e-f0bd-42e3-af3b-f2fee5647314",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "48eda1c0-0c23-46ff-807f-bb78a6b6e9d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf0311c-3ce2-45cd-9e24-206bcd31b503",
        "cursor": {
          "ref": "b6a79264-2b2e-4bba-8ebb-37cdc6a7f457",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "08febe27-2025-4e3f-a7c6-0d221a631016"
        },
        "item": {
          "id": "2cf0311c-3ce2-45cd-9e24-206bcd31b503",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8ac281c2-5ba3-4fa2-bcc9-f10051258e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4acbd1a1-4652-464c-90d6-848b863413b0",
        "cursor": {
          "ref": "d3f674f5-97cc-4407-9697-148822a2c7f5",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a3cd9f44-3276-485f-a428-3946ca822139"
        },
        "item": {
          "id": "4acbd1a1-4652-464c-90d6-848b863413b0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "19864ea3-4fb2-4eba-ac68-32d37f512345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfbc651-e85b-4e86-a5b8-af18f55de76c",
        "cursor": {
          "ref": "273d837f-99a8-4a58-8ddc-9eaa16a4c506",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8cf8edb5-56fe-4a94-9741-17ace416b2ff"
        },
        "item": {
          "id": "8dfbc651-e85b-4e86-a5b8-af18f55de76c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "12aeff73-b8d9-4575-a241-e102a4d6fed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39b15ee-a546-4a08-9485-2d237d7ac74d",
        "cursor": {
          "ref": "8856ad20-1e4d-4652-92b1-7a863c6b48e9",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a4db4398-864c-4111-ab00-ec1bc0622765"
        },
        "item": {
          "id": "c39b15ee-a546-4a08-9485-2d237d7ac74d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c51ef58c-5ae8-42bb-b001-4329651515b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfbde6c-dd52-4644-acf2-5b733ca92bb4",
        "cursor": {
          "ref": "4bc1ab96-9bf9-4fcb-a5f3-e2d9ba28e522",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "94f3437a-861f-4ebe-a5cb-16d7780dd95e"
        },
        "item": {
          "id": "dcfbde6c-dd52-4644-acf2-5b733ca92bb4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e24d96cf-c91f-4b83-be36-355c5c296c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9898aeec-29ec-478f-bc00-c77c55040c68",
        "cursor": {
          "ref": "0cae5fc6-9b7a-421e-8426-1d8aeceda067",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "32115d10-4f37-437c-b704-5432f1a1deb1"
        },
        "item": {
          "id": "9898aeec-29ec-478f-bc00-c77c55040c68",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bb396ed0-2de1-41a5-9bc5-4f088ad16887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4567a91d-273e-4b70-8e5a-7365178e3427",
        "cursor": {
          "ref": "ea28ed2b-4046-4acf-ac6b-74cfe3abe90a",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4f07bec0-b28e-4487-a320-89a60002c12a"
        },
        "item": {
          "id": "4567a91d-273e-4b70-8e5a-7365178e3427",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "26b2282d-4f61-47ab-92a9-46cfecb7a2f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae64f58-3187-4b83-bcec-00be51662a0c",
        "cursor": {
          "ref": "95db6849-e53c-4264-9f0d-329943c78394",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "29e71ca4-c3b5-4583-a284-12b0d553cb4b"
        },
        "item": {
          "id": "8ae64f58-3187-4b83-bcec-00be51662a0c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "09fe112f-3e7e-4f50-9a67-0663fb2bbf34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fd16d6-8c05-4c8c-88c6-beac42a5d077",
        "cursor": {
          "ref": "0b7f6108-a835-4771-9ee7-cc3c9e3b9b91",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "fd179691-9e16-4588-870c-2c266e762252"
        },
        "item": {
          "id": "87fd16d6-8c05-4c8c-88c6-beac42a5d077",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9fe5e6e2-3f38-4608-9d64-7e98300122aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad1a740-14a5-43c8-b335-670e26c6588e",
        "cursor": {
          "ref": "b9ab9b29-635b-4eb0-8a40-2387c63a1905",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e814fac0-fb6c-415c-80bd-33669a4f5fca"
        },
        "item": {
          "id": "6ad1a740-14a5-43c8-b335-670e26c6588e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4ae0d813-d4c6-4289-8287-4cd032e9c01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541571c3-3f94-4366-8378-e7fcd907d028",
        "cursor": {
          "ref": "5a4f50dd-a385-449b-875f-58e748bacb33",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c4b1a4e8-d75f-4d08-b5c9-78ee188f3738"
        },
        "item": {
          "id": "541571c3-3f94-4366-8378-e7fcd907d028",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "dacbcf38-2497-4f25-a8d9-97685c28b762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893b1278-552c-4bee-9b78-b01848253dde",
        "cursor": {
          "ref": "f40dcb21-3b5c-4337-9431-cf2ac1b2c817",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8473c0c5-bfae-49ae-870f-ee9f8c3b1b8a"
        },
        "item": {
          "id": "893b1278-552c-4bee-9b78-b01848253dde",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "088e6268-c3c1-410d-bded-87c048e53e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1738d84-9432-4e08-8775-85ccf7926efc",
        "cursor": {
          "ref": "7ed93bf7-b50d-44f6-823a-bbee43af4754",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "64b00dd1-9f1e-4dc6-bf6f-0cf4136e115a"
        },
        "item": {
          "id": "d1738d84-9432-4e08-8775-85ccf7926efc",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d87510cb-34e6-48b2-a8b4-e0146a16186b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d5348f-a035-4191-a49c-1f879fad4567",
        "cursor": {
          "ref": "94eeb8bf-e367-4997-a0de-4c1abfe882be",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3b1b4e1b-bd93-40f9-acb6-73d96571c16b"
        },
        "item": {
          "id": "95d5348f-a035-4191-a49c-1f879fad4567",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ca17b7f3-cdfb-4b91-a194-f1c20daa683e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dceb692d-fe40-4426-b55a-f9fe5df2b814",
        "cursor": {
          "ref": "4e6b96a9-887f-436a-a686-ebf24868980f",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "299571b9-4214-424a-8da1-9d4ece35aec8"
        },
        "item": {
          "id": "dceb692d-fe40-4426-b55a-f9fe5df2b814",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "dbf5bfbc-4895-42d0-873f-c998e67eb3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81128c01-5601-4537-8d22-65e5141ed2bd",
        "cursor": {
          "ref": "67b2caad-b585-428d-984b-66f18d502c14",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "76245183-083c-48a4-9932-d55b560d2539"
        },
        "item": {
          "id": "81128c01-5601-4537-8d22-65e5141ed2bd",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "982e0afd-8a69-4d2f-8afa-62355b702cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b98057-cdbd-4f94-bb17-062a1c864ba4",
        "cursor": {
          "ref": "5cf67538-264b-457a-9564-508d01b02141",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9c74eb41-bb6a-465c-91f3-4fa43b10e728"
        },
        "item": {
          "id": "71b98057-cdbd-4f94-bb17-062a1c864ba4",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f78d0f57-4b8d-4771-8ddf-3df2c0e47b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4260000-6bfe-4adb-ab94-141f5e4ee971",
        "cursor": {
          "ref": "82f79708-b851-4d8c-b3ed-2cca90fb746f",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fee4fd08-4429-4fe8-8f93-5f2b6c55771e"
        },
        "item": {
          "id": "a4260000-6bfe-4adb-ab94-141f5e4ee971",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "138724f8-31e7-45d3-be51-8b5a97f636c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e6fae3-3297-40e3-8ba3-9b8dde1383da",
        "cursor": {
          "ref": "ded5f02e-eda9-49c0-a102-a570f203d816",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e28e01df-ddab-48f1-b1ff-0d8ea7072c4b"
        },
        "item": {
          "id": "d9e6fae3-3297-40e3-8ba3-9b8dde1383da",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "76cb8f5a-e948-447e-9cf7-1a9bafc04a90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433cfce9-5d8e-4d6c-b382-45ab6b8550b7",
        "cursor": {
          "ref": "b7fab5d8-d781-445b-805a-a14698bc8fc8",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "71809bfa-9970-4342-a9f5-ce0311f82e8b"
        },
        "item": {
          "id": "433cfce9-5d8e-4d6c-b382-45ab6b8550b7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "579b9085-c157-44b4-ba96-d63e96b676f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5ccccd-2fd2-4cde-a536-293f19a4f0b4",
        "cursor": {
          "ref": "3609fe12-be06-404a-b061-552d075843f5",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4a37bf40-b8cf-40ac-b6e0-1f5a30d09843"
        },
        "item": {
          "id": "ad5ccccd-2fd2-4cde-a536-293f19a4f0b4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e33e8cef-1242-4c3c-9605-9f6c0edf9f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216a5deb-6dec-4f29-95fb-d671a05fc0ee",
        "cursor": {
          "ref": "6ea79c70-ca40-4bc8-b301-54f7eae4ee9c",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "aac942df-d36c-46c0-9955-9da28c45caa3"
        },
        "item": {
          "id": "216a5deb-6dec-4f29-95fb-d671a05fc0ee",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d0d20a49-5f64-4dda-9a8a-db8170bcf405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32dd9dc8-10ed-4c97-b057-fb03a089cf79",
        "cursor": {
          "ref": "f6ebabff-25ad-44b9-afdd-ac8ea7d8cd32",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b5ba9620-d76a-47bd-aa1e-9bdbb55a39c6"
        },
        "item": {
          "id": "32dd9dc8-10ed-4c97-b057-fb03a089cf79",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "26c58e56-06f5-4e05-8cc0-936058bc8d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c3d22ea-ad41-4bf1-835a-7f89cc6b5c14",
        "cursor": {
          "ref": "f0a08eba-5cf7-49cd-83c6-2e617aaf611e",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3b6f5178-3af0-4550-815a-342a41a5cb26"
        },
        "item": {
          "id": "6c3d22ea-ad41-4bf1-835a-7f89cc6b5c14",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "78c658d6-2f4b-4c91-9478-b1213d15171d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94e71de-247b-4cfc-951f-e4c8897e4de2",
        "cursor": {
          "ref": "2163ae4f-c62c-4ca3-9e52-6820ebe3d3f9",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "21b528e8-ca6d-43f7-abbe-be869f8d6e11"
        },
        "item": {
          "id": "f94e71de-247b-4cfc-951f-e4c8897e4de2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ba2d2b4e-de9f-4ece-a2c4-854b64a03572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0539e43-0244-4ab8-9c98-a07bf0ca8955",
        "cursor": {
          "ref": "f751d6f6-1bb1-415f-9c3a-bb917276fc77",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "03473107-4052-4e10-9792-c599c9a1166d"
        },
        "item": {
          "id": "b0539e43-0244-4ab8-9c98-a07bf0ca8955",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9ab6355f-6165-4092-abb6-4d4b30d3c691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36032c5a-248e-4781-9d86-d0e86e68422e",
        "cursor": {
          "ref": "d794a3d1-cc54-4ad2-afc7-527db74a386b",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ef8a2a45-3224-4c49-a53f-ee2e61ecc51b"
        },
        "item": {
          "id": "36032c5a-248e-4781-9d86-d0e86e68422e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "dac1cf1d-5d8f-4465-879f-a4da0748c3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d414830b-b309-4340-9abf-cfadebeb94de",
        "cursor": {
          "ref": "0217badc-5d92-43d8-812c-a48b26755cb5",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f0790cb0-bdfd-4435-b5d3-5b74d10b96fa"
        },
        "item": {
          "id": "d414830b-b309-4340-9abf-cfadebeb94de",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6e42e12b-4184-4dc0-be16-02ffc18d4daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385c06a7-7327-44b9-8410-c13ec1dec6e8",
        "cursor": {
          "ref": "d7dafb52-2324-4fee-8af1-793729f14df7",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f760a65b-20b6-49c7-87bd-9dd32f974f8b"
        },
        "item": {
          "id": "385c06a7-7327-44b9-8410-c13ec1dec6e8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "99158a6f-c9c0-475b-a80e-488ff89fdab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c25ab5-a8c4-48f7-bf29-fbd7f065a67d",
        "cursor": {
          "ref": "2cfab502-8b6c-4a56-bdcf-0c03a97e67dc",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "358dd24b-7298-488f-a942-eece6c12d6d1"
        },
        "item": {
          "id": "56c25ab5-a8c4-48f7-bf29-fbd7f065a67d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a44bd130-4bdd-4e26-bb8d-535cee8caf00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188fa45a-7470-4a63-8f42-f27215685652",
        "cursor": {
          "ref": "a930031c-0790-4544-bd0f-8347517a9d21",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fac32fa4-f54b-4ca1-8abe-422a2cf4b7cc"
        },
        "item": {
          "id": "188fa45a-7470-4a63-8f42-f27215685652",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c5447230-7e20-4de4-8cbe-a6bc152f3e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc4a61e-42cc-4912-8874-880f673c6b5d",
        "cursor": {
          "ref": "a159b7ef-d990-4033-991e-6420090ee600",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "83da3a3e-eba0-4a03-ae3d-3c237a9efbdd"
        },
        "item": {
          "id": "6bc4a61e-42cc-4912-8874-880f673c6b5d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c8c3912e-11cf-41c9-8145-bd171d85d909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09581aa4-974d-48a9-bbd7-275c34339e27",
        "cursor": {
          "ref": "da319815-fb2c-4efc-883f-a6f23582fc93",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "70a737d6-49b3-4954-9e68-ad5cbbc9a054"
        },
        "item": {
          "id": "09581aa4-974d-48a9-bbd7-275c34339e27",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2cda9115-b577-477d-bf3c-2527159c58a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e97dfb1-45f8-4c0a-9fcf-778e13076c02",
        "cursor": {
          "ref": "77695b0c-5a34-4ac4-b672-25977307dd35",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4ecee451-7b04-4050-9336-7ce6295415a5"
        },
        "item": {
          "id": "9e97dfb1-45f8-4c0a-9fcf-778e13076c02",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "412bd2d4-01ca-4762-8dc0-031002da1f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c540456-4934-4ab0-ac32-c304cb8037f1",
        "cursor": {
          "ref": "e6983e65-8da1-43f6-9c8d-bb21c7f20690",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0d2dc3ec-0756-49f9-bb7d-bba4505906ae"
        },
        "item": {
          "id": "5c540456-4934-4ab0-ac32-c304cb8037f1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b9a4b88a-61e4-48a8-8a3d-ed26786d6683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2d928f-5729-4d3a-b594-5143307b4541",
        "cursor": {
          "ref": "c59c9ebc-77ed-4550-b64a-3c70abbf03b1",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "12d69c54-9ae3-48b5-8bf8-fdd0868e77f3"
        },
        "item": {
          "id": "1e2d928f-5729-4d3a-b594-5143307b4541",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7f333029-6aec-4be6-94a7-91731c9775b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d5fd5e-7df9-4420-9349-d94a59d1930a",
        "cursor": {
          "ref": "510d0aff-9e4d-4885-afbb-310db641005e",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "51810c19-1c68-471d-869a-3b4c0c2cf9da"
        },
        "item": {
          "id": "a9d5fd5e-7df9-4420-9349-d94a59d1930a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "80c18032-409b-4770-bf8b-ae2f4ca3ad6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd98e02-e7bd-41b3-b01e-f70f42aee729",
        "cursor": {
          "ref": "e15a8f04-eb4e-484c-814f-24b0013ceae5",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d47f06a8-dde3-4b9d-9b33-1bb829c23189"
        },
        "item": {
          "id": "6fd98e02-e7bd-41b3-b01e-f70f42aee729",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "04f00b8d-1b08-4930-88d3-839409603c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe9e19b-1b0e-4d49-90a6-02c32ceb2809",
        "cursor": {
          "ref": "a5fff7a7-c403-46ae-8f53-0258926d6f79",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f2947aeb-0db8-4f48-bcaf-6184f95ff5bc"
        },
        "item": {
          "id": "bfe9e19b-1b0e-4d49-90a6-02c32ceb2809",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f935522d-d228-4778-9764-42069f0c26c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35640328-591b-4518-b6d9-273164b3db2f",
        "cursor": {
          "ref": "c8d5e43f-3877-4af1-bd5e-2689c2e46f84",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0aaec790-ba70-417a-a8ec-ca9f2ecf3fa5"
        },
        "item": {
          "id": "35640328-591b-4518-b6d9-273164b3db2f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "536b3275-16ee-480a-a927-ba7ac6143eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c252c7c9-fd10-484c-91cf-8ef8ba882dbb",
        "cursor": {
          "ref": "94ebd4a5-b6b7-4b5f-a144-155769301d1c",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c5726450-dafe-4167-85c6-7688c41bacaf"
        },
        "item": {
          "id": "c252c7c9-fd10-484c-91cf-8ef8ba882dbb",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "37fe675f-e1a7-44d3-83d6-176a25c3d149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b92136a-1fca-4b8d-b512-a5982f52ca1e",
        "cursor": {
          "ref": "703580df-de45-4d9e-bc21-10d01020e4f1",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "87dd68f5-a680-49fb-b88a-99aa7498121b"
        },
        "item": {
          "id": "6b92136a-1fca-4b8d-b512-a5982f52ca1e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ee3f0a58-20a6-48ed-a24b-d9de4e154ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7691a4e-4f55-4062-842e-8e4f12290bc6",
        "cursor": {
          "ref": "c206ff1a-544a-4a6e-9b8f-b807cb628a9a",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e7dd9367-e2b6-4adc-a590-84716358d263"
        },
        "item": {
          "id": "e7691a4e-4f55-4062-842e-8e4f12290bc6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "768cd272-f78c-440b-9fbf-0f7b305b4f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2016af-96d4-48e7-9e0d-20c640ab969f",
        "cursor": {
          "ref": "d5a39368-4f1f-480e-96cb-e850f21c3eb2",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d14aec3c-c7b4-447f-8a76-d37c66a3a84d"
        },
        "item": {
          "id": "dd2016af-96d4-48e7-9e0d-20c640ab969f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "192ec29a-ab75-475d-a5d1-a63672f73bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8eb1cd4-c08e-4dfa-9004-1085c0e07b8f",
        "cursor": {
          "ref": "221b3124-78d4-4dad-9e05-a6a87b25cf40",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f7e41c65-8872-4b09-804d-81297c0398be"
        },
        "item": {
          "id": "f8eb1cd4-c08e-4dfa-9004-1085c0e07b8f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "99ce1d2c-f3ed-4986-9811-22838f929566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1875e9f-2c2f-49af-b94f-8331e9aba46b",
        "cursor": {
          "ref": "b399779c-7503-43d5-9dec-8c41b6842c14",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "43321bc7-636b-493b-a780-c80ee77834aa"
        },
        "item": {
          "id": "a1875e9f-2c2f-49af-b94f-8331e9aba46b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fe031235-df92-42ee-80ec-926729cd0a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90d7827-6f15-421e-be01-de0a165f653e",
        "cursor": {
          "ref": "1cd757c9-6817-40ca-9107-41413bf011a6",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "40f902c4-0c06-4351-9421-ea9465bce130"
        },
        "item": {
          "id": "f90d7827-6f15-421e-be01-de0a165f653e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a837de11-74cd-466f-8550-0d576a533790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28982e1-370f-4813-89cc-d5317b1f1bcc",
        "cursor": {
          "ref": "486c4a16-f7a5-4d3d-8c33-4c4eb00b28e5",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7a61bfdc-71bb-4e9b-bf60-11c09d05378a"
        },
        "item": {
          "id": "f28982e1-370f-4813-89cc-d5317b1f1bcc",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f7962067-8b70-4389-8952-6e467aa2fc45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283df484-c215-424e-91d4-887a26f6dc70",
        "cursor": {
          "ref": "f70a5091-371b-47fa-9d98-45409af3a3d1",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d27c78f2-f3fe-4165-98cc-7f54917f13c9"
        },
        "item": {
          "id": "283df484-c215-424e-91d4-887a26f6dc70",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4d52fdf6-cc38-4c7a-964f-3dfe208d3872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9f065f-f9e2-448f-9de7-5fc65f0b0be6",
        "cursor": {
          "ref": "82f576e9-00f8-4817-93ea-6b356770dc03",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0292b509-c40b-415e-8a08-1cb46e50e87b"
        },
        "item": {
          "id": "5e9f065f-f9e2-448f-9de7-5fc65f0b0be6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f0d3e9da-d07a-4664-be20-22abda1ee7ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1bd3f9-c2c0-4be8-88cc-565f6050102a",
        "cursor": {
          "ref": "94813636-d278-4f8c-9158-da22ffec8f6e",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7503ea10-7159-4a51-a46a-94dacaf55235"
        },
        "item": {
          "id": "0c1bd3f9-c2c0-4be8-88cc-565f6050102a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "694f36ee-52d0-4a88-8e2e-31d9ba22c3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eab9299-9c5a-42a9-9aac-0cba6f58a59e",
        "cursor": {
          "ref": "06316281-ea98-4510-821c-97b6ad638d74",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6e136968-3c1c-4435-8418-ee61361f2758"
        },
        "item": {
          "id": "7eab9299-9c5a-42a9-9aac-0cba6f58a59e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a88ab5d4-20cd-4acf-b88c-4711f51828c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88a211e-de0d-4b9a-ba79-237298488668",
        "cursor": {
          "ref": "ab25b565-8eaf-4c9e-9224-54070d3f9f90",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "74cc92c4-5813-4525-946c-fd275bc852bd"
        },
        "item": {
          "id": "f88a211e-de0d-4b9a-ba79-237298488668",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1914c505-dc89-4d64-945c-428e57457102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f771e1-e522-410a-b7fc-710c959b9744",
        "cursor": {
          "ref": "94f8b745-efc3-4377-826e-b8acab79f5f8",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b3e83969-2fa3-4286-a5fc-b39e8f79c9dc"
        },
        "item": {
          "id": "00f771e1-e522-410a-b7fc-710c959b9744",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1da4510b-4f57-45a9-a9e4-6dc817017e8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc8903c-79f2-4374-9bd3-60ba8e2a7a55",
        "cursor": {
          "ref": "47bbbe9d-d64d-4028-a7d1-6e60255a4bc4",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c13b9102-565e-4197-934e-bb5117eb06f5"
        },
        "item": {
          "id": "1dc8903c-79f2-4374-9bd3-60ba8e2a7a55",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "88717071-d13d-4f46-940d-d7ebc5bad9e3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 18,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfc0d36-02d0-4ee8-b331-60cfe23cf0fe",
        "cursor": {
          "ref": "81f0b211-039d-4d9b-b252-887365314f2a",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d005e883-31b6-4888-8718-c4d0f9b96f26"
        },
        "item": {
          "id": "ecfc0d36-02d0-4ee8-b331-60cfe23cf0fe",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a78a4b5f-be96-4d5d-8380-860c01ebaf66",
          "status": "OK",
          "code": 200,
          "responseTime": 233,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6309cd-c701-4297-8b6d-70d166c15a02",
        "cursor": {
          "ref": "36dcf7a5-b250-4f2b-9561-42254f43496a",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0463f2f3-3963-4ee6-a6cf-047df6cf9d90"
        },
        "item": {
          "id": "4f6309cd-c701-4297-8b6d-70d166c15a02",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9e010ee6-5300-4413-b522-71fba454155a",
          "status": "OK",
          "code": 200,
          "responseTime": 374,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca742fa2-a567-4011-88ae-f2a770172c66",
        "cursor": {
          "ref": "14fd2d1a-fa97-4a83-ad3f-72039a4379ea",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e3b40eab-4c1a-400b-b1eb-95702dbf51a8"
        },
        "item": {
          "id": "ca742fa2-a567-4011-88ae-f2a770172c66",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "d4a2d0a0-9d2b-4294-a2b3-da335c7aca92",
          "status": "OK",
          "code": 200,
          "responseTime": 589,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b127729-fb41-4364-b154-ada3c668e22d",
        "cursor": {
          "ref": "3caf95e1-13d4-4a73-aad6-5f6fde265b03",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "463850c8-c4a8-4892-90e4-bdcf97fb4322"
        },
        "item": {
          "id": "4b127729-fb41-4364-b154-ada3c668e22d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "98cabbe7-e9ef-42cb-a03b-9d346af92045",
          "status": "OK",
          "code": 200,
          "responseTime": 431,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca5e260-8ddc-4e2c-8cac-219176eb9c31",
        "cursor": {
          "ref": "06e5d4d6-aa40-46ea-8c79-6ba791721a4d",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "46611b1d-2f89-4b35-9785-4127cb22b7d5"
        },
        "item": {
          "id": "0ca5e260-8ddc-4e2c-8cac-219176eb9c31",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a9605136-0493-45f9-bf26-54a9735ed606",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca5e260-8ddc-4e2c-8cac-219176eb9c31",
        "cursor": {
          "ref": "06e5d4d6-aa40-46ea-8c79-6ba791721a4d",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "46611b1d-2f89-4b35-9785-4127cb22b7d5"
        },
        "item": {
          "id": "0ca5e260-8ddc-4e2c-8cac-219176eb9c31",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a9605136-0493-45f9-bf26-54a9735ed606",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca5e260-8ddc-4e2c-8cac-219176eb9c31",
        "cursor": {
          "ref": "06e5d4d6-aa40-46ea-8c79-6ba791721a4d",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "46611b1d-2f89-4b35-9785-4127cb22b7d5"
        },
        "item": {
          "id": "0ca5e260-8ddc-4e2c-8cac-219176eb9c31",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a9605136-0493-45f9-bf26-54a9735ed606",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d143ef0-63d7-4cb1-9d70-c1295927ba56",
        "cursor": {
          "ref": "1d9ef74a-799b-4d3f-be26-9e7922f4d064",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c68cbd0b-0773-41b9-9cf9-4d60aaf9355a"
        },
        "item": {
          "id": "5d143ef0-63d7-4cb1-9d70-c1295927ba56",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "bb3cd14c-56bf-433e-856e-cfe171bd4715",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 24,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068336c0-7ebc-413d-a4f2-972f2c662c3e",
        "cursor": {
          "ref": "af8a2b9d-bbb5-480f-9977-1d0e0fb364b1",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5c0b6b69-6571-4c90-8276-f45da1b31da2"
        },
        "item": {
          "id": "068336c0-7ebc-413d-a4f2-972f2c662c3e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2c4ab516-5552-427f-b8fa-b908649afb66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "068336c0-7ebc-413d-a4f2-972f2c662c3e",
        "cursor": {
          "ref": "af8a2b9d-bbb5-480f-9977-1d0e0fb364b1",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5c0b6b69-6571-4c90-8276-f45da1b31da2"
        },
        "item": {
          "id": "068336c0-7ebc-413d-a4f2-972f2c662c3e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2c4ab516-5552-427f-b8fa-b908649afb66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "5af311bc-d624-4956-b35d-0c8635dcb799",
        "cursor": {
          "ref": "9ab89c39-5552-47a7-ac65-fc5c2404d9ea",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ddf57336-4b51-44f4-8141-4aec5d649089"
        },
        "item": {
          "id": "5af311bc-d624-4956-b35d-0c8635dcb799",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "56e6f13f-c0ec-45a1-b5f9-351e05d5bb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "add0ab13-0015-4300-87e7-1db27c817deb",
        "cursor": {
          "ref": "218b2f10-34ce-4133-90dd-a232b6c5f356",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ac40ec54-ecb9-46ad-b1b4-8ec1e65d981f"
        },
        "item": {
          "id": "add0ab13-0015-4300-87e7-1db27c817deb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "616dc81d-31c7-4422-aeb9-09a912f82d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "add0ab13-0015-4300-87e7-1db27c817deb",
        "cursor": {
          "ref": "218b2f10-34ce-4133-90dd-a232b6c5f356",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ac40ec54-ecb9-46ad-b1b4-8ec1e65d981f"
        },
        "item": {
          "id": "add0ab13-0015-4300-87e7-1db27c817deb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "616dc81d-31c7-4422-aeb9-09a912f82d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "08f5cb66-5013-48c2-bd63-732a78c55ad9",
        "cursor": {
          "ref": "d7463847-43cc-430a-a04f-ce872aed71a3",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e83cc3cd-7d76-44ea-ac8f-e386ab18d166"
        },
        "item": {
          "id": "08f5cb66-5013-48c2-bd63-732a78c55ad9",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "d29a75e1-0162-44c8-bb11-5a32638969f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}