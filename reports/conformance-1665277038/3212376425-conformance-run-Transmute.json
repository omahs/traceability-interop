{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3ff83ecb-ce6e-4e33-8209-d03da7a87c92",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "55898306-a986-4907-abdd-a6c6a4ab19cb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8927d85f-4c16-4564-826c-4ccd6917fde3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1022fa1-fbe3-468e-b2d5-4131fc15c113",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3dd17c06-f108-4e55-9bd0-72c9a2b4fe16"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9b3434f5-804d-46ee-8d9e-c2036f7969c2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "15c86c52-7418-486b-99b0-6a3d7e0f7c51"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f7969683-fd5b-4e74-85ac-8a7c1477f417",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a7014953-4a46-4f85-9627-75f4d62881b6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f8399cf-6b4e-4519-a065-af5c49dd96b9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "cfe7d994-8d07-4a97-bfc7-ab863f7a42b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5696fefe-f29c-4f26-bbdf-0591ff15416b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9be901e8-a857-4c24-9d49-fe6ed33f2c53"
            }
          }
        ]
      },
      {
        "id": "629374a2-5c63-4101-ac3f-eb70432bf3ee",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "fe4a9e26-ca4c-425e-b9dd-23c8a1da8ecd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "92cdbcc1-5b0b-4c5b-923f-d3b59cb4359e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "74c8935e-6ff9-4d74-8ae2-ec45fd6e7484",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6f4f6b-4cff-4214-aaa4-fe02955dba11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "853148b9-c34d-46e4-93df-f1d538ab5302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8976bd34-9fe0-4e4e-8377-2d04b76803b7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b27bb4-5030-488e-bb9b-3da1f5db4c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "367b851d-4dee-4745-96b2-016d47b8b93d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185927ac-4905-4f42-8069-002ccc9257c4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669af84d-005a-417f-8302-441fa73afe1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6efb3e1-51c2-4062-93d8-a068007a9718"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d62810ea-cde9-4e41-b283-f490d5c86962",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77c9d1b4-a5a1-469f-b044-5aa044361a65",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c107ec90-2e55-45c8-8641-d9a4ffeed505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a12782aa-cdbb-4817-af8d-a4b492575d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcbe8df0-267f-4b46-9141-c92d3cb9878a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37656eb1-fd8d-4bde-aa18-15a096703a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76bead27-bb94-4791-9e40-ae6f929f6118",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "278c6ecf-116d-48bd-88c4-6cbd1a23a37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b60d5ce8-c655-4793-a2bd-dbcd5a0c2176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1d8f87-1bb4-413a-9e54-375aa2bf5131",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "76f2212e-bd32-431a-ae99-358c4edc9c50"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b9df48bf-7596-4a47-b0f0-1ea9997e4ef2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9a9e8a13-64a5-4423-b899-d9e158ea61db",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3eed7360-bdbc-4833-b6c4-10fc37d61110",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "986aa577-c4b5-4ab7-b28a-ff0a7641f15e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9667f816-89e2-49f7-8c33-2eb7b190537b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "913d47e9-c013-4d79-9cf2-4f04d5431660"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c6524fc-105f-4ff6-9cbc-05dd3037de8f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1d3e89a1-5ed6-45c3-96c1-5d951e51f0f3"
            }
          }
        ]
      },
      {
        "id": "495e4f4c-05a8-493d-a61b-cf6da06c9ac0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "65c02d50-ba21-46b2-b6f5-1a252c69ab90",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7c815415-61cf-4fe0-88c9-c87ef9ffd482",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "cd40fde2-d28b-4d59-8b64-3dfb1d97f715",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a69b66-5d9d-4148-a707-f4bd41d377a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7fe2365-8838-492b-a8f8-d4aae49d3ce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e200cc-a5d2-4bff-8843-3826cd7fc69a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dffe0e45-972a-4296-b4e3-21f10f800b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c47eecc-0b9c-4549-8727-7f5c5f279350",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f32e20-197a-4ef6-9438-6820bda4a5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f4827b-fe88-414b-b1c1-73a44e2bb1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcb5b9b-1745-4ff2-8ac6-fe81e5c18f1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea27931e-d885-40c9-8709-499033d3d2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6642a75-e5fe-44c4-b33e-3ada44b36f21",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aefc6a2-fef5-47bc-8bb2-718ba6da286a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb898eb-deef-436a-9d3d-6d55a0d22c39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aeeced4-4554-42ca-82ab-2863d29cc24c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0c5406c-f2f0-4ef6-9ce1-0a1e72d5efbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa7c0dd-ee9c-446b-9d4b-55f028ddc538",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a3e238-4718-4c5e-83a7-c2802d5e9d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b3ec2ae-3169-41c3-96c7-d69fa09a419a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be8aeff-c797-4ee0-945d-e4b7ce626324",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24e9fe7e-4595-4976-a182-75303353ea2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910d4386-bc2a-44b2-af4c-a35387fcbba4",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbce53fd-1c1e-4f2d-b89d-7027474ce76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32603ccc-2ac3-4f7e-a5ad-b5589bc9c9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139a14ec-95ff-4d46-8aa7-307a648eab83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3edb92aa-66be-44ad-a007-aeedaa78ea4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62886ee-2046-4bd1-a04d-e357cb47aeb6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30403a21-13da-458f-8d78-106db468a8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7bd5826-3dc7-4809-a250-6f5eea5f80f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4685e17b-155d-4fea-b2a0-03b62b7b1ec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d59f49d1-e209-4101-93b5-cc1baa01199c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d616b172-6794-4279-85c2-73c0b4c0e3c1",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf5248e-19e0-4442-90a6-2af66d7c75f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31da6cb2-76aa-49e0-a37f-026a591fb5b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b789008-7256-499b-a80a-5e360891a720",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90e11d18-d15d-4690-ad58-88c06d2f9b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2300508d-eff7-4399-a3cc-841385f90bed",
                    "name": "credentials_issue:credential.type.members:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d106db7-12e7-4a07-b4d4-d12a9095c253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ca5cd6c-8497-42d6-bc52-e97ee7cd8df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf16d6f-36a6-4b36-9fa2-0f3966287980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain at least one element",
                            "rawBody.credential.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "052e9a6f-7413-4fc1-a431-5d89478e2094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802c267f-5449-404f-be1f-03c0f6515215",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d501b25-740d-4452-8335-2df4763cb787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b11426-1c77-43db-985e-31bd802a08eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e8d25b-893b-460b-8ccb-96ac9c906e64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee5f3e95-7b6a-4e1e-a58c-617d054e6ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e454889-5986-46a8-974e-62453b102e5c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2bf818-8770-493e-a2e8-75c87c28f3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "004f2fc5-838a-41ce-b41f-7c2eeb3c99e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd0f085-5682-4a59-accd-003595d6b266",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68b7eaf8-5145-4862-bfe5-3987d4215d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551a1dad-45d0-4c44-9d10-f3e70f524df9",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae494a9-916c-4388-afa2-e67dd8509602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d4f491f-a814-490e-99e0-fad3978ee868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e11319a-d36e-4587-bb1e-3d9fb9510dd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38767097-e006-4325-a647-2addbf602fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de5ea8a-1693-42d7-94e1-1f48c81ab987",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f735df-b244-440e-83b5-10fb0f8825ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50c9ac83-8896-44f1-997a-25187a0033e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c93e691-36c5-4b75-833a-c3e807046113",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "f17746bf-8108-4831-82fb-9baf8d95622f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe49e5d-1bc0-4fdb-8b0d-7e238839af16",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1664fd-f9b9-4686-8ee6-ef427bf3040c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "144b37c1-1cfb-43c5-9b2d-cc62a97ebd0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7209d6d9-7c5a-4106-9889-6702bb34f655",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "d5b5a5cb-30fe-41b7-91a3-d648577f4351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6911ea43-31cf-43f9-ab87-533971d20078",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d790a5b-6d94-42ac-8585-ac42da21856a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f11ab1ba-cb30-4a11-8f3c-6261e4ded201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96bdd041-72c7-4204-bd01-2b584b960648",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f87b8175-1beb-4ed4-980c-6b211455d194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0aa337-2577-4b7b-8703-bea25277ea0a",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5383decd-86c7-4eb3-85c0-c9ef6d394453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f364cb-50cc-4495-a7ce-a656979bac6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c30b212-ce84-476c-a265-9b522d8d13e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c69fe195-5eeb-4aca-96a6-3d0436358bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1c9272-0a8d-45e4-9f53-98b105444c4d",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a59eb9b-e002-4317-9275-c6d6cec6dccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e79bb6f-a6b1-4f0f-b01e-e8d82775f9ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dda0c0f-d8e3-4d83-bce5-7e511d8096cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "4decab3c-11f3-4282-83d9-a40807cbfe46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6736ed26-a18c-4547-b4c2-1189d7dc75df",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c3b80d-88fc-4b9d-afc6-b1d955b46709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dffdd52-2acf-48e4-af32-a2f8d0855714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886b5340-49a8-4c70-a8c3-b893223b904c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "bb57fc31-c02c-4b95-9555-8787346fb494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3bcdc74-d821-4040-888f-a2b09a3396a4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29de3c5c-53ba-43b1-b86c-3b691f565876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca8d7f4-815b-4cdc-a174-f2649aa2b050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "370188fa-33ef-4bfb-91c9-1e94a4c6648d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f58bdab8-c04f-4ae9-8f5e-a017cf3612d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a47c163-7d77-4af5-91fb-35109056d0ac",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff5a0e7-e234-4d91-aefe-f0e5e845776f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd2193b1-41d5-42c0-9852-30dcb889b121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b6e9e9-6c2f-47cc-9181-8b1acfc4c5e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a4534af-bc65-4182-833e-9b94baf3da75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3870224-bdf6-4576-9a29-5f3aedb7ab91",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae444da-c9b1-40fe-9d8d-66525530a992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9efe620a-1b46-4d01-9cfa-addf8d78de43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4dee386-4a44-453b-af5f-212e5a73070e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f87b160-9d53-43a0-bebe-86b64a58cb19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26880b54-feed-474d-ac6b-3e38f6b4890e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3aae27d-fcae-40d7-a161-48e83887ed6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2863e360-c88f-46e8-8c51-0c47d21fa750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13706997-4329-4ded-8d76-5cfd4e131c27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50b3caed-bd6d-46f4-a27b-071e58afe3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f44474-eab1-418a-adef-b4393ec2470e",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eebc4d0-3ce5-47f2-a575-fda23d7b68ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f84807-919f-4e11-92aa-539fef5087af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0463a9f-b02b-4d43-a9ba-fe847e05166e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "990c7e08-e48c-48e1-a9f7-1c79de630247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302b850f-5487-4c6f-8d23-820587426383",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742d254c-bfce-41f7-9317-4b0cdd13637d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d90550-02b6-4a32-94a6-3966d1d75ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017fcaba-d074-40f6-a8c1-411ece15e614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99b3375b-a2d0-4cdc-972b-7f53edf30bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746e5565-6eee-4c20-a307-268ce636dfab",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4925940f-8d77-4759-b841-2d9febf0de3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b9961bd-5749-4b5e-b7f4-450e613cb936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0c1a97-8276-44cf-b452-e2af4a94bd30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97fe08c7-8095-4856-9ad5-39c6710b40e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c4f6d78-1794-400b-979e-f13c3472db58",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea747d4c-a4af-414d-aa30-9f60ad335c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1289e1-d393-44f0-badc-ae30cd1da107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b50ab0-dc90-4d6e-b1bd-3d7976969097",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d853569f-03fd-4dad-90e0-9372c9a70482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330aa771-be52-4b4c-9f5e-83881534e973",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b88680-e9e9-436e-9f5c-ed726dc9fd2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9db92c0-d7ca-4fc2-93c4-90396c431f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f729d7ce-0998-4f4c-91d7-2e6ace81cbc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bed833a-f32c-4cff-987d-4f51311b2961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4525787d-bd88-4320-adb1-a14e019c6899",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd5e87e-d7a0-40de-881d-dd355dc118bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27bcada-7986-4405-a245-9ad57bab06df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b28abe-ed8d-4bc9-938e-6c5cadadf841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "834c72eb-0411-4e91-bac4-1a1421b5f461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b218d3-c821-48a1-9da0-c3543ef0765a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb29e5a-4169-480e-95dd-013193a7df05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d796e585-318e-479b-bc4b-4e4d9d344fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c587d756-a4d3-48bc-8892-8facf23e65f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "058bd3c1-8639-4aa5-89ae-3a8fbcd72bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aabbbf5-8ceb-42b6-b61e-9aab04ebb6d4",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77c3d28-09a5-4000-85c3-16a00e14f0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "717ce22e-8ec5-42a0-b15e-13d1c606249d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43140c53-8263-436b-bae5-a42517d9ba56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "446248b9-7e4e-4a1b-a103-ec0bcf83244c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c0d0721-5d78-482b-b7a4-7b2b7b57cc25",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb46ccfb-b320-4e1c-94f1-e9942fdc7043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032c0a4b-45b1-4406-96d1-c4b3f73ee9f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058f0c5b-916d-48b0-b7b8-4074fdcd9aa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must contain \"type\" when present",
                            "rawBody.options.credentialStatus = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4623fe12-16b0-4a94-821d-10c5a943cedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f758ef-1237-47b9-bc58-df61f38c7177",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2becbe-20de-4584-81e2-fd559bdbc6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b42409e1-df0b-4872-9fe3-504dbe3965bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51616a6a-2cc8-497b-b082-29d0ff0350ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58f80bcb-3732-4edc-9aa9-95c3142b6eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce0eb7a-7fe4-4bff-9278-12fe7bed2074",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9016cd2-fca6-408b-966d-8e2a166f2fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b5fb245e-380b-442a-b105-e5f19648bf86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9718fb-ae8b-4a96-afaf-b726f69f09ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ad11405-c1cd-4afb-9353-7b49cf6c571b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "81f03ca7-fd26-49ce-aabd-23527676634f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "03d71274-2fa0-4cd1-9afb-461f49a70039",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d180a9-f135-4cd9-afd3-1a01fe7d43dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d49196a2-c54f-44cc-a231-6ec88e6b6444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb00b2dc-7eb5-4a3d-bd93-e5172a7c53f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2068f916-5056-43cc-8524-841639edb16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344ec418-16c5-4fa4-9834-70680d819342",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "407c0e2f-7994-4915-b001-e49361c771a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7157270e-0b50-4504-8496-6cb494afebc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf4d1ea-f737-46a2-905b-b5aaa5e79ea3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a47e028d-2d0f-427b-9f18-97ab9d3d521b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b016734-4794-40cf-9dcf-dc0aa83f5278",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a20ec94-3af2-4b87-a966-2703aceb5640"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b229e5e-1dec-4106-8847-7e433685c02a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f31e8f8d-ce39-43f5-92ed-97fa6686eb11"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a052145b-e8ff-4d07-907b-e7a62af42cc3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9898cb1b-1b21-48da-80fb-d35b3cd21b5a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5b8c852f-05ed-499d-ba87-3a4fdd7357c5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "04bceaf5-8c03-4f63-bfff-5d02f6365e75"
                }
              }
            ]
          },
          {
            "id": "cacce2ce-e7a1-464a-9fc9-41fce16b450d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7326819e-eacc-43e7-ae87-8753ade5b014",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94573689-c636-4983-8c82-9c3604fdf1b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b09d8bf-b696-49cf-9637-80e91c5b21ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14b71257-90a9-4a1d-af07-1e0b16d37cd1",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "de178bb6-74c8-4331-b305-3066fc4cf310"
                    }
                  }
                ]
              },
              {
                "id": "0adbe995-4352-4c0e-a53e-b3ace9d5e230",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccb7a4a1-7c07-4e20-8c76-73a177301ff1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b8e3962b-e1a4-4dee-932b-53ef2762adf0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f47faa67-90ae-440e-9460-53d839769930",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "7868f40b-d5ec-4a75-91e6-a275a8922d13"
                    }
                  }
                ]
              },
              {
                "id": "b4c888fd-5ddb-4589-81c9-c65782dc0c98",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "028010ee-f2f0-4b4d-a783-d65b7b7d27f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "69d650fe-db64-45ab-9f27-155e30d5ef89"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70d9a986-981b-4719-b452-cdd044151470",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ba22c29b-5dda-4051-ac8e-e879a227a81f"
                    }
                  }
                ]
              },
              {
                "id": "38983785-cbb0-4250-8e6a-8182006ab02b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed7f372c-ebd5-4209-bdeb-78385bbfe3ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d75fe03-7f62-4534-8944-49b8d9b7136a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56c36fac-863a-4acf-87a4-1f49d0eff525",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "83d40744-b919-4aec-8b6b-e0f091580828"
                    }
                  }
                ]
              },
              {
                "id": "dc82b88b-6afb-40e2-bf79-f6b2aeca0872",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f367109c-57fc-4e03-8c38-0367b1567af7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b5cddca-4202-44f7-a4ac-043c7c12f69d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b9e94d2-af4a-40d0-ab56-d30b9e97ae19",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0aca5147-6967-4292-a8f9-e5a2c2eef0e2"
                    }
                  }
                ]
              },
              {
                "id": "2a2507e9-0ff0-4b1f-895d-c0c66f575c65",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b3accfa-a545-465c-80a7-a6a06c0a4fe0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "48fb6b7b-14b1-436c-aba9-8919dd3a931d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ac27dd9-7903-4229-a7b5-461806d717f8",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "4802c401-7308-411d-8008-d4587227b522"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8768dff4-1a02-4f80-978c-fd83cba2adf3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ba7aa5e-50d0-4314-b4f0-209a45a0148b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "74a2735e-5af5-4f8e-95ea-0c8d6877e081",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3abf84ba-3b7b-4ceb-99ef-fafec180572b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81ce8670-0fd1-42e1-be7f-52e773731df1",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{ORGANIZATION_DID_WEB}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "8ae8e9be-90d6-43e5-ba39-ba6f6f253070"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01bd26ac-ddb5-42e9-8e11-9e4e3ee50890",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "40c8f1e9-f8c1-4e04-8359-29a5bce5a5e2"
            }
          }
        ]
      },
      {
        "id": "f83e0eaf-33d8-45ca-9780-ac8c714b7505",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7493bd45-70d5-4d6c-9ee0-cd4abf86cbae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b621a449-d650-4d77-b84d-d47b7b19812c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a65cee49-6150-47e7-ba2c-19b7a7256676",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399379bf-471b-4e2b-a562-41d5697ff008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "915a6c26-82c1-4079-afce-ec4f9fe25e41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a8f158-2b59-4b07-b2d6-6c3e6795b7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e469d83-36e1-4103-a608-3f65f85a2ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15aad009-f5c9-41b6-8774-355333f02df9",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11ed3eb-28e7-4bf5-9e2f-5134bda72f76",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e273357c-5b0b-45b0-8b8f-c14683de3975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caab8426-d356-40a4-b1ab-430d77b7c644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb265949-2bfc-480f-92ee-8d08799c61a9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bccf1cd-2878-4eba-9d68-847856928f2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ba9e57c-7144-44de-baba-edea5765587b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "768f738d-002c-4ba4-ba92-1062f2facc24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b3bad6b-38ce-46b5-bffa-4441540acc1e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0b04be3-932e-4c59-9804-475f3bcd01a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "22018a27-193c-43f1-bb2d-8b8c284381b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b70c3c7-ff51-49de-afe5-eba3e0b0a14f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9a354db-5115-4cd3-ab4c-ca647a6e3cc4"
            }
          }
        ]
      },
      {
        "id": "7a6d1fbb-346d-4e31-9db7-a3469bc17ecb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d6d60cd2-7c2e-47ba-9a43-28bd5f0cb16a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "120ad7b9-59c3-47be-9b37-ec8c09b4cf41",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "357e0f5b-9787-4254-b44d-7d58bffdf794",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2428cb13-f514-40ec-8e2c-2d3f556caa04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21819860-6013-438a-ac9f-2e393be8d651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03c0279-6bbc-4cb0-9bff-348642ccfaa1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7273e634-c838-4baf-9f15-17ec9849285c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f17eeae-28c9-4173-af63-af60710c099c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00101e9f-c6eb-454f-9448-243f2bfda186",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e4defb-94f2-4191-9abf-c9eff6fbe5e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b38eba34-6338-4152-845e-d46e49edcfb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8229dbd8-318b-42fe-8734-fc10dd378b98",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e594984a-5370-49e0-aff2-f562f31ed92e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c89ce3-50d6-4341-aae7-c5f7128a4e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7ff2e3-8816-4fc9-b178-f55008037af8",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb1beeb-8884-4d6c-b73c-5088acb346d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb66430-12b3-4a1a-bb08-f4587eca37cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83ed62e-4d84-44c3-a436-6024e0fe4520",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8181ab21-75b2-4a28-868c-95cce4f43d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a87d60b-ee1d-473b-8fc7-58c2c96c648c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62e97f1-74a0-440a-915f-72e5cd2b6b32",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5eb5d2-35d0-4b54-b4f1-7bb88dd9f890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187c7364-8c26-49bf-b556-e2220143d03d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc05027-6178-496b-b169-aee2746962bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9463b284-ef85-41ed-a497-f2aaa40efc77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1583aba4-4a86-4cd2-809b-915e1b770cb7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66e0530-cb06-4801-859b-d70bbd9a0a7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b6943dc-616d-4e8c-b118-9e2590bfafdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7c32e9-f7db-4d53-8e0f-4cc4becf2848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a56a7979-af89-4acc-a968-4b7f96a4ed2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427c0382-0b81-4fb3-9edd-4ae5c003a5bf",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73558d25-163c-461d-b98a-59a3597bf103",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cd4cde8-9364-4bc5-b8d1-dd06ed696dae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9c211c-1cf9-4949-b762-9d610649eef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89289053-f534-4f77-917f-4f0d82136076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "accb1463-4dec-4470-a1c4-0688535282e6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5755c0de-2a3c-437d-ae0b-839fab89108c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d03d9157-b802-41fb-bd74-fc0c9492a74e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a591c0-67f6-4991-b396-5afddd32337a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c088002a-ff9e-4939-b0fe-7e8a94ec7c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b625e45-14ac-415c-b771-ec138e75e9a0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8476130-9c92-4da2-863a-a0f8fdbbcd72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa51a084-cde0-4766-95f4-c89fc312677c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "429918ed-d22b-4f78-9e1c-28e33f2cab4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1756dca-4b32-4c50-a9dd-de6a647ec36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c592b7-5061-4ad9-82e2-eb2aebb1a2f0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de391686-5838-4cd7-a4f7-75ee62d71dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bda94c8-3de0-49dc-b28a-13d7f9348653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c469399e-62f9-4c9c-9532-35140f18f461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91a39ee8-71f5-4048-a082-1bebd60e428f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98443ac-2ad9-43cd-b08d-e6c8c5f5766d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec83c36-32df-47be-b9f7-ebe67f54d947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa84e9f3-9365-4b4f-b7ed-e51226145b39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "251d5f78-5c63-4f0c-b47c-cc19f752c8fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "358b7b55-d237-4f06-8878-217668a3a8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569f5306-93ce-4927-b574-7795d6b1af4a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e108412-0461-4948-ae38-b29838052adf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "603d5e07-8046-4483-b19c-6d0825fed0ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf3171e-b5a4-4742-b7f0-76edd988d5f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcdbf25c-7e93-48f9-b558-c4ed2ad9c34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dbebb0c-5dfb-40a6-a0f1-f4c777ae173f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fbecba0-7890-4ae5-843c-b89d8a150daf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3175306-630a-4739-b982-50cb3b0a2305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ada067-3af4-4e24-b6d0-3465bd1e8404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "822c3f3d-4638-425a-8025-498685f97364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5189d180-2299-4f62-a8ae-3c1b5f78a7f2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652d709c-0cba-482e-b444-eddeb03d2740",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c1574f1-7c19-4f6f-a20c-4d21d779b6fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4e18f8-d830-4d2a-b977-7ca45a878dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3755eef-c18e-42a3-b91b-a8ca0105ad0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb30442-a515-43f2-b56b-d28f19888c2b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de01ded3-5014-4151-a4e1-844aa9e62e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eeda508-4fac-4845-b907-0a0b4f1ad644"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2914502a-e093-4e11-8b12-8446460040a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec77fbc6-3eb7-4524-9fed-da366ae8c84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bd4d46-f8a3-4a37-a522-7f13a490e9c8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb84526-ecb2-44f9-9f27-95ac435c2636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5f332e4-7007-4aeb-84f5-cbd19397b5f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8030d01a-d196-4035-9d58-e1713c14f27d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f13bc38d-1822-4b0f-ad44-ec8858390bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5c3488-b554-44b4-a41b-ffa1b3d3a266",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4822eb4d-70f1-4045-a8fe-86413673326d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6b9396-454f-46c8-8b8b-d511b1436b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e572371d-6232-40fb-a03b-8df87765820c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c138677b-9e59-4fde-bb6c-90e7ba083283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef40e7f-680c-4ada-8618-5a05d956e039",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51601216-022e-43da-9a5d-df7bdaabc385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be967927-f7f1-43d7-9dee-2cadc5da0b3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "043658c9-627d-4660-9caa-745c814aff5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3faf613-934c-41fa-af0b-12f3030be2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fbcad7e-bccb-4359-acc5-f3542d9c2dd6",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cdf492-304b-46b8-b53b-fad3d33f9265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84cf78eb-9de5-456a-bded-51b9be5ec857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68a3d6c-d48a-4330-b1e7-9c99cbb7bc5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f76b8313-2383-44c4-8135-9b73c4c27fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8f59db7-ce04-42c1-97fb-108d464c1ff8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9bd2f1-327c-40f4-93d5-b29534623f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08972080-546b-4806-bdc5-90f37f6ed990"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f227abe-4ea6-48c8-aa66-d26443b3c5d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b2f068e-b2ca-4897-8b19-46081302b362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea17e444-6bbb-43d1-92fd-8e0cf21d13b3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef6384c-dbc7-49ad-8982-0976bea39815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d976a0f9-00df-43af-96c2-a26f94d89449"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3675df63-925a-4b06-a704-ced877a3b6f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c36c4d0-3e63-49a5-825d-85418d90a9ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31947ef3-de39-49e2-87e6-e5dc541e3e23",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bda6f62-198a-4468-94d6-b58cc7659a80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48d0c973-2a0f-4379-ac92-b30d06c7cd91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2363a329-0fb5-4c0c-a19d-02f69b22557c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f8c86f-c354-4bea-8b03-141fb0c5778e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75bc3ac-63f0-407f-b92b-bd2f139c5419",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01bf24f7-8fd1-47e9-9d10-ac3fe4ade782",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26aa6c7f-91d5-4fe4-809f-4f2bc09f7cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9826e385-78b7-4146-8969-466c797ed722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58be302d-3855-4e55-b48c-d2e8a15da6c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7fdc59-70e8-4b6f-8f83-98a90c8a6250",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca06023-f395-4b02-bc37-38c1636dfdc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a41f2113-af2c-4e87-bd5d-b080d9a19176"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae3c74c9-e73e-4792-878e-20967cf3366e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b40358-296c-4759-a9cb-bef33cba5882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aef57d2-7715-462e-8a1f-17b1355a73d3",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae86f6c-60d7-44aa-8ba4-de703e327b6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "203b1952-fcc4-4139-8fa0-792ddcb1832c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "700e944e-8259-4448-8463-8118096f279e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d85f0c0e-3393-443b-9071-82f46e6e9e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10007883-02f9-4e0d-85c7-f534111ed2df",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0f902a-3c71-41bd-9c4b-60f97bf40ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b162a26e-fa57-4b2a-8be9-14363f82565d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3c0de4-19d9-4461-88e6-519516a2934e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52bb977c-6200-4e60-acbc-69e4e20a845f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a9b21b-844f-4dc4-abf0-f0d74dfe2084",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9c8ebe-6a65-4b45-b606-6543c4457a92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e94e8c16-a897-4578-8cb1-5a7c7c25f4f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec64b9e-8401-4a8a-b7fb-fda33b640c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e52a59c-4b35-497d-ab34-8f4449e04875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6922c7eb-5ee8-4230-842d-aae9738d7be0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6f408e-c4fa-4061-86c9-c8cd387c182b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d4d78ca-38dc-4139-8fc1-bbd868cb7bf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2675a744-b0aa-4d24-be03-6fee1244cc50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "661b684a-152d-47bd-97c7-ccde73b8e899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755793d5-9edd-4919-aa66-e5c8dfb8c5eb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e5a827-0ece-4e22-88ce-3e9707ad7c89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80e0df03-082c-48e6-9f89-9ef2599e437f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0540c3-b062-42b8-abbd-6b608c7fdbfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1074529d-13c8-495c-9874-a1827996c7e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99737740-44d5-4329-80ba-e9715f3adb2c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a548a790-e089-4ce3-8f88-b4e88f41faa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43a0c2c2-ca92-4b0c-a9d0-f8959ce9b3e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55f607b-1b3b-4747-94e7-d0a463fac244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cecc6e83-c1ea-4128-8e44-942ce1566fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa552e2-c8f7-4c30-b404-c7424d91740a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07db1247-e9a3-44b4-9d2d-fe2b94dcf6ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ebbff47-e0d7-4404-8939-b8777a72093e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eed4322-5efa-4577-a60c-edd53db4da1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "285cc61f-9efe-456c-9b00-2517464c03b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c260ee8f-d34a-445e-ab84-41dd7cb89037",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173117b0-162f-4fdb-aa98-625161300703",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1403eec-8e79-49c8-94d8-f5a1a6de4f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d961f5de-28cf-4927-a220-fa8545da4781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e821ef10-7d25-427e-84c3-abdb9278fe42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d70dc41-efd1-4b2d-8d0d-783a64cfbe87",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d400ce30-22bf-4c35-ba9c-810752f4b1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a803408-c5fb-4731-8232-4b87ce0e6a06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a04971-7b0c-40be-b8cc-d5c4379d54db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "199dc95a-c04d-4bd1-9839-b2daeb76ee99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d7b8c9-7806-40fe-b077-7254da6f258b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12ded61-a6d3-45d2-8fde-ce1ab31379e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed589b38-c82a-4762-8c76-210ffd678e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d8c730-173f-40eb-bfe3-abbc8288d4ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1a2d593-5acb-4dd6-ac58-bc6e5648978e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a874240-05fe-4874-8105-dfa0e9f5db32",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0494e6-2b2c-43ad-943c-5d52da7a4c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a5bc29-16fe-41de-b186-c7e13bbb5c30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76abe08d-1162-4732-a595-d5fa05c6b4cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716d506e-4a44-42ee-b6da-84622884f664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd15ee4a-9093-45b6-bf83-2796cc6f1c37",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93ed606-cb10-4c02-abd8-c550ccf95bea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5e77d4-2b4b-4cfc-b5b8-13451edb9d85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a7fbd9-97d6-40eb-82d7-535fbbea81a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ceb8c4-baa6-45e7-9a14-af515eca8f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3157942f-775b-4d83-99b2-04bdd072fc24",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07dcb233-e990-4468-860b-cde6722d1b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b8bfcd-cd73-458e-aa28-4fb5ffaa1699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f5b185-8d6b-4489-93a5-be261f8ad5ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aedf4b6d-b0d2-42fc-a28d-9b89c6180109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81b70a5-01e0-45d0-806c-0239ac33d791",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64797876-2a0e-4458-b785-28f2e5bb9b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55ab62c-d114-4140-b7ab-649882feadeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea9b4eb-375a-4fbb-a0ee-a359119dcfa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925b872a-6371-438b-ba20-ab3291d1c4d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ab3358-2447-43bd-a858-b0613aa8bfc8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c895fe-1e01-46c8-9c99-b60543cc108d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbea6fdb-7b9a-4264-81a4-8aac143a117b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd2d811-45b7-45fe-a45c-5075b1a76246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fff5fd9-176c-4736-8fba-44a12f8fdb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af43a0f1-2980-408a-9064-11fe6da27930",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182c8d50-d790-4515-bf0f-c05482cbfc66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5b176bd-da4a-44c5-955b-0a5c9e89f7b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da85b2aa-dd3b-4880-a4bf-83f6d89299dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c85458c-9111-4fbd-9dc8-e0bf1048a06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482aa701-c3f7-426b-bb76-b2d6e35efd10",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f474a876-6285-4572-ba2c-aa93aaba3041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "246c38da-a044-481b-a58e-e3117f9502aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7ebfd4-1c40-4d4d-9d22-836924347b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8629c8-5ad9-4efa-8823-818ba3ff2938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1883e64-df35-4497-a65b-733499ef9886",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9aac754-913d-4e64-ae71-364a217bdaeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a20146a-dc18-4362-bd7a-fce4f4986e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfbc422-3d8d-45e4-bc73-aa67207ff679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83b0af5-198a-4f33-87bd-8691434b685e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748286b1-f899-412d-9b46-5c5e41bf7aab",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fde1733-1439-4551-8c21-3440f9bb41e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3112d2e8-07e1-4f9e-af35-7332e3d88390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3239d392-f0b3-43a4-825b-71234774f7ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a73faef3-42d0-49a2-a85d-916d9f677b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e50750-85e6-46b6-856d-802f638af664",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29590b1-6a7e-4d40-a574-64dd6bb0424d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ef071b-cc65-4c07-aa0a-18ba5ee4673b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b82abb-ca48-485e-97a3-a2ebf58908a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a67efc4-9de8-483e-9c16-255873b2d2ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065e6e21-a095-40c0-b3e2-ccb51fadc5a9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e443af6-6405-4358-8505-4fea373320eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac61ed90-bcf3-4ef8-bf3c-8bf0212b6c14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc651b7-2d93-419b-b01d-6c246ec5b64d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfc27711-45f5-4556-b952-0a68ec270b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4033ce-bac7-47a6-bc52-2ea743cfffd1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f98354-4db5-41a7-8c15-afa34fefb2e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7792fe3-30c3-4ab8-8cda-1f8f07a4db95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72897aad-7c34-45bf-8fd5-44c60bacd1c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70199ef8-0740-4989-89ed-f87a07931cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c511b485-13fa-4975-9270-18f1f518260a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1a9c9c-e01a-49f8-ac87-da52029baf7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0216ab1f-d349-446d-8093-ee47a0d0273c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd2d2f8-dc5a-4142-92ae-f25cd7039d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d823c12-f698-4705-bd9a-ceb9a65e68a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3fc57d-7bea-41e6-9f79-bbb75f46dd5c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799ee433-7341-4d52-b98d-f0da91025bf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5026bab1-769e-4e08-8f75-4d83b87ce000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a45ebd6-4816-44fe-891a-bb3ad5857873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c00731b8-31c1-4856-b715-34c667b3d696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3a4c04-e519-41b3-986a-322554d31b60",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbf3c05-a80e-4914-b842-28598df035e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8830ba3-3730-4602-9b1a-9eec7ddbd3c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcc31c6-53f6-4778-a0ee-1c7bd9984f58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b2fd56-c125-4dc5-afe9-930e0cc568b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff10afab-1cfa-4a03-88bb-b1db77232b67",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88de6af-3c87-4679-a142-75d980ba2527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e465e728-b178-4417-8cf8-ebc2eb0ff33b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0f0abe-c611-47d3-9754-5e5d5d1575ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95c1e3a0-8afc-4403-9f38-5344915361f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe12ae2-f1df-4995-8669-6d4e6c3bcb8a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12685b68-5aed-4924-993d-957d51a2e506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c1deee8-43ae-4760-883f-2c14f0625914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d62de57-955c-4c9d-bbf4-fe3de3feb239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beb167e9-0d6c-49fd-add9-0009b39b8665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c781fd22-109e-4245-9e89-3730c1ffb943",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b36fe3-119a-43d2-bb54-f4b69e367b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3290faee-6cdb-4bcd-8263-c263a4842f1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3cbcb66-8b21-4e23-8402-793b3c03a67e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59def722-fe36-414a-8af0-d1035b0334e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c88f27-e040-40c7-8404-9a859f47dc9d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7342f36-c530-4033-8c4e-a739d14da10f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "492dbecf-3a0f-4c99-bccd-7e554c0ef733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a38bb78-9da4-4490-a3a1-94e07100b1f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25825140-e3ee-40cd-8203-372f014fe6d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363eb35a-314c-47f4-9df2-458dc965e177",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4598860-4627-48f7-94c3-9e7ea4855221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22549506-4f31-4034-8b33-b4f2be99af3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b2fa07-017d-4998-8e7a-e19f5a3d6df0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee9d91c-c576-4ba7-a459-d6d58230e9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d893db2f-f391-4cce-8a3e-c4b4166b7b97",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8278fda4-9a82-47c0-8dbe-ba428f75c21b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "834493e3-50ef-4a37-8735-fec8521091b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bb06fe-e385-4f63-8a91-d0fa6a9934b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe616f73-ae70-462d-82b1-64f562cfb35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca9f49e-c771-4f26-a646-1a1a2b2cbbd7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5f5fe3-2120-49df-9612-09456e85b806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5be0d7a-2cc7-414c-9bc7-28e1bd185264"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00718cd5-cef5-445b-86a7-8b4236fe8462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4155cd83-b97b-41dc-ad55-2801de6bf847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e949bd49-fc4b-4d33-9212-3504f78d49e9",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77775ed6-07a3-4295-8273-3e311c4f3ac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3fc9432-868d-4d66-9505-246abe47d88e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ced12a-e8e7-4bb2-963c-025fff337539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b14672-64ea-4f5a-9c68-526253eb8a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5964c3c-d22d-4636-9b25-00a9696b6b7f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900fbc65-12ea-46e7-b6f3-c64505d8180a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5274a50-a942-4d13-aa77-03531211bf85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "affa4d10-20dd-4cfd-a00f-e19e0ebd4d48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d1dcc89-8b12-4947-9513-a92a417ae72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccfd24b-4f57-4a83-9b36-2a55ee5f4cd3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a3f181-090b-4305-8c53-ff54a77d11f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b9cf69-dc0a-4c0e-ba67-d43fca6b2f29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffba963-2cc1-40be-87d1-630926eae1c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8859fd3b-0d51-4b69-a8da-89f1b93a79dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf19050-9143-42be-9bb0-e8bb6b166caa",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccfdde74-2145-4bf5-89f4-767421ec5c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3357bb3a-50bc-410b-98e5-7e84bc279e1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a3fa43-4cd1-4146-8f9c-957e9f0335b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86899979-e3aa-4920-9a48-dbf70014875f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d92a5fb-d587-447c-a969-f69bd272eb48",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7eedc7c-ec02-4050-8579-4a16c5fd0c6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf15f7c-325c-4e4e-8b82-f2c27d07a3db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "957dd515-6a6b-45f5-b47f-80a42d523c46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1739126d-48c2-4af0-8718-d40bc17a674f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83e3832-6b3b-4292-9ab4-4de65adf1dce",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e161e78-8362-43be-a9f7-54d71073e993",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ee367b2-14d5-4176-a350-4ea5e2922450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "072d95b2-8597-4c65-bb48-2a9c3494d55a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "318d90fd-36b1-490b-80eb-3c6481a7673d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27f339d-4206-46aa-ab70-cce712553be8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281f8b7e-6940-4f1a-85ba-debd4d279ef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0863cb24-d118-433b-bb39-7ddbc57262f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb9e264-fadd-40af-8627-59050894fdb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0430b2df-13ab-4ffc-bf79-f2cebef4e116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6511d14d-40e9-4370-85ec-0d6fdb2bda28",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a692f81b-60aa-488b-8002-417b2d605ad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "819f9765-df81-4d8d-b485-53e92ba73ef9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45817811-9c0c-4af0-b489-07835fe62c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f937a1b0-4936-4323-bd84-b4a1b0a3a197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572ffbae-c481-434f-8bee-c53209c377f9",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5caaae-7579-4470-8ac7-1f023e24505f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1080e4f9-9f1a-45d4-a0c0-7f5962aaa19e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d712a9-9041-4aba-890b-cc51febaec47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c68d870-db76-4874-b0e7-0a7d94fbbc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d034410e-8ea1-47dc-b326-9baf62422a78",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be967949-0063-4172-9969-a3fedf7dc604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80db71d7-7036-4810-817e-dc53858b084e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a086f5f-fb1f-48b9-ac9c-92202562aef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c677ee7e-eb8d-403b-a111-da7a1a1f42c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd277dd-1c3d-49f0-8c92-ca640e1e3db2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42953db-3a0a-4d0e-9275-9b0bd32facb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "092706d6-1719-4f70-ad56-4a72945ce42b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5731d5cd-121c-485c-9835-40f747672e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8270d949-6ac4-40a6-9786-3bd04689cf95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77de726a-0d5b-403e-a664-9a51cfb7acbe",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ec6245-9e67-4ffd-8959-80af9bcf57e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3edc4356-5679-4eb7-b108-1043fec5f86f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b8aa98-683a-4f4a-90a8-d6418f5e4a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "996116eb-cbea-4c83-a3b0-1abf81e1e12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30f02c7-bdfa-4eee-aa44-818e655b00d7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cdd666c-cb6a-4c58-9f07-e131499b5771",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb82f5ed-953c-4d49-b20c-2d057a2e631a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9211477b-a0ca-4a6e-960d-f842e4ab1111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b302ce8-42d3-49f1-b37e-9d5b5b8c802e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84224dd-d609-4c2c-84bc-084704ed700c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee70a3ed-425c-4471-9ddf-f06c52308667",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e1166d4-7eab-4e05-991d-4e8476fcc24d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86141270-ba3e-4087-8689-19938631d474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89dda830-4c31-47a0-b201-89e17df70b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0ffcb33-e36f-4db5-a9bf-2f190bc627b4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cab86c-682c-4177-b21e-b6fe6050a0af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb8446f1-4386-4aaa-b8e0-0f43527a8645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "873a4e9d-5b72-40c7-a1fd-d5e75795d2f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e57d09-8bb9-4088-96dc-59b89b070789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45989e95-4bab-4feb-868b-a6b3e81e54e4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b043ce13-c5f0-4fc4-8442-2e04a3c80b83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c08063e-098e-4147-a89e-a93b542992f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59160639-6442-4ae9-99fa-dc240de8396b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f42fb7-ea6c-4ad9-b50d-c97237e9a2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c564271-292c-4113-acb4-303ab8f66a6b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbdda14f-c38d-4012-a498-ada271f69e5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "201536db-9543-4a3b-8541-7e54e2b06635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63bb4fe6-d4d4-4284-bf6d-e3cd2f3f4fe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14037da8-fc4a-4bd8-adaa-96785b8d494f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082dc1f8-933f-422e-80dc-4d9b9d54c117",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0834e878-4980-402d-bca1-a78d27886532",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88ffd202-ac9d-4b15-948b-52ff1c7559e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "349a2766-facd-45c2-a773-a48dbd9ee148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6400df4-6765-42ed-bba6-ce882f8c567c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c0e7026-f280-4dec-aef6-96a75b84b339",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bdeadf-7cbc-4145-af80-d071e5375d8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a426a1d8-65eb-4c00-b1af-d94a6dbd2b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64678f2-28da-4bdf-867e-f25f9d9b2bad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b13e8d8c-069d-4ac6-9ecd-d7ccc1f9056a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e20ef30-d758-4e51-86c3-da3c37d8ae1a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7287359-605b-49d1-b970-9bd342f3ea96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e34a124e-f720-40c7-904f-e70cbce36991"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13751bf3-bda2-47f7-9c31-72bfa4e1073f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa3503e-9c69-4dd4-820b-8bd807c798f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "432eb675-9c96-48a9-beda-5dad762b8d19",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30a3607-991b-4206-bc98-de3ab8f67ea0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9401bb03-50d0-4e20-b5ba-ef17c69fa5b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bec071b-6afe-46ee-81c3-c56027f68033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fac8b18-cc0d-4b7b-b073-8fc9398c9583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87da9747-c4b2-485e-859c-d81f53bef5cf",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce4c7c4-d25a-400e-a18f-6ddd0fe3d918",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12083da3-f8b2-4cf1-8993-dd9df80fec9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b717b5-9fb3-4ff9-b5c8-135a986b83cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8401f39e-0205-4505-9ca3-47af91db1d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02d674a-0527-4473-8611-43523c35090d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047b26c4-ec9e-44a8-9be6-5bb3a38b8d8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f15db5ba-ee8b-4fe0-b2d2-0be15a3c3805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71472709-0229-4095-a11b-428f1f96590a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55a77b4-e3e1-423d-9eab-d57060e3ad8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ebcda9-d2c8-45ae-a0f1-19d1b5beff35",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a5d4cc-ec61-42d4-a4bb-a6373044d93d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "593fff86-0be5-43f3-adfa-85232130fb11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded74753-25d1-4383-bb71-422e8a9d88b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dea43add-a47a-462f-9766-1d7bf513a546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809c0af8-c94d-4d8a-8508-b6a0937ac31a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d83e0c-0ab1-4288-8d62-5e3a5b748423",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d66a6034-5226-414d-abba-248e818b450d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c022aff-a453-4114-bc2f-adc772aff135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41974b60-3f2e-4a18-9c78-0378b26bf328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca245d2d-de9f-4527-8d2a-dc2e09369740",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97121b22-d2ae-4182-aba4-54991ab13c31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4380e763-3ea9-439b-b700-e0fec177176b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33188811-9d7a-429b-8119-229adf1e02b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65911384-a175-422d-bc05-82359644e620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595013cd-45cf-46f2-9466-b2418848542a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b581f8eb-1aee-478f-b761-3bd0b70be94c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d48f92d2-4918-42c9-849f-5fcbd0421b32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa87789-8a8f-4b45-8e2b-f96ccfe68b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca6044e3-3590-4dc7-9015-acae2fd4c22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4eefb8-643c-49a7-8102-bddd1e63a246",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d20fc8e-0bc7-41a8-8463-9800eeee9c6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b1d21b6-5649-4721-b02c-78a2e0ac23e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf5590d-e0c5-4156-a268-2050160c3195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df7e6189-83bc-4c13-aa67-908747331666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3554403-f645-4311-8a84-30bc8ed2f74b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968d3f1d-8e3c-4c85-9947-323975fd608f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7edab23-ce47-46b4-8ca0-9c5eb52d8b5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "025c4e6e-2d00-4ed3-a609-076418b69316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b16e220-6ccb-4102-bc8f-cce83f2ba899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d61776d-a070-4a12-b12a-699d3b5fc051",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b99e977-2806-471d-bcc5-ea996473fba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df447dfb-3f02-48f1-a7ab-441252ae5180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76309503-b323-4c04-8d31-b8ecce5cc796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "281b4a37-5faa-49fd-b841-e85c7ed765a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b60b82b-c666-4b45-ab88-a037c25ba4d9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f9994c-6efd-4ca9-925b-ed8a9da7ba24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59cd5121-4f0b-4292-9fa7-f8f35a0f5222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51924950-7467-4928-afbb-83e27c81897a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a925e35-6acc-42bb-aaf3-33d6d831da24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6c55a1-ebad-43aa-9b0a-4e7e57948b46",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a747a83-6376-430f-bfef-a9f48bc9a9ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3706bec0-6efe-4407-81fd-64c59c3a0845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1427e3e-63ec-43df-a5f8-eb2ebb87d328",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5557fe9b-2cdb-4002-8177-4364ea815f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28bf10e1-7488-4b7f-9d38-eff0e05ea203",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28893f57-4315-465e-8ccd-5a5d0a93225f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcccc3d2-f2de-4b09-89e3-99d1b06b180e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0c240b-47f1-45ce-9fa4-5b1015bce9d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb2fd4a5-3f4a-4f8c-800b-38db3aa35813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b61ac0-b4f1-421b-ba34-9f14b3bf0aa2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982e73de-8c1b-4841-94f0-815d81f07822",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb3a13c9-303e-44fe-9694-2f7e09792bd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "308b9105-c2a1-4dae-a8b9-e99ac4dcc90c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25784d07-fb19-48c9-9331-5bfc9a9a83d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1057aca4-c39d-441d-b3bb-c6a870731f50",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a548cc9-3408-42e5-8a63-2c0eb1ab6950",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10a08326-e22d-495f-9b38-d6cda8a8210b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a934e654-5cfd-49bc-9aa6-9e61ab7dfa40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e4f8426-20de-43bd-b86a-c4a531e0f8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72672a25-fd6c-40ea-8c5c-31c8e900858f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8eab0b-e593-45ca-9085-e2e2e4adcc3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07608628-b176-422a-86f2-b4c596323900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4156791-6805-4169-b829-32d54767cfc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14f2e360-6927-462e-9ce5-5fc6b97bd42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5232a076-f850-4a3e-86e3-de35097bcc36",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5048ee-5711-4b96-9dc0-1e62dc3bd161",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2b93d44-5f40-4c48-86d1-44c42afe6936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98094e68-c180-4a40-9517-b581ca8dcd32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eb6159a-5806-44d4-84a2-8d07d525aabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0f9fb9-e916-467c-9abe-6778403bf5a0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e645b19-6b4c-490c-8374-8e4fb3ac1245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df26b417-4c9e-4905-b4ab-c609295b4500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53bec2f9-0775-49d5-b9fe-5b1fe9d99c5a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c18c1506-682f-4102-bc59-24d9c3a7ac28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed477761-8554-4669-82b4-2815a67175b6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c5f8e3-64af-437f-b63e-b175716f10bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef15423d-b534-4891-9fa6-44d8fe6003ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68206024-bf22-42a7-be4a-3e33c4747ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4dd431e-aa52-41c0-ba55-0d36a5a3400a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57124ab8-6aa1-4f64-9fe5-c3a5ced32437",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13abee96-a8ac-43e0-9465-be500d278251"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56935e0a-2cde-49c7-8a5b-93517f3eebfe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b802cd36-9c37-4aeb-a450-b872525c6b38"
                    }
                  }
                ]
              },
              {
                "id": "6d5c7696-bcd0-40b2-8dfd-8e1f0ca2afc7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "335cb702-090e-4f90-92e2-e3e406cf7d72",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0798fdb0-d4d6-417f-874d-06ca87b6b974",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "bcea1170-467d-46d6-aa96-f89c02d69523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd33791-5e9f-4ed6-bfc0-aba01cfe3e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88504401-7ccc-4199-a213-974f17e321b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84e67f8-21a6-4ae2-ab3e-2ab65553a648",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acccc6ae-6075-49b3-998f-e7ea7c88a412",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a5ebb224-6e2b-41f0-97ca-277491413729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21d4403-6473-40b8-baf0-91644c2f4e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f4f44ed-26de-45cd-8862-24504567f27d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d92ca65-55c7-433f-918c-e556435e402d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "067e04e3-99e8-4ad0-a573-5ba0e1818bcb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bb10149-782a-48f8-bc7f-494e2bfb6fc5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1195c791-5eec-409d-8ce7-97a13889000d"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "c6f0f611-a08c-4884-81a3-450ff22b37b6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "13bb8f94-ccb4-49d0-ad0e-60dd88fc0014",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5daf75d-bfdf-40be-b3e9-59156811fa02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8734256-6252-4cad-b735-485f86cc9c20"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26e6cba2-98a9-4417-ba5f-4726c08b8e1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02c2ceee-e53f-45f3-a1d9-bde7dfc9eb86"
                    }
                  }
                ]
              },
              {
                "id": "3a0faa61-3aa0-49db-b2f9-a6f7cbb8938a",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7380e8be-cdf0-4d0a-9ba2-363fd30b8917",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "101a9a9f-2fb7-4e13-afb4-84d22903d01b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2fea2515-53af-453e-8188-afbee8b998de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8acc3b0-cb60-4d7a-b540-0b06840b1ca9"
                    }
                  }
                ]
              },
              {
                "id": "1944e34a-d3c4-4cd7-a73d-2ba53f9f9d6e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b5eff39-a69c-4496-9626-fdb25f3611d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1c8fc02f-9df4-4289-8e1c-c02d0d8f9666"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "793f0cde-a59d-4d8b-8519-8bca711da942",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd461810-c0cd-4782-9b35-0616d29ae722"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c37e1f6c-3d8f-4291-bc12-042acd91398b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ead40fd9-e22c-4631-bb5e-30212294357d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb374914-c587-43af-b43e-bde89a48c023",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "caccee5d-6162-496c-9866-53e1bc7e3a39"
            }
          }
        ]
      },
      {
        "id": "7b736b36-eee1-410f-a495-e4b1562a8c4f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "67126627-f639-410a-a469-58964f4a20a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64f75f7b-f421-4f93-8827-725552ad9bd2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0554ac23-ff34-4396-aac0-a4d8fdc7ad3d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2233ee9d-bf10-4cb4-9778-14bfdcd76bea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "345fd8d2-f5f4-4a64-9b22-3e26a010d25a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea210714-8a59-46c6-a82e-beec0ddba0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80a41750-1451-499c-ac6c-3b0fe335d4a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fbeed78-bf50-449f-b599-6d939ce6a5de",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1318db79-1738-42bc-b225-3953ab3a489a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "324aaf29-35df-46db-a14f-1d5c7b94872d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b46b52-a11b-449b-b3a4-345814e443fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d59ca872-e342-4966-8024-ee239511d2f4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc961ab8-f5f1-425a-b8d1-c3bf8be1fdea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a56ae486-5719-4b8a-bff4-2515c40a4f23"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a47ac15b-c8af-435a-8822-156c35798681",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36b409f9-3e81-4c7f-9c35-10c4303141a0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7065afd1-73e8-4c58-80ad-3a98eb35cb8f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "943df7d2-26d9-4dba-8966-2ca7dace1bc3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e5f827b-ee8f-491c-a650-83b58a113d93",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2abb25f6-4058-46a0-90d3-36dcfcded6af"
            }
          }
        ]
      },
      {
        "id": "ed0ce5cd-6dcd-4715-91f5-20d539433b78",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d153d93d-f918-4f3b-99b3-b19adf3e6e30",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61bf733c-bbe6-47f5-ba50-4d6cf6d12580",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52525f95-9c37-4b8a-9c98-57138891f6ad",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321fa852-9f2d-499e-bd54-4790f1e3f589",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ae82cf70-070f-4776-8f47-179afe448a62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bdbc03a-90cf-4f59-ba35-69586852bf9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e1afbd5-4a26-410a-a245-14be03fbd99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8757f12c-cc72-4029-8c92-58f75f35ce71",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62f2663-b944-423b-b8b8-250b5c675c17",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ab917943-e8b9-43ae-9f47-7a813b826b48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57b06a1-7717-4952-846d-ebe5595b5691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97bc9b3f-1215-4233-a4a8-49f30d12b9cf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3e6e040-d20d-4297-bd4f-50bd5c892959",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc577389-ab15-4a14-a1cf-4c45df6f62de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e35301d-46e6-4e44-af27-153d318b26c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5fde6e0-901d-4cd7-bbe5-baa477bb0da3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55c7ac5c-4bc5-4998-abcf-eece3121e99d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ea322993-e087-40fb-8806-02da6f8dc817"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7570d4e-148a-4ff0-9dc8-e795e758ff58",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab6e4478-1fba-46c0-8cc7-b1f88e68cf79"
            }
          }
        ]
      },
      {
        "id": "c6f8064f-d8d6-4928-9f8c-642672a934bc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8bdf2fe6-abbf-4695-89e8-7c3cb057f09d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4875e9c3-e8da-46ec-be35-d720d7378ce4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad07aa68-448d-4b47-986e-71ee30d7b622",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e032f0a8-6f79-4902-8f4d-8a16d17b44c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c9a3e1b3-934c-42ba-81db-c1674a7ada1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47bf83ae-54f9-4846-9bc2-0aae132e68a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53c5e4cf-2e30-40f1-9f4f-70e54fec63b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c3477e-1cfc-4732-96de-4cbdd995476a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90774093-66bc-4140-86ef-f6b173274dfc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c51705e6-31be-4be8-ac23-360bda763352"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de864704-9a6a-4ad5-8e27-649e8230d42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e53ce63-2438-4567-aa4f-1116b10023dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa00f8cd-6739-463f-a38e-37d308febe19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73ba9220-f401-430b-9e49-d158eb660545"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b4c5d55-6f41-4541-b117-3749f11b6224",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4cefbdad-f6f4-4f53-9f5a-8f3e05899e49"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "337460ef-4ac5-43b8-8f59-891d5ba305f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "350a6c27-5713-4c53-acea-54faa25d2976"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d60e581-c4c5-4098-8760-d3b2a582a8d5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f85f3b8c-ce7d-4e78-ae5b-9fe81f9d2e6a"
            }
          }
        ]
      },
      {
        "id": "5b96b6fe-d39c-4791-956a-a8279b3ae3e7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17730065-9e37-4658-aec3-b6251cd5352b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2e87a58-9373-4941-93e3-39a6e48d03d4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c8c1cf9d-acb3-4a10-9d90-325a6b9c6738",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b3ccbd5-d24e-4a9e-a61e-98494da8eee3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69755d69-05cb-4891-9bbc-541e7e2add2b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 157,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1231,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 157,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 166,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 157,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 320,
        "pending": 0,
        "failed": 224
      },
      "testScripts": {
        "total": 621,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 610,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 373.9216867469878,
      "responseMin": 36,
      "responseMax": 2197,
      "responseSd": 390.0267212187192,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1665276866506,
      "completed": 1665276936125
    },
    "executions": [
      {
        "id": "8927d85f-4c16-4564-826c-4ccd6917fde3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 157,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "271355ab-bd33-4066-859b-dbe76b8365aa",
          "httpRequestId": "f40c87f7-c984-4f62-a3f1-b362d3cb8f99"
        },
        "item": {
          "id": "8927d85f-4c16-4564-826c-4ccd6917fde3",
          "name": "did_json"
        },
        "response": {
          "id": "7d64e9c1-8e9e-4f1a-92de-52ea04c3cd7b",
          "status": "OK",
          "code": 200,
          "responseTime": 558,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c8935e-6ff9-4d74-8ae2-ec45fd6e7484",
        "cursor": {
          "ref": "c13bf643-33af-43e7-a214-f0e4874465cf",
          "length": 157,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0b13d5a3-9a04-4e09-a84c-ad046e97dc12"
        },
        "item": {
          "id": "74c8935e-6ff9-4d74-8ae2-ec45fd6e7484",
          "name": "did:invalid"
        },
        "response": {
          "id": "ddd76bec-76bc-4545-8ac8-ee1f9b8bb7dc",
          "status": "OK",
          "code": 200,
          "responseTime": 617,
          "responseSize": 20
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "74c8935e-6ff9-4d74-8ae2-ec45fd6e7484",
        "cursor": {
          "ref": "c13bf643-33af-43e7-a214-f0e4874465cf",
          "length": 157,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0b13d5a3-9a04-4e09-a84c-ad046e97dc12"
        },
        "item": {
          "id": "74c8935e-6ff9-4d74-8ae2-ec45fd6e7484",
          "name": "did:invalid"
        },
        "response": {
          "id": "ddd76bec-76bc-4545-8ac8-ee1f9b8bb7dc",
          "status": "OK",
          "code": 200,
          "responseTime": 617,
          "responseSize": 20
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "8976bd34-9fe0-4e4e-8377-2d04b76803b7",
        "cursor": {
          "ref": "089cc023-6931-43bb-a71b-b8a627e47603",
          "length": 157,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1082d546-f32b-4f3b-82b6-6c57b598bdf1"
        },
        "item": {
          "id": "8976bd34-9fe0-4e4e-8377-2d04b76803b7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a874ece2-c78d-4dd8-a777-1553ab8535f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 571,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "185927ac-4905-4f42-8069-002ccc9257c4",
        "cursor": {
          "ref": "80f13949-031b-45f9-b5cc-8bc5e3dcc432",
          "length": 157,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9e7040b3-6086-4ade-b91c-5046af0cf606"
        },
        "item": {
          "id": "185927ac-4905-4f42-8069-002ccc9257c4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "fe65ce14-7c52-4000-93df-8660fcc46d50",
          "status": "OK",
          "code": 200,
          "responseTime": 600,
          "responseSize": 20
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "77c9d1b4-a5a1-469f-b044-5aa044361a65",
        "cursor": {
          "ref": "0274a18a-e24e-4c9a-a72e-3cfa8cb34bc0",
          "length": 157,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8532c13b-a877-43eb-9854-62a24f1ab580"
        },
        "item": {
          "id": "77c9d1b4-a5a1-469f-b044-5aa044361a65",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1ac14731-bd15-41ba-94d1-3769edf827fc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "76bead27-bb94-4791-9e40-ae6f929f6118",
        "cursor": {
          "ref": "79f51b29-a589-4ddf-8cb1-c2eecd132077",
          "length": 157,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c7d45ede-b894-4eec-a889-38e880195ad9"
        },
        "item": {
          "id": "76bead27-bb94-4791-9e40-ae6f929f6118",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9d98b377-f0b9-4fe5-8e40-3678bcbe2e4b",
          "status": "OK",
          "code": 200,
          "responseTime": 686,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "76bead27-bb94-4791-9e40-ae6f929f6118",
        "cursor": {
          "ref": "79f51b29-a589-4ddf-8cb1-c2eecd132077",
          "length": 157,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c7d45ede-b894-4eec-a889-38e880195ad9"
        },
        "item": {
          "id": "76bead27-bb94-4791-9e40-ae6f929f6118",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9d98b377-f0b9-4fe5-8e40-3678bcbe2e4b",
          "status": "OK",
          "code": 200,
          "responseTime": 686,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "9a9e8a13-64a5-4423-b899-d9e158ea61db",
        "cursor": {
          "ref": "13a2e791-8eb3-494d-b887-c88a01e709c1",
          "length": 157,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8e1bb6b1-c096-4ab0-9803-fd4cd9ec0550"
        },
        "item": {
          "id": "9a9e8a13-64a5-4423-b899-d9e158ea61db",
          "name": "identifiers"
        },
        "response": {
          "id": "b90ff9cc-4bc7-474c-9503-bd6a83eedaa8",
          "status": "OK",
          "code": 200,
          "responseTime": 656,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd40fde2-d28b-4d59-8b64-3dfb1d97f715",
        "cursor": {
          "ref": "ca743b2f-bd87-4546-950a-46236a72acee",
          "length": 157,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c67ae637-c605-49f7-b562-a2e896cdf104"
        },
        "item": {
          "id": "cd40fde2-d28b-4d59-8b64-3dfb1d97f715",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2301e85e-2cab-4e26-b5d9-6c9456f206f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 585,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "cd40fde2-d28b-4d59-8b64-3dfb1d97f715",
        "cursor": {
          "ref": "ca743b2f-bd87-4546-950a-46236a72acee",
          "length": 157,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c67ae637-c605-49f7-b562-a2e896cdf104"
        },
        "item": {
          "id": "cd40fde2-d28b-4d59-8b64-3dfb1d97f715",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2301e85e-2cab-4e26-b5d9-6c9456f206f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 585,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5c47eecc-0b9c-4549-8727-7f5c5f279350",
        "cursor": {
          "ref": "d13115b3-5465-48e9-8d28-c20f912c20eb",
          "length": 157,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4f269b45-2b77-437b-abe3-4f11ae9c6405"
        },
        "item": {
          "id": "5c47eecc-0b9c-4549-8727-7f5c5f279350",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5f636070-7de4-4485-8297-e1a58a9f47a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 478,
          "responseSize": 441
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "e6642a75-e5fe-44c4-b33e-3ada44b36f21",
        "cursor": {
          "ref": "6638cd5f-ba36-4beb-97c2-ecb087a7620f",
          "length": 157,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "89846a8e-eb43-4a66-b879-8215aac32dfb"
        },
        "item": {
          "id": "e6642a75-e5fe-44c4-b33e-3ada44b36f21",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "e25751a4-e541-4029-a9cd-7b708e19f282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 573,
          "responseSize": 957
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "5fa7c0dd-ee9c-446b-9d4b-55f028ddc538",
        "cursor": {
          "ref": "517592a9-3a5e-4d5f-9942-676fb1a7238e",
          "length": 157,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "aebefb7a-67e9-40e9-aed7-7b3c7950db1b"
        },
        "item": {
          "id": "5fa7c0dd-ee9c-446b-9d4b-55f028ddc538",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "9d48a0f7-6a60-44b9-bd2b-c8d815f7e771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 457,
          "responseSize": 1376
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "910d4386-bc2a-44b2-af4c-a35387fcbba4",
        "cursor": {
          "ref": "f271d542-c61d-4976-ae91-cee5e08dc3e7",
          "length": 157,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3cfaf468-e959-4be6-911c-586ad86844f5"
        },
        "item": {
          "id": "910d4386-bc2a-44b2-af4c-a35387fcbba4",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "cfdd2359-4e52-4c92-8569-1445ab684af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 750,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "e62886ee-2046-4bd1-a04d-e357cb47aeb6",
        "cursor": {
          "ref": "02991cfd-6d9d-4338-a6f3-6ec9b3a26609",
          "length": 157,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9334bc23-09c9-4ce6-b684-e1a2b8c02df1"
        },
        "item": {
          "id": "e62886ee-2046-4bd1-a04d-e357cb47aeb6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6f4fc8e9-9163-4fc9-93ae-775ca27dd7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 728,
          "responseSize": 455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "d616b172-6794-4279-85c2-73c0b4c0e3c1",
        "cursor": {
          "ref": "dda205e5-3e55-4b42-bf61-4e93dae70932",
          "length": 157,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fa3e629d-4cc0-4842-a272-3fbd1e5316b3"
        },
        "item": {
          "id": "d616b172-6794-4279-85c2-73c0b4c0e3c1",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "8b96222c-9236-4d89-986e-59a56381cef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 489,
          "responseSize": 754
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "2300508d-eff7-4399-a3cc-841385f90bed",
        "cursor": {
          "ref": "6281627e-b938-46f8-a072-157bc6d745cd",
          "length": 157,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ee3d1ab0-e694-4bbe-8853-ae2decad9553"
        },
        "item": {
          "id": "2300508d-eff7-4399-a3cc-841385f90bed",
          "name": "credentials_issue:credential.type.members:missing"
        },
        "response": {
          "id": "ee458b08-2f3b-473e-bada-f2f154040fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 516,
          "responseSize": 174
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "802c267f-5449-404f-be1f-03c0f6515215",
        "cursor": {
          "ref": "f8a2365e-d8f1-494c-b0d7-812e343101a7",
          "length": 157,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f3d8720d-e1a9-4970-bc47-5149f97f1082"
        },
        "item": {
          "id": "802c267f-5449-404f-be1f-03c0f6515215",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "17faf7a2-499f-4111-8f75-478d87333d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 468,
          "responseSize": 769
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "6e454889-5986-46a8-974e-62453b102e5c",
        "cursor": {
          "ref": "51ae193d-076c-4651-8372-44dc4179783f",
          "length": 157,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6a6269e8-9a9f-4ea4-936a-38867c7d36fd"
        },
        "item": {
          "id": "6e454889-5986-46a8-974e-62453b102e5c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e69e2274-5a71-485f-ad64-6ea637d6a20f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 471,
          "responseSize": 407
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "551a1dad-45d0-4c44-9d10-f3e70f524df9",
        "cursor": {
          "ref": "2f812995-96bf-4576-86cd-122d0f002bc8",
          "length": 157,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "26213822-3b01-4370-832d-d14a376831c7"
        },
        "item": {
          "id": "551a1dad-45d0-4c44-9d10-f3e70f524df9",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "2344160e-a021-4bd4-84ff-556151f98981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 488,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "0de5ea8a-1693-42d7-94e1-1f48c81ab987",
        "cursor": {
          "ref": "4984fb98-6f8f-4e58-839d-fe9e0837467e",
          "length": 157,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f96a16ae-aee3-4639-946f-bf58ba6cbe91"
        },
        "item": {
          "id": "0de5ea8a-1693-42d7-94e1-1f48c81ab987",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "03f0337b-1d78-4d47-9262-4ba9efd29944",
          "status": "Not Found",
          "code": 404,
          "responseTime": 544,
          "responseSize": 56
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "0fe49e5d-1bc0-4fdb-8b0d-7e238839af16",
        "cursor": {
          "ref": "b7c4022f-0496-477e-a670-5c3d5a41093a",
          "length": 157,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8afd69d9-c6a7-4798-8f8b-900548d2f9ac"
        },
        "item": {
          "id": "0fe49e5d-1bc0-4fdb-8b0d-7e238839af16",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "af92261c-296f-41a4-8527-d403e598eff9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 827,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "6911ea43-31cf-43f9-ab87-533971d20078",
        "cursor": {
          "ref": "c8011a42-5679-4a5e-aede-6243933a1a25",
          "length": 157,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6267e9d4-5878-4672-8fbe-6a16d4d94c2f"
        },
        "item": {
          "id": "6911ea43-31cf-43f9-ab87-533971d20078",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a1400920-a148-482f-a433-970de3ec7da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1061,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "5b0aa337-2577-4b7b-8703-bea25277ea0a",
        "cursor": {
          "ref": "6fb387e5-abd6-48e0-837e-c82d86e078c9",
          "length": 157,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7a8ff1eb-7227-48cb-903b-538a73e32fdb"
        },
        "item": {
          "id": "5b0aa337-2577-4b7b-8703-bea25277ea0a",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "11a13c6e-b6be-48f5-9f68-1ce62da925f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 968,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "ed1c9272-0a8d-45e4-9f53-98b105444c4d",
        "cursor": {
          "ref": "6ede3484-0bf3-493f-af36-aafac3d7ffa8",
          "length": 157,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "572ced65-c43d-4694-8723-05165fe1cebd"
        },
        "item": {
          "id": "ed1c9272-0a8d-45e4-9f53-98b105444c4d",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "0592015f-4c9a-417e-96bb-f298034ff79a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1160,
          "responseSize": 56
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "6736ed26-a18c-4547-b4c2-1189d7dc75df",
        "cursor": {
          "ref": "e18d21f6-4f04-4ea3-b51d-8669c99dcdfe",
          "length": 157,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8660e2d1-36e8-438c-848c-76d939a733b8"
        },
        "item": {
          "id": "6736ed26-a18c-4547-b4c2-1189d7dc75df",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2c2013f4-af33-4ffc-aafd-027336946d5e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1063,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "f3bcdc74-d821-4040-888f-a2b09a3396a4",
        "cursor": {
          "ref": "2aceeccb-2f57-4af0-a060-14bcc03f2b57",
          "length": 157,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c18cb359-23d4-4fee-8a55-2ff5ea4cd6ed"
        },
        "item": {
          "id": "f3bcdc74-d821-4040-888f-a2b09a3396a4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ffd6faac-1bd2-4014-b855-de25fd75ffdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 838,
          "responseSize": 465
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "9a47c163-7d77-4af5-91fb-35109056d0ac",
        "cursor": {
          "ref": "18d657e3-9c5e-4c31-8787-9ee9d9b499e1",
          "length": 157,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6be94766-4833-444c-8e7c-7da9b6698198"
        },
        "item": {
          "id": "9a47c163-7d77-4af5-91fb-35109056d0ac",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "746c75dd-de79-4028-8d03-c5ac3a0cf382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 830,
          "responseSize": 487
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "f3870224-bdf6-4576-9a29-5f3aedb7ab91",
        "cursor": {
          "ref": "cdfbd415-1464-46fe-aee6-3f2798f26b3a",
          "length": 157,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "96678e46-8535-40ff-928b-ba8febb3cefb"
        },
        "item": {
          "id": "f3870224-bdf6-4576-9a29-5f3aedb7ab91",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "942250ef-2987-40eb-b47e-11f126320698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 598,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "26880b54-feed-474d-ac6b-3e38f6b4890e",
        "cursor": {
          "ref": "f96411d0-56bb-4a4f-aebe-c38cc2adffef",
          "length": 157,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a02013d2-3338-420e-bf3c-346a69a79d39"
        },
        "item": {
          "id": "26880b54-feed-474d-ac6b-3e38f6b4890e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cb576141-8d75-446e-b197-345e1fcff103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 547,
          "responseSize": 490
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "d3f44474-eab1-418a-adef-b4393ec2470e",
        "cursor": {
          "ref": "f3609f0e-08a6-43bd-906d-dbb377feba56",
          "length": 157,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "da7d3b4b-ad25-4609-bfee-3591bf59b0cd"
        },
        "item": {
          "id": "d3f44474-eab1-418a-adef-b4393ec2470e",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "cd272bb9-b395-4f1f-92b0-d58ab23f1a94",
          "status": "Created",
          "code": 201,
          "responseTime": 1962,
          "responseSize": 652
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "302b850f-5487-4c6f-8d23-820587426383",
        "cursor": {
          "ref": "93049242-075f-43f9-9450-7d45c752c6f0",
          "length": 157,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1286b6c0-2477-47c7-9483-16c90a22b7b4"
        },
        "item": {
          "id": "302b850f-5487-4c6f-8d23-820587426383",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "9e4c38be-b292-4d9e-a94f-3a978d42fcde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 488,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "746e5565-6eee-4c20-a307-268ce636dfab",
        "cursor": {
          "ref": "01f374a1-075b-477a-a819-c5366f691fce",
          "length": 157,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ac157e01-31e8-4e00-bbb7-99c9c686501e"
        },
        "item": {
          "id": "746e5565-6eee-4c20-a307-268ce636dfab",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "30e7c4d5-61c4-46ab-9af3-99c7f01908b9",
          "status": "Created",
          "code": 201,
          "responseTime": 1881,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "4c4f6d78-1794-400b-979e-f13c3472db58",
        "cursor": {
          "ref": "e2dbe93c-a0e0-44a7-ad1e-2d95852deef3",
          "length": 157,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2fb6a729-e314-4321-9862-9b4c99e41c59"
        },
        "item": {
          "id": "4c4f6d78-1794-400b-979e-f13c3472db58",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "10de63bd-b098-4736-82dc-a628436bae46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 544,
          "responseSize": 477
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "330aa771-be52-4b4c-9f5e-83881534e973",
        "cursor": {
          "ref": "3f7c8d48-caf7-4ddc-907b-60cc29065aaf",
          "length": 157,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e1c895ff-add2-410f-8bb3-98900c4ad4ff"
        },
        "item": {
          "id": "330aa771-be52-4b4c-9f5e-83881534e973",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f6756bc1-6d7d-4a6c-9124-7587e4451336",
          "status": "Created",
          "code": 201,
          "responseTime": 2197,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "4525787d-bd88-4320-adb1-a14e019c6899",
        "cursor": {
          "ref": "86f1b606-6cd3-4e98-9400-2a11a9266880",
          "length": 157,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "88744cc0-02b0-45b8-8466-312f9850c99e"
        },
        "item": {
          "id": "4525787d-bd88-4320-adb1-a14e019c6899",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "c5c7316b-ff13-44dd-86e9-840a92a91d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 501,
          "responseSize": 502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "e3b218d3-c821-48a1-9da0-c3543ef0765a",
        "cursor": {
          "ref": "58a5728b-a14c-4886-9b91-8a6b87358430",
          "length": 157,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "386d2272-8b4b-44c0-a68f-1d026ada9488"
        },
        "item": {
          "id": "e3b218d3-c821-48a1-9da0-c3543ef0765a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4a02d47f-f6d6-4a4a-ae87-bd464dbcfd81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 460,
          "responseSize": 588
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "1aabbbf5-8ceb-42b6-b61e-9aab04ebb6d4",
        "cursor": {
          "ref": "e02820db-00f1-49fc-9838-b3fdfdb4f91f",
          "length": 157,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9083913e-7be8-4bdc-a278-24d037b87a17"
        },
        "item": {
          "id": "1aabbbf5-8ceb-42b6-b61e-9aab04ebb6d4",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "131d8473-e85c-4159-a5ed-bed3213e04bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 412,
          "responseSize": 564
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "2c0d0721-5d78-482b-b7a4-7b2b7b57cc25",
        "cursor": {
          "ref": "0942d629-661f-4044-b9d2-c5736f3a0ef8",
          "length": 157,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0364cf32-a7fc-4d41-ac1d-1aade2d4d1c3"
        },
        "item": {
          "id": "2c0d0721-5d78-482b-b7a4-7b2b7b57cc25",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "dfde56bc-e45d-4f4a-8abc-b6aea5eb7f73",
          "status": "Created",
          "code": 201,
          "responseTime": 1818,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "a5f758ef-1237-47b9-bc58-df61f38c7177",
        "cursor": {
          "ref": "81546764-f9d1-4003-ba22-7532035c4f74",
          "length": 157,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "45226bb6-38b1-4861-a93a-508146108b61"
        },
        "item": {
          "id": "a5f758ef-1237-47b9-bc58-df61f38c7177",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "906e3221-1ccd-4aae-b298-1b36733c827d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 400,
          "responseSize": 594
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "1ce0eb7a-7fe4-4bff-9278-12fe7bed2074",
        "cursor": {
          "ref": "3fa04155-96f9-42af-9181-8a49ee1f646e",
          "length": 157,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e46579a8-f3ad-4e8f-a3e4-a44b00a43f23"
        },
        "item": {
          "id": "1ce0eb7a-7fe4-4bff-9278-12fe7bed2074",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "399fedda-2856-4311-9235-a3d61706d503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 378,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "03d71274-2fa0-4cd1-9afb-461f49a70039",
        "cursor": {
          "ref": "a309ad7d-8906-4b1a-80d4-679532b20117",
          "length": 157,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2803e521-8bd8-43a5-8087-7f6d591a69e8"
        },
        "item": {
          "id": "03d71274-2fa0-4cd1-9afb-461f49a70039",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f9e72e09-9930-4402-8c33-dfe1959b9871",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "344ec418-16c5-4fa4-9834-70680d819342",
        "cursor": {
          "ref": "475857ac-0ed6-4584-ab96-aec9511d6f20",
          "length": 157,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c63c2073-1395-44ad-82d6-649212572766"
        },
        "item": {
          "id": "344ec418-16c5-4fa4-9834-70680d819342",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "17128abf-c298-464b-ab86-aeedeaf7559e",
          "status": "Created",
          "code": 201,
          "responseTime": 1305,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "7326819e-eacc-43e7-ae87-8753ade5b014",
        "cursor": {
          "ref": "f7833333-2a7e-475a-b735-1abfabea04a4",
          "length": 157,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4666bce2-6b5a-4d04-a1c2-1d07c463f254"
        },
        "item": {
          "id": "7326819e-eacc-43e7-ae87-8753ade5b014",
          "name": "credentials_issue"
        },
        "response": {
          "id": "847725e7-8428-4339-a29f-54b6e544b961",
          "status": "Created",
          "code": 201,
          "responseTime": 1538,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:web:platform.transmute.industries:organizations:org_Mt46IVhChCDYEV6o' to equal undefined",
              "stack": "AssertionError: expected 'did:web:platform.transmute.industries:organizations:org_Mt46IVhChCDYEV6o' to equal undefined\n   at Object.eval sandbox-script.js:3:42)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "0adbe995-4352-4c0e-a53e-b3ace9d5e230",
        "cursor": {
          "ref": "93f8c139-2eeb-4d39-95ac-025a56eeeba7",
          "length": 157,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "fc4b24f4-7d92-4794-9b5f-1e6691930540"
        },
        "item": {
          "id": "0adbe995-4352-4c0e-a53e-b3ace9d5e230",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "b4d2239e-48c9-4274-8f5f-0f7c7b6ba65a",
          "status": "Created",
          "code": 201,
          "responseTime": 1635,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c888fd-5ddb-4589-81c9-c65782dc0c98",
        "cursor": {
          "ref": "52a2dbca-57b9-4872-b9d8-f90fae6a932e",
          "length": 157,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e79d21e4-76ed-44fe-81bf-f954f82307a2"
        },
        "item": {
          "id": "b4c888fd-5ddb-4589-81c9-c65782dc0c98",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8778024b-f177-41ec-a4d3-b47f02a7ab3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 411,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:44)"
            }
          }
        ]
      },
      {
        "id": "38983785-cbb0-4250-8e6a-8182006ab02b",
        "cursor": {
          "ref": "21cf9434-8197-4b06-ab2e-6d65af9d8a48",
          "length": 157,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "dc5e8edb-12f2-4a95-8c8a-21732e19b377"
        },
        "item": {
          "id": "38983785-cbb0-4250-8e6a-8182006ab02b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "074dcfed-0ca1-4f86-8486-873ba58b62c4",
          "status": "Created",
          "code": 201,
          "responseTime": 1354,
          "responseSize": 658
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc82b88b-6afb-40e2-bf79-f6b2aeca0872",
        "cursor": {
          "ref": "3bcd9e70-33a1-4c6a-8243-b1a53c671b8c",
          "length": 157,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "587a1844-b250-4d91-a657-b2e642628ac5"
        },
        "item": {
          "id": "dc82b88b-6afb-40e2-bf79-f6b2aeca0872",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "798ace1c-e557-4e33-804d-4741a775c848",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1076,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2a2507e9-0ff0-4b1f-895d-c0c66f575c65",
        "cursor": {
          "ref": "3de4617c-3cb4-46b2-bde0-2fb9e3fc68ea",
          "length": 157,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "dae15434-3f61-4fbd-b16a-c02b64677405"
        },
        "item": {
          "id": "2a2507e9-0ff0-4b1f-895d-c0c66f575c65",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "167fd687-aaa5-4944-ab8c-0739b970454e",
          "status": "Created",
          "code": 201,
          "responseTime": 1738,
          "responseSize": 975
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65cee49-6150-47e7-ba2c-19b7a7256676",
        "cursor": {
          "ref": "c93df387-6228-4c13-a2fa-1a970146e34c",
          "length": 157,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7b93d4c8-9a6f-44fa-abf5-fc28b605048a"
        },
        "item": {
          "id": "a65cee49-6150-47e7-ba2c-19b7a7256676",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "42f8fb45-3852-42ab-8bbf-755ded963cca",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a65cee49-6150-47e7-ba2c-19b7a7256676",
        "cursor": {
          "ref": "c93df387-6228-4c13-a2fa-1a970146e34c",
          "length": 157,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7b93d4c8-9a6f-44fa-abf5-fc28b605048a"
        },
        "item": {
          "id": "a65cee49-6150-47e7-ba2c-19b7a7256676",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "42f8fb45-3852-42ab-8bbf-755ded963cca",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "15aad009-f5c9-41b6-8774-355333f02df9",
        "cursor": {
          "ref": "3062dc87-5660-4312-b46f-4fc997f950f4",
          "length": 157,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e277b6b7-6e75-403c-a0f3-284e439f0b3b"
        },
        "item": {
          "id": "15aad009-f5c9-41b6-8774-355333f02df9",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "65c90b7a-5e27-454e-9048-a3a4f624003e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 402,
          "responseSize": 206
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "357e0f5b-9787-4254-b44d-7d58bffdf794",
        "cursor": {
          "ref": "e39b725d-e186-46d1-a531-0a838d3e0c0e",
          "length": 157,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4379387a-8e3a-43e9-acd1-94443b403759"
        },
        "item": {
          "id": "357e0f5b-9787-4254-b44d-7d58bffdf794",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "42ad0ded-2f2b-4b4f-97ca-ab742a831bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "357e0f5b-9787-4254-b44d-7d58bffdf794",
        "cursor": {
          "ref": "e39b725d-e186-46d1-a531-0a838d3e0c0e",
          "length": 157,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4379387a-8e3a-43e9-acd1-94443b403759"
        },
        "item": {
          "id": "357e0f5b-9787-4254-b44d-7d58bffdf794",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "42ad0ded-2f2b-4b4f-97ca-ab742a831bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b03c0279-6bbc-4cb0-9bff-348642ccfaa1",
        "cursor": {
          "ref": "6eff5e7e-b787-46cd-9997-b320585f3d39",
          "length": 157,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d836e5a8-61d0-4adf-ba39-8600099fc248"
        },
        "item": {
          "id": "b03c0279-6bbc-4cb0-9bff-348642ccfaa1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b1f78010-d83f-4fc7-bc9d-2e6024dedbe9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 197,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "00101e9f-c6eb-454f-9448-243f2bfda186",
        "cursor": {
          "ref": "26bdb0bd-2c9e-4e29-a2bc-ceaddaae7625",
          "length": 157,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "28492314-99ee-45d8-9938-78b3b28f9c26"
        },
        "item": {
          "id": "00101e9f-c6eb-454f-9448-243f2bfda186",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "675abcd3-e389-473f-9590-494dbfa2974f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "8229dbd8-318b-42fe-8734-fc10dd378b98",
        "cursor": {
          "ref": "058499e1-2878-4523-891c-a236d41c4aa7",
          "length": 157,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b37f2dad-5451-4ae9-b8f4-d744ddb6029f"
        },
        "item": {
          "id": "8229dbd8-318b-42fe-8734-fc10dd378b98",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c2363b70-0d8e-4231-a3ac-499af77a9f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 540
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "0d7ff2e3-8816-4fc9-b178-f55008037af8",
        "cursor": {
          "ref": "f1517f38-e198-4d27-8337-312f8d74b107",
          "length": 157,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "26d002a6-c634-4e97-bca7-798aad2aac9b"
        },
        "item": {
          "id": "0d7ff2e3-8816-4fc9-b178-f55008037af8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7b14242c-88b7-4cb2-be98-5e2712463bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 541
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "b83ed62e-4d84-44c3-a436-6024e0fe4520",
        "cursor": {
          "ref": "a2072274-491b-4fb6-9457-a50d2f7de4e6",
          "length": 157,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b44970f0-dd92-478c-b638-e3479d925474"
        },
        "item": {
          "id": "b83ed62e-4d84-44c3-a436-6024e0fe4520",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8ec4e175-1bc0-40bf-9c9f-474ebd910884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 539
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "e62e97f1-74a0-440a-915f-72e5cd2b6b32",
        "cursor": {
          "ref": "4c0e18fe-d47b-405e-9735-31b81bf92126",
          "length": 157,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2e783526-3daa-46fb-926e-e4b2f2025736"
        },
        "item": {
          "id": "e62e97f1-74a0-440a-915f-72e5cd2b6b32",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5378c39a-d1e0-483f-9c7b-f89b70afdc79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 349,
          "responseSize": 1154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "1583aba4-4a86-4cd2-809b-915e1b770cb7",
        "cursor": {
          "ref": "a4b6d434-5b1f-4519-bc4a-67328d3ccc20",
          "length": 157,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d34340d0-3763-479e-9a26-149500167551"
        },
        "item": {
          "id": "1583aba4-4a86-4cd2-809b-915e1b770cb7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ed2295c9-a4fc-4df8-a998-c1dd816863a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "427c0382-0b81-4fb3-9edd-4ae5c003a5bf",
        "cursor": {
          "ref": "49c907b1-3977-48ef-b4ed-40b027c03441",
          "length": 157,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9d31f967-5669-4b57-9c5d-bad697214d88"
        },
        "item": {
          "id": "427c0382-0b81-4fb3-9edd-4ae5c003a5bf",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "eab1e764-9237-4eb6-bf9d-d54130f4bf6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 1699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "accb1463-4dec-4470-a1c4-0688535282e6",
        "cursor": {
          "ref": "c0d89842-3596-42cb-9b3e-32670c0d5ae8",
          "length": 157,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b9703ec6-1ace-40da-9092-b6b426bda8b1"
        },
        "item": {
          "id": "accb1463-4dec-4470-a1c4-0688535282e6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ecbcfec9-be8e-4566-954f-c0cf8c37e98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 1700
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "5b625e45-14ac-415c-b771-ec138e75e9a0",
        "cursor": {
          "ref": "1b440357-43b8-4fcf-88b3-a1ffb1b5ff13",
          "length": 157,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f85cc1ba-68a7-4446-9338-c799d331f154"
        },
        "item": {
          "id": "5b625e45-14ac-415c-b771-ec138e75e9a0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "550cda94-9163-4a39-b68b-88d89a0b0739",
          "status": "OK",
          "code": 200,
          "responseTime": 271,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "c3c592b7-5061-4ad9-82e2-eb2aebb1a2f0",
        "cursor": {
          "ref": "673f469d-a217-4eb8-be51-97c89b65caba",
          "length": 157,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c4620540-e4ca-4aef-b9fb-7e03378b68e0"
        },
        "item": {
          "id": "c3c592b7-5061-4ad9-82e2-eb2aebb1a2f0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "64fde3a9-145b-4d03-bcf0-5391c3702e73",
          "status": "OK",
          "code": 200,
          "responseTime": 270,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "c98443ac-2ad9-43cd-b08d-e6c8c5f5766d",
        "cursor": {
          "ref": "136e6a6f-134e-40fd-88a8-548de238f952",
          "length": 157,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6df9f006-3c74-4d35-a4d5-7e65dadf35bd"
        },
        "item": {
          "id": "c98443ac-2ad9-43cd-b08d-e6c8c5f5766d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "252519aa-2247-4096-b706-cdfbb2918a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 2187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "569f5306-93ce-4927-b574-7795d6b1af4a",
        "cursor": {
          "ref": "93e96091-49a9-4994-80c9-7a26ec8fd6ab",
          "length": 157,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b09fe64d-bf29-42b4-be11-6912ba217966"
        },
        "item": {
          "id": "569f5306-93ce-4927-b574-7795d6b1af4a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d5768aed-24ea-4c72-a3bc-e06762d31767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "8dbebb0c-5dfb-40a6-a0f1-f4c777ae173f",
        "cursor": {
          "ref": "337a5bb8-1c07-432e-bcf5-4f1861cd8315",
          "length": 157,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0ed857bc-104b-4b2a-8785-8e4c53912762"
        },
        "item": {
          "id": "8dbebb0c-5dfb-40a6-a0f1-f4c777ae173f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fc4ef28e-8350-42f5-9b1c-492f6775faa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 2176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "5189d180-2299-4f62-a8ae-3c1b5f78a7f2",
        "cursor": {
          "ref": "0430943d-0881-4cbd-a826-90cef3c2a58e",
          "length": 157,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8194ca52-5185-40d8-bb89-8ce33081e4dc"
        },
        "item": {
          "id": "5189d180-2299-4f62-a8ae-3c1b5f78a7f2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "eb8ee708-b99a-4758-aecc-87a5b5b50e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 2177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "8fb30442-a515-43f2-b56b-d28f19888c2b",
        "cursor": {
          "ref": "e9a7330b-173b-4f9b-be30-64b7426b5353",
          "length": 157,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6f605fe8-b518-4ac7-ab95-bd97606279de"
        },
        "item": {
          "id": "8fb30442-a515-43f2-b56b-d28f19888c2b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f70bddb4-ee52-4a59-a6d5-f999b2decf0c",
          "status": "OK",
          "code": 200,
          "responseTime": 247,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "95bd4d46-f8a3-4a37-a522-7f13a490e9c8",
        "cursor": {
          "ref": "f8ff4768-9152-4b36-bbb3-da960e2f5a69",
          "length": 157,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "812a43c9-4b24-4441-b147-fa7217b616db"
        },
        "item": {
          "id": "95bd4d46-f8a3-4a37-a522-7f13a490e9c8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5ec54d4e-e4fa-4aa5-890b-6ad267e01563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 1235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ed5c3488-b554-44b4-a41b-ffa1b3d3a266",
        "cursor": {
          "ref": "8ba2f9c2-04f9-4d59-b3ad-f09dbcde4f14",
          "length": 157,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1911590b-c68f-4e40-9d0f-383b7214538e"
        },
        "item": {
          "id": "ed5c3488-b554-44b4-a41b-ffa1b3d3a266",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e52f1f71-5951-4931-a549-458608b8cae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 1191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "cef40e7f-680c-4ada-8618-5a05d956e039",
        "cursor": {
          "ref": "f50f9a59-fd8d-482a-b3b9-34bdebbde505",
          "length": 157,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "845796d0-16b2-4a63-b188-e55109ecd69d"
        },
        "item": {
          "id": "cef40e7f-680c-4ada-8618-5a05d956e039",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6dfc8ece-6803-4fea-a4fd-cf3064f6b491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 1189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4fbcad7e-bccb-4359-acc5-f3542d9c2dd6",
        "cursor": {
          "ref": "9d4b8484-e174-44a5-b1d6-903e4fe44b51",
          "length": 157,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9bfb2099-772d-467f-80c2-7673864dc8f6"
        },
        "item": {
          "id": "4fbcad7e-bccb-4359-acc5-f3542d9c2dd6",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "61c480fe-0fc2-4afa-91b8-d78c0c6dfd82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 1190
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "c8f59db7-ce04-42c1-97fb-108d464c1ff8",
        "cursor": {
          "ref": "0a7f96f1-56a2-464c-8619-350fba047a8e",
          "length": 157,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d736bb10-5c5e-4109-923d-14547e0dfe26"
        },
        "item": {
          "id": "c8f59db7-ce04-42c1-97fb-108d464c1ff8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "cceb0bf2-7741-4e09-ba5e-1abf5ee1ad69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 1241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "ea17e444-6bbb-43d1-92fd-8e0cf21d13b3",
        "cursor": {
          "ref": "8aba81ba-a84e-4b48-bf86-1c440ceabc29",
          "length": 157,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5cc2ac3a-350e-420f-9e20-482be3048f8b"
        },
        "item": {
          "id": "ea17e444-6bbb-43d1-92fd-8e0cf21d13b3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "aaab2c8a-1c5a-4c2f-82b1-a2a31c1c15c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 1168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "31947ef3-de39-49e2-87e6-e5dc541e3e23",
        "cursor": {
          "ref": "9bc97351-8310-4725-aeb6-1c880d11e2d2",
          "length": 157,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "616fd8da-e3ff-4f75-ad6f-3c72e74864b8"
        },
        "item": {
          "id": "31947ef3-de39-49e2-87e6-e5dc541e3e23",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "497aa3c1-7735-4bb0-95b5-7aa9258299f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "d75bc3ac-63f0-407f-b92b-bd2f139c5419",
        "cursor": {
          "ref": "6d9aa9b1-6438-4e33-9a04-0bd892a48865",
          "length": 157,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9d914fd2-ef1f-4fd1-b9a8-5a38f877ffb9"
        },
        "item": {
          "id": "d75bc3ac-63f0-407f-b92b-bd2f139c5419",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "15381ee9-a478-4406-aed2-57c9d5a0b0b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 1488
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "ab7fdc59-70e8-4b6f-8f83-98a90c8a6250",
        "cursor": {
          "ref": "1712f729-d2e8-4fe0-b584-38ac7a263765",
          "length": 157,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f86d9768-2118-4fff-8713-af83fb1f89d4"
        },
        "item": {
          "id": "ab7fdc59-70e8-4b6f-8f83-98a90c8a6250",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "868bf5de-3ccc-40e2-8490-9315719525a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "6aef57d2-7715-462e-8a1f-17b1355a73d3",
        "cursor": {
          "ref": "a78151d5-348f-4eb0-97dc-6db60360ca10",
          "length": 157,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "64b7a238-666f-45a2-b80a-42ae6fdb2eef"
        },
        "item": {
          "id": "6aef57d2-7715-462e-8a1f-17b1355a73d3",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "30c12833-3b9e-44d1-a4fa-fb25e1d44647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 1515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "10007883-02f9-4e0d-85c7-f534111ed2df",
        "cursor": {
          "ref": "b1b26bad-a840-464c-b7a0-fb9aff13fea7",
          "length": 157,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "93bb6e9c-050e-4554-95ca-b2d7ff0af331"
        },
        "item": {
          "id": "10007883-02f9-4e0d-85c7-f534111ed2df",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "849891fe-ea5c-4971-a256-f79e16dc4d20",
          "status": "OK",
          "code": 200,
          "responseTime": 261,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "29a9b21b-844f-4dc4-abf0-f0d74dfe2084",
        "cursor": {
          "ref": "bd5808a6-0c63-4745-a84a-943483280a50",
          "length": 157,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "17723ebf-3264-47ab-bf02-88202da35d2f"
        },
        "item": {
          "id": "29a9b21b-844f-4dc4-abf0-f0d74dfe2084",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "76704a6c-b8b8-473c-a7d8-e12e4667990b",
          "status": "OK",
          "code": 200,
          "responseTime": 203,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "6922c7eb-5ee8-4230-842d-aae9738d7be0",
        "cursor": {
          "ref": "877ce6de-e85c-4090-ad8c-c87c1eaac284",
          "length": 157,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "74e5b4d2-e8c8-403c-99ee-6cc48d3224be"
        },
        "item": {
          "id": "6922c7eb-5ee8-4230-842d-aae9738d7be0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7b3a4454-49bf-49c6-b134-def10514914c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 1534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "755793d5-9edd-4919-aa66-e5c8dfb8c5eb",
        "cursor": {
          "ref": "e68b1cc0-d2ca-4b1c-b42c-dce441cf9946",
          "length": 157,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e582aaa0-dfc0-412b-a226-6d24dbdcdfd6"
        },
        "item": {
          "id": "755793d5-9edd-4919-aa66-e5c8dfb8c5eb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8fc23bd5-dc33-4a29-8517-e4344dfefff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "99737740-44d5-4329-80ba-e9715f3adb2c",
        "cursor": {
          "ref": "b6b58bd4-28e8-4131-ab27-a8f28684e7b6",
          "length": 157,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "01778bed-8bbd-4d24-a93d-d79697926587"
        },
        "item": {
          "id": "99737740-44d5-4329-80ba-e9715f3adb2c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4b26bb5c-ebc0-4022-a591-5eec1c6fd98a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "2aa552e2-c8f7-4c30-b404-c7424d91740a",
        "cursor": {
          "ref": "cf19064a-b4e3-4162-ab41-d795989ed70d",
          "length": 157,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bf05377c-1122-4d57-8a2e-1272f90f7cdb"
        },
        "item": {
          "id": "2aa552e2-c8f7-4c30-b404-c7424d91740a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "785c4970-542b-414c-9441-36135fb6dc0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 1524
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "c260ee8f-d34a-445e-ab84-41dd7cb89037",
        "cursor": {
          "ref": "145fbf77-8277-4158-965b-0645b7d242b6",
          "length": 157,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "73813875-01cd-4954-b6aa-da1df7cfa430"
        },
        "item": {
          "id": "c260ee8f-d34a-445e-ab84-41dd7cb89037",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5e8f4ace-6283-4df1-b96f-01fa60c93b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 1550
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "4d70dc41-efd1-4b2d-8d0d-783a64cfbe87",
        "cursor": {
          "ref": "d675db39-7e7c-44a9-b4a5-cbb36cbcc3fc",
          "length": 157,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d085c4f2-f19d-44a0-9775-11281d2ad1dc"
        },
        "item": {
          "id": "4d70dc41-efd1-4b2d-8d0d-783a64cfbe87",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7c819de0-9f16-4a73-ad44-b3fa8f8b505b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 1136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "b4d7b8c9-7806-40fe-b077-7254da6f258b",
        "cursor": {
          "ref": "ed57cbd9-4a8b-4625-80f5-5b6c5e0227dc",
          "length": 157,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2ead8e65-9400-4d99-b256-e2dd2a487aa2"
        },
        "item": {
          "id": "b4d7b8c9-7806-40fe-b077-7254da6f258b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d0a92e0a-7b8b-4e4b-970a-02987efa5bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 1445
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "3a874240-05fe-4874-8105-dfa0e9f5db32",
        "cursor": {
          "ref": "f87c113b-d899-4c70-8b05-538d50c2f142",
          "length": 157,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6a39ec5c-a4fd-4e54-9a8b-8e66307e1d36"
        },
        "item": {
          "id": "3a874240-05fe-4874-8105-dfa0e9f5db32",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "960f9e65-4588-4bf6-b14a-517e1c6207ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 1431
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "fd15ee4a-9093-45b6-bf83-2796cc6f1c37",
        "cursor": {
          "ref": "05be98cc-3f74-42d1-ab06-6a58bf8e09d7",
          "length": 157,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6009dbbf-853b-4657-8340-00252e11b62d"
        },
        "item": {
          "id": "fd15ee4a-9093-45b6-bf83-2796cc6f1c37",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "db636da9-a715-4652-b7c1-0b52dddfb066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 1429
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "3157942f-775b-4d83-99b2-04bdd072fc24",
        "cursor": {
          "ref": "286907e5-b912-41a9-9788-d48db189d299",
          "length": 157,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f7e57401-c1e3-4114-acc8-01dac27676a2"
        },
        "item": {
          "id": "3157942f-775b-4d83-99b2-04bdd072fc24",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4a1e27eb-c8c2-4f77-bfee-85821f068e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 1430
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "f81b70a5-01e0-45d0-806c-0239ac33d791",
        "cursor": {
          "ref": "ddd59ca9-0222-4508-8ac3-200a5cab8fa2",
          "length": 157,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "02354bab-90b6-4c18-a9d3-9bf87636551f"
        },
        "item": {
          "id": "f81b70a5-01e0-45d0-806c-0239ac33d791",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c5d53549-c6ab-49ac-a223-f95ada62a9cc",
          "status": "OK",
          "code": 200,
          "responseTime": 197,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "41ab3358-2447-43bd-a858-b0613aa8bfc8",
        "cursor": {
          "ref": "c9b376a3-ae09-4096-89ee-8dfd49e9d16c",
          "length": 157,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0ca09f22-0f40-4c62-adcd-7669532898f1"
        },
        "item": {
          "id": "41ab3358-2447-43bd-a858-b0613aa8bfc8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c3f2366a-7d55-48e5-bc2c-f25ffba48518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 1470
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "af43a0f1-2980-408a-9064-11fe6da27930",
        "cursor": {
          "ref": "c9496922-30c6-4fe4-a656-79352895c472",
          "length": 157,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "99c575de-ff15-4186-8768-3209fa456514"
        },
        "item": {
          "id": "af43a0f1-2980-408a-9064-11fe6da27930",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "14acba96-080a-4b86-8606-f578df2204cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 1456
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "482aa701-c3f7-426b-bb76-b2d6e35efd10",
        "cursor": {
          "ref": "5923767b-cabf-42f2-b000-06d16d1fc7ec",
          "length": 157,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "412144dd-822f-45f0-928f-0b57cbcfb958"
        },
        "item": {
          "id": "482aa701-c3f7-426b-bb76-b2d6e35efd10",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5cfed677-0fc2-46f7-b883-18459bf51c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 1454
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "a1883e64-df35-4497-a65b-733499ef9886",
        "cursor": {
          "ref": "f2b4ea12-3e5b-4034-ac69-768635cd0663",
          "length": 157,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0d975fa3-0cc2-40ef-b4ba-d6e00fe66f32"
        },
        "item": {
          "id": "a1883e64-df35-4497-a65b-733499ef9886",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1af4b7df-48a5-4452-9fb8-16f6ad6adbeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 1455
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "748286b1-f899-412d-9b46-5c5e41bf7aab",
        "cursor": {
          "ref": "02937f95-7fa4-4b7f-806c-651e841d7843",
          "length": 157,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f0b9de89-c418-48ca-bb5c-bb0f5d8cb5fa"
        },
        "item": {
          "id": "748286b1-f899-412d-9b46-5c5e41bf7aab",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fef49b9a-8f14-46dd-8310-2a8d3a1c3e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 1476
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "57e50750-85e6-46b6-856d-802f638af664",
        "cursor": {
          "ref": "54405846-54d5-429a-bf12-06f76cd3d0f8",
          "length": 157,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "77bb87ea-a83b-410d-be88-52d37dc9b807"
        },
        "item": {
          "id": "57e50750-85e6-46b6-856d-802f638af664",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "35107a3a-b06c-478f-9e9c-a3d501a87a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 1178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "065e6e21-a095-40c0-b3e2-ccb51fadc5a9",
        "cursor": {
          "ref": "dfedc51f-1ab2-4450-a9b6-660f7cb8c570",
          "length": 157,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b338535c-cbe4-4270-8240-af62aaf608c8"
        },
        "item": {
          "id": "065e6e21-a095-40c0-b3e2-ccb51fadc5a9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a8ed4a2b-f798-4ff5-bc70-3e65c698d814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 1202
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "1c4033ce-bac7-47a6-bc52-2ea743cfffd1",
        "cursor": {
          "ref": "a9d90b49-4fab-4201-94db-f7f72765c7aa",
          "length": 157,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1362c95a-0070-4d84-a4df-acc8bd2ad9dc"
        },
        "item": {
          "id": "1c4033ce-bac7-47a6-bc52-2ea743cfffd1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "48664bdb-643f-491f-a631-fb984728438e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 1183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "c511b485-13fa-4975-9270-18f1f518260a",
        "cursor": {
          "ref": "5f4f74d3-f664-4df2-95f2-fdca707067d1",
          "length": 157,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "612e7672-9966-4d8c-a6c7-770f84133d9e"
        },
        "item": {
          "id": "c511b485-13fa-4975-9270-18f1f518260a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d01171d7-6a32-4482-8a70-89121a507dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "3d3fc57d-7bea-41e6-9f79-bbb75f46dd5c",
        "cursor": {
          "ref": "16bdeee1-7a6f-4006-aa15-74e32e0862dc",
          "length": 157,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a57702e5-1668-48ae-a055-9f10a95bd3cd"
        },
        "item": {
          "id": "3d3fc57d-7bea-41e6-9f79-bbb75f46dd5c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3309ca4a-aa68-4730-bdd5-012ca00d410e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 1182
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "fc3a4c04-e519-41b3-986a-322554d31b60",
        "cursor": {
          "ref": "d787e68c-880e-4724-bb54-39d209ebe177",
          "length": 157,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3450aae8-8538-43e4-819b-ad18e008d9c0"
        },
        "item": {
          "id": "fc3a4c04-e519-41b3-986a-322554d31b60",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0b8ac0fd-466b-4b73-8191-c42ef952e401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 1208
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "ff10afab-1cfa-4a03-88bb-b1db77232b67",
        "cursor": {
          "ref": "d45091f0-3266-4953-a200-d38abfdde5c6",
          "length": 157,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b8eed3eb-f687-4bea-8632-29f09f927c64"
        },
        "item": {
          "id": "ff10afab-1cfa-4a03-88bb-b1db77232b67",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4f6b073e-52a0-4c8f-a2cc-a01af1ef906f",
          "status": "OK",
          "code": 200,
          "responseTime": 266,
          "responseSize": 333
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "efe12ae2-f1df-4995-8669-6d4e6c3bcb8a",
        "cursor": {
          "ref": "82f4d3c8-af2d-4d67-bd96-67a377987404",
          "length": 157,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c6a17f2d-5ac6-40fc-a869-767fda264318"
        },
        "item": {
          "id": "efe12ae2-f1df-4995-8669-6d4e6c3bcb8a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a3d2f02e-4429-4882-9736-8275fc3910ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 1181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "c781fd22-109e-4245-9e89-3730c1ffb943",
        "cursor": {
          "ref": "1ee172d5-2939-4f0a-a16e-d6116d7f1d84",
          "length": 157,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "135cb703-3903-4b0c-adec-5ba77b8c4e6b"
        },
        "item": {
          "id": "c781fd22-109e-4245-9e89-3730c1ffb943",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1e81d0e3-56da-49a9-a239-2cb7b877e584",
          "status": "OK",
          "code": 200,
          "responseTime": 276,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "a1c88f27-e040-40c7-8404-9a859f47dc9d",
        "cursor": {
          "ref": "559c5b30-b324-48f6-b7de-b37a87b35c75",
          "length": 157,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f5fa8d9b-62cb-4943-853c-659305d7ab6b"
        },
        "item": {
          "id": "a1c88f27-e040-40c7-8404-9a859f47dc9d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "69c69965-10ff-4004-aa4b-045e53ac4184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 1656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "363eb35a-314c-47f4-9df2-458dc965e177",
        "cursor": {
          "ref": "e14c56a2-2feb-44ee-a43e-1f502b6f2c12",
          "length": 157,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4d41b40b-95b5-4e5f-89b6-514448cff62e"
        },
        "item": {
          "id": "363eb35a-314c-47f4-9df2-458dc965e177",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7c184cf5-9cad-49b2-b41d-c9da51076be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 1654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "d893db2f-f391-4cce-8a3e-c4b4166b7b97",
        "cursor": {
          "ref": "d472255f-7c56-4191-8395-70d7e4e2a66b",
          "length": 157,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "93adc1ac-6c46-482e-b02d-6b7941950d2c"
        },
        "item": {
          "id": "d893db2f-f391-4cce-8a3e-c4b4166b7b97",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ad754ad5-d2cb-43e8-a0ad-6dea470b9028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 1655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "id": "cca9f49e-c771-4f26-a646-1a1a2b2cbbd7",
        "cursor": {
          "ref": "c64df313-202d-40b7-9d61-0ef49c1102ff",
          "length": 157,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d66511e7-d181-440d-95e8-59f636a54fa2"
        },
        "item": {
          "id": "cca9f49e-c771-4f26-a646-1a1a2b2cbbd7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1e0393e5-6436-4f73-8101-3c8d43e83482",
          "status": "OK",
          "code": 200,
          "responseTime": 290,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "e949bd49-fc4b-4d33-9212-3504f78d49e9",
        "cursor": {
          "ref": "5506de04-a414-4ba0-8714-618ead065543",
          "length": 157,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5262b766-4035-44aa-896d-543475c07e3b"
        },
        "item": {
          "id": "e949bd49-fc4b-4d33-9212-3504f78d49e9",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d1be689d-b875-452e-91cb-9397c5501b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 1695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "d5964c3c-d22d-4636-9b25-00a9696b6b7f",
        "cursor": {
          "ref": "dd1bd096-2e08-43f6-a8f2-fe8a8ae5c256",
          "length": 157,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "35a39eb3-e504-4ee9-b963-9fe6359ae703"
        },
        "item": {
          "id": "d5964c3c-d22d-4636-9b25-00a9696b6b7f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2bdbdff0-d5f4-4f75-b7c1-a61a55826e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 1681
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "eccfd24b-4f57-4a83-9b36-2a55ee5f4cd3",
        "cursor": {
          "ref": "faafa0a7-5d42-4531-8ef1-e6e258815fe9",
          "length": 157,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bf1aa432-6fff-4e09-ac2e-856827fe3198"
        },
        "item": {
          "id": "eccfd24b-4f57-4a83-9b36-2a55ee5f4cd3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "652a0f82-7e0b-4058-adf6-a9d51ecf5413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 1679
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "1bf19050-9143-42be-9bb0-e8bb6b166caa",
        "cursor": {
          "ref": "e55b28d3-24f2-485d-811a-d97120c1f8d2",
          "length": 157,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e714a9df-a055-4426-be82-4ac9a9e69532"
        },
        "item": {
          "id": "1bf19050-9143-42be-9bb0-e8bb6b166caa",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6304a969-06b3-4ef3-9d3f-c33cc85f2997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 1680
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "6d92a5fb-d587-447c-a969-f69bd272eb48",
        "cursor": {
          "ref": "8fffd906-af2f-4d8d-a8bd-3f19cf04c88b",
          "length": 157,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "141cfb0c-8cbb-4741-a88c-a48299e1c242"
        },
        "item": {
          "id": "6d92a5fb-d587-447c-a969-f69bd272eb48",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b50ce274-6853-4715-8553-10f396808382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 1701
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "c83e3832-6b3b-4292-9ab4-4de65adf1dce",
        "cursor": {
          "ref": "9dc51865-2b91-4c78-91d6-d5918cdd133b",
          "length": 157,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "764c3d6f-6626-488c-a481-146e28952657"
        },
        "item": {
          "id": "c83e3832-6b3b-4292-9ab4-4de65adf1dce",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7bf886ea-8b9c-4805-bdd4-aa5fba7a7b7b",
          "status": "OK",
          "code": 200,
          "responseTime": 200,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "a27f339d-4206-46aa-ab70-cce712553be8",
        "cursor": {
          "ref": "b0b48c46-de7e-4146-a5af-6624c2ef393a",
          "length": 157,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "62d80d9d-bba3-48d2-a52c-7e50cc091a0f"
        },
        "item": {
          "id": "a27f339d-4206-46aa-ab70-cce712553be8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "688445f8-05b0-4537-bf6c-314b972de4f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 203,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "6511d14d-40e9-4370-85ec-0d6fdb2bda28",
        "cursor": {
          "ref": "d928c7a8-585d-4b1b-8d58-6b8b527b3d5e",
          "length": 157,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "25bd5f4d-6b91-417c-bc05-5483df1ad717"
        },
        "item": {
          "id": "6511d14d-40e9-4370-85ec-0d6fdb2bda28",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5fe55c0d-4fb9-4a4f-8a8d-4c987c705e56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 209,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "572ffbae-c481-434f-8bee-c53209c377f9",
        "cursor": {
          "ref": "dc4d2c94-faaa-4dbe-992d-dc0c01bd60bc",
          "length": 157,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "74e1b558-805e-4a24-a046-8e19ee78fd46"
        },
        "item": {
          "id": "572ffbae-c481-434f-8bee-c53209c377f9",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8da99e12-8718-4005-91fd-ba5683a9299f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 224,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "d034410e-8ea1-47dc-b326-9baf62422a78",
        "cursor": {
          "ref": "bebe594d-2afa-4d1a-9da5-6fe751ad652c",
          "length": 157,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ff93c5df-43a1-45a2-9d26-7384be7b6147"
        },
        "item": {
          "id": "d034410e-8ea1-47dc-b326-9baf62422a78",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b2869638-6dfe-48d5-8de4-180db6439c25",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "6bd277dd-1c3d-49f0-8c92-ca640e1e3db2",
        "cursor": {
          "ref": "df710666-e8fa-4514-8fc6-334c733f3b40",
          "length": 157,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d744030b-c1ef-4d94-849e-2e3ef00f87ae"
        },
        "item": {
          "id": "6bd277dd-1c3d-49f0-8c92-ca640e1e3db2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b7cde3a3-716a-4298-bd45-73e26558b5b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 246,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "77de726a-0d5b-403e-a664-9a51cfb7acbe",
        "cursor": {
          "ref": "0f854854-5be3-480d-89cf-cb7d08808f9e",
          "length": 157,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "14e62091-ed6a-46b0-84ed-b7746f901ec2"
        },
        "item": {
          "id": "77de726a-0d5b-403e-a664-9a51cfb7acbe",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "12f575c9-9328-441a-8fe2-0b3a433c0008",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 191,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "b30f02c7-bdfa-4eee-aa44-818e655b00d7",
        "cursor": {
          "ref": "1be4c612-44f7-42ff-a673-d30974b4a7d6",
          "length": 157,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "49b26126-1baa-4136-89c9-2e69b57714fa"
        },
        "item": {
          "id": "b30f02c7-bdfa-4eee-aa44-818e655b00d7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1f79b779-c4ab-46c2-8ad9-2f60c950f500",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 196,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "b84224dd-d609-4c2c-84bc-084704ed700c",
        "cursor": {
          "ref": "854479f4-04b8-485c-8caf-3fd8ea9557f7",
          "length": 157,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "37fdcbe8-a4c9-444b-9c98-91626af4ed03"
        },
        "item": {
          "id": "b84224dd-d609-4c2c-84bc-084704ed700c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "cc2fd784-964c-4cc3-9897-2515358d33fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 189,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "a0ffcb33-e36f-4db5-a9bf-2f190bc627b4",
        "cursor": {
          "ref": "8845c354-649c-406f-885f-cc3ad68217b6",
          "length": 157,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0dcd2289-d398-4c6c-b54d-a239f2dbb9c5"
        },
        "item": {
          "id": "a0ffcb33-e36f-4db5-a9bf-2f190bc627b4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "74d3e636-07d3-4a85-8082-03af22e45a9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 204,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "45989e95-4bab-4feb-868b-a6b3e81e54e4",
        "cursor": {
          "ref": "0324cfa7-2084-4429-a2f7-b7a35f3f4f50",
          "length": 157,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f574c43a-facd-42b1-a345-bf5483aed5e0"
        },
        "item": {
          "id": "45989e95-4bab-4feb-868b-a6b3e81e54e4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d5c8680b-2047-4542-b59b-33465cbcf32b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 231,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "9c564271-292c-4113-acb4-303ab8f66a6b",
        "cursor": {
          "ref": "2481bfd5-8c56-460c-b18d-3ca7c29aed00",
          "length": 157,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2682adb4-5d9d-4992-8f9a-1f6dfd594e79"
        },
        "item": {
          "id": "9c564271-292c-4113-acb4-303ab8f66a6b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0aa4fe32-63e6-4831-9dc0-1523ad1fab78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 198,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "082dc1f8-933f-422e-80dc-4d9b9d54c117",
        "cursor": {
          "ref": "1300a3c4-0e48-477c-8cea-70d65ffee716",
          "length": 157,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "52a115d2-ea46-4e1d-956d-91b2123b8032"
        },
        "item": {
          "id": "082dc1f8-933f-422e-80dc-4d9b9d54c117",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "55eff053-280d-4d31-bd1b-273118c68d15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 217,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "2c0e7026-f280-4dec-aef6-96a75b84b339",
        "cursor": {
          "ref": "365c4fd4-01be-47af-9809-1954161a25e8",
          "length": 157,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "577b9bc8-7080-4a07-8658-1ddd4acc9f62"
        },
        "item": {
          "id": "2c0e7026-f280-4dec-aef6-96a75b84b339",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "286b8d5e-3729-44cf-82b3-6dd51c05dd1c",
          "status": "OK",
          "code": 200,
          "responseTime": 247,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "1e20ef30-d758-4e51-86c3-da3c37d8ae1a",
        "cursor": {
          "ref": "934df930-3547-4d04-867a-c5dd14121c8f",
          "length": 157,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7c2452a0-b265-41a3-a388-d338cfcb5d4e"
        },
        "item": {
          "id": "1e20ef30-d758-4e51-86c3-da3c37d8ae1a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bce5bd6e-3617-4c96-8089-d3d2bb19478b",
          "status": "OK",
          "code": 200,
          "responseTime": 260,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "432eb675-9c96-48a9-beda-5dad762b8d19",
        "cursor": {
          "ref": "4fe3f367-8607-48e7-a552-fce46d6372bd",
          "length": 157,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d20cf9f5-4637-41da-b907-b6deb2aa3407"
        },
        "item": {
          "id": "432eb675-9c96-48a9-beda-5dad762b8d19",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b9b59b70-d0cb-4986-b07e-7da4dc1ba843",
          "status": "OK",
          "code": 200,
          "responseTime": 319,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "87da9747-c4b2-485e-859c-d81f53bef5cf",
        "cursor": {
          "ref": "ef6fb959-3fc6-4353-aa1e-122f6d6c5f48",
          "length": 157,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "028b3f22-f4c7-4455-85ee-7d77788c7b4e"
        },
        "item": {
          "id": "87da9747-c4b2-485e-859c-d81f53bef5cf",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "de27cdd7-7990-4f8a-bffa-964eb60491b1",
          "status": "OK",
          "code": 200,
          "responseTime": 205,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "b02d674a-0527-4473-8611-43523c35090d",
        "cursor": {
          "ref": "4a15fd9b-3ece-4f1c-9442-2c2c4fbf64b0",
          "length": 157,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "32084714-40e4-4ee8-a597-9bd7b2417b1f"
        },
        "item": {
          "id": "b02d674a-0527-4473-8611-43523c35090d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "af0a9d89-1b45-408c-bd76-3eb608153099",
          "status": "OK",
          "code": 200,
          "responseTime": 212,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "89ebcda9-d2c8-45ae-a0f1-19d1b5beff35",
        "cursor": {
          "ref": "f401df17-c1e5-44ff-8fed-ca67e4da8c66",
          "length": 157,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ee86c9a9-d916-45df-890f-8d617f6176da"
        },
        "item": {
          "id": "89ebcda9-d2c8-45ae-a0f1-19d1b5beff35",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "57ce83d9-467f-47b8-b0a3-b963b68260e7",
          "status": "OK",
          "code": 200,
          "responseTime": 243,
          "responseSize": 303
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "809c0af8-c94d-4d8a-8508-b6a0937ac31a",
        "cursor": {
          "ref": "f3a2bee3-f217-4682-aec3-d57aeb26666e",
          "length": 157,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "32cdeab3-09b0-4cfe-8725-873ada7c02f1"
        },
        "item": {
          "id": "809c0af8-c94d-4d8a-8508-b6a0937ac31a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "36ca8f77-87a1-4d80-ba82-4bb82f78c28b",
          "status": "OK",
          "code": 200,
          "responseTime": 231,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "ca245d2d-de9f-4527-8d2a-dc2e09369740",
        "cursor": {
          "ref": "66966bf6-0ff9-4df0-95cc-87f80d28b929",
          "length": 157,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5f5bc055-877c-45a2-8e07-76aec2872ea8"
        },
        "item": {
          "id": "ca245d2d-de9f-4527-8d2a-dc2e09369740",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c23d4ffc-7fa0-4db4-8306-f21f792d6879",
          "status": "OK",
          "code": 200,
          "responseTime": 242,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "595013cd-45cf-46f2-9466-b2418848542a",
        "cursor": {
          "ref": "8aca10ed-7292-48a9-bce4-d5368d3d2d7a",
          "length": 157,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ba7977b5-85ce-4d48-b42e-b20c4410faa7"
        },
        "item": {
          "id": "595013cd-45cf-46f2-9466-b2418848542a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "804ebf41-5259-4c83-9e96-76aa196f3a3c",
          "status": "OK",
          "code": 200,
          "responseTime": 201,
          "responseSize": 237
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "2a4eefb8-643c-49a7-8102-bddd1e63a246",
        "cursor": {
          "ref": "0132fad3-0fdf-48cc-bd82-667a9ddd3702",
          "length": 157,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0f994e4b-0807-4373-a3cd-d572d2967e63"
        },
        "item": {
          "id": "2a4eefb8-643c-49a7-8102-bddd1e63a246",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "36530e4c-d450-45dc-b77a-5aa5534179f6",
          "status": "OK",
          "code": 200,
          "responseTime": 220,
          "responseSize": 309
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "e3554403-f645-4311-8a84-30bc8ed2f74b",
        "cursor": {
          "ref": "7c0c5ff3-723b-4d76-98d4-453e1b3d7a25",
          "length": 157,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "53979244-9917-42e3-8222-f5a00a2cd1ba"
        },
        "item": {
          "id": "e3554403-f645-4311-8a84-30bc8ed2f74b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1bb03dac-347b-44ed-9cb5-fd73f2bb6708",
          "status": "OK",
          "code": 200,
          "responseTime": 283,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "3d61776d-a070-4a12-b12a-699d3b5fc051",
        "cursor": {
          "ref": "0592a1ba-74ca-47af-a8c8-29a47edb211a",
          "length": 157,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a65cfae5-67de-4df3-ac0a-245249b3c553"
        },
        "item": {
          "id": "3d61776d-a070-4a12-b12a-699d3b5fc051",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a33edb3c-7590-4dfc-913a-ce86cd6847c1",
          "status": "OK",
          "code": 200,
          "responseTime": 281,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "6b60b82b-c666-4b45-ab88-a037c25ba4d9",
        "cursor": {
          "ref": "89841140-90fa-4277-ad4a-8f3eea88c9e7",
          "length": 157,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7f2f6440-0b03-4fb2-a2b2-3c6fefb5e02a"
        },
        "item": {
          "id": "6b60b82b-c666-4b45-ab88-a037c25ba4d9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "92dd7df0-0b2b-4f8c-895a-c7241048b1bd",
          "status": "OK",
          "code": 200,
          "responseTime": 225,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "2d6c55a1-ebad-43aa-9b0a-4e7e57948b46",
        "cursor": {
          "ref": "6176c7b0-6c6e-4be3-8a49-67c12886ef54",
          "length": 157,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8246e3ec-42e7-4b6d-9e3a-357ef32e1269"
        },
        "item": {
          "id": "2d6c55a1-ebad-43aa-9b0a-4e7e57948b46",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "66f898bc-8b24-41b4-aa33-86d97a90727a",
          "status": "OK",
          "code": 200,
          "responseTime": 233,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "28bf10e1-7488-4b7f-9d38-eff0e05ea203",
        "cursor": {
          "ref": "2b58d436-0e2d-4580-99e9-fc85bcad338f",
          "length": 157,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5756528a-d8a1-4eb6-af1c-67dabae0d8a3"
        },
        "item": {
          "id": "28bf10e1-7488-4b7f-9d38-eff0e05ea203",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "bb34316a-d6c4-46e7-bcf3-fc9d7de8c37c",
          "status": "OK",
          "code": 200,
          "responseTime": 233,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "26b61ac0-b4f1-421b-ba34-9f14b3bf0aa2",
        "cursor": {
          "ref": "bb262820-d112-4b34-ab8b-6098916a5a61",
          "length": 157,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "637984bb-4cf5-486b-8b33-27b11c04c43c"
        },
        "item": {
          "id": "26b61ac0-b4f1-421b-ba34-9f14b3bf0aa2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b357b28c-f51d-4e9f-9b09-44678672ef83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 215,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "1057aca4-c39d-441d-b3bb-c6a870731f50",
        "cursor": {
          "ref": "79655d8e-7d93-4b48-b3f9-a52f07e2e430",
          "length": 157,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "319220e0-ce8a-48b5-8d1d-13857aaccf2c"
        },
        "item": {
          "id": "1057aca4-c39d-441d-b3bb-c6a870731f50",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2f13cfb4-9c89-4287-b250-8a410da088cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 196,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "72672a25-fd6c-40ea-8c5c-31c8e900858f",
        "cursor": {
          "ref": "a181ac52-2091-44b9-9578-6d32fb66c373",
          "length": 157,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3ff9b644-f5d9-4425-911a-5020e8439e26"
        },
        "item": {
          "id": "72672a25-fd6c-40ea-8c5c-31c8e900858f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e9a69594-8edf-47e7-9642-875096688aaf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 185,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "5232a076-f850-4a3e-86e3-de35097bcc36",
        "cursor": {
          "ref": "476d2ede-8767-42f3-9b06-9b85cd7a1976",
          "length": 157,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "33d83a16-7560-4226-a1aa-40e557997487"
        },
        "item": {
          "id": "5232a076-f850-4a3e-86e3-de35097bcc36",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "87b84220-afc8-45de-9c29-62acafe8a74b",
          "status": "OK",
          "code": 200,
          "responseTime": 226,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "be0f9fb9-e916-467c-9abe-6778403bf5a0",
        "cursor": {
          "ref": "d8ac98a7-a130-413a-aab8-1372f89c26c5",
          "length": 157,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0984971f-4c25-4ffe-8984-3dcd158836f7"
        },
        "item": {
          "id": "be0f9fb9-e916-467c-9abe-6778403bf5a0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a5d84cca-974b-45ba-b4d4-5fc27cc35b4b",
          "status": "OK",
          "code": 200,
          "responseTime": 202,
          "responseSize": 342
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "ed477761-8554-4669-82b4-2815a67175b6",
        "cursor": {
          "ref": "0fb649af-d915-4b63-8c1f-4f1b2139f083",
          "length": 157,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "56258895-fb04-4cc3-b5a2-6e32e4f13b08"
        },
        "item": {
          "id": "ed477761-8554-4669-82b4-2815a67175b6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ea66dad5-40ce-4167-b21e-9cc0f827d453",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 208,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "335cb702-090e-4f90-92e2-e3e406cf7d72",
        "cursor": {
          "ref": "5946cc83-81ff-40fd-b30d-420fa412cdcd",
          "length": 157,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "58b25b91-fb64-4279-80b1-b3299c13a817"
        },
        "item": {
          "id": "335cb702-090e-4f90-92e2-e3e406cf7d72",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "301d3f6c-81d9-48cd-9308-7614442c52f7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 38,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 403",
              "stack": "AssertionError: expected response to have status code 401 but got 403\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "f84e67f8-21a6-4ae2-ab3e-2ab65553a648",
        "cursor": {
          "ref": "8489acfe-ed5e-453d-9304-af9cf3b9d81f",
          "length": 157,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "675ca5a9-ff6e-45ed-ae58-de424b1d409f"
        },
        "item": {
          "id": "f84e67f8-21a6-4ae2-ab3e-2ab65553a648",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "536da2a7-1253-401d-ae3d-2a19f7da5a7c",
          "status": "OK",
          "code": 200,
          "responseTime": 303,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "13bb8f94-ccb4-49d0-ad0e-60dd88fc0014",
        "cursor": {
          "ref": "765f3829-510d-4119-bdc1-e488288c0d0d",
          "length": 157,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "63e8ff30-6418-4cf4-945c-e7efcc80413e"
        },
        "item": {
          "id": "13bb8f94-ccb4-49d0-ad0e-60dd88fc0014",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d6fc2f4a-a448-4f91-8ca8-60793d126b33",
          "status": "OK",
          "code": 200,
          "responseTime": 309,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "3a0faa61-3aa0-49db-b2f9-a6f7cbb8938a",
        "cursor": {
          "ref": "4d9327a3-a637-41c8-a41c-bf6e88be2c60",
          "length": 157,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6e7019e7-555e-4aad-ac64-a4b6029f49ee"
        },
        "item": {
          "id": "3a0faa61-3aa0-49db-b2f9-a6f7cbb8938a",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "94fa472f-ca9e-46b5-970a-1fcf41bb6010",
          "status": "OK",
          "code": 200,
          "responseTime": 257,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "1944e34a-d3c4-4cd7-a73d-2ba53f9f9d6e",
        "cursor": {
          "ref": "8462ba1e-8459-4c76-a20d-4ae87239e8ba",
          "length": 157,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8d125e67-c00f-4f92-a0b3-490477b904d6"
        },
        "item": {
          "id": "1944e34a-d3c4-4cd7-a73d-2ba53f9f9d6e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1e7bc5bb-fdd8-4091-9076-e06a1da45366",
          "status": "OK",
          "code": 200,
          "responseTime": 283,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.verifications[1].title should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "0554ac23-ff34-4396-aac0-a4d8fdc7ad3d",
        "cursor": {
          "ref": "bfd792b9-17e8-4c8a-90c2-7b9ccf3a2708",
          "length": 157,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "44742b28-4aa4-43f1-b475-f48a2c7171a8"
        },
        "item": {
          "id": "0554ac23-ff34-4396-aac0-a4d8fdc7ad3d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1155826b-9cdc-4ada-9118-678b3b531c4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "0554ac23-ff34-4396-aac0-a4d8fdc7ad3d",
        "cursor": {
          "ref": "bfd792b9-17e8-4c8a-90c2-7b9ccf3a2708",
          "length": 157,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "44742b28-4aa4-43f1-b475-f48a2c7171a8"
        },
        "item": {
          "id": "0554ac23-ff34-4396-aac0-a4d8fdc7ad3d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1155826b-9cdc-4ada-9118-678b3b531c4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "0554ac23-ff34-4396-aac0-a4d8fdc7ad3d",
        "cursor": {
          "ref": "bfd792b9-17e8-4c8a-90c2-7b9ccf3a2708",
          "length": 157,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "44742b28-4aa4-43f1-b475-f48a2c7171a8"
        },
        "item": {
          "id": "0554ac23-ff34-4396-aac0-a4d8fdc7ad3d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1155826b-9cdc-4ada-9118-678b3b531c4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 0
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "No data, empty input at 1:1\n\n^",
              "stack": "JSONError: No data, empty input at 1:1\n\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "5fbeed78-bf50-449f-b599-6d939ce6a5de",
        "cursor": {
          "ref": "244704b1-a0b8-469b-aa65-f6dd7e0ac939",
          "length": 157,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5c4f301f-b2ce-4949-b2d6-2613cfb1495c"
        },
        "item": {
          "id": "5fbeed78-bf50-449f-b599-6d939ce6a5de",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e7b37ad1-eefc-483c-87ba-ea094bb9d285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "52525f95-9c37-4b8a-9c98-57138891f6ad",
        "cursor": {
          "ref": "3c97cd97-16b3-4076-8fd3-46c131bcca06",
          "length": 157,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "854726ee-1120-46aa-bf2c-5325fe8264de"
        },
        "item": {
          "id": "52525f95-9c37-4b8a-9c98-57138891f6ad",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0158bf3f-5103-4183-9c0a-55ce214f59e0",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "52525f95-9c37-4b8a-9c98-57138891f6ad",
        "cursor": {
          "ref": "3c97cd97-16b3-4076-8fd3-46c131bcca06",
          "length": 157,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "854726ee-1120-46aa-bf2c-5325fe8264de"
        },
        "item": {
          "id": "52525f95-9c37-4b8a-9c98-57138891f6ad",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0158bf3f-5103-4183-9c0a-55ce214f59e0",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "8757f12c-cc72-4029-8c92-58f75f35ce71",
        "cursor": {
          "ref": "e6552237-ed52-44f4-a2a9-0f75139e82a3",
          "length": 157,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "672b7b66-b752-4f7a-81b4-fc8b45b4d69a"
        },
        "item": {
          "id": "8757f12c-cc72-4029-8c92-58f75f35ce71",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "1231e9be-8825-4789-9585-8befd9e0dc62",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "ad07aa68-448d-4b47-986e-71ee30d7b622",
        "cursor": {
          "ref": "4be0c0ee-36cb-427a-87ca-5dcaecdf9137",
          "length": 157,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "951f131b-ede8-449a-bc18-de9c1774848e"
        },
        "item": {
          "id": "ad07aa68-448d-4b47-986e-71ee30d7b622",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "19ec01c3-8f2b-4662-ba85-5b56a4b5979f",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "ad07aa68-448d-4b47-986e-71ee30d7b622",
        "cursor": {
          "ref": "4be0c0ee-36cb-427a-87ca-5dcaecdf9137",
          "length": 157,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "951f131b-ede8-449a-bc18-de9c1774848e"
        },
        "item": {
          "id": "ad07aa68-448d-4b47-986e-71ee30d7b622",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "19ec01c3-8f2b-4662-ba85-5b56a4b5979f",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "56c3477e-1cfc-4732-96de-4cbdd995476a",
        "cursor": {
          "ref": "6bb63269-ee15-4a14-a1ea-5ce03b57ede4",
          "length": 157,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d6fefa05-a56e-4c03-9953-e0efefde9d83"
        },
        "item": {
          "id": "56c3477e-1cfc-4732-96de-4cbdd995476a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "0314e349-29c3-4ba3-acf0-fd609fafba80",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 1970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"shortcut\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      }
    ]
  }
}