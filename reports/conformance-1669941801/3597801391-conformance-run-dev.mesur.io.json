{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "50123bc4-bd32-4210-b07e-c825e30413cb",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a8ae41c5-98c7-4b2f-a38a-c02fe8ab467b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0aa0d311-0cd0-4e67-af89-d53669aa9f6e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "366281f5-60ac-4768-a727-cd62988ba114"
                }
              }
            ]
          },
          {
            "id": "a8ae8d37-30ac-4e5c-92f8-6bea85ded9e4",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0aef9d3f-5249-4ca2-aee6-dda829212cf8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5c4f1780-171c-4174-b2e3-acbb9864cadc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dab93e64-75eb-46a8-b7cf-acbc8dbc820c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c211c8a3-5c5a-4960-a821-830a634bc045",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4f7a0fb6-d57e-4553-82c3-2e6a5d6fc5d1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcb159a9-c308-43c2-b442-16c8793d3ac1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1951208-1124-4010-960e-208513a364c0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0219d96c-8096-49d8-92c3-daa241005f08",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "161226f8-17df-4956-9e7c-a5955316c57c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "048fbd75-4f10-47e6-acc9-aa2b5ed51479",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a509eec-b38c-44f7-8bba-42804c467adc"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b500aa00-59a8-4ad1-b05c-f765562cf690",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0bc0acaa-b5ef-4bbf-9355-b889d56f330f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4a601c2-6248-4db3-9c4f-49f1131f716e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cea0a9f5-a0aa-4348-81a9-dbde55ea22fb"
            }
          }
        ]
      },
      {
        "id": "bf975b1b-7431-4ed7-9617-01d95e3f708c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "938942ee-9029-4577-bee9-0b156468616a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2fc55441-65d9-4297-9ff1-9a5e730079e0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "278648fa-574e-4544-a12c-b1c3d3526af4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1631f213-c1e2-4493-8722-52468c4ee981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ffdb1e1-122f-4eeb-a03c-70ccd2617462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5623a92-923c-49ed-b80a-6e37b733f67d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ba558f-7ca9-4d0e-917d-3703d26f4aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55f877df-33b3-4b9a-9fb8-7f75807c31c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb097d0-da77-4ba0-8c1d-991a278ace0f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1399960-a1d5-4f40-b573-3814715030b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5690c08-48f8-4cc8-a3fd-5f66b027cbcb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "16e5d5fb-69ee-4daa-8e99-69227ca7f610",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0141485b-3924-4187-a25b-2a1aadffcd3f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a185341b-43ee-4d7f-8fb7-e30c46ce65e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "515abda8-a2c9-4de0-a45b-7e4bd8507586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a00dd88-77e5-4471-b3ed-a3743cd96557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d22a6b-7eda-48de-ab34-394dad6d5a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3583d4c8-0e3f-4d38-af8b-11a996f113e7",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f28b7cb-7364-4945-aa45-36f85184f9d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b243930-a23e-4626-842a-74afd7544e1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6dba315-c8ec-445a-822b-c46ca428de36",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "823b2854-f4d7-4ee4-a0d6-309b24ff1dd4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c94690eb-29c3-4759-8ae3-7f6889392bf9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "43d16c3b-7f40-46a2-bad9-1b1a2083e994",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5107bf0-ce4b-4c9b-ae51-643c07030a45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b59fde29-3560-41e1-ba46-b365e537a292"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64dfdec9-f6f0-4f25-a574-20745c283640",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "3aaf707c-3721-44d7-aa77-705e8c1ec924"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c8114ad-8293-406e-9012-3c4a6906cbf9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "daf40a1d-ca28-4150-a4a3-52ff58e0cee5"
            }
          }
        ]
      },
      {
        "id": "6beeae12-2747-4d54-a120-14f4cde27e50",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f2c3022d-c87b-40c7-85ec-e657f75267b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d18d846f-ba38-44b4-bde3-3a9248f5ca99",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "849942c0-00ee-486e-929c-e2b8e0918730",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcb755b-ccdc-4b47-8940-9becb0709c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f78979bc-65c0-4bac-83dc-dbfbef56a090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e462ac9f-8584-46ac-82e6-8667f5c72835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "251972d8-5e3e-4a7e-b065-1eb613aa7abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7777f9e1-634e-40c2-8b20-eade3bbb4783",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f988a6a-6512-4f24-8b61-0d0a0c5bacab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1918b615-697b-4c78-a1b0-107d26e747f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439dae5d-206b-4979-845f-63670d92d6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "426c770e-8f01-4733-b959-690905b5d76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037f7f6e-0280-4d35-9368-c0c6c8468ce0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a86e30c-6cc5-4d6d-8f93-9efa148867d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d137c1b8-6e12-4a10-8040-0748b2f6c005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d216d63-b1a4-4193-9af7-dd0f868ba7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e8da40e-dd05-49a2-b1b9-f55fe40e5bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10aea03-93de-48b4-a882-2714bc52feab",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7d56d0-b2db-4a54-83b5-74ed57aaa350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bedc132d-1dc5-4b4b-b15b-993bf4b15716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fb37a6-6686-4e5a-b058-cd7e1e28706f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d41810fb-a4c9-40ab-8a0d-72ddbef7ad46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec92e160-a527-4124-af7b-3923c25be3b9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55c3f50-3273-462d-973f-ddf9000d387f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4758893c-4347-4485-9c3a-459360fa3c29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5fb5758-f4d4-41f7-a2d6-f36f0eb31be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ce1504c-effa-4ab5-a16e-db57f600de81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3a5454-6850-4c0f-9269-6495cfbb8077",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3eb766d-de44-4600-88b1-828a17e2ad3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d7a3d1-c892-4fd3-9aa4-31fe44a2db7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbdb638-4b10-48ee-a22a-8db3e7c78b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71669262-61ea-47d6-9a40-f40fe5a7ac9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c0a93b-4165-42d3-9a2c-95e259e8c54e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02aceb0f-50cd-4b03-ac6a-9bde29d7f275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec5b924a-75c0-4969-96eb-ce37f2275b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82213a5c-d660-4999-a801-5889c9550c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba11c6c0-c677-43bb-841a-200cd6eaf540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1091a128-787c-4f9a-921a-3b3fe398423c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "178a2f15-53c6-482a-af4b-79290f14a2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f777a75-49bc-47c0-8161-dde13683ff4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee9b485-81a6-4a7e-98fd-569220cc772a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f63ca1c2-5214-4b6d-92fe-4f953d63973b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b13ac4a-fa23-4f0f-84b9-8ac63bf08303",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cce9c22-2258-423c-8633-a3826738c1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0dfc0d3-ede1-40cf-8807-e66e4158bb06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3bb393-409a-4292-9934-18dd5e5d26e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "977bd45b-09bd-4e67-9863-6548747f4137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60815da-df32-417c-bc34-cd535851986c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f1f365-6efc-4948-a117-6bd8e47d4ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24ca061e-149c-4e46-8ab4-103ce633255b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879f3416-fba3-41f0-9a24-7be5649c3e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae34b818-c4c0-42ac-bc6a-72bdc9a6d02b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772cefbe-0a73-4f04-a8d6-e8a40745e242",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1a6d8b-5f69-4804-a6e5-86d80ce14ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aec74877-5bb9-448b-9c83-d8c97c2386f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d3feea-2f3e-4a1d-87f8-919b2b08a300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "143fae4d-f786-4d25-af0e-01b3f8056fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c141557-5dba-4b5b-a266-270bffb5d87e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58acf72f-ceb9-44d4-aab8-675eb02bec6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b2d433-57d3-4ae3-943c-8ca901e8fdf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccee19f5-4479-4c27-aa72-2f30bb63eb7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "645d9f69-5c69-4b8e-a07c-7b855d39a858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545e7215-decf-4dca-9d1a-4a80ff343536",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4148881-5b7c-41b6-812f-869757541c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "783c0d4a-ab5d-4c29-851c-daf71227f1f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e27d813-e888-4776-9211-7a427d19ce71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86cb75ae-5415-4211-b987-262dc0fb9fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f3b2e7-8517-4756-80fa-5e3bf69398da",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ab5ff7-471b-4991-8a62-8b6a7f31e782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d896368-662f-42a8-8e23-9654e2f121a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0fac25-6cd6-46ff-ab38-f296d81ccb8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48f200da-cebd-4acf-a329-1f7a3fcf0d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba7f462-f7c0-4b2f-a548-2dab17f2db74",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b71a02-c9b3-4c8c-bfcc-d7329c8c76ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27bc2e60-d15f-44fa-b475-8ec2fa2939e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a4d890-8eb8-4069-afa2-3554cdcf4784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc05a734-6270-4040-82a1-43c522c4e15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8979c329-513e-4fcb-a450-925fc8b2550f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e39bcd-943a-4e9a-bc23-410ec76e3cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2f1849-f533-4d21-9501-31a793e00c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11c9f30-2461-4ed1-a46c-423d5e49355c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4322673-7944-48b9-84d7-8fa662fbc2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20c5579-b106-4a07-a05b-9b1516222a0c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be942b9-88b8-42f9-9210-d2f8a41a3324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee42edae-0ae3-425c-9eb1-6fb847172fd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388c1092-3c4a-4113-a39d-b11e2b6d0952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d91d2dd4-b97a-4638-a14c-5a6e40fc372d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4fecdf8-ff11-49f0-a6e8-e020f043c4d0",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee8cf65-c5b6-49d7-8bab-edb3af3e1fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6fc4f33-fd9e-4490-b77e-efd08f7b967b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078783ca-ea7b-4b8c-a094-3b929c695b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "418d00fd-8fe0-48f6-a9ea-98022f6c683e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbc2e1c-4f21-4fd8-941f-357095fa0a90",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667c0df7-185a-4c79-8d93-38569408ed8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5daf14dc-40a9-4254-8bec-99d916034969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a518405f-3479-40c3-9598-97c60b319a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e5e1bdc-5c40-4cbd-a3b1-5dcca62583de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8283c586-e1cb-4c2c-ba73-25c928329208",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e200608d-4ea7-445a-bcb2-4da3cb1ce1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28a082b4-3419-4fc9-b93c-e61965069ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60d43c0-a333-4f9f-8d5e-f658efe7d707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87843b2c-8111-4515-a66a-fac6322cb721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5da5f7-786d-4d40-ba11-ceeb646f809d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee22856-fd43-4e60-a2c5-15dcd9c045f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cffc34fd-09db-49b9-a268-5c1a8ba389ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda6b56d-76d7-4469-aa44-40ecd0126e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "939e5b88-c3a8-4165-911b-66c1ba5bf59f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92bfde8c-c3c6-49ef-9b71-6b5ab138216a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1b3c52-eb58-4022-8243-f2bb3d4e3157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10abd52e-a3d2-4d5a-857c-113ed113c3bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e55fdf0-2f83-4508-b68f-085b3d3e9071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae956598-f9f1-48d9-a459-d0231cc59ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a621bbd-2eae-45f1-b745-96434193fe70",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d80dda-b64f-4f52-8b2f-6c45f3ee12bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e47312e1-f40e-4f2a-bfac-758404c16354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fdc905-646e-4033-af11-5b8ee1fcf235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5017395a-4d9d-4950-a34d-1627a4ce57e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3fd73c-cf6b-4de1-9303-feb8ae070fac",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1007b019-62f2-4fd7-9d31-ea22902a7ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f377e98-d19a-4f83-859f-889be94a4fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c392613e-38e3-4ba9-b825-e64df706e359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0eb61c6-3711-463f-bafd-a2f3872c2c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4833e840-7946-4602-ac60-ef6f3494f73e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "806db047-ff98-4850-aff8-5363fd6eb66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "962a3efc-0837-46d1-87ff-b89e3495eba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123fa624-b2f6-4400-a409-fe2f225bf44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f03dfae-8869-4f6b-81f5-4717e6f6c304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281e1d69-678b-47d3-90e8-93f8227229a1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8997a7ea-46df-458a-a35b-063d50b3acbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df6203a1-1366-41a1-9b37-659ffbe22d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70228a4d-9cf0-4627-8b1c-963503a90e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c68e785a-c051-4729-8903-5f2f4df3666e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6697bcc7-b090-4e5c-a4d7-721e61ff7e94",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5fd6f9-4c30-4c4c-aa07-f3030486b484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37191a6a-8fea-4733-a7c8-58fabaf897c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc68ab9f-4cee-418f-9440-e27a24bc08e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c3be11a-5e28-478e-85d3-6f4b5d9f11a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1356620-7518-4ef2-b7cd-eacd6e5a1776",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37adaaf-68e6-4dca-9467-83e2e67f7213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a9d434-d9fd-463f-93f2-6dd9f5547b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b908a5b-87d0-4841-8032-aeeecd2c009c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e26007b2-0f6c-4ed1-86ba-9be8f70c31d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cb09fd-406b-4e9a-ba6a-711768c4909e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a780f9-8530-4254-aa06-2a136cfe92b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e0d33c7-9b14-4b3e-9fe9-3446733adc8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17b40f2-1d2d-43a6-b380-cf4a2dce6ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e10075f-524c-4555-a344-5623f49869dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd69b61-f9ea-458c-bceb-6bf844e50341",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664d19eb-b7ab-4158-9c38-bc08ad58e108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2498c0-579a-4547-ba2a-73b616361f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9c52b3-9c94-418c-b8a6-0bc386fa6b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "09bbcf4f-60c1-4894-a2c8-20e1d00d58fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3b7f3c-535d-419d-bc35-9d1ad0dccd84",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "756d7ff8-ce7f-49f8-87d6-e9475db1ac4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c3eead-6087-43d7-89a3-52ed067b0e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeebbbd4-8d0c-43ed-ab24-08edae267124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "20f09a9c-0d68-48cb-b8a1-8cbe53a12284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5288bbca-e334-4042-bc75-9f965eba393f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2191472d-b45a-4810-8682-f31c74eb2b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ea9ab0c-32d1-493d-ad52-593e180e4645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91d1257-c7a4-4b2a-9d5d-359e856d841d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "54a515e5-5b65-4907-a622-f06d8d572392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d241d39-dfa6-435e-9baa-a14f893e7913",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbbfba9-881f-4af2-b3b2-92fb4b7e18b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957d973c-8e8e-4923-a2ea-783fa5a908d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38e4aed-8f56-4027-8969-78851ceedaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a71314ac-561d-48ca-90f1-e140db1ca847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3cecc80-4928-4fc4-ae3a-6f5a971aa481",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b9dd4e-79d5-405d-9bb4-8569ef7d8a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "257a1268-823c-4e09-b767-b6cec7f13d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27348c6d-472f-4b7b-a7e8-fac2a5121b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c37227f6-d73d-4bab-b7df-11c64cf38c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f780888-4c71-4583-a36e-b13ff7903e81",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abcfeae-fbcc-4710-9ee7-141b819de23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3430ceaa-e46e-42c7-b5e5-27d194960f2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97754598-7b8a-4d0f-b4b1-2f045b89acf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fb7645f7-17ab-4b76-8cf5-74d0a4d52212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a5e25d9-8d39-42c2-b102-9b983b107730",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5412905d-3d8c-4d38-9a8b-8e909ca6bebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2cd54386-2d97-4bfa-85da-90522f1f7305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6285cbb6-aaa4-4ad6-b005-4a20dded8dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa7d1ac0-eb50-422e-a54a-b7dd34702341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6639ec05-1faf-4aee-a231-85af2a1a890c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272957c1-63c0-4230-883a-500f4b630595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d1ad0bc-7ecf-4ea4-9729-dddd7b7b5b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc84c8d-7f90-4cbf-8cd8-9fc906db0279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e37cc426-00e9-4f67-ae7a-94be62d45752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50c6d0a-3ab7-4dc3-ae07-095a38bbe394",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c96529-f062-4c75-a057-eaab3d6d938b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca69c057-c998-4fc4-a35f-1d6b40ad5f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c696e12a-a569-4cbd-b082-7238e9f937df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a37b69c3-d5b2-4133-8079-98704d2d9936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ec05d2-96e7-4407-a87b-ebe62f7d3293",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68518874-2165-4ae7-98ff-a9ce1a60283c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0bb994-b525-4c58-909c-f18960386854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e89e099-c497-4e5a-8ce4-cb2bb49becdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2ca34c5-c5e2-48dd-a28f-abcdca08982c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c6f6708-e81b-41b1-b6b3-320b95cf823e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9454a850-ff96-4bcc-a399-3f60e50b43ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b13e30e-57ba-40c6-a5e1-221b64d1b278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b53016e6-f7a8-4604-b9b9-0c12d40fccbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f645a2e3-fad2-4690-bf45-880260b97f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f901fc-9a1c-47d7-a9d8-3bc139fae1d8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fce25a-1880-4633-9892-4b0b0a4eecd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3096c2a5-d2f4-4538-a3d1-8fdc552c0f3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52515b3a-c084-4ff8-87bb-b7895a72008d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3df56a2c-d85b-45d9-b473-2aaf047f309e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c7b912-53ba-43f2-b23f-f9aa17f6c0ad",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68dbe20f-e0fd-4adb-9c53-9a4f1565996a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b77a693-1aa8-4c46-b373-8ebf367de137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3ab2c8-eed9-44d7-8a7d-41889eb4bd61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "886bd479-a4e8-453c-ba85-e1e0520fb038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21897012-4fc0-4b9e-8719-a2fa37882477",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3dfc03-515a-4e73-80ed-21f41d644573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c5b037-211e-4a9e-8f26-a96f17423c8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90bb1a5-dfc5-4958-a64c-0f8333dafed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "03496b50-ebb1-4804-ad79-762ac61c90a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e170f2de-d181-4207-b2fc-95f0df220987",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0866e548-5677-44fb-ac22-629c5f455a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f262b445-befb-402d-a8c9-edfaefcc57ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b3c6c5-f512-4c34-94f4-2c15818793e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5d02e42-78bf-47b5-ac26-5f8d468111ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2a3cf3-fa67-4566-a150-6a65c9b12346",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f8a4e2-1924-49a5-8997-77bba06154fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0ede0c-4004-493a-b8bb-66e9e2147109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8bef209-6809-437f-91d6-3d76a535c32a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb10882-1e1a-4a1e-80fb-1c4bd4bc8345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213034ab-6cef-47ad-87c4-a950758a9573",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96eac797-d46c-4097-8c1f-fea7c85f3757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f88a77-542a-4858-ae0d-c7df8eb41ee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9543f0-403f-4625-9205-f095842d89a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b31560a1-197b-4361-9363-f4b6b0214aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5c05de-f74b-45c9-9004-a8d48ed4e781",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2495dbc6-463e-4ed2-8a08-feef39a397fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3817c51-c4b9-4b58-9b9a-62b71a6c6573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d363dc-1b85-4547-a479-b2c8634fcbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9365fc0f-5cc1-4612-ae8b-20d5754f86b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f336c3b-3d46-46f7-8ee1-5d02a121b65d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51825758-e27a-4400-acb8-148b720ba2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88fec139-23cc-4241-868b-4f18a874c289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935e527a-fad1-4088-ab41-2611f81e0262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e57b172e-6ce7-4c27-911b-d81670032882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23caed5c-420d-4360-a62f-94ef52026480",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2267b56c-5b25-4aad-a21d-7869c77b163d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f905eae7-c59d-470b-99de-02e08d4715a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1730ba-aa7d-4f78-b1db-50e8804f7998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d255c1-20ae-45f8-9bb2-fcb2a4e680a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df8d5fe-ca79-4c39-bbed-30ec9afba69c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0173946-93ec-4a1b-af0b-4380e9f55afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf8e3a0-399e-4e64-80e8-214795c57c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44572550-26f1-489f-ab5c-687563a78df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da525cc7-9b05-40e1-98f9-f5234380b11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3875955-c0c2-4a05-a012-326b1649e4f7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65cc815-dcb3-45d3-b43b-683f232e1bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b01298d-ae5d-4e4b-9f4f-620b4b9262a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab92e5b-8d25-42e6-b4c3-c625693dcdc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "13c48e71-b7ec-4f49-b807-c41d7d21610f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db39a080-0dd5-4a62-8955-91e5e6fef8e1",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9422d96e-c96c-4b4a-bcc1-ad45d832b3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4af402-2a07-4dd1-ab6e-f162ac72b933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50590c09-3c50-4d9c-9a3a-bd87fe212278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3591f75a-f2be-45bf-9faf-cbd5d3d8a117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3d0618-9b9a-4ae6-bfe4-1251f02fcca4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0464f12-e256-47c7-92b4-5a297e991b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f7fcaa-0134-4c8f-a851-7d0013b11ab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475f9cbf-5617-400c-b3cc-9064b1f8c9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3920b3-2886-4d51-9211-f53e77a27eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d79fbfb-bab2-4566-8576-7a5d1ce67dfa",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c091d4f-e79f-4a41-8a9b-13debd1b6a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f820e7d4-66a5-478c-8aab-9b580e9ae819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea3b87c-10f0-4432-93cf-0a5217eded42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc56f1cd-1142-4d50-b642-07ee76ba0cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a3f671-c37b-42f0-a1c5-71cd511cd8af",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15eaadf-41e0-4811-a6b2-d9e33100bf76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb03ee1-8bde-45ca-a941-b18189c89ac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f8f034-a004-4c4a-9cc2-072b0e371626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e5a4c70-e45c-4b81-8e61-d115e48cde04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29e99fd-1716-4f53-838b-9e9b594e92cd",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7521d85-4671-4ec0-b195-efae73f8db49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d92fc0-9504-485a-a16d-5e7827facce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d4b2591-3039-4f57-988a-f7ada1390494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6a444c65-e321-42a6-88c9-d989c0e4e49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38336072-102f-4b39-a1bc-e8c45fc96fe6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ef2b74-e988-40e9-8192-1807c4d8e4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f6134bf-0ebc-4e6c-b59c-83f829d8499a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcfc7c51-37fe-4517-8688-bbeb97102093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "838ff491-6b5b-4228-aff7-51df01a194b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4608bf34-5f5f-4596-b99a-72834afc9711",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310fc137-ea5b-4d44-9594-a4b27c13a1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d548a3a7-25e6-446e-b0df-3bd99345d81f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8194bd5e-795d-43a7-9ba8-e3a3c30e9c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "13a610e6-c7eb-4586-85fa-3e0efde7189c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcf0e2f-30cd-4e74-9dbd-73398f93af08",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e9c037-2169-459d-afd2-cd12f12adc34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda3f347-e684-4ec5-9b84-79844523e360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba633288-d9e2-4834-b5aa-1efeb7273b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f3860c0-5900-46a0-8ace-d7243f7c2282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0c1048-769b-442f-acf9-c9c5c0c35997",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b704d778-9739-4118-b007-d960f81d29ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e1407c-166d-40b3-aeed-f7c92ce76ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e56d57-332f-4793-99fc-47c25331f6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "da68cfba-afda-4aa4-b5f4-df1a1c27a2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a39f9e-337d-4bed-bd0c-5816b3371732",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c5daaa-050f-4101-a9a6-f0fbff13b7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf05709d-97bd-4d0a-950c-07795da64e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f5dfca-1412-4314-a1f4-bc138b3612be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c74fd45d-7685-49da-8844-fa80cc58624b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1433baf-f9d4-4908-8d9b-b63572150f89",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8cc25c-bd93-4fe8-81d9-d0686674f095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f05549-cfdd-4bbc-938e-15a136d49e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10c43d4-5ff5-4b62-b4ce-31414a1a0913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0289f365-b8c2-4b5a-a49c-cf902d53abec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af543911-9e54-4471-93b0-1c1a89ba0ec7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c60261-8719-490a-a793-362f63d5f901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb926f9-6cff-4765-a4a5-cc5fc238ac3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6bc01a2-2bc5-4d31-b294-d67a50163146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8acc264-192e-4e92-a43a-c156dddcd915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33851c87-6d05-400b-8d6d-046864b3d042",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae39257-a0a4-444a-ba42-70e4e4d5efaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25ed93da-4dee-4982-9f16-fb320213d07a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de32a98f-2be4-44ac-846b-d13829e91092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ee57be4-5294-4ad5-b5c1-1c955ec3eef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4515ae70-6c61-409c-9c4e-42be0acb91d6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0d9cc1-6027-4fa2-afda-bb76e574bd80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11523bcd-a430-4651-8314-55cc9b7a6fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22e7e24-c8df-4c36-8484-b88fb46d779d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c7c8ce-2a2c-4b1c-80d0-161dd1ec8925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1dd17f5-301d-410b-980a-579a1cd94904",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace32a18-f84b-492b-8778-4359ba2e061d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d67be02-7fad-4de2-8a2b-3a4d0ccc90fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd2aa15-b367-441e-9624-8a7bd1f5d2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d9d91e5-fb54-4fc8-8d3e-01de845f21cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1028585f-f180-440e-8997-bfc49e48bf1e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7355dc-1869-4eb9-a69a-265b9163886c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a92608-cac0-4cfe-8098-69046cab6a41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d0bac0-83ff-4cc7-9906-75674a483218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c547afb5-f4c1-4707-8cd8-c5e7b386dbbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bc0ab4-9562-4b45-a8d1-b2dc98316b72",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7792f6a9-3be6-4da1-b037-be2782972072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143851b6-6e21-484b-8853-d1289701e566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff54b2e8-4b6a-4843-840a-66ad8c294bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "54baf2bb-10c9-4754-bfb7-6aad8b9f7d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c218e9e-550c-4733-aaf7-617e82ca4f1f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2d8358-27f4-424a-b7ba-a3dd7d65b73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d90cba-de8b-41f9-bd25-7f8a1abd50bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5651c7a5-46b5-4329-b0c9-1502e0926516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5367309-ee37-402e-b3d4-14ab86e1fff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1292cd56-f1f8-4b83-945d-10f0539d77fa",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10903dc-2f31-4c3f-a817-77e0dd031f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5cd0f8f-3b1b-425d-9518-795eaca83bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339e3ba5-9dc5-4936-bc39-7a2efa337d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b007b6e8-0ac6-4d89-936e-f0efa8878ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb06b10-5d7c-40e6-b7e8-e501f4c358eb",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e9ec40-e7ed-42b3-9ead-39b25b36012f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b7d351f-2bf9-4909-8d39-0fe92406194f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7cfa975-f296-4307-bdfd-06a47b7f9857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0afb44a0-617f-4492-be4e-d7675047c990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045f6ff7-ee1b-490a-b094-90af6c2287dd",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebcbc37-bf62-4908-8b15-ce4efb8b0f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88679ea9-7593-4bd0-92c5-6dffd4db51e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944dd1c1-765e-45c1-b66f-c74673558e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b2c6e26-a0d4-415c-b648-a20f68eb606e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a4be89-2bfd-410b-8c71-924fcc7d0331",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82618963-7bb5-4a9c-9da2-cbb8051538f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e42d38-2028-42ca-a2f4-7aa29c7736e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f542b0-0af2-480b-abe6-b6f4c57bdcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a66eb0-f604-47f1-b9f7-79b6a556e58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50da2958-b681-45b7-b085-e551f9769df0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c11ded-81fd-43bd-b6a5-a3a077ad5a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f98876-fb12-43f5-b5b9-6bb7cdb48c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc3c8ef-6e88-4384-8b95-14d82d05f07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "75d4720a-c077-4a9c-bd14-c1437bb54ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86f4996-dce6-414e-9fd5-6ccbec450a42",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "069f3048-1300-427a-a26a-bb9d81ac59b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d02eb9e-4ab4-4fe6-b83f-279824d68286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4d9659-623a-4764-a0dd-5f92962151e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bff2cf2-4d07-4852-af8d-52cf65442040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7f6f69-9a47-4421-8470-72864ac772dd",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbc5119-53a7-4f0d-aabb-f6e9b53949fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb4c063-bc85-4649-b5dc-755d80619ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae7ad8c0-66dc-4a02-961f-3729fde7106c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed551726-8841-4a2e-901c-95dcf4412e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a2fbdf-cb60-4a18-9d7b-c04d51746d2e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a44a5d-1c33-4993-9327-8c752fa38d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e724760c-7f45-4eb4-8835-10c64388b7b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45cacd87-6fd0-4c3d-b124-e1df51fb4eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f923ee49-c91e-404f-9fac-55b518b31cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2fa7c9-420a-4220-998a-703172628dec",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f951d05-75a3-46f4-ab8c-bcd66ce3ae4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e8f873a-6c0a-4f99-94d9-aedd55f05aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1adacf9-80cb-446d-8388-8f76e8ea9bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3652b493-147d-4833-b431-af4df06c12ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f7dc6a-908f-4fee-adfc-e6726a699272",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c878b69-fcbb-4bd4-8ef7-c57f1fdf53f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08b7a1c5-b3ae-4373-8ddd-b4db3704a4d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91be16c-8a55-4925-b113-e0b12f5e433c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f47c35f-2179-4571-8717-721b26526bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe69125-0125-4f4b-983a-d902e2e4efff",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3f0b94-1d34-45b8-a415-f690633ec3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffdac4c0-a3a5-4092-ad97-274020137dbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc74beb-15b7-468f-92b9-764106aac33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a8bf0d5a-9867-469e-ad60-e88c59a74571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78806e8b-a7de-49bf-bc63-d0fc10534db7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac306514-fa9e-450d-9921-d177326bb14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4f3d808-2eaf-4e1c-afb2-6d01070d6d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7cc394-2f33-49d0-b459-aeefc0b8635f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc5652b9-c831-498c-a30e-c24a54aa35fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af264589-f426-4ceb-89b9-b12389facf65",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "487f1b07-6b6b-49ce-9b7e-c9850eb2e164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07657e3a-82bd-4127-9f03-32bd3f49b884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add424e6-6ed7-47cd-949a-5372f9dbce40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b985fb4-fe98-4945-9465-ba29d8434b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a4be6c-a388-4ca5-b92a-be6f3efc47c7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09170e8-e903-47e2-8465-33502bb4985c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d2bde0-ca9e-4369-908b-209bc028609c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3dc7e2c-d1f7-4b78-9ff3-25ac654453dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14b01975-d895-4359-bb42-9219e4718ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe3c40d-467f-4908-b99c-34d06b21d660",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9278f2-3c5c-4810-acd3-eca43f72143e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33766faa-375f-4272-83a1-eeda5844c033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35736eea-48d1-4701-9846-ccbd57088f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d8ca79-32a8-4a76-99e4-4262c5df14cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e7d51b-5390-4a56-87c3-432ae9be9a31",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ffc556-2a75-475d-825a-f685a7f25b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed124862-fef4-4028-ad22-d0a3c6967a0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238d2fe4-10e4-4ae5-a024-c393a2cbd8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "225f5a81-cd8b-4d8d-9a51-cd9162875955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b014f7-8c99-42b4-b5e6-98d929cb74f3",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4983f060-8f37-407a-bb75-807c5b31bc93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1df776a-f1c4-49e1-b38b-dba3325b6125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b192d4-bbb2-43a6-a2e2-1f92060c18c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd7522b2-5d24-40e8-95d0-adf819247041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bd9b3d-508f-4af4-b0eb-dd6290399509",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "203bfe1f-057c-42f6-9dba-ccd5538e72fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f2a249-19a7-4966-a462-584b33f7400e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd836daf-0d7f-4d78-989d-f89899f73443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "105d3db3-750b-425b-bf60-37d7413a7b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404be663-b9a7-4e6c-acbe-9f51f05ababe",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abbc0d2a-e2d9-48b6-8bfc-98768f7fd705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a67dfd-600a-426c-bbd7-fe99c7ca074d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc9a977-4f7f-40c0-a8d9-35fec0b86893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a72b4291-830d-4feb-9ae5-3adaa84dce83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fff8af9-56f0-4de7-8317-3a8d6f573ceb",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd11af32-6800-403c-9869-977e9139c5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7446282-7771-476a-9154-47e85b42a9ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e8ba62-151c-446d-84ba-4a86b142a78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1191ad56-239a-4286-a21e-acf9ab99016d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aaf7ed2-400d-469e-a5f2-05c3000bffa2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453a9f5b-8802-4100-9426-96171d7b8ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93b886cd-7d40-4989-ba37-54dccb84eefc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f071352-9647-46c6-896c-1570fcde16ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "33b2c3be-14b4-4038-a1ad-98c466efb4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d79278a-7686-4f5c-9a1a-5997e765d2b7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a46197-f88c-4b21-9142-ada2a2769cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a529ddc9-c693-4b46-b67c-44cafeb03304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e171c4fc-b5e4-4564-9421-09061b6961dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb1b0700-80e7-4a17-87b8-021625872a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c0ee83-fda5-4c55-9497-dd847144f24c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45802f8-e72d-4549-9c5a-b4b8975005eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "70f20dc0-0d70-4565-a174-720ed14a17a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c11e05a-a7f7-4ab5-bac5-da095303f3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7057f0b4-4a7e-4551-a7ae-f345ee076a92"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a677d22d-9075-4709-ab57-17c738fc6c17",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e347efde-5258-49b3-b1a7-a9d5afbdc79f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3451895b-3e88-4fe7-819a-ed15db599861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2de435f-f776-4ed6-b44b-ac565ac388cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e4dc50-9577-4922-bacd-4532c317355c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "648cdef9-3070-4b00-9904-9792ab589089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f2a6fc-113f-4659-8af2-e66c0c61a644",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41ed807-a775-4ba8-8d2b-6ba8751bebcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10139828-e28b-4dc0-9837-c69749370522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e93337-ec32-4024-8305-67fd42e04e05",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9737e69a-6025-495b-85b0-f264d9a64d42"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea85fbe1-7838-4a63-9515-a333a6ed3c50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0a9c0ba-24ed-4b5b-b51d-839b870da1fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "57596db3-47da-4758-aa83-456fc4f4d23a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7da677c-ff17-476e-be1d-9d0cc2fe1681"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6407867d-9fb8-4ff2-8815-0b8800640ae5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "07e2e1ad-4a9e-4911-b1b6-b64668c0e487"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dd3141d5-2425-44c8-910b-615ad6f31829",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d735b78e-bbe8-402d-9f73-8bc41cce16d5"
                }
              }
            ]
          },
          {
            "id": "d7057194-8da9-4461-8995-c14aff316be5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2a7b5610-caf6-4d09-a6c8-18421cf06026",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27defff1-c6a4-4cee-92de-d50b65b75733",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "197e8022-5867-4c31-abd1-80942e185476"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34c6df92-31ad-4e7a-b8c4-66f13892e280",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "415bac24-a2eb-413e-a8fc-7816cd5f1549"
                    }
                  }
                ]
              },
              {
                "id": "1b5fc60a-9d21-442c-a111-7e1babc751fb",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7ae7b72-8da7-466b-af9d-0662b7447ed8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c6f711b7-6ffe-41d6-9707-1a40ae7aacd0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a934e5fe-c47d-492e-8bed-cac5531f644b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f4421d63-9ee8-4e64-9468-3305c77d4176"
                    }
                  }
                ]
              },
              {
                "id": "08c7471a-8ceb-4efe-8f5e-a356006e8337",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2aa7024-3348-490a-96d2-3af63241f53b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "37d57093-09a7-4b1a-9965-02336e515187"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45bdb5d0-343d-4bde-9d84-ae4c1085788f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "de259ca5-9495-4da3-99d9-6b4e2ee1b80d"
                    }
                  }
                ]
              },
              {
                "id": "63f3631a-4982-4c33-8d3f-d874d698ce0e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cb13557-5f4f-4806-8649-e8f869028b4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2cf9124f-0ab9-4c90-b3d2-1db572608540"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5635c449-d9c5-4575-9ef4-7aec5b00b12b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5c67d603-6024-40ba-98e3-2b8e5e587b88"
                    }
                  }
                ]
              },
              {
                "id": "b26388ea-189e-40c2-9526-8ad5f21a004f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8aabc4f8-4662-4ae7-9ffd-9594a2a37860",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c29d0a2d-781b-4403-b252-456376487255"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b088d6f-efdc-4931-a849-a8e9224b089c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3823e915-e525-4fb7-80e2-47d2b35690c9"
                    }
                  }
                ]
              },
              {
                "id": "b6c57b03-7f76-4f14-be68-4b9e0674f014",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c80b8c5-5b88-4b8a-a1c9-3f9d596d5901",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f81e95e3-eac4-4ca7-8c94-9232de723664"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "099676a1-cf53-476c-86fc-b2e42cc54e2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4a248b8a-3f77-48d1-949d-d151b0fcae32"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b3d8018c-8d38-43c6-acd7-a61d18fbecb7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f96d03fd-c053-4a39-b42a-39ced915af94"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "abb51939-1208-437b-915c-cca24c61b1f3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "98f11c5f-1ca4-44ff-9961-b62b0ae07caa"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5fe17e0a-cc8b-4d13-90a1-2983771ef839",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ceaf0b54-bd94-4d7a-9afc-1faf317242d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9bc036d6-9bf4-47c6-850a-e71ba346178c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6dd7100-96c4-44c5-b46e-c7a325137ce1"
            }
          }
        ]
      },
      {
        "id": "bf3950ac-68f8-4f4c-9f75-a16650d5c632",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bf97cdb9-5356-4b16-89b8-d088d8a10bad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c458bf41-95c3-424c-b5ac-d64d33712340",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "be37fb26-8854-4787-86e1-b518d4c6c5f9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68147de2-3e78-40cb-b1dd-4a373ab7c665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ca65bf-14d1-48bf-a6ba-56a436d540dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae64337-d86b-48d5-9844-ed608bfe40cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a8fccd2-d18e-47b4-a1e9-cb95fbd31027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a6441e-53e4-499c-87e1-2d1e608a6db5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b2d6eb-2939-45f4-9607-d37facfe8e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60713618-77b5-43e3-a664-e4f01633c4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862c7038-d720-4aa0-84e9-77dc8271285f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c5e04f-ff5c-4b9e-a9a0-689a0241e208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2431c213-f14b-42cb-ae91-b5e9e03e756d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db13e5bb-e3d1-4634-ac05-430636d1960e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d22ac0e-2cd2-4809-ae62-0e0892de5ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745f94b9-e7ce-4ab8-8a44-4ce6b64281b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "822ffe1d-26fb-4107-867c-a46dcf468396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1c2bfa-2e75-481d-96f0-772285d83b59",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e656b4d8-55ec-4f4f-baf3-23f56f8a4f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7939e409-d694-45ac-a928-4803208bfc81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9206bfef-af4a-47c8-8e3e-77e776b58860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61e019cb-3a03-4e21-abbf-59047fe32447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a244c334-3879-464a-9055-c1b75e842948",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4de7ce-2c6e-463f-a1f1-321a39668ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff4a882-1bcf-4c75-840c-8ac3d3c640a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0fae19-71a0-41c9-838a-08f5522352cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76eaf017-fc0d-4191-878b-06b721b204b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3dba0f-201c-42b8-91cc-d6b267d922f2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb53c105-ecf5-45c3-b31f-89a30265a233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18bef54c-85d8-4149-b21a-1fd605ddda72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34ab904-6b65-4cb4-98ca-374bbacd65ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "786a1376-5629-4d89-9347-f3cf1eb12116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c388ab6-1f6b-4e8f-9f26-6e13adc79a19",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8fb461c-b7b2-441e-b7f6-fb7ab2d1b200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db14347-0543-4fdf-aafc-6b1509f25b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a87ba0-9b1c-4b91-913c-7324670b7ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce2ce71c-c51f-4c09-bd4d-d99777c5c43e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a049e413-de5e-4034-80fe-e2dca59066cb",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a50318-f3a0-4523-a7a8-2d82adacced6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdadb47c-f4d4-4449-8f3c-a203b24c4887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5b09be-3fc7-467c-b405-dfce06407b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb1a695d-5749-4944-aa13-82f048720a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc68611-c2ac-4c61-bad5-13f1d54b991d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da669bff-647b-4d77-9a6f-d49a96e4f87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aec07184-45c6-46c2-b43e-62bc9103bb36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3976bfc-4369-4ec9-affc-5ce0ad9182a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "abbfa778-6bc4-461a-afab-e3b44e816b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e954d23-5988-4319-a348-3b4b263f7202",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "627ca140-c567-4550-9185-14bac8a2b139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ae952d-d48a-441a-b8c8-b6bf6cfa264b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcfd841-8560-4877-b32c-d3082cdd1538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec12605a-2b26-401e-ab86-6277890627a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e153c51-4c12-4693-b181-80a06975c1c5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15eea9e8-6a24-47fe-8d5f-d7979ad5401e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e88dab7e-4138-489c-95b3-eab69f7d3af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa451ed-262d-4577-80b1-a8ca36a954b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3d7363a4-213b-4c1d-933e-a189f0bacd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4df3171-31dd-48b3-b6bc-1c9c0eace083",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e612065-57a1-4d68-81c6-3b192f903133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9700042-ef71-46b8-b9bc-ad6c55aba0e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3890be92-385b-406a-ac56-10317914f818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42172922-3e0f-4324-9b2e-1ac8978e34fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb41409d-d3c2-427c-8479-d0bb3aed6f70",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b9b16f-3a7e-4a53-921d-ef412af94044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c122a63-dc62-4389-b99b-771136cefc86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1525a2-ccf5-4fb9-a3b0-45a1d5f47297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b0a4de7-3a9d-4923-b07f-f1063b66dd3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6f0e6b-fc02-463d-bcd0-021484812739",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac15733-bc47-4bd3-9f50-45a9bcd47111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2084556-1baa-4153-a2b0-ec97e8e19e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7990c507-99f4-4af7-82d7-9c10e3d5a078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb50638e-fc9c-4ef7-b0be-f6c6d956951a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74606382-999e-42b4-a67f-a94ff2e00129",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca418fb-22a7-4612-8eec-ee666c0a84e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89aad3a0-de2f-4414-920f-7effdb77a8b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1411bcd-63a6-4c25-ac2a-a14e9c7aa70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "57ccf95f-6fdb-4530-ba9d-9d35a58e8e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9cf043-846d-4f1b-bf11-66ddf5c6f6c6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31f321b-0307-4c05-b5ca-91467413eb2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65c7f22d-c683-4b2f-9197-75abefe2845a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f42a71c9-96a9-4bcd-8b38-9c5a7ceff7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f1b886-ab96-4ae2-8222-66d08364ef74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb689822-75d5-443b-b7ad-e372edb9180d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49258273-d308-452b-bd0b-0471dd118b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eff7003-2dff-4e56-86bc-2280ae1059a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d4bec0-e763-4d38-a78c-7855fb958932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "37812165-d960-49fa-b95c-0eaa376cd1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4e7d87-63c1-42b9-b425-c012c3b89363",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a35f4f0-e028-424b-90c6-c1fe4fed1f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81538b49-d3ac-4c94-aad5-09d1a2e230cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4cde28-e270-4d07-af01-82b776a15dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "847e9c0b-c575-4b30-b588-848dd12c709f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7eb3572-3b5a-47c6-8cc0-29cca577ba17",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9accae45-8ad0-4b6a-a374-9e62566a82d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66651ac3-859e-4373-8557-763a612d7742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9fbaf6d-c9fb-47ee-8763-bcd82d3c9551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02f01c50-56cb-421a-b1f7-232c5fae6283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d681e2-9dc4-43ac-8e8c-e31d6decc8e5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e34f3b5-f3a6-4847-a2c7-ab68701a32ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "391d987a-d791-435a-bb8b-4612ca269ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57dc5dd5-ecd6-4a02-9780-d46bad5d6010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb8a27d2-5555-4d0c-8a7c-ba15806a3ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12523fcb-9189-423b-aa59-6df801a8e504",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1c15ad-fa38-448b-bf67-963c2d6539b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f8bd58-4314-40ca-8e1a-24c6774b2be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0616b0c5-6f70-4686-bc73-231b54474dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6885162a-f25f-4eed-92d4-c615c6bbcf00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0b9690-53b2-4da0-b5b3-be147955bea1",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "140c8114-c8f1-4db3-a9dc-a76252c386d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "837def59-a1a3-41f5-b5e2-bcd2fcb50701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3013b93-48ba-4ee3-913c-436918a1495d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af475e9d-fd87-4177-b8eb-1a8570c425b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132a5a0d-95cd-469a-b2cd-ce223e4622d9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2bdf4b6-58bd-449e-b402-798a55ecbb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a452cb1-9366-4edf-9373-bc853bc3d9d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68d8718-f6bd-4922-9314-a20bcff0bf05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1c53968-fbe9-41b1-a9c5-086f495de02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de55029a-6cc5-4e18-89bb-ae4654b742ca",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abcb5e0-d29d-449e-b8da-ab69b9075224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65367333-e206-468e-9e57-cbe38b1f443f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88f1702-9a27-4776-93ed-c3ae0b815a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c69e9c39-aaad-4cc6-b925-e968982d1cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efeace7e-0555-4b0b-bc5c-b787e7b65684",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e462ec-6e04-455f-8533-5776ce0b34ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c2456c-10dc-4e09-9745-0af433d40ebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbaa50f-24e2-4c29-ac0e-24388fc1fc53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1abd1ea4-a382-4a30-9a7a-b8916ec5a337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3284d35-de79-4269-bc25-cf6388fab3ca",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96d9ba6-ece7-4a4f-8e80-545da55cb99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bee69c3-6c73-467f-ae78-12679b447730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b041b6f-dfc5-4a98-bf24-f10a460f7203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc02d82-2dd2-4aa8-b021-69f12172f25a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efa7017-4a9f-4779-8f3d-304af4deb5dc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71ea248-a9a8-424f-9ec1-816bbbc7c2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fcf794c-0b54-415b-b6ff-a6f7f501882f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce23f72-eb96-465a-b4dd-0abbfd19eafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "801c351a-a25d-4a92-8df1-13505431f124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67923e22-134a-46af-9f33-e36f2900c234",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ce503b-5783-4dd5-9e2f-4e46810f1188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07491793-c251-4437-9ff3-beae9763f232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f30eaf-4f51-4a78-b91a-cbbb3e3d3c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc748051-d7e9-4d14-97a8-2fb6dcd2491e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f5bc82-264c-49ad-b367-ceacf03ab741",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2559336-da94-4511-bb3e-fbce4c03efa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a162be-b03a-45a6-8f9e-1fde3507d94b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e506ca69-7072-44f0-8095-cbe23ca04967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "381927d7-a781-4827-806b-11127375aee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a9f6c6-76b1-43f1-9399-97f739d8e3d0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf1c4b8-94d4-4544-93fc-9c1f2fad3cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc89b40-c3fb-4f56-94c3-3c9f9be4732d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8b4cdf-ac94-4aa8-af9a-bd08b7d68b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37407e45-a03b-4c21-9170-49cce751dab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1fa3d33-a3bf-44b0-b6f1-dff382b18ef3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb55da14-5597-49c9-b637-4623ee5f1e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dddeb7f9-7755-4aa9-bb5f-6bbdd601d459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a413f2-abca-4b5d-b14b-acad4f1b3551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6515cfdb-34ad-4389-9601-ddf37a121c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0ec8a7-b1ff-4a95-ab8e-e842268ad9d3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0959ac9f-93c6-440b-ab59-833fc139e031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c37f860-ee66-444b-8c5f-055047fc7f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ed663e-f776-410a-866e-e981dc879ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2d5fd06-9585-452e-88f8-caab007bb972"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a9cbe7de-b05f-4961-90d2-421dfd368f11",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "64f7fcba-f251-42ef-8969-dc7898e8bf67",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbb4620-c6fd-471a-976d-71dd2172f154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad79f895-1cc4-449b-89e8-e6d73624c2c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b33dfa-48c3-469c-89b4-5d288b3e0ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79d02359-91f3-4057-8e15-2866c41fc7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83a4f53-f3a8-4aa7-b39d-da25bb55d4d1",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d243f023-03a4-45d8-85d2-4e3cdf08b80a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "5c23b45b-2658-4f0f-96dd-508a09c4fb29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde9b3a4-3696-43cf-b361-56c02fd9033f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "044f6bce-6add-4bd8-942a-29848c1cbf70"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8695f6aa-c0f6-42b0-a40e-972884d29ec2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bc743d4-1300-478b-8a27-7bffa810857b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea82c9e4-2392-40fb-8c98-93d711b6189b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca9872a1-f3f1-453d-985d-d759031a6e4e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8b34c29-5abf-46bd-bca1-c03cdeef26ce",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bf376457-b972-491c-9acd-15546918db09"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "958cc46e-5d66-447b-be70-6ea2bfc052fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "028ba850-a977-42eb-9ee5-005e37f033b2"
            }
          }
        ]
      },
      {
        "id": "795f9b4c-dce0-4b50-908b-9de3a0ec3f85",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ece77a93-dc64-41b1-8964-39b3deb17570",
            "name": "Negative Testing",
            "item": [
              {
                "id": "13d455f2-f354-4bd5-b988-85b1c3d81d14",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ef8921fe-c53f-4bbc-8cb6-51194be42e63",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03574120-0483-42d6-b8cb-6c81a954abe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8efe0dd-b9bb-4604-9885-3d039bc8e4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa45c940-8623-420b-a855-72f18d8ddf85",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5f7ada-50fe-4f37-acbc-e300b684b205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7efe34c-ee17-4e28-9930-99be3d04a028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1658c5b3-3c51-4a46-b809-3b4dbab4f6a5",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb7eda3-eced-4976-b5c4-4f238d561c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9821264e-c42d-431d-8fe3-e9ef0d66f55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a014a5a6-acdf-413e-830b-22b917d5ad87",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d35836a-bec7-4845-8f25-36555faae514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e94a6b4-ecc0-4f95-b946-3884e6235a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c95320f-f721-4155-bf86-cbb1a01828b5",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02eda843-3197-4e3f-9517-3671d775b625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d1be6b-b037-4f24-9adb-978af8c69c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f73a1fd-280f-4413-8a46-41461a983064",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0f62f2-ec97-4b4e-86e9-1f2dbb759504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b651b4cc-4176-4109-9980-8c6138d09a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42dd882-29e3-4ce9-899b-a98084eee57c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3583fe65-66f2-40d8-b52b-4d781ea53281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a794701-f148-4e67-acc4-b2f61b718f1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43678ff0-cd4d-4b18-ad27-2161cb8db298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "476492da-1cfe-474f-8f94-2e6a8c739943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9053e5c3-4144-4a84-8f43-0cc48f75418d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bcb4c4-1e5a-4a77-b0d8-c771dcd1aeb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e43133c7-0a57-4e42-be21-47993c162d1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2c2fa2-5cbf-4b80-a5b1-b8e6030c7104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c1687f-9136-4748-9688-54c467aa15a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d9ab3b-a22d-40b2-a372-bdce17a59af6",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b32c7f-5e2d-4bdd-82a8-1cbb9b5bfaae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d5b9c8c-a8da-4cca-9f03-4d5a9bb96b69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a23eef7-7b94-42ef-9248-71cbbc8a59fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4419436c-e23f-43cf-81e9-69c915e355a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39a4432-065a-4a7c-a2b2-fc0be11678a1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abde1144-e5e0-4e8a-b729-6ab244fc9c89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f9a6a97-bb92-4077-bd59-e73d553a93ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa92e9fc-538e-4c85-a93a-1c713a8d2127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0631ebfc-3729-4022-80a5-6637398a2de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8dee52-e67d-4fb0-b8c5-7d7afa1bc13b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62481c96-af87-4b56-a33d-9f8fbac92d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e95598-285b-4141-90bc-e20be21d63be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c6cd6b-0182-4499-8331-d43ba586fe0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "319089ae-f8f3-4254-b0bb-b6729559c19f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7f16c7-a0a6-498b-b97e-1c57878620cf",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be684e7-d7ae-4af6-b6f2-5c19091c9766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b90ad37d-3cb8-42b0-9bd1-9c8693f0af19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2fda010-3a26-4d03-a6cd-57cca534a811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dabd250f-44cf-43da-910d-407418d93177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008ea77e-61d0-4747-ae51-9137d2aab02b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83b1dd6-332e-4665-81f0-e43ce8018e7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcc6d864-5e69-4c80-999c-d008c277cf9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37c8be5-898c-457d-aae5-81dff8aedfdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955d4779-7546-4134-8163-21eb4b4eb36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5720b34a-2d37-487e-95f7-198f7f8bea2b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9060ccd7-5ee0-4fcf-b252-f356ff563bfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9f7b8a2-a798-447f-a58c-9b0b22997ae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c1f858-2d84-4af6-b67e-863a133e564b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9698ecf7-9517-4bdd-8997-aa34fa5b8cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bbcfeda-a50e-4c79-b00c-0826d16bcc62",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58cae05-c1a4-41b7-a717-dbab49b55110",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d472c63-5452-436e-8246-a1351a8c2a86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8872fbfc-bd0a-4216-8f25-56a4d59e163f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daaf34cf-905f-4c8c-9738-33bc696448f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf34a1ee-d9e8-4ab1-9154-8a053f1f26da",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ed6e8a-f633-4c17-91fe-23828c0dcf9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "438a5530-739c-495f-8af4-69fd386a8303"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e0b95d-7cdf-45aa-9b59-c03d20cd77d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b42655-2d88-401c-9219-316249d4dae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c03fa30-bf78-4f27-8f88-f7a08e4ca2c6",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c5278a-0702-40ab-bb82-4442a877dde2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94334bc0-bdcd-4271-9678-23beff989847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf399d6-67ec-4d7e-bc78-d035c927696f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c17aa76c-0823-4fd6-bff7-4f7cee6b1413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317c9ac6-4392-479b-8261-57758ce11f9f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef1b2a3-5baa-4b5c-aa19-4c345d6b5d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11865437-cad1-4f05-92f6-1706554ab065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8760c567-07fa-4ca5-9e1a-cfe85b86a462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0a260c2-c30a-484b-8356-51635e2d5755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9031143-786d-4319-a572-88265cb1c133",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8129125-7bbc-4b18-8d20-616e7cb40fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eef3211-d964-47ae-957c-51afb3cf833e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e766545-bb02-4869-9694-30f34d60f720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98c52adf-c67a-4815-a7a8-32eabac983fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b17090-1547-4082-8790-e32795ff020b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18a8365-ce3a-40ac-ab3c-1e5e31fc131f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5287fdb3-0ff8-433d-a05b-b51a46c3083f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8436928-51fc-4fde-9e81-dd861490c907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc8f11ae-3851-4793-bcc5-e25878cfc743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f5f89c-52ac-4457-865a-f1cf0199a3a7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6be8e2-4933-4bf2-9a44-3f95c1eb67b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b62dacc5-b60b-41ac-9011-ad3d4be2dc64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "182b8ef9-2536-4e2d-8b68-96b3f6503a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd91c75b-3ce4-4ae4-b675-afc462df06a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d892f8f6-98c6-491b-8832-1a66bc6a6990",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab829f4-3f9f-4165-98cd-42f820a90879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71fd7955-dccd-4061-b733-750f80bb8e7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "428b6643-b4c7-40bb-a824-7cfc65aae8a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f955c4b-ad2b-42a9-906a-70dcece386b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3f3d98-91d2-405e-afe4-903e0c02963b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c4513c-4c24-4fa2-b95f-5d1fd5de4ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21cb0208-9890-4e17-a000-8392455b8ce9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "145a8ffa-ad32-4d88-951e-b93f329d2073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b1374f5-4b2d-4902-a412-741cc1e24017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7aed006-43b1-42e5-bbb5-3309161963ff",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d325dbf-e28c-46e0-b445-754159a85133",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac3dab03-30bb-4e40-a016-f7dec91b0cd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6155ea25-1f35-4d05-8afd-781f6ecb575f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0884fb37-98dd-4ebe-9f13-af4021beb0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d8bfe7-9cdb-4aa8-96c3-caf6093451e5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df732cd-c49e-4225-99a1-0dcda3087274",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fd2ab97-e71b-42a3-a577-10e763d3447d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc77380-5d24-4997-896d-629df7a3201f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a527418-ebf5-4b60-9d78-c3c33b6f94ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4afd70fc-cc54-4e64-975d-f26e9845b4af",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958ce008-d079-4c9f-a3b9-3fdc20627b27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9436462-a0a3-410c-b841-dad084fe58a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c40b3cf4-0e1e-4533-9b03-80dc761e55a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c52d35a-0089-45f7-82c1-b9022690e79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03299608-fdcf-487c-924a-3460da44748a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41e2fc4-c79c-4f4b-9dcf-b4ab150d196e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cce4e33-025e-446a-a2e6-3add75dae9b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a3da86-75ff-4a86-bc80-853d13577fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4bb4bb3-9b1a-4297-84b4-96960b81e802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c36751e-e976-403d-9158-711bda7cdbaa",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a479855-0325-4b7f-9bd3-7845acb3a9a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86cb7029-f426-4456-88bc-2fb9df00d6ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ea9806-5bdf-4e92-bd78-4055f30fa3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf7a402-d65e-4a5a-a4fa-de22c4f246ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b92c821-b01f-4c46-8361-885af73331e6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe3cc87-f43d-403f-818b-b0504d30f5b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d52faca8-c816-4c88-8197-47770af8684a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a41efa9-042e-4bb0-a933-01353ae906fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36274d7f-970e-4057-b3de-0f3f8eeef867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62cdb9b7-53d8-4801-b63e-12344bd3a097",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941b6418-363d-4348-b03c-da862a2c0742",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5acd5c3b-b740-48bf-8a49-39da759c1363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ec4835-a275-4638-a566-452b5afae7a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71abed59-7de4-41ef-a91d-e95b38a58750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd309907-3b52-46a7-9631-b8f37a58db72",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a40e171-29bd-4e95-a0ba-18cfe8515fcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea48a36b-9d81-4a00-aae0-445785922764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19880f1c-25f2-4643-9463-98a3252f17b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640367a4-f2d3-485d-859f-f493748e1b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e2c4cf-e410-4047-a89a-9cd89e7e1f23",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed648abd-aa70-4f58-aff4-6d665e44f0a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "899d6cf4-2837-45fa-be3e-8e66b54dc592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7993ecc-d2d7-4fad-b667-0f4cd3dcf03b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d39cf9f9-e96f-4bcf-a628-9d3cc4b9268c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d961db0e-e2a5-4fd2-9d2a-63f030754cb3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ea3d88-0b31-4225-890f-fb09e7cf7519",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc7494c0-b962-40df-a142-026c0a4eca49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a07c7a-58c5-4280-bffe-aa95ef0e6ca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54d7a19a-b5d0-49a6-b9af-9c22db3a9203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea62837e-4ef2-44cd-b258-39c76a0ebed1",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85569147-bb3b-42a4-ad66-766b95c28d3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75a21903-33b0-4215-98b8-7fa04f0348f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a0c760-feb3-4632-ba6f-447342301787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e582ca2-1742-418d-bd71-1d8bbc86fd76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d719ada1-0717-4316-b420-db04249bea1d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78f0a83-1bdd-490e-bbe9-b39a6362141c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c7ae16-8428-4326-9c42-c76899c8c090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d004dd5-3ca0-43b3-91bc-ba9aa0d5483e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d8513c2-da6d-466e-abdf-c10e56800e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff807d88-5702-4010-a3d4-17ecc2a9dbaa",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0950c8d9-832a-447e-9191-d8c93e164a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cbe7fac-5311-40f6-bff4-0789b8ab7403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc3446d-8656-4423-a011-f773c343200a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82b3c472-56de-4771-96c1-9b9a4947d6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d89e28-9662-4701-9ca1-7880cad0e6bd",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3630dc-d160-4afe-b204-8403d31d9113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a085e0a-8e48-423c-88c6-9faf42576986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde92644-ca8f-442b-826f-ac13edf3193f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f45defa4-d8b2-4af6-ae57-56296baa7d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed1eb49-41bb-456b-a319-666b5c3e50a0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c577e01-e8b1-4042-9f25-9850f070ff31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f22f180-4dec-4012-bfa4-d9a15be27e2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe87cb91-27db-41c0-94ea-cfc246aa30e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee665a70-5843-4ee7-abab-ed6232d64bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c4e1404-333f-4d89-a8ae-d582b0706257",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8fadfc-5389-4656-9f3a-d47d406f686f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46b1153-36a9-4d2d-9709-a89e0c2beb2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8b8889-aaaa-4d10-9a5e-3d399f6206a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6365158e-9e50-4f6b-aa88-916dae65fc09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8479ea-893b-4a7b-8318-c89fd42b0237",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6452323d-b01e-4203-8ee0-35390d150f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209f6c49-140d-4ade-bc17-cde46cc538e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2720defa-e212-4849-87cd-07ba2717f47d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd58b0f-5746-4fe2-92b8-f065ce0fa1f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27815d53-340a-4b13-9bfb-12fe2ddc251c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42353289-f77e-4f9e-9e44-8c9a98eff37d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4fe0a0-6bcb-4163-a1fe-5022d4d08d04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea78a826-75cd-45c3-9462-8705e74961fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604e1c41-97d2-4290-8f4c-d3a1352ce547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb48845f-0f59-4375-af5b-9e106fa606f6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e635bf2e-e2ea-4505-86c7-1b4ea5895c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab58fdf-1330-4ab1-b61d-3ab764ebcc82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b7d7ab-98b9-4e0e-9e3f-5e1ac71c8220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f21b4fa-9fbb-4988-9bb8-f316a9249ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a581e030-8ec6-44a1-9c09-5d46557a8e18",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8b80bc-6736-4dc4-9e37-42bcab8515a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7476a7e3-3a91-4a9b-83e2-c4baa7a92b1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78281cfb-3044-4a6c-ac18-3c173bdfe0f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e3536e-a61e-4f92-9dcd-e20d4008e996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e75d8ae-5aa4-41f9-9644-8ae5db1ba614",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03883d6f-93f7-49f3-949f-069a5d62317b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2bcac02-9817-4e09-8862-0edbfb104da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdac8d1b-9802-441c-a419-f2b5f9b61f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4daef55-e76b-4eba-ac5a-9c71bae628a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be24f4ae-6159-4e8c-8cdb-b8eed3a6b379",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73db1cc5-555d-456c-abb0-883de4e472d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a78e7c5-5ef1-4415-b1b7-7715ac7b4268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a2a35a-b755-4984-8cdd-a648d08c31ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d23007c-8c55-42c5-8527-1bbd864b3f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47dcb29c-45ae-446a-b4bf-e18785257b66",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10ab96d-db7e-411a-b170-bad888a03cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49baa10c-e5aa-473c-8e57-484358ec5989"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e741ec11-1a49-475e-a28d-46c3b588e9a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f9591f-9842-4648-99eb-8a53c87d94c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf56cbc8-7496-4697-92b0-81189d96b22f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df441400-8b01-47de-8ad9-6315f4c50a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d10cf46f-41fc-4ab2-9b94-85b9a6ae7ba5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "842048c6-348a-4630-82b7-a4b910499445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0d1599-0e7b-4794-8e7a-aab06f3b5a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8981a8-c911-4e19-a8ca-582aa874f331",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e3b811-74f8-4a00-a677-625250fdd2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b2fe20-78e5-49e5-8562-29cfe449fe54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04c3bf7-f668-40db-a588-bb90f94462a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82475350-aa70-41a1-b217-caf592a2477c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6726e81-958a-4919-a903-1a72afbe3be8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0737e30d-8f64-4f9f-aafc-a04f8c37cbef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee51c61c-180b-4cb3-acdf-17f842d143ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c3735b-6a32-492d-8ad8-e5bf06528ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1265fab-9045-43e8-8829-9f05721bdd12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b87cd1-2aff-44e1-9d73-8f53e2808029",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aba2b9d-d6f9-417b-b618-cf2ae3e7bede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "092579c0-08a9-4f91-9d98-4e30df0f39f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf9ebce-1349-46d5-90c9-1d7701a6acff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b78c31-2a30-4a3b-b6a5-387f01b04c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37edfa8-00ce-4e88-ad7a-d0b47ef0a1e8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e5bd59a-5416-4f4a-b2b1-983f4e569de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b9dde9-898c-42bb-aeae-135e479c175e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d064e389-3e3b-4bfe-a4f8-598345717a84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "129a9aeb-d143-4a57-bb49-e8658d751bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c372e31-d07c-47bd-b630-e4708ccfd299",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1da9bc4-2a20-4fff-820d-d1b4f4ede660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec172af-0a70-4144-92ce-11ce80e91ec0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a44dfbc-fd65-4ada-b17d-a34f165e4ed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f61819ba-3a58-4497-a68e-b1f545282b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf082d1-ac5c-42c5-9c81-272dacc410a4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b5b831-e1a6-490c-9b01-6442f3852a0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc86becd-238a-4281-9b7c-30a0738cd4fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2267a855-bcaf-4fbe-98c4-71ce83ef280a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1a105f-764d-449f-af03-9f16a6336e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7034030-2c0b-43a3-bc23-1bafe1dbf120",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49dceada-d901-4dc9-8446-f7ff7a51d4f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4354678-16c9-4e5e-96c2-d3cf87be11f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eeac5ba-aa7e-4fa3-8b5b-59dc70b7b65f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8422bf-c364-4afd-9cdb-f99aa98903a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565e1a70-88e2-4271-8aa6-f9565bd965ef",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780ee688-749e-439c-a919-c2a521706647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc23907-3450-4014-b396-f93de0813f49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd69513e-3862-4877-b2da-0adf796c6d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399320d0-d9f4-41d9-be3c-f02f071a9277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d4b6a3-7095-42d5-8895-a2892f34a70a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a17e45-53cf-4cae-9ce0-cc6dfffaa18f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbeecb0b-3157-46d4-b5c3-a24c8b0c2542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d6975a-7000-46a5-88fa-f044865b59ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd615b0a-3298-4b0a-8b25-510760541fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7020c0-5514-41b5-97ee-7acdf1d88aa6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f559fc67-760a-48ef-8151-cff9d317bc1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c7375d-6697-430d-b58e-f34f6bfe2844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2cff61-ba12-446d-b94d-b8a47e464592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ea163e-b999-4273-866d-e2e406a80daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd6c21b-2565-4654-b511-65c3fae49fc5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98164bc7-d805-4462-81e0-bdbba95b512b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75596e43-414d-41e3-be7d-60aa4b6fbaa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68ad73b-dd06-4e3a-a57c-349b3f4e19d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44b4050-fcfa-40e5-b32e-c7a1ce2de875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90db2501-d847-4a6c-a09e-999ff7698acb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18eca56b-d215-43f4-9e3a-272e75cc62a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d65398f-3d9c-48bc-9c6f-bf64d9a42314"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69da6824-6c35-4c8b-9b1e-6fc8e173107c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cedcb91-c1f1-47b5-b273-41423075b060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1a5973-7523-4da0-afe1-c298501989bd",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7bddc1c-f328-4f27-a061-c182dc2a3c49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7801cb1-c2da-4694-b53e-610fe104cce1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "382be4cf-8857-4bea-8b85-a2fc4cd27f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0083a05d-5d23-4256-8f73-a83e72c01707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a1a719-d5da-4d68-ac56-ba13139baa8e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e34c9e-4590-4181-8ae3-96e2f24326f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74865d76-7172-499e-a9a3-afe5238b4341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1adb3d-6e17-4822-a693-c0c29f777322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdbf8f58-a88e-41c4-acfe-056175639adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e9026e-5fb3-497d-aa89-990ef79ec0f9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198068a7-b683-46ef-9163-95e1139844f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc34abd4-d372-417a-913f-ad2920200f9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc190f1f-2eb0-40cd-8b71-b12df3ec9b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10d20d13-2757-41ac-a842-890d384562e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff657f0-7326-4bba-89ac-e5cb58bf35bc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4579f696-7c20-44bd-8f6e-cff925c5ddfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac2c2244-fe64-4513-8838-87fc58b1a240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0556fce8-22b3-4633-ac65-9b7d500227e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09be5f68-6103-425a-af77-0a5dc8c91c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b108a0-c889-4364-a308-e479fff0e2a0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c63a29-acb1-462e-9bb8-f055ec62311e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdf6c125-0494-4ecc-87ec-43a92f528042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d262ae-f97d-410c-8a15-df454f123a85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d956cfa8-16d1-4da7-a22b-48b83fdb09d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ee8d2e-6d94-4ee9-9b57-55228a1cc22b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6780fd-880c-485b-8484-51a0c770cac1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb09e9df-d79c-4183-901c-29d2051d2803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86f5758-6862-46f1-adfe-1ad1f033a4ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3646f0-cbbc-44d4-b6e7-50c1dfbf97b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "177b6982-9ce4-45b9-8fc8-6d34c325fe3e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6634af35-fd19-4409-b2eb-5ab5a5c25ee1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9bb7bef-4c15-4aa9-85f5-d98a38752bee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65d6b09-6268-404c-af8d-507b659dc453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2175987-090a-4f47-bfdf-def5bf7a8a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780e3780-c6fa-4f9f-a99a-2d833a2f9efc",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eeff2b1-bba9-4e1e-9734-94d7e3a2bdfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7212943-1e01-404a-bff7-9b1e7ecead84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0eea72-6aad-4bd6-b3f0-b6f9155da426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2641ea11-a73d-4ad5-89ec-02c4a75256aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ae574c-f6de-40c5-8ef0-d7150e78da0e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47715bb7-76a3-4302-9791-793fe52f38a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31c48f0a-8f79-47eb-a8b6-c44517835378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53c748b-20eb-41f4-97c2-1a2b2025c870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbda0d2f-6d71-4d50-9fc5-6e3ad955de22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060e5ace-5848-40f3-9a54-884e2f23f44c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f870c351-5db1-4d3a-8801-b50c5ac02e4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3470ed44-b039-4dea-ba84-8255e995e57b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b240fe-e4cc-4086-a779-26515fd64d05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd399523-6803-4b1d-b329-70c22d52168a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90455d83-5705-4d7e-b4c4-95cdff57f28d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c449f8-92d3-4361-a8c2-8f5878a02f7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c789342-afdf-43c8-a473-c02ca98839ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e6a3c8-6170-45b1-81fc-c22f072e9854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "272dfe40-510d-4293-9351-460fd89a0448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e06d50a-0177-476d-a3bf-a457d59c491e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b75164-ffd7-4130-9f93-39f64121c235",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aad87e8-174e-4e0a-b83f-7d656d846512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ea38f4-6eaa-4376-b16a-9072bc47703b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bda12f38-448b-41f3-85bb-4498932f14d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa60e8f-e92f-4141-b2b1-6b3de69df28e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3469f64-385e-4024-906f-97c786f8b2b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "358b0c83-cb71-4e55-af73-392041c49142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34a4ee6-0e5c-43d8-93f0-66d0ba95d7d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3001b3bf-7cd7-4d26-a118-ca85381ede23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57561bde-5287-496d-96b1-f57da49231ed",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a5c9fb-6b39-4c88-bc60-0a9e8b3d5a60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb15c563-81a0-4ee1-af52-9e6d1a47559b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "494b6a42-3443-402e-8f88-abc65a035cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01e2055e-cddd-4dde-b340-a2400e66da39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd3eef3-d7a2-45f8-bbe6-14fccdf84caa",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60697b6-928c-4d06-b501-1e55cd07e9f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53b6df5b-fd9a-4bfd-8c38-7c706d9e1d68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71d3cd4-b744-4132-92ea-ec4b79ac51a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe0b49a-ec8e-4c0d-a9d6-5ab0fa3a3acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ef875d-783b-4426-876f-282b1485cab2",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005e24e8-4fae-4e36-ad17-52fd71fd8d6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66603106-949a-45b2-b5e9-cb1ff1b02cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78543e62-4e23-42e3-af55-48fc4c9d53fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fe5a71-3b46-49cd-8c89-f43f1bfec4ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac65fe1-56da-4cef-8d79-63fc2b34702f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e38984-7f43-4115-82b1-583aa50124e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4846e09f-5dae-47bb-a2d1-2c4fd9160782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b756e99-a2ce-4d89-a4b5-7b3666b5f5e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b8fb310-39b6-4055-8e17-973a0726ee8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c489e08-a38f-45f5-a7ff-545bf75c1c86",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4cf866-5a91-4446-add9-0c59f566dd82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d648041-ede4-4e17-aef7-f68376f3224f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9490544b-814c-4f2f-9cb9-f466f944310d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ef9fb3-54b9-454b-b6c8-bbac8a90b2fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334bfbd0-df7f-48f3-80ec-eddde52d6795",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f3b046-0a6b-4bf6-8434-905910725daa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e95013bc-9dc7-420f-b848-ee4bb309046e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d689d7-59f3-47d5-99c6-f6fe8acbd372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab8bb1a0-33dd-4998-96f1-b7e522a1f8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6673750-4828-4491-8338-e8d97c65ca33",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9acac567-ebe5-4005-89af-9b7be48ddbdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dbea3b7-955f-41c6-8bd1-578ddad8ee8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7f8d5b-25eb-4055-a211-904fdb5afe17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac3f00be-3b5f-45d6-a238-4853c333b590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c560e3-ba3e-45b0-a446-175cd569d5ce",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb81992-b9df-4356-803c-47ee7e840da4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60cc638d-c28a-4c8f-b890-2bb6a4e2fec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf748de-3515-4c7e-af81-1f0304daa48a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad38f0bc-44e4-40ad-b5ea-e542312ce2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ae4d1a-8266-4d1b-b4df-b38461ec8b1e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5324a6b0-569e-4ba6-bf8e-e6409a185268",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "357f321b-5495-4905-b8c4-09d5dd3b978a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4aca27-8876-4f9e-aed9-c570af490759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e87d6d-b0ac-469c-b261-7228e168f2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c04da74-0bdd-4030-aca7-f42ba4cd6969",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b4c709-62fe-4ee8-88db-4ac9cc97852a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "069199db-c165-4ccc-b806-dac84d40e5b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb8d19d-9881-4604-8cbb-2881a1d5493d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e0572bf-7b43-4cb7-b7b1-7e93371ad4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876f13d2-f325-47b5-97dc-b800795d61c2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042c24d1-d5e3-49fc-b437-fe83a329544c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bfb7e7f-80ed-4437-b676-94db1b255bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0926201e-b722-4a93-9580-5d428998baa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1b0ba3-d831-44fc-aa25-7133348ecf85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6851bf8f-b420-4997-b1cb-2deeae86a40b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286bbbfe-1993-4074-a5bc-9cb69d47f69e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25db8b50-7919-4d02-b7fb-a0314286fa4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcf359b-2f1f-48d1-9271-8a055171a876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03878ce-6c59-4e03-973d-bdbfe102a744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8545bc8a-7abe-40aa-be23-62dcb2b22599",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59bdb892-1a56-4b98-95b0-2ea4613d3a82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa7e0dd1-a5dc-43ef-8dd5-931ea53ba65f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "713ceba6-5769-4fd7-a7f9-123022e99e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "676e2e38-3a68-4d62-b23c-a1dfa591270f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d61b16-63c5-4045-9cdc-b1d6ec6da2b4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f642b523-39c7-434a-9a81-50ec33679b0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "251ccfa1-fb96-4df7-9a48-da36a8dc79c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade069b6-87bc-47a7-93d7-86575f3a3c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e39e78e-0026-4a09-bf16-0ebdd0fa464b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24cd0d2-f0a4-421a-9183-1b1551436c4b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a901e093-a566-4cb9-a5a4-1475b701999c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c4514a5-4ba8-44ea-89d9-796d335166f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde4ad9d-577e-4d42-b557-584b4d9293d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2475994d-b637-4221-89aa-a1b42039999a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706e9995-17e7-4588-9054-7e05af9ed734",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab5b2c0-2065-4767-a730-bf7634e39b7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "911e4948-ec39-4376-9ac6-71b22e846f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9010fad-87f7-4467-96a4-f6116a3a61e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e1f074-5a47-4072-8d28-6765c97be49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225daed6-4720-49df-86ee-533eb2f6fd69",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b156d8b4-b186-4a0e-b33f-f89a89d42c94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab3f0e6c-e062-4139-bcd9-6f276dc4dbd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5eedbca-8deb-4853-93d6-5a728bb3bffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49c8249-93ba-4934-ab6d-b83b55eca6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46213a58-ff8a-4c14-9efc-865b6f9515c7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ec85e5-0be3-4ad4-8dac-adc9718f58e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4908acc2-ef45-44ee-b39e-7031b31ad925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f7be7e-e6f1-46b8-b8dd-f21e2194647d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c22cce70-3c93-41f9-9cb1-973a9c4b5f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8209b70d-4f18-4ab1-a9ba-aa498ed38581",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e24c3828-c887-4fb9-bf71-1f9c44002555",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e0fbe77-3908-4163-b5bb-1ce6f7eaf46f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f1c155-63d4-4dbd-807d-67d959091226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f260909-c7db-4362-b6e1-3cdf5f07f49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74eeb60d-08a8-424e-a49c-402b3b6b6ef4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbd89e6-2446-4843-833e-e9a3c6320d72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e09b8e1e-47ff-472c-a1bc-2c0ae90345b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccba63f7-cbf3-43cf-aaf0-e9abbfc19f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a32513-35a4-4aaa-9e27-4ac702eb905c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e5c51d-7198-4385-8711-b9db146770db",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d9235c-c3ae-46f3-8665-f8d4d6bb1869",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "759764f5-ccc1-499b-ab1f-08ca1e366c80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29df3845-d351-4260-96ed-40d25383367a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd7722a-3c12-4fcf-a8fa-21c809d52caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9562c94-8d90-4fa3-947e-c56007af9d99",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a1e6a1-9761-4bac-8471-8acd86516b38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c0b8594-c96b-4cee-b24b-36daabc43aac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28681a9-4830-412f-8f48-0dfce3d500b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74081778-5484-4602-90ff-9e6f60c1c412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1fa5361-33ce-435c-97a6-d7f212d601b3",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebc14b2-f4e2-43cc-8652-e1ece3cbeb08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22bc39df-4de9-47f0-ab9c-439a5b53ed64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72247970-5c24-4f45-b4c5-a22599ce0876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b253060-c774-469c-ae0f-04177c368b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598d5762-e640-4327-acd2-02ed9b35c826",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7512e898-ba01-4993-ab71-ba0120e3b7de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "513f16e2-e569-4ab9-91ba-7ed1d56ac3a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "874d0bec-7b4d-4775-9310-95b84feaa89f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8d30b04-9765-48b8-9a1b-963139aa29ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea5d1cd-3bf5-47d0-914f-8daa48a45e29",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece57072-b620-49d9-97fd-6b7c213b1c01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "009c5e49-8d19-48a8-9b6e-1909dfe80c70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e155c96-b8d2-4e88-a7cc-1bcc2ed8e973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a12f7fd6-fe6c-4b0b-b9a8-adea33a09da8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b689c302-6865-4489-99d0-49da15a6fb0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a656a87-6b0a-491d-af05-783888c6ed36"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "597298be-97e5-4a6c-87e5-07aec0cb8206",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ecbc7d3d-be7d-4e51-91f1-506009703d47"
                    }
                  }
                ]
              },
              {
                "id": "e6d5c58b-9b16-46c7-bc04-f52642b2f580",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f0b94c9c-4873-4fe4-8bd1-cb49eb7a137a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055075fd-3a02-4819-b6a5-c6954b1a016b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "64a5265d-025b-4ba8-bc6e-03deb6459257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04caec9f-a744-4011-83f4-f5ad11c8e61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98959883-4368-475b-851f-e22bdd6ad9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e57345c-3d02-4963-9ba6-09dbb2f8c290",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0f46e2-e99f-489d-9e8d-1e5e8af16e64",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "de48a9f9-19ca-4aac-806a-a9f1742cfce9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f379f3-bdba-42ef-b4da-19c6ecd31507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3b3ceab-9505-425d-a53a-f754dd5b0f19"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e05e56e9-d280-438a-9327-90be3b13b558",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39908366-faf6-4e3a-98e5-18efee1e5e7c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "72a265b7-7835-4b2f-acdc-9f7e1ba0e31a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef0ae52c-ca0d-459b-b74d-b1aa1dd786eb"
                    }
                  }
                ]
              },
              {
                "id": "25bc6351-eb62-4503-b9f9-e68d23ef4a47",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "54449044-4a54-493d-8c38-e6eae980502e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a8cb49-f9fa-43da-9cb4-c855c959649b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9e8c6488-f67f-4e2e-a144-97b361e7f67c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c71f71-79b1-4187-811d-ee91597dc53d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "438f609b-9b23-44c4-a09d-98b7c6cdeb4d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e6dee099-17a5-420f-b2c2-7c8db38c334b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2d94dd7b-c0d3-4556-8e26-283738f97ca2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b5da7ce-0982-4042-be6b-3eb58b072ba8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "986482d0-37bd-4f06-93e9-86e530b72d7b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a0f0907-ad83-4619-be72-a4f4fbe20dfb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29cb630c-296f-45ae-9bac-ecbe3b72cf96"
                    }
                  }
                ]
              },
              {
                "id": "980c52a6-355d-4f72-8fca-0b136a685800",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1651ae3-fd26-43d5-b4c3-8a2932cb5e4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "582e73e3-2ff0-4a90-9136-5b503be53be9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f9744d0-1083-43f7-bc0f-b56e1e2f6580",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4d92cf8-3568-4cdd-9bc4-bfad8dafecab"
                    }
                  }
                ]
              },
              {
                "id": "25504475-f280-4566-aa2f-b8f7f4e20f5f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6437e005-cfe0-4d50-8788-7f5a6dce0713",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9a91b4ef-7b7c-409f-b068-2c1c9aefb887"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "948ad48f-fb85-4c80-8bf8-34c5f690f209",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4113d53-67d3-470d-98ed-c90f03880585"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0dc1b65-54b7-4a95-b934-441c413e1810",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "20d35d3b-1d50-4bfa-b57d-90afa4ac95bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56838a00-72a4-4bb8-bba3-ae2d9bbad39d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf6fdd83-a67b-4a75-a5f5-5d82bda4b408"
            }
          }
        ]
      },
      {
        "id": "d5d82ae0-d70a-4ed1-889a-b279ec095a16",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "db46fec1-b870-44fc-9b5b-72f390f1a82e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cfbc033a-787a-4962-9e72-0b32b71d08cc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c373ff0c-62fe-4486-83d5-0c5bba2072b4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbfe2d4-8ff5-41a4-89c4-7d42100989fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3c462012-a009-4ee8-8109-77bff6620bc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04552a7b-f298-4c6b-acbb-20765f02ef5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57dd1ad4-420f-4a43-b3d3-8be8c3a88874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8500c2e9-cc5b-4f3b-8b7b-9a93b418de1c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3aed68-fc8f-4d03-b356-600bbd46ae96",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5475b19a-70c8-4dc1-b061-b2139ea7349d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80330f7a-e6d2-4005-b8d5-f8de4f4b3de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82c6a3d3-9619-4272-a0be-d1e00a6cda6f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9aa1f9f3-4b1d-46f4-9276-d5959417cea3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d350e9c7-e37f-4fb6-bad6-f34c9c24f3b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f00ff47-f602-447c-99f9-bdd780b2da83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4834c0b2-d62b-4f29-b419-6ed4dd5787c8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab489582-b306-42f6-9686-28333fea46a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a77ce478-0596-44cc-be30-5dcdbdd1e961"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c0524406-6ac6-43c1-9e97-a3b22d1629be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "028fa346-8ef2-47f7-9f7b-78acfec844ea"
            }
          }
        ]
      },
      {
        "id": "f270c195-db9b-4f07-ba40-9737fde18792",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "182c08fb-4c3a-48f5-907a-44e32379c6e4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf1938b7-7d64-4ad3-bb1f-1e6601d576fa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "724aea71-f311-4b70-bcdd-e337f6e02cf0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc8a0ff-9769-46d7-a382-194012961f94",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d5111b0e-06ec-4c51-b212-18f40a96eebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77988139-4d96-43c3-a7ea-c5b8ff2f4d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec0a4306-b147-4eef-9870-0974422987aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23f4010-179d-433f-9756-795290cdb4b7",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d972ef0-7f4d-45f1-ac65-eb623e7963cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "42d5760b-6713-4809-9d15-8b36d86ff49e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4cf534c-df5b-47e7-8482-5e5c8bb3b7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27c148c1-581b-407e-9cea-bc3cb30f4531"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3603dc74-0b8e-4263-8cf0-b3ad819539b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40a725d9-c41a-4461-9d96-903bd4b6f784"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad685ccc-fbda-469b-9a82-be2771811953",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae05c918-fc22-4a48-a8c3-52a5d5fcbc68"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a71721f1-aa6e-4a4c-88c1-8e6e85adc812",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e7588a67-739e-4d24-a6ca-bca928248312"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f43b9808-8026-4a45-9bf2-95ef0e5cf618",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0bb88bb-1cd5-443a-bd7d-1295d467ea56"
            }
          }
        ]
      },
      {
        "id": "e663e7e8-7411-4e5d-92fb-095055f6c1bf",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0ab81437-8372-4d77-aeb5-3ab83a1e40b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a256fa51-e032-4a1b-93e9-27ae90f66e65",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f0267f9-663f-419e-a813-d60742c5243d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff86503-c82e-4e2f-b40e-568cdb7a7b13",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e4174a89-7385-47d2-8deb-f702ce227f38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d7b47b-cee3-4c94-8737-bcc0f0746a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5c8fd03-7c37-474c-8be8-6300a777696a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1414db-4050-4743-8da6-addc52ac7ee3",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b95a9eb-1cb7-4513-bdf9-6f42828df3d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1c46cdd4-5e03-4607-847b-1dd40229b257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ebd435-64c7-409f-a091-73f505a389b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef7babfd-c653-4fc3-931e-e5253aaf6e6d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38114d11-9aa3-40a1-be09-f2bff389b7ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c0d23fd-3066-470c-8233-2bc7a44899da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41977a2b-49a8-477e-843b-df7341448297",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ae7f1ae-1287-485b-81be-0dac0e4a370c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf1f834b-bb4c-4a9a-89ae-b67339c7bd04",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b62e2e7b-46db-4b87-9f54-8181969e3376"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1795883-4fc1-42da-b30f-45bf510be713",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8654946e-b67b-48a5-a6b3-e5c238ea9ec5"
            }
          }
        ]
      },
      {
        "id": "f4abc60f-d030-4ed4-a56b-8361ace27ebf",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55d2ce36-7a8f-43ff-9f61-d495153e4157",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a90a745a-10ab-4582-930e-664c64ee9e6a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "29ae39dc-ba83-463b-ad23-d93f0a2e1f9f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a85a04a-edd3-457c-bc86-e6510022f328",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e3e8c50-6484-44c9-93bb-0c313e0abc81",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 96.85823754789274,
      "responseMin": 19,
      "responseMax": 624,
      "responseSd": 104.17653295416244,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1669941501502,
      "completed": 1669941536193
    },
    "executions": [
      {
        "id": "a8ae41c5-98c7-4b2f-a38a-c02fe8ab467b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "55923ed7-585f-412d-82cd-725564462253",
          "httpRequestId": "7d556f65-aa6d-4f9e-85fb-dc37196861ce"
        },
        "item": {
          "id": "a8ae41c5-98c7-4b2f-a38a-c02fe8ab467b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "40c1b0fb-9935-4832-9dd6-68f7ef3b5d96",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 0
        }
      },
      {
        "id": "a8ae8d37-30ac-4e5c-92f8-6bea85ded9e4",
        "cursor": {
          "ref": "a7424183-cb12-411d-bed2-655f40572b1a",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "12a580e0-7c85-4fed-adcf-132741481222"
        },
        "item": {
          "id": "a8ae8d37-30ac-4e5c-92f8-6bea85ded9e4",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f1853f68-4f06-4073-a1bf-52eff82be475",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "4f7a0fb6-d57e-4553-82c3-2e6a5d6fc5d1",
        "cursor": {
          "ref": "c74f863e-b549-46b1-8946-7334295c63eb",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "13fced9f-3138-42d6-95ff-062a9d89d8fb"
        },
        "item": {
          "id": "4f7a0fb6-d57e-4553-82c3-2e6a5d6fc5d1",
          "name": "did_json"
        },
        "response": {
          "id": "7015328e-34e4-4824-a2ca-f6f6f7ce3fce",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278648fa-574e-4544-a12c-b1c3d3526af4",
        "cursor": {
          "ref": "f4eadc1e-0623-44b1-b275-fc0b94de16c0",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0749a83e-4dbc-468d-84e9-e530d211f99b"
        },
        "item": {
          "id": "278648fa-574e-4544-a12c-b1c3d3526af4",
          "name": "did:invalid"
        },
        "response": {
          "id": "645ac610-6621-4d5c-80a5-adf5e3f05ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278648fa-574e-4544-a12c-b1c3d3526af4",
        "cursor": {
          "ref": "f4eadc1e-0623-44b1-b275-fc0b94de16c0",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0749a83e-4dbc-468d-84e9-e530d211f99b"
        },
        "item": {
          "id": "278648fa-574e-4544-a12c-b1c3d3526af4",
          "name": "did:invalid"
        },
        "response": {
          "id": "645ac610-6621-4d5c-80a5-adf5e3f05ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5623a92-923c-49ed-b80a-6e37b733f67d",
        "cursor": {
          "ref": "6398960c-a793-4dcc-be11-71755686b557",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "765c595f-6e43-4fb2-9537-2860a95f4cd8"
        },
        "item": {
          "id": "d5623a92-923c-49ed-b80a-6e37b733f67d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "41d1b233-71c3-4c6f-ac50-db12f24d2621",
          "status": "Not Found",
          "code": 404,
          "responseTime": 163,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb097d0-da77-4ba0-8c1d-991a278ace0f",
        "cursor": {
          "ref": "229faacf-984f-4a5a-859e-405ab1dd2c01",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "eb136e01-37f2-42e5-9e9d-6079f28cee9f"
        },
        "item": {
          "id": "ebb097d0-da77-4ba0-8c1d-991a278ace0f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2edd5e2e-a9e3-4664-95b0-34e79df6466b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0141485b-3924-4187-a25b-2a1aadffcd3f",
        "cursor": {
          "ref": "3ba36f87-9db5-4b4b-89ba-1112abd06f78",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "effb7f7b-9b55-46a9-8cfa-e87e1a695bb7"
        },
        "item": {
          "id": "0141485b-3924-4187-a25b-2a1aadffcd3f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "48818c5f-a77b-4003-8a5c-7e9124730ad9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3583d4c8-0e3f-4d38-af8b-11a996f113e7",
        "cursor": {
          "ref": "a2f5933f-9d08-4fb2-9d7f-1f4d57b91277",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9113dc89-b5d0-45e3-9984-02e431307f9a"
        },
        "item": {
          "id": "3583d4c8-0e3f-4d38-af8b-11a996f113e7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "be82c010-f681-488e-b56d-17a3b43c621e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 44,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3583d4c8-0e3f-4d38-af8b-11a996f113e7",
        "cursor": {
          "ref": "a2f5933f-9d08-4fb2-9d7f-1f4d57b91277",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9113dc89-b5d0-45e3-9984-02e431307f9a"
        },
        "item": {
          "id": "3583d4c8-0e3f-4d38-af8b-11a996f113e7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "be82c010-f681-488e-b56d-17a3b43c621e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 44,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d16c3b-7f40-46a2-bad9-1b1a2083e994",
        "cursor": {
          "ref": "52f0718e-f519-4416-8653-169315dfabf2",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "74d71898-1973-44ea-ad96-eb9825df81de"
        },
        "item": {
          "id": "43d16c3b-7f40-46a2-bad9-1b1a2083e994",
          "name": "identifiers"
        },
        "response": {
          "id": "3287e5ca-9fd5-4ed5-8782-2aa4471f5009",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849942c0-00ee-486e-929c-e2b8e0918730",
        "cursor": {
          "ref": "de3fb1e6-6b58-48c7-b603-54f2b18b6731",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "79455452-47d3-47bf-8e97-4b53e7f41ab5"
        },
        "item": {
          "id": "849942c0-00ee-486e-929c-e2b8e0918730",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b4fe03cb-8e3f-444a-8198-baf02c7468a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849942c0-00ee-486e-929c-e2b8e0918730",
        "cursor": {
          "ref": "de3fb1e6-6b58-48c7-b603-54f2b18b6731",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "79455452-47d3-47bf-8e97-4b53e7f41ab5"
        },
        "item": {
          "id": "849942c0-00ee-486e-929c-e2b8e0918730",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b4fe03cb-8e3f-444a-8198-baf02c7468a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7777f9e1-634e-40c2-8b20-eade3bbb4783",
        "cursor": {
          "ref": "1f26aad1-063d-4ea7-b214-f6f738c92732",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "89562c57-7e5f-43e7-b104-343a22be8af3"
        },
        "item": {
          "id": "7777f9e1-634e-40c2-8b20-eade3bbb4783",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c6197a28-5f43-43fb-b1d5-75cec5d0d0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037f7f6e-0280-4d35-9368-c0c6c8468ce0",
        "cursor": {
          "ref": "1bbb2e77-93ac-489d-b353-a5b1cfed6e85",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0645ba52-91b7-425e-afd2-496e3b9d013f"
        },
        "item": {
          "id": "037f7f6e-0280-4d35-9368-c0c6c8468ce0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6d7361ed-d3d9-403c-98ca-cfa936210600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10aea03-93de-48b4-a882-2714bc52feab",
        "cursor": {
          "ref": "fa4b0e11-c283-4234-a7c1-7d539ca0c573",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "efcbf5b4-f398-4952-b67f-56ad6e9e95bd"
        },
        "item": {
          "id": "f10aea03-93de-48b4-a882-2714bc52feab",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e99f5833-5075-463a-bed2-83bd0feb80f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec92e160-a527-4124-af7b-3923c25be3b9",
        "cursor": {
          "ref": "2514d7e9-6944-45ed-9c2b-83534153c0c3",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d677db66-e5c7-4ca8-a0d5-1b8f47254535"
        },
        "item": {
          "id": "ec92e160-a527-4124-af7b-3923c25be3b9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3c378cb3-d180-4e31-9b13-516bcc6db469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3a5454-6850-4c0f-9269-6495cfbb8077",
        "cursor": {
          "ref": "88da2941-2839-4cfb-813d-6184567b5085",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c3e30e6d-8b75-44b4-8375-18bcaf48adb7"
        },
        "item": {
          "id": "bf3a5454-6850-4c0f-9269-6495cfbb8077",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5275deff-5cc2-4867-a8fa-6fda13545dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c0a93b-4165-42d3-9a2c-95e259e8c54e",
        "cursor": {
          "ref": "27c26b9a-a000-4f31-a0d6-661afffc1be4",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5688f9a5-054d-4e43-b050-373b5621e406"
        },
        "item": {
          "id": "58c0a93b-4165-42d3-9a2c-95e259e8c54e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "953059bb-4abf-4c7f-97ce-8da19a17331c",
          "status": "Created",
          "code": 201,
          "responseTime": 512,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "1091a128-787c-4f9a-921a-3b3fe398423c",
        "cursor": {
          "ref": "f9557188-ffdd-4c11-924e-766f990e18b6",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3110c43d-08d3-4db1-bbb3-d5f590948ceb"
        },
        "item": {
          "id": "1091a128-787c-4f9a-921a-3b3fe398423c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "29dc35c9-323a-4674-8648-317da7ba37a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b13ac4a-fa23-4f0f-84b9-8ac63bf08303",
        "cursor": {
          "ref": "308258fc-37f4-43b9-9a80-e13fc374c70b",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "58fa84b5-e101-4ec9-af43-f41874fef8a3"
        },
        "item": {
          "id": "2b13ac4a-fa23-4f0f-84b9-8ac63bf08303",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ab5a60ad-8441-47ec-8dbc-dce74b039943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60815da-df32-417c-bc34-cd535851986c",
        "cursor": {
          "ref": "14a90139-f260-498e-b0ed-d5f9a966fb57",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4d88f61e-50ea-4586-bb3a-1e522eefd888"
        },
        "item": {
          "id": "c60815da-df32-417c-bc34-cd535851986c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "092dc42f-8672-47d9-9d28-4821bad42925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772cefbe-0a73-4f04-a8d6-e8a40745e242",
        "cursor": {
          "ref": "83f1eb24-7b31-4c90-97d4-8969fc5db183",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1a78f8b6-6f38-4e8e-a264-786e6f240ca2"
        },
        "item": {
          "id": "772cefbe-0a73-4f04-a8d6-e8a40745e242",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "eb787e2d-cd40-40ca-8fcf-a6e7666f14ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c141557-5dba-4b5b-a266-270bffb5d87e",
        "cursor": {
          "ref": "27855220-f7ac-4378-80f8-4bdbf62f8408",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "adab0cb4-9b53-480b-8c63-e852c86828bf"
        },
        "item": {
          "id": "1c141557-5dba-4b5b-a266-270bffb5d87e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e573de94-adbf-45f7-bf9b-69385a1856e1",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "545e7215-decf-4dca-9d1a-4a80ff343536",
        "cursor": {
          "ref": "23ba4581-1226-439c-beb3-fb1012db2996",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "74d3f28e-3cdc-4ab6-b546-808a088d8f87"
        },
        "item": {
          "id": "545e7215-decf-4dca-9d1a-4a80ff343536",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "880c1aca-a67b-4f40-b723-4b607ac709e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f3b2e7-8517-4756-80fa-5e3bf69398da",
        "cursor": {
          "ref": "6c10a201-ad9c-4368-9486-e82407cb3f72",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d2a031fa-f42f-43c3-9956-f943130a7a09"
        },
        "item": {
          "id": "04f3b2e7-8517-4756-80fa-5e3bf69398da",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "adbeaab6-d487-4ae5-9104-1b51b656149a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba7f462-f7c0-4b2f-a548-2dab17f2db74",
        "cursor": {
          "ref": "9985e85d-9766-4cba-bdd8-be120771d5f9",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f94c4cb3-571e-4c69-952b-959edba3df17"
        },
        "item": {
          "id": "eba7f462-f7c0-4b2f-a548-2dab17f2db74",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "58dbbcb0-8b14-4751-9ca0-9c5b0375f3a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8979c329-513e-4fcb-a450-925fc8b2550f",
        "cursor": {
          "ref": "7b2fba29-0495-445a-b00b-b00328b04f18",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8e1fa774-354c-4b39-8265-d605b46b9c9e"
        },
        "item": {
          "id": "8979c329-513e-4fcb-a450-925fc8b2550f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "daef21c9-9c5f-411e-9fb5-0943a94f2a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20c5579-b106-4a07-a05b-9b1516222a0c",
        "cursor": {
          "ref": "348794ea-af84-46d5-b8e8-04243e18f7da",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a1964303-088f-4f9f-ad8b-7ab156bf726d"
        },
        "item": {
          "id": "f20c5579-b106-4a07-a05b-9b1516222a0c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "16a6f8a5-7981-473a-bc3b-d26532a13416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4fecdf8-ff11-49f0-a6e8-e020f043c4d0",
        "cursor": {
          "ref": "d85627bd-68ac-4c44-a26c-fa05bc8ee1d9",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "84a6accd-f9e9-4068-a0c2-d9c29c55234c"
        },
        "item": {
          "id": "b4fecdf8-ff11-49f0-a6e8-e020f043c4d0",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6ba5dc3d-f7a7-4a46-8551-d1f2328abffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbc2e1c-4f21-4fd8-941f-357095fa0a90",
        "cursor": {
          "ref": "21fb0fc9-f271-4d67-90cf-f79580107c58",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "47c7a8b8-491d-40f0-a084-1a904a2f94aa"
        },
        "item": {
          "id": "8cbc2e1c-4f21-4fd8-941f-357095fa0a90",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3526062f-55ed-44db-bf53-380071e5d41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8283c586-e1cb-4c2c-ba73-25c928329208",
        "cursor": {
          "ref": "4136db3f-336a-4d24-a056-ab60fa55ff45",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3bdb43b1-cd72-48fa-9a97-a4d0174701ba"
        },
        "item": {
          "id": "8283c586-e1cb-4c2c-ba73-25c928329208",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b99f95f3-03d8-48e2-a7a5-99fce91c9c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5da5f7-786d-4d40-ba11-ceeb646f809d",
        "cursor": {
          "ref": "175acaa5-7667-4247-9718-c71e3e39eb2d",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3b9c2844-289e-4b12-afa6-004477a8f9b5"
        },
        "item": {
          "id": "2c5da5f7-786d-4d40-ba11-ceeb646f809d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4786c229-b2b9-4231-ba0d-013bcd6325e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92bfde8c-c3c6-49ef-9b71-6b5ab138216a",
        "cursor": {
          "ref": "eca82b97-1472-4eaa-9776-099c5b94917d",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a4d44ef2-d84c-4314-bd5a-bf09002b6b4e"
        },
        "item": {
          "id": "92bfde8c-c3c6-49ef-9b71-6b5ab138216a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c37afb39-44b0-4794-b1bd-03a1121bce5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a621bbd-2eae-45f1-b745-96434193fe70",
        "cursor": {
          "ref": "63ee5830-f924-40bd-8d5c-1b1dce326fb3",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "06eb20f1-6957-4221-ab8c-7cfa02ea78de"
        },
        "item": {
          "id": "0a621bbd-2eae-45f1-b745-96434193fe70",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ede64a11-055c-4d50-80aa-ed60424e81b0",
          "status": "Created",
          "code": 201,
          "responseTime": 454,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "af3fd73c-cf6b-4de1-9303-feb8ae070fac",
        "cursor": {
          "ref": "d04665cb-94aa-4925-9e3f-3df23566f426",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4fe6c7ef-5fb6-4704-8fa2-8ec2f617291f"
        },
        "item": {
          "id": "af3fd73c-cf6b-4de1-9303-feb8ae070fac",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4ca29da6-27d9-41fd-b2cf-533414efab02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4833e840-7946-4602-ac60-ef6f3494f73e",
        "cursor": {
          "ref": "a80338ee-eb9d-453b-b69b-6f2f73465144",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1292f2a3-93e6-4308-8765-4e304a95d07d"
        },
        "item": {
          "id": "4833e840-7946-4602-ac60-ef6f3494f73e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "735ad416-7915-48fd-bc73-b7a698e17324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281e1d69-678b-47d3-90e8-93f8227229a1",
        "cursor": {
          "ref": "b09bc852-d3cc-4799-ab71-b5c36ef54834",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "daad0d78-c918-4ebd-82b7-409526ef8f77"
        },
        "item": {
          "id": "281e1d69-678b-47d3-90e8-93f8227229a1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "cbc4bc6f-7943-4551-9405-81449336d3b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6697bcc7-b090-4e5c-a4d7-721e61ff7e94",
        "cursor": {
          "ref": "5f17d68a-61d5-42f2-a9ae-11ff7b502d47",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fa2e8808-8fd0-4aed-b5d8-97953326f7eb"
        },
        "item": {
          "id": "6697bcc7-b090-4e5c-a4d7-721e61ff7e94",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "bdb5fddd-a40b-4d94-8e3e-156e58c20f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1356620-7518-4ef2-b7cd-eacd6e5a1776",
        "cursor": {
          "ref": "df93bb40-6e76-4ac1-9a0f-38b9f7cd92e2",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d86b7a6d-88be-4be1-9ebc-cc90ceede0da"
        },
        "item": {
          "id": "e1356620-7518-4ef2-b7cd-eacd6e5a1776",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "137209c7-ac48-4368-87d8-ec0b14cda41c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cb09fd-406b-4e9a-ba6a-711768c4909e",
        "cursor": {
          "ref": "bc4aa907-d28e-4915-b081-c644ab087c1a",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f5db046b-21f3-472c-b2e5-95ed64a965ca"
        },
        "item": {
          "id": "06cb09fd-406b-4e9a-ba6a-711768c4909e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d0359744-69a7-468f-bb5d-444135638f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd69b61-f9ea-458c-bceb-6bf844e50341",
        "cursor": {
          "ref": "1b7d2d88-fff7-40fb-9768-367013a5039c",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bbca1bc4-55c6-445a-a3d0-0fd414d22de6"
        },
        "item": {
          "id": "4fd69b61-f9ea-458c-bceb-6bf844e50341",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a97c5d0c-9435-4110-93b1-afeaf5ed0337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3b7f3c-535d-419d-bc35-9d1ad0dccd84",
        "cursor": {
          "ref": "fde966c1-0a94-4e8d-851f-504b487c6e92",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d48f7816-ab9a-4233-9424-b71d23251e40"
        },
        "item": {
          "id": "4f3b7f3c-535d-419d-bc35-9d1ad0dccd84",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3485fc07-e539-4ee4-8dc5-8abadefa32e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5288bbca-e334-4042-bc75-9f965eba393f",
        "cursor": {
          "ref": "11042e56-ee3f-43b5-b2db-be7645de88a1",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ab91eed2-42b9-4a6c-be6b-bf69aac30481"
        },
        "item": {
          "id": "5288bbca-e334-4042-bc75-9f965eba393f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "859adaef-fba2-47dd-ac7a-60c21295c831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d241d39-dfa6-435e-9baa-a14f893e7913",
        "cursor": {
          "ref": "f484510c-41a7-4363-8b59-3c58a2d025c8",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "25b2fc16-8139-4da8-8d77-f958e904bda2"
        },
        "item": {
          "id": "8d241d39-dfa6-435e-9baa-a14f893e7913",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "012cbc07-5d41-4620-85c6-e4e85822f6ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3cecc80-4928-4fc4-ae3a-6f5a971aa481",
        "cursor": {
          "ref": "c2b1ec91-a9ec-4932-8a86-20d7cebb0f7b",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "46078117-3b21-4c9a-bbec-889763b1a872"
        },
        "item": {
          "id": "c3cecc80-4928-4fc4-ae3a-6f5a971aa481",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9c389c54-db76-4952-9ded-afef4b8920c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f780888-4c71-4583-a36e-b13ff7903e81",
        "cursor": {
          "ref": "42d20aae-4851-418f-b256-140774955503",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a48cdc8b-eab1-48c8-8b98-a3ba29387d53"
        },
        "item": {
          "id": "4f780888-4c71-4583-a36e-b13ff7903e81",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f02d4236-9517-4164-ae26-69d7ea3987fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a5e25d9-8d39-42c2-b102-9b983b107730",
        "cursor": {
          "ref": "c9860ead-8d66-42e4-aa81-87264970028a",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e63d3703-91c1-43b1-938b-b60266d0db6e"
        },
        "item": {
          "id": "0a5e25d9-8d39-42c2-b102-9b983b107730",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "74fc149d-1f3a-4275-9af1-a1e8ee4554a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6639ec05-1faf-4aee-a231-85af2a1a890c",
        "cursor": {
          "ref": "1b362f2a-be8f-4181-a2b6-6e9d2796df2e",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c5c4b192-dced-413a-b9a9-aa38488a7953"
        },
        "item": {
          "id": "6639ec05-1faf-4aee-a231-85af2a1a890c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "dcfbc6ef-f726-4bb0-bb06-fd0cf8ab009b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f50c6d0a-3ab7-4dc3-ae07-095a38bbe394",
        "cursor": {
          "ref": "95725169-a976-4ebe-88ca-e6f4fbe88f86",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6d990f44-841d-4263-a0d9-505dae5db6a5"
        },
        "item": {
          "id": "f50c6d0a-3ab7-4dc3-ae07-095a38bbe394",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6bc2b17c-e375-43f1-aa91-0f797e638370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ec05d2-96e7-4407-a87b-ebe62f7d3293",
        "cursor": {
          "ref": "295dfad2-ffa4-47c3-beed-317b3f411152",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bc66fbcf-0291-4f4d-aeac-b76a2bb73ab2"
        },
        "item": {
          "id": "52ec05d2-96e7-4407-a87b-ebe62f7d3293",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3e29daad-1b23-400d-8c0e-3e1eacff30a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6f6708-e81b-41b1-b6b3-320b95cf823e",
        "cursor": {
          "ref": "94c36485-6396-4db7-8d8a-a98883568011",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "215a1046-bc8b-4f5d-9134-e5cf2bf53279"
        },
        "item": {
          "id": "1c6f6708-e81b-41b1-b6b3-320b95cf823e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f915b3d9-f3dd-4f5a-b6a7-39dea159bfb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f901fc-9a1c-47d7-a9d8-3bc139fae1d8",
        "cursor": {
          "ref": "a476001e-8cda-41a5-b682-6e6c29382fab",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "58c090f6-8603-40a6-aa01-4a75a282d85c"
        },
        "item": {
          "id": "59f901fc-9a1c-47d7-a9d8-3bc139fae1d8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a9f09b2d-e727-4628-b221-69d9bac96509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c7b912-53ba-43f2-b23f-f9aa17f6c0ad",
        "cursor": {
          "ref": "0c11fcaa-f813-4644-b467-1eea230a7dbd",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9cd3bd24-5e33-4fc7-8d3b-ed0519fb181b"
        },
        "item": {
          "id": "f8c7b912-53ba-43f2-b23f-f9aa17f6c0ad",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "087cd6fc-0739-4841-9ecd-413c88b5d9a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21897012-4fc0-4b9e-8719-a2fa37882477",
        "cursor": {
          "ref": "5ab806b1-2dd9-4a4e-a23b-59613056c9e5",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3426f970-f973-4a89-9e8c-04c19a872abd"
        },
        "item": {
          "id": "21897012-4fc0-4b9e-8719-a2fa37882477",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "aff4b208-7c71-4c55-b82e-334267c23623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e170f2de-d181-4207-b2fc-95f0df220987",
        "cursor": {
          "ref": "008c0928-3087-4a7b-bb6c-35eea6f3554f",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d5d426d1-d397-448d-846e-14345edbf78b"
        },
        "item": {
          "id": "e170f2de-d181-4207-b2fc-95f0df220987",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "bebe7303-bd83-44a6-8b16-ef1afc1fa549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2a3cf3-fa67-4566-a150-6a65c9b12346",
        "cursor": {
          "ref": "14660508-0839-4166-bd84-595d3f56a950",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a72224d7-3baa-4315-bacc-d465149ff7a1"
        },
        "item": {
          "id": "9f2a3cf3-fa67-4566-a150-6a65c9b12346",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ae055ff2-4fe8-46dd-8d3e-354e6784cf47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213034ab-6cef-47ad-87c4-a950758a9573",
        "cursor": {
          "ref": "bbd10431-7b9f-41d3-bf6c-f0d27733894c",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fd638974-8bed-4e71-9c95-b7323da26bff"
        },
        "item": {
          "id": "213034ab-6cef-47ad-87c4-a950758a9573",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "93d67fc1-0f3c-4e6e-827b-9054e07fda45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5c05de-f74b-45c9-9004-a8d48ed4e781",
        "cursor": {
          "ref": "ec2fb72f-4431-4a6b-bcf7-0d9253c6e608",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1e472634-de33-4754-959c-f8370165decd"
        },
        "item": {
          "id": "ab5c05de-f74b-45c9-9004-a8d48ed4e781",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "32b53131-f5b6-4adf-ad0d-ed1598b67abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f336c3b-3d46-46f7-8ee1-5d02a121b65d",
        "cursor": {
          "ref": "5bff6b21-795a-49e5-96a1-e4382237de33",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2d0d0799-149e-4c0e-96bd-1d338917ad46"
        },
        "item": {
          "id": "0f336c3b-3d46-46f7-8ee1-5d02a121b65d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "002eb6d4-e2fe-42b2-b0a5-5f9571b9b32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23caed5c-420d-4360-a62f-94ef52026480",
        "cursor": {
          "ref": "b3ad31fb-8133-493e-a54e-24019ccb07f9",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "05b67a78-6065-4c9f-b9be-2ad6aa8d4f1b"
        },
        "item": {
          "id": "23caed5c-420d-4360-a62f-94ef52026480",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0c769234-8bff-4af2-8fab-126a5cb3e410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df8d5fe-ca79-4c39-bbed-30ec9afba69c",
        "cursor": {
          "ref": "cfc16fa1-1062-499d-be39-9102df86415f",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7c0b4995-ba34-460c-9a4b-2510b983da5e"
        },
        "item": {
          "id": "6df8d5fe-ca79-4c39-bbed-30ec9afba69c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7162803d-a30d-496c-ada8-87c129036b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3875955-c0c2-4a05-a012-326b1649e4f7",
        "cursor": {
          "ref": "43f7c9b8-cb2d-412f-a7c7-3c34c37f6387",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7bbd8d03-33ba-4750-b0d7-02929212617c"
        },
        "item": {
          "id": "f3875955-c0c2-4a05-a012-326b1649e4f7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f6c50d35-3620-4015-9204-573fb4881b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db39a080-0dd5-4a62-8955-91e5e6fef8e1",
        "cursor": {
          "ref": "69c6f5e6-36b7-4488-a8ea-67a55fdb9fed",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ba31d08c-3c24-44a5-8f5c-7cf490fb40ed"
        },
        "item": {
          "id": "db39a080-0dd5-4a62-8955-91e5e6fef8e1",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "056fdce3-13b9-4bbb-afea-f1b0b3df4de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3d0618-9b9a-4ae6-bfe4-1251f02fcca4",
        "cursor": {
          "ref": "96f0c789-33aa-4a19-920b-5f8b037ce0a5",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "922b8941-be43-4a40-b322-cac9502aa43e"
        },
        "item": {
          "id": "df3d0618-9b9a-4ae6-bfe4-1251f02fcca4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "356cfc03-a227-436e-b70b-f4dbba1034ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d79fbfb-bab2-4566-8576-7a5d1ce67dfa",
        "cursor": {
          "ref": "1f96815a-1a67-4bec-a8e6-1da999292bbd",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e551624d-2adc-4a71-9584-6fe785f3e031"
        },
        "item": {
          "id": "0d79fbfb-bab2-4566-8576-7a5d1ce67dfa",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4687ab8e-2161-4248-95f4-4041f1b12d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a3f671-c37b-42f0-a1c5-71cd511cd8af",
        "cursor": {
          "ref": "eeb847cc-4cea-4dd5-8d4a-7538f19d6578",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "dc8964b6-4580-451a-8d7a-a89c474ed670"
        },
        "item": {
          "id": "e8a3f671-c37b-42f0-a1c5-71cd511cd8af",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a71b9e7e-a663-42e0-a672-7d65d5b8c4f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29e99fd-1716-4f53-838b-9e9b594e92cd",
        "cursor": {
          "ref": "0b48b922-c41f-42d1-b187-823df7a2cf85",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "fc975a2c-c9d1-4a2a-b928-deb997f46003"
        },
        "item": {
          "id": "d29e99fd-1716-4f53-838b-9e9b594e92cd",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a9f503b2-f3f8-4ee3-bbbd-eb2ed179c9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38336072-102f-4b39-a1bc-e8c45fc96fe6",
        "cursor": {
          "ref": "cd40a1e8-4a32-4269-855e-2c02fd06d1af",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "101059e2-eb6b-4a4e-b6f0-c7af2da7eb38"
        },
        "item": {
          "id": "38336072-102f-4b39-a1bc-e8c45fc96fe6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9ac33914-a8dc-447d-87bd-6e64ef7ac648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4608bf34-5f5f-4596-b99a-72834afc9711",
        "cursor": {
          "ref": "d99f4061-ce67-444a-b3bb-c7ef42f26c2a",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2049228c-c34c-4945-9c9a-99bb33b6fe36"
        },
        "item": {
          "id": "4608bf34-5f5f-4596-b99a-72834afc9711",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3183c786-c8bd-453d-82fa-747b214e7c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbcf0e2f-30cd-4e74-9dbd-73398f93af08",
        "cursor": {
          "ref": "09b8b6c1-c3a7-4681-b4c3-59bd1212ee3d",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c59f24f9-5254-455c-8beb-3bd5b7a8913d"
        },
        "item": {
          "id": "bbcf0e2f-30cd-4e74-9dbd-73398f93af08",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "75552839-671b-4679-a5ec-5807b23f7d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0c1048-769b-442f-acf9-c9c5c0c35997",
        "cursor": {
          "ref": "632ffc8c-711c-4a24-b7bd-8e0ab5cfb938",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7e20c486-7eae-480f-8232-41be2591d02d"
        },
        "item": {
          "id": "eb0c1048-769b-442f-acf9-c9c5c0c35997",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "95d3272b-433f-44d9-8f15-1af554376fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a39f9e-337d-4bed-bd0c-5816b3371732",
        "cursor": {
          "ref": "28eed9c0-7008-4934-9a74-3df8b5c62e5b",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "677bf88d-5f62-4212-9790-f7cb9feb2e49"
        },
        "item": {
          "id": "f6a39f9e-337d-4bed-bd0c-5816b3371732",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c5e0d7d9-7011-48ff-a971-e8398a263e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1433baf-f9d4-4908-8d9b-b63572150f89",
        "cursor": {
          "ref": "ee474d61-93e9-4a43-a630-587eb4f29bab",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4fed3b34-c358-44ba-a5b5-deb3193188fe"
        },
        "item": {
          "id": "b1433baf-f9d4-4908-8d9b-b63572150f89",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6028cfd5-f3b0-41c0-9110-19b8f4bcc9e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af543911-9e54-4471-93b0-1c1a89ba0ec7",
        "cursor": {
          "ref": "4dba0b08-6fc6-4032-bc42-61f4488f2fad",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1a7d6c6c-2265-477b-9f59-c7d9a2884efa"
        },
        "item": {
          "id": "af543911-9e54-4471-93b0-1c1a89ba0ec7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "192341de-3cd6-4165-8dfc-902f4776db5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33851c87-6d05-400b-8d6d-046864b3d042",
        "cursor": {
          "ref": "fb3312cc-bc96-403d-a985-d396ec70ebde",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ec7317a4-1412-4bb1-a449-c439418de8b5"
        },
        "item": {
          "id": "33851c87-6d05-400b-8d6d-046864b3d042",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "26110b64-fbd5-4cba-a80f-0a2bdc771984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4515ae70-6c61-409c-9c4e-42be0acb91d6",
        "cursor": {
          "ref": "f35d463c-ddc1-4e19-97ac-28436b98454a",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f09ad045-2295-4a48-9430-189576903c49"
        },
        "item": {
          "id": "4515ae70-6c61-409c-9c4e-42be0acb91d6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7947e5e4-27fc-48d0-bf23-ecaf52ee42f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1dd17f5-301d-410b-980a-579a1cd94904",
        "cursor": {
          "ref": "ebd78160-5403-4ca6-8261-3e72d32782ae",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3dd6cbd3-f17d-464c-9788-f5b9f812c16f"
        },
        "item": {
          "id": "f1dd17f5-301d-410b-980a-579a1cd94904",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4c051d4c-c264-4335-a302-16ab32237254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1028585f-f180-440e-8997-bfc49e48bf1e",
        "cursor": {
          "ref": "18da823c-77f9-4bff-ba1b-89063e31218d",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9611ab0a-4956-408d-9dd5-be4e33103366"
        },
        "item": {
          "id": "1028585f-f180-440e-8997-bfc49e48bf1e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ac3b5b03-77d4-46c7-80a2-a8bc3ee8a4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27bc0ab4-9562-4b45-a8d1-b2dc98316b72",
        "cursor": {
          "ref": "1ac94bc3-d860-4376-b29d-32ac2ccaba0f",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "af244b10-7ea1-45c2-b3d1-f0514cacd3af"
        },
        "item": {
          "id": "27bc0ab4-9562-4b45-a8d1-b2dc98316b72",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d24045cf-abda-42e4-911a-bd3c821d9c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c218e9e-550c-4733-aaf7-617e82ca4f1f",
        "cursor": {
          "ref": "96262e07-e169-451a-b5f6-745cb259438e",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3877d4b0-96d5-472b-867e-5f886a28a566"
        },
        "item": {
          "id": "3c218e9e-550c-4733-aaf7-617e82ca4f1f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "106f1542-885a-4fdb-a041-ee020cc8d8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1292cd56-f1f8-4b83-945d-10f0539d77fa",
        "cursor": {
          "ref": "1543b32f-76a2-4ed2-b8ae-c05ebc114d40",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "00f4d3ff-254b-4630-92db-61f7d396f0e3"
        },
        "item": {
          "id": "1292cd56-f1f8-4b83-945d-10f0539d77fa",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "682b433f-4758-4b52-bb71-15b65a98aa45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb06b10-5d7c-40e6-b7e8-e501f4c358eb",
        "cursor": {
          "ref": "39cdadb6-cefd-40d4-9267-b1e0e9fc08c0",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "dbfeb621-cb29-4560-994a-736852283d3d"
        },
        "item": {
          "id": "0bb06b10-5d7c-40e6-b7e8-e501f4c358eb",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "69a866ba-e9f9-43b7-9713-d630405ec133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045f6ff7-ee1b-490a-b094-90af6c2287dd",
        "cursor": {
          "ref": "9f914386-ce92-4c89-a078-7ff42915e10b",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c59ea71f-1cad-449b-bd67-06390d775b93"
        },
        "item": {
          "id": "045f6ff7-ee1b-490a-b094-90af6c2287dd",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8b309559-2800-401a-b010-ee1d906fe5eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a4be89-2bfd-410b-8c71-924fcc7d0331",
        "cursor": {
          "ref": "a4b42a27-3a13-4bdc-8cf7-c828a75fe70e",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0bc11d92-3590-43ed-ad90-64f0efce9b5d"
        },
        "item": {
          "id": "f9a4be89-2bfd-410b-8c71-924fcc7d0331",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c428fd73-be84-402d-8396-a95ddc748d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50da2958-b681-45b7-b085-e551f9769df0",
        "cursor": {
          "ref": "3f40b8c8-b048-46a0-b213-7688206e38f9",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "69f5ec27-7380-48af-b4ce-9a193ef14a6a"
        },
        "item": {
          "id": "50da2958-b681-45b7-b085-e551f9769df0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e83e3614-df70-4394-ad2a-c4863f96ad62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86f4996-dce6-414e-9fd5-6ccbec450a42",
        "cursor": {
          "ref": "32ea296d-8d47-45a0-9cfc-f0623f848655",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "aaf6252d-a782-4a2d-92b5-ecb5b0455358"
        },
        "item": {
          "id": "f86f4996-dce6-414e-9fd5-6ccbec450a42",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "595a48b8-2248-4af8-899c-85296c0df474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7f6f69-9a47-4421-8470-72864ac772dd",
        "cursor": {
          "ref": "0b91e523-862e-4262-99bc-e6edfa94896a",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1d917819-49a9-4937-8328-05759f22c180"
        },
        "item": {
          "id": "4d7f6f69-9a47-4421-8470-72864ac772dd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9b6601f9-39ce-40b5-8ebb-6a857dfbb2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a2fbdf-cb60-4a18-9d7b-c04d51746d2e",
        "cursor": {
          "ref": "86ce1142-f307-4d94-94f1-d84fe6ab72c6",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3620a365-b638-4f99-ade8-356dfae547b2"
        },
        "item": {
          "id": "d7a2fbdf-cb60-4a18-9d7b-c04d51746d2e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "802afebf-8aba-4c1d-86f8-8896a7478a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e2fa7c9-420a-4220-998a-703172628dec",
        "cursor": {
          "ref": "12d3afc6-005d-42ca-aad3-d921e5babfb2",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4b78f149-c94a-490f-9956-d9ec1963ce63"
        },
        "item": {
          "id": "2e2fa7c9-420a-4220-998a-703172628dec",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7ec1d977-063d-4f58-b681-c2a5d274ac9e",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "64f7dc6a-908f-4fee-adfc-e6726a699272",
        "cursor": {
          "ref": "dd5c51db-e01b-431d-bc7f-04883f87e1b2",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2d7ea313-8123-4fff-9975-7218a665aff7"
        },
        "item": {
          "id": "64f7dc6a-908f-4fee-adfc-e6726a699272",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d0a20e0b-af33-40a4-b500-31b4a4b4988a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe69125-0125-4f4b-983a-d902e2e4efff",
        "cursor": {
          "ref": "f8f19647-bba5-47f1-ad0a-00c19cc764fe",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5f9b554b-a1a9-431f-9613-e13ce085e455"
        },
        "item": {
          "id": "afe69125-0125-4f4b-983a-d902e2e4efff",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "cd557899-014f-461b-8ae2-93c9e571748a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78806e8b-a7de-49bf-bc63-d0fc10534db7",
        "cursor": {
          "ref": "47a78eb9-9302-44d2-9f21-612d8aebfc9f",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a49c2965-4d45-4488-837a-0faaf959194c"
        },
        "item": {
          "id": "78806e8b-a7de-49bf-bc63-d0fc10534db7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4112a497-2893-4ac2-a3af-93e30ce7c1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af264589-f426-4ceb-89b9-b12389facf65",
        "cursor": {
          "ref": "b112c0d2-e914-40db-ace3-40d273f8bc1e",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3016d4e3-01e7-4ad4-b57f-d1c395d491b8"
        },
        "item": {
          "id": "af264589-f426-4ceb-89b9-b12389facf65",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a66e4c8c-deca-422c-b22e-78c73a10b94d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a4be6c-a388-4ca5-b92a-be6f3efc47c7",
        "cursor": {
          "ref": "cf94e066-1401-49d6-b3c6-33f9d26fde27",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0a5b4253-ede5-428d-b642-cbb656006026"
        },
        "item": {
          "id": "39a4be6c-a388-4ca5-b92a-be6f3efc47c7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f4887a8b-75ab-4e55-acd5-b7c719d05651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe3c40d-467f-4908-b99c-34d06b21d660",
        "cursor": {
          "ref": "424aec9f-b2d2-483a-8a3a-cdf714bffaa3",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "dac19f7c-3161-4177-87e8-1af8ffb783a7"
        },
        "item": {
          "id": "efe3c40d-467f-4908-b99c-34d06b21d660",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4e715e5e-2f8c-492f-9d8b-bfe6361d9fbb",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "32e7d51b-5390-4a56-87c3-432ae9be9a31",
        "cursor": {
          "ref": "72b837f5-cbc8-446c-80ff-eb7b822d3ff7",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "09f92a23-1dca-4fdc-b35c-d6d2f6d7fcc4"
        },
        "item": {
          "id": "32e7d51b-5390-4a56-87c3-432ae9be9a31",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2a597d60-dea6-474c-a65c-3af9ed118e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b014f7-8c99-42b4-b5e6-98d929cb74f3",
        "cursor": {
          "ref": "5cfdc755-a0b5-441b-9b64-71233cb0ccaa",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "812ae2a0-ece5-418d-a3a2-ec7a92d55117"
        },
        "item": {
          "id": "92b014f7-8c99-42b4-b5e6-98d929cb74f3",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "bf3732a6-993a-4a43-99ce-01df5b68184e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bd9b3d-508f-4af4-b0eb-dd6290399509",
        "cursor": {
          "ref": "cf18f0db-7eae-4c27-a5ee-74ea46f91f34",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7758338e-f736-487f-ba07-d263b7f74b22"
        },
        "item": {
          "id": "f7bd9b3d-508f-4af4-b0eb-dd6290399509",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ac9ef22e-704e-4629-9a09-f0bd80867b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404be663-b9a7-4e6c-acbe-9f51f05ababe",
        "cursor": {
          "ref": "aeeee0f6-fa33-4f20-86f5-21d4e5856c99",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ec2e8129-08a3-4238-9337-f559249906e6"
        },
        "item": {
          "id": "404be663-b9a7-4e6c-acbe-9f51f05ababe",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "afeaf9a3-8b8b-44c4-a893-a9e7e7e35e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fff8af9-56f0-4de7-8317-3a8d6f573ceb",
        "cursor": {
          "ref": "bcc720f1-2bf1-4905-85c4-269975548764",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1aeabbff-0219-49e0-9368-ca8c3c79b312"
        },
        "item": {
          "id": "5fff8af9-56f0-4de7-8317-3a8d6f573ceb",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "eb65b704-9420-4ffe-8a6b-131a32ef0e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aaf7ed2-400d-469e-a5f2-05c3000bffa2",
        "cursor": {
          "ref": "c1b8c901-8d8e-4783-bc7f-a436d6852a83",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b62695f3-e3ec-499b-9085-ee9cc0040e6f"
        },
        "item": {
          "id": "2aaf7ed2-400d-469e-a5f2-05c3000bffa2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6395f4dd-9102-4b24-af84-0b7c8a609731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d79278a-7686-4f5c-9a1a-5997e765d2b7",
        "cursor": {
          "ref": "63a600a4-c915-4ae2-bd91-e97952eaabd3",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "30f723cb-189e-4b5d-a6d0-1f8aa406a928"
        },
        "item": {
          "id": "3d79278a-7686-4f5c-9a1a-5997e765d2b7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e932daaa-b8d1-498a-bbac-388193f424e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c0ee83-fda5-4c55-9497-dd847144f24c",
        "cursor": {
          "ref": "69a2b83e-90d2-47be-99f9-87f2e908bba9",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "eadd086f-f36b-4fa3-b0b8-7727d83e7d7d"
        },
        "item": {
          "id": "05c0ee83-fda5-4c55-9497-dd847144f24c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1bba2aaf-58f9-48ff-81e0-2e838391eacf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e347efde-5258-49b3-b1a7-a9d5afbdc79f",
        "cursor": {
          "ref": "ff0f2aae-e686-45e7-bec9-a61a4ae49c05",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "57c2379e-6afa-4223-9e52-05d6ba928bdb"
        },
        "item": {
          "id": "e347efde-5258-49b3-b1a7-a9d5afbdc79f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c5926325-97b0-48ee-8645-d45a3d3e01ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "70f2a6fc-113f-4659-8af2-e66c0c61a644",
        "cursor": {
          "ref": "08c80866-dc0c-4aee-8b26-d5ac0d9cdddb",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d8e03aaf-649e-4cbf-8179-5bc6f7266864"
        },
        "item": {
          "id": "70f2a6fc-113f-4659-8af2-e66c0c61a644",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "d6df2922-0c71-4d4a-a358-d3c0c2947df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "2a7b5610-caf6-4d09-a6c8-18421cf06026",
        "cursor": {
          "ref": "f20e5a92-0783-4220-b213-252c7851c853",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "88371129-21c2-4787-b15c-9e912b430ba7"
        },
        "item": {
          "id": "2a7b5610-caf6-4d09-a6c8-18421cf06026",
          "name": "credentials_issue"
        },
        "response": {
          "id": "86fe799d-abec-4bb8-8dc4-f28eff1629db",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5fc60a-9d21-442c-a111-7e1babc751fb",
        "cursor": {
          "ref": "d005c932-513e-4463-b7de-484b4090c716",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "137b6773-182a-46a5-be3e-ab1d0f182f4e"
        },
        "item": {
          "id": "1b5fc60a-9d21-442c-a111-7e1babc751fb",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "d42bac9d-6f9b-4068-9e74-c57d7f5edaa0",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c7471a-8ceb-4efe-8f5e-a356006e8337",
        "cursor": {
          "ref": "11b4068b-65d9-46f8-9b50-1f6f78a0bb06",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "607aae8e-6445-4703-8f6c-98eb056129d8"
        },
        "item": {
          "id": "08c7471a-8ceb-4efe-8f5e-a356006e8337",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e34c877e-b65f-4eff-a374-a10bb4f60941",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f3631a-4982-4c33-8d3f-d874d698ce0e",
        "cursor": {
          "ref": "99b5b591-fe6c-4dcd-8fb7-9f70602cf46a",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0bea5c55-995d-465c-b8b4-77604095be84"
        },
        "item": {
          "id": "63f3631a-4982-4c33-8d3f-d874d698ce0e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e760b004-084a-4b4c-b64e-ea293366d23b",
          "status": "Created",
          "code": 201,
          "responseTime": 396,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26388ea-189e-40c2-9526-8ad5f21a004f",
        "cursor": {
          "ref": "cebd55d6-fa05-4a38-bf49-228297b5b2f9",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7e94c184-8ac0-4395-9e43-fcec5d9495b4"
        },
        "item": {
          "id": "b26388ea-189e-40c2-9526-8ad5f21a004f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bb3b0e15-c4ec-4382-a1da-131748139ec1",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c57b03-7f76-4f14-be68-4b9e0674f014",
        "cursor": {
          "ref": "57dfc6a9-6e5c-4de0-b237-718ffc802937",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c1962b7a-7097-47cb-a9fc-bc8e1987dc03"
        },
        "item": {
          "id": "b6c57b03-7f76-4f14-be68-4b9e0674f014",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "00e882e8-ac83-4fa5-91b2-f97c471b5a9e",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be37fb26-8854-4787-86e1-b518d4c6c5f9",
        "cursor": {
          "ref": "1bef04d5-54bd-47ad-a86b-17d8794eda3a",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5164f1d8-cbd0-404e-8efb-2dcb3a9b7a48"
        },
        "item": {
          "id": "be37fb26-8854-4787-86e1-b518d4c6c5f9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a9534aca-8ccf-4ceb-b3ee-c418bc98383b",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "be37fb26-8854-4787-86e1-b518d4c6c5f9",
        "cursor": {
          "ref": "1bef04d5-54bd-47ad-a86b-17d8794eda3a",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5164f1d8-cbd0-404e-8efb-2dcb3a9b7a48"
        },
        "item": {
          "id": "be37fb26-8854-4787-86e1-b518d4c6c5f9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a9534aca-8ccf-4ceb-b3ee-c418bc98383b",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "36a6441e-53e4-499c-87e1-2d1e608a6db5",
        "cursor": {
          "ref": "e136110f-b2dc-4830-8f9d-6e081442cf63",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "13a1bf57-b5e2-4e06-b483-e973086a63ff"
        },
        "item": {
          "id": "36a6441e-53e4-499c-87e1-2d1e608a6db5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e0bcf025-4b8d-4f26-bdcc-180516522273",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "2431c213-f14b-42cb-ae91-b5e9e03e756d",
        "cursor": {
          "ref": "8f993d45-82cf-4ad1-8d29-c2540fbdbbe9",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f8430ef6-4c66-4672-8249-28b541aab3f7"
        },
        "item": {
          "id": "2431c213-f14b-42cb-ae91-b5e9e03e756d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "807682ab-7ddc-408e-95da-2d9e578dd15e",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "0e1c2bfa-2e75-481d-96f0-772285d83b59",
        "cursor": {
          "ref": "dabd2b59-4337-42b1-8dfe-446accddfb66",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "530df393-c070-4f44-956e-bac7edfe923a"
        },
        "item": {
          "id": "0e1c2bfa-2e75-481d-96f0-772285d83b59",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9593d87c-fcb2-4951-9222-294a154f976c",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "a244c334-3879-464a-9055-c1b75e842948",
        "cursor": {
          "ref": "317e4e21-1d8a-44f0-aa13-df787c0759b8",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "282c67a5-9b7f-4356-97ea-955278324e2c"
        },
        "item": {
          "id": "a244c334-3879-464a-9055-c1b75e842948",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "69053a5f-9bc8-4d7d-8e72-8b7f415d84e5",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "4c3dba0f-201c-42b8-91cc-d6b267d922f2",
        "cursor": {
          "ref": "fa358716-699a-40b9-9875-8404e1d196fe",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "abd127b5-7167-49f9-bf20-c664985c48b7"
        },
        "item": {
          "id": "4c3dba0f-201c-42b8-91cc-d6b267d922f2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cf20e97e-b3ce-4fbb-94f3-f042463ef5e5",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "7c388ab6-1f6b-4e8f-9f26-6e13adc79a19",
        "cursor": {
          "ref": "4c17a052-132b-4751-a56d-a5f00d3957f4",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5393f9d3-d9ad-44c8-a242-ae72a15efb2d"
        },
        "item": {
          "id": "7c388ab6-1f6b-4e8f-9f26-6e13adc79a19",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ba05139a-6438-4982-a2d5-8ea35c33d4f7",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "a049e413-de5e-4034-80fe-e2dca59066cb",
        "cursor": {
          "ref": "07a449f5-5b8e-4387-8b4a-a51bb10f1641",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9c81be93-ecfb-491f-8252-6a0a8ee42644"
        },
        "item": {
          "id": "a049e413-de5e-4034-80fe-e2dca59066cb",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f683c3bf-267a-4d3c-a51a-be646daad75d",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "bcc68611-c2ac-4c61-bad5-13f1d54b991d",
        "cursor": {
          "ref": "4070ca6e-6b9b-420e-b8c9-ca40385664f2",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b9129f7d-e998-43b0-aba4-b82936bdcf75"
        },
        "item": {
          "id": "bcc68611-c2ac-4c61-bad5-13f1d54b991d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "25851df2-e441-4eb6-84bf-b1d351273b80",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "1e954d23-5988-4319-a348-3b4b263f7202",
        "cursor": {
          "ref": "e440a760-3a7f-4622-86f2-0b787a965361",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "70400053-62d9-46b6-9190-47587b646c4f"
        },
        "item": {
          "id": "1e954d23-5988-4319-a348-3b4b263f7202",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ad139f3d-42d8-448f-a8e1-87b47be96e65",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "9e153c51-4c12-4693-b181-80a06975c1c5",
        "cursor": {
          "ref": "6722da2a-5cb4-45f2-8448-bba117ffa5e8",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ef3ba228-d514-4f5e-a121-f461b7232547"
        },
        "item": {
          "id": "9e153c51-4c12-4693-b181-80a06975c1c5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0fc68c9a-f84b-4daa-9aec-cf4bb7490bb5",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "c4df3171-31dd-48b3-b6bc-1c9c0eace083",
        "cursor": {
          "ref": "a4e2a166-84ad-43b0-b026-3221ec400e16",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a7839da0-7a82-4a47-b727-6e61fe9ff2ff"
        },
        "item": {
          "id": "c4df3171-31dd-48b3-b6bc-1c9c0eace083",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6d85a63e-2e27-462b-8742-0fa46c29230c",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "bb41409d-d3c2-427c-8479-d0bb3aed6f70",
        "cursor": {
          "ref": "156030ef-3eb9-4778-9d79-983ebc74c142",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "81a66b0c-3a44-4bd5-a895-3901789e4d6a"
        },
        "item": {
          "id": "bb41409d-d3c2-427c-8479-d0bb3aed6f70",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1043f48d-b397-4a73-b3f0-4afe7933b822",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "0d6f0e6b-fc02-463d-bcd0-021484812739",
        "cursor": {
          "ref": "a3e5996f-4c93-4e45-af7f-a5f55ecf5af5",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c410c7d7-b42f-4fea-afe0-55ce03ab9606"
        },
        "item": {
          "id": "0d6f0e6b-fc02-463d-bcd0-021484812739",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7c85d0ce-7227-4135-9912-8302fd2c0bd3",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "74606382-999e-42b4-a67f-a94ff2e00129",
        "cursor": {
          "ref": "6df9301e-debd-47e7-b768-056acf151bce",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "14ead825-1ae1-4e43-a9c5-d03d30265e91"
        },
        "item": {
          "id": "74606382-999e-42b4-a67f-a94ff2e00129",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "214156cd-66a5-4601-a0ab-4ee0b1dfd9e3",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "bd9cf043-846d-4f1b-bf11-66ddf5c6f6c6",
        "cursor": {
          "ref": "426f9049-53d5-4041-8e46-54e8a31fa017",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "049e6230-8c16-4d19-ac39-437553a81029"
        },
        "item": {
          "id": "bd9cf043-846d-4f1b-bf11-66ddf5c6f6c6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a4c8df59-4ce4-4be6-a791-7e45c5299131",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "fb689822-75d5-443b-b7ad-e372edb9180d",
        "cursor": {
          "ref": "547c076a-1e11-4e2e-a0e0-e3a2682e0c36",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ddf3ee15-95cf-4431-926d-6ac01daf66f0"
        },
        "item": {
          "id": "fb689822-75d5-443b-b7ad-e372edb9180d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3f424969-3ad3-4b79-a98c-2586fc998af2",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "ef4e7d87-63c1-42b9-b425-c012c3b89363",
        "cursor": {
          "ref": "5fafeb0c-dc30-4037-a323-419b33646dff",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f8365f01-9ba2-4e94-9512-6993d8c822bd"
        },
        "item": {
          "id": "ef4e7d87-63c1-42b9-b425-c012c3b89363",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ac7f5f3a-603d-4bb3-b526-bbb0c9e1bb34",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "a7eb3572-3b5a-47c6-8cc0-29cca577ba17",
        "cursor": {
          "ref": "c1b22669-03f5-4f2e-bb30-35624076f767",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8632557d-ee7c-46db-a1bc-9ed73277d2d5"
        },
        "item": {
          "id": "a7eb3572-3b5a-47c6-8cc0-29cca577ba17",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "25766c7b-fcfd-4134-a87c-076d7e19dec4",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "d6d681e2-9dc4-43ac-8e8c-e31d6decc8e5",
        "cursor": {
          "ref": "4fa820d6-cb14-47f2-8cd1-89b186a8ea36",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "5b78ca3b-c963-455c-a6cb-9d131c1fafc7"
        },
        "item": {
          "id": "d6d681e2-9dc4-43ac-8e8c-e31d6decc8e5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f7bb33ef-b034-44fd-aee7-70f2a9e92550",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "12523fcb-9189-423b-aa59-6df801a8e504",
        "cursor": {
          "ref": "c71c7da3-afbe-4e0e-9d9e-ebf2020cfa83",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5448a7ff-ba76-4f18-9a0f-9a4a4ea32c30"
        },
        "item": {
          "id": "12523fcb-9189-423b-aa59-6df801a8e504",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d0c0d3ad-7b5a-45f7-ad27-60ebb9218750",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "1e0b9690-53b2-4da0-b5b3-be147955bea1",
        "cursor": {
          "ref": "88c92107-c392-4806-94e5-795064aa1115",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fea7488a-bd9e-4343-a011-605f136b7a08"
        },
        "item": {
          "id": "1e0b9690-53b2-4da0-b5b3-be147955bea1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5f02df0d-4217-48ed-ab02-acdb561a801f",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "132a5a0d-95cd-469a-b2cd-ce223e4622d9",
        "cursor": {
          "ref": "79fbfa85-3a06-4509-b4f5-bffbd4db1183",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a9492b05-47c1-4897-8f90-08cfc8177c88"
        },
        "item": {
          "id": "132a5a0d-95cd-469a-b2cd-ce223e4622d9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "74ebf506-be64-440e-bf66-9439c58840b2",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "de55029a-6cc5-4e18-89bb-ae4654b742ca",
        "cursor": {
          "ref": "3a89741f-9dc6-4e56-9b7a-f0ed03825310",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "db5eb3b0-5496-4fa9-85bd-86f2325995f9"
        },
        "item": {
          "id": "de55029a-6cc5-4e18-89bb-ae4654b742ca",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ee4ec9ad-dfa1-4a2e-a6a0-b30c0db4de1c",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "efeace7e-0555-4b0b-bc5c-b787e7b65684",
        "cursor": {
          "ref": "f38f8851-d56a-4018-bb54-96eb5ddc071f",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f0b884d4-83ae-4827-9bb0-8eaa3a9d30c2"
        },
        "item": {
          "id": "efeace7e-0555-4b0b-bc5c-b787e7b65684",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0dfaad86-e68b-4270-bf78-a9d82d23e1b5",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "c3284d35-de79-4269-bc25-cf6388fab3ca",
        "cursor": {
          "ref": "3a8a0223-3b35-4467-8834-e1f83fdd1f53",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "bdbac0e5-54ca-4322-a1ad-b302c82434bf"
        },
        "item": {
          "id": "c3284d35-de79-4269-bc25-cf6388fab3ca",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fa608c87-2d5c-4dc6-93e3-3f3003a8e9a6",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "7efa7017-4a9f-4779-8f3d-304af4deb5dc",
        "cursor": {
          "ref": "d935f34e-fd3e-4e40-8791-48cd71a1ce99",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "512b5a8b-27e4-485f-af44-2c5d5248f5ca"
        },
        "item": {
          "id": "7efa7017-4a9f-4779-8f3d-304af4deb5dc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "41aec182-9cbf-400b-8a5c-a3cd92097d94",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "67923e22-134a-46af-9f33-e36f2900c234",
        "cursor": {
          "ref": "91829ac3-189b-45d6-8e33-4e9eb8de8a22",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c0aad4ee-dcb0-48c5-b464-fb150116df15"
        },
        "item": {
          "id": "67923e22-134a-46af-9f33-e36f2900c234",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "613334ed-33b1-40e4-a5a9-be593d82d9ea",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "c9f5bc82-264c-49ad-b367-ceacf03ab741",
        "cursor": {
          "ref": "bfc36f7b-cd4a-43cc-8155-b6a394a5b8fc",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "30462914-eb2b-4d1b-8ea8-e9d799081091"
        },
        "item": {
          "id": "c9f5bc82-264c-49ad-b367-ceacf03ab741",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "99c41bd7-c2b8-4313-b74f-2b95f41b5e9f",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "b7a9f6c6-76b1-43f1-9399-97f739d8e3d0",
        "cursor": {
          "ref": "19cbac22-7907-44f8-b11d-d3886d1fb260",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b800d717-4a44-4963-ad6c-ec6da2bdbf05"
        },
        "item": {
          "id": "b7a9f6c6-76b1-43f1-9399-97f739d8e3d0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "862620e8-eaec-46a9-a647-0165bada3509",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "c1fa3d33-a3bf-44b0-b6f1-dff382b18ef3",
        "cursor": {
          "ref": "9c3b1797-47de-46a7-947d-db8f4c294cb9",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4b1af32c-899f-4d63-ad4a-d279ebc8bbef"
        },
        "item": {
          "id": "c1fa3d33-a3bf-44b0-b6f1-dff382b18ef3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6123f0e4-ac99-4a44-912c-036c432bd47c",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "2b0ec8a7-b1ff-4a95-ab8e-e842268ad9d3",
        "cursor": {
          "ref": "cdbdb56e-8e04-4293-a63f-4942e1c485c8",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "718e8ea2-d257-4a85-a73c-a7d30ac495db"
        },
        "item": {
          "id": "2b0ec8a7-b1ff-4a95-ab8e-e842268ad9d3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "970abae5-57f0-48e3-aef3-092b9daf94bc",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "64f7fcba-f251-42ef-8969-dc7898e8bf67",
        "cursor": {
          "ref": "27420a99-0a60-4a28-8529-f899fa83561e",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "cfa0961c-db70-47a9-9191-3e05d96a98f9"
        },
        "item": {
          "id": "64f7fcba-f251-42ef-8969-dc7898e8bf67",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6df903f5-64c4-4925-ba8a-8e39b4284f19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83a4f53-f3a8-4aa7-b39d-da25bb55d4d1",
        "cursor": {
          "ref": "a23b889e-026e-44a8-ad31-0d8f09ce2436",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7d199aae-e212-4897-8fc6-85c5f24cfec7"
        },
        "item": {
          "id": "d83a4f53-f3a8-4aa7-b39d-da25bb55d4d1",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "c805c425-13c3-4bf0-a746-c235145102a1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 43,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8921fe-c53f-4bbc-8cb6-51194be42e63",
        "cursor": {
          "ref": "2e340aa9-c946-469a-b479-f41768280e6d",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "334a5652-e86f-432c-a194-67cc490d6f1f"
        },
        "item": {
          "id": "ef8921fe-c53f-4bbc-8cb6-51194be42e63",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "84ef38b2-e381-4da5-96c7-4219d47bbffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8921fe-c53f-4bbc-8cb6-51194be42e63",
        "cursor": {
          "ref": "2e340aa9-c946-469a-b479-f41768280e6d",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "334a5652-e86f-432c-a194-67cc490d6f1f"
        },
        "item": {
          "id": "ef8921fe-c53f-4bbc-8cb6-51194be42e63",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "84ef38b2-e381-4da5-96c7-4219d47bbffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa45c940-8623-420b-a855-72f18d8ddf85",
        "cursor": {
          "ref": "670edf0d-659a-412d-9f2a-2af463115cfe",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "fc98f6a9-928c-40df-abf5-e7a6f6751123"
        },
        "item": {
          "id": "aa45c940-8623-420b-a855-72f18d8ddf85",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "83a7673c-2fd9-4a1e-b9a3-13490d4c3a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1658c5b3-3c51-4a46-b809-3b4dbab4f6a5",
        "cursor": {
          "ref": "673ad212-9e55-4808-bb20-b1f9d6fcd0dc",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "89f2474b-42dd-444f-bcc9-f2ff290ea14d"
        },
        "item": {
          "id": "1658c5b3-3c51-4a46-b809-3b4dbab4f6a5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6f65fde1-b600-4b76-ad32-79f7819c4075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a014a5a6-acdf-413e-830b-22b917d5ad87",
        "cursor": {
          "ref": "8c6e3d72-26c0-499e-9cf5-c33dbb38b643",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "07f93c63-7bfd-4cdc-99bd-762ad1d8bbd6"
        },
        "item": {
          "id": "a014a5a6-acdf-413e-830b-22b917d5ad87",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "14b54c60-9581-42ec-8e0b-942159f19ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c95320f-f721-4155-bf86-cbb1a01828b5",
        "cursor": {
          "ref": "b3b60fc2-a448-48c6-9107-97557b477ab8",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "79cae6b3-fd69-4769-aa40-f8093070bda1"
        },
        "item": {
          "id": "5c95320f-f721-4155-bf86-cbb1a01828b5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ae758a0e-a97b-4c47-a071-97e8a891e79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f73a1fd-280f-4413-8a46-41461a983064",
        "cursor": {
          "ref": "99eb0837-49f4-440c-8d18-e098754ea68a",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "be0c806c-7f19-4a7b-aa0b-df68a307978a"
        },
        "item": {
          "id": "7f73a1fd-280f-4413-8a46-41461a983064",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8ba08c15-5d93-4f92-a898-8da3a4d461c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42dd882-29e3-4ce9-899b-a98084eee57c",
        "cursor": {
          "ref": "9b2c66cb-a953-4f8e-a695-ee247d819aff",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "3fd35980-db4f-4837-94ef-aaf7824cada2"
        },
        "item": {
          "id": "b42dd882-29e3-4ce9-899b-a98084eee57c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8008b80e-5a3d-435f-8f88-b49b938751a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 624,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9053e5c3-4144-4a84-8f43-0cc48f75418d",
        "cursor": {
          "ref": "83903fba-6742-432d-bd6b-65924d80d7ff",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a24fdbfa-5d02-4504-9ebf-1ca29c331b30"
        },
        "item": {
          "id": "9053e5c3-4144-4a84-8f43-0cc48f75418d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1fd98266-9d8c-47bf-a6cc-5c588fbccfcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d9ab3b-a22d-40b2-a372-bdce17a59af6",
        "cursor": {
          "ref": "4526b681-7fef-4af1-a566-99224a35d757",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4e0b7a21-d064-4c68-9f12-3c5d484109c9"
        },
        "item": {
          "id": "00d9ab3b-a22d-40b2-a372-bdce17a59af6",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "08746106-a191-4388-9929-8e10c913bfb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39a4432-065a-4a7c-a2b2-fc0be11678a1",
        "cursor": {
          "ref": "02b696de-a3aa-4e7b-b729-b2675f21c966",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "179125e8-7f7e-4de5-8660-742ad877b034"
        },
        "item": {
          "id": "a39a4432-065a-4a7c-a2b2-fc0be11678a1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2f7f3e74-ecd9-4a03-9e49-f725af93f173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8dee52-e67d-4fb0-b8c5-7d7afa1bc13b",
        "cursor": {
          "ref": "90c52875-7969-4744-8382-fe017fe7d4a6",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b7b8a69e-ab81-4da6-96a5-300ca4117918"
        },
        "item": {
          "id": "4f8dee52-e67d-4fb0-b8c5-7d7afa1bc13b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a65145ea-28e0-4336-b630-7be7c7ec7cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7f16c7-a0a6-498b-b97e-1c57878620cf",
        "cursor": {
          "ref": "016bd304-4c24-4863-9d49-4edae4479d49",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b81e4ac9-4dec-4db7-8c61-c39fe995ae3d"
        },
        "item": {
          "id": "9b7f16c7-a0a6-498b-b97e-1c57878620cf",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1e175db9-9d8c-462e-b88c-4d5c1f28e5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008ea77e-61d0-4747-ae51-9137d2aab02b",
        "cursor": {
          "ref": "7451d880-c86c-4ecd-ae78-a4bc5a1391ca",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "081142fb-5084-4f61-b244-e7ae1cdb1691"
        },
        "item": {
          "id": "008ea77e-61d0-4747-ae51-9137d2aab02b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "96cf6e33-47e8-4411-ae43-950c003e8928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5720b34a-2d37-487e-95f7-198f7f8bea2b",
        "cursor": {
          "ref": "6d80dd56-2e5d-433b-bf26-0d22827a0a5b",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "97c28ebb-1eed-4ea1-9585-9012853c9b30"
        },
        "item": {
          "id": "5720b34a-2d37-487e-95f7-198f7f8bea2b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "224798de-fe09-4346-8bb5-e69ade4a7e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bbcfeda-a50e-4c79-b00c-0826d16bcc62",
        "cursor": {
          "ref": "5f29cf67-90c5-42a1-adb4-66f210a6b9e9",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "462cea42-a80f-461c-8d39-30b41925c783"
        },
        "item": {
          "id": "2bbcfeda-a50e-4c79-b00c-0826d16bcc62",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fc8632d7-61b5-4fca-ae18-9aa91b563d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf34a1ee-d9e8-4ab1-9154-8a053f1f26da",
        "cursor": {
          "ref": "bcf6d68e-f86f-4eb1-949b-d6a3b158f903",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "db50e2f0-983e-41a5-97b5-e8bf1e8a6d02"
        },
        "item": {
          "id": "bf34a1ee-d9e8-4ab1-9154-8a053f1f26da",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c82015b6-fc04-4037-947a-fdbe1195f823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c03fa30-bf78-4f27-8f88-f7a08e4ca2c6",
        "cursor": {
          "ref": "dfcafc1c-076b-475d-8e33-3f920d03186c",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "48a64668-7e6a-44bf-8326-fd00bcf5516e"
        },
        "item": {
          "id": "4c03fa30-bf78-4f27-8f88-f7a08e4ca2c6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ecbf24fb-df7b-450a-8994-9634d7856180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317c9ac6-4392-479b-8261-57758ce11f9f",
        "cursor": {
          "ref": "2787bce9-8258-4a84-ae9a-a82a6848f424",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "66edce0c-20ca-4b6f-9a3f-12c8826aa22d"
        },
        "item": {
          "id": "317c9ac6-4392-479b-8261-57758ce11f9f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "35e41474-be5c-4442-817a-d190c59b77d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 325,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9031143-786d-4319-a572-88265cb1c133",
        "cursor": {
          "ref": "dbfb5780-aa49-467c-a9cf-2d54e7a076d4",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5b8fa9f3-a8e6-4fd2-87a2-4b03fa262d51"
        },
        "item": {
          "id": "a9031143-786d-4319-a572-88265cb1c133",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ebb21883-83fb-41c2-bbc2-1e04574c018e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b17090-1547-4082-8790-e32795ff020b",
        "cursor": {
          "ref": "e723609f-e144-445a-9802-c072723b479d",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "87184aac-c094-4bd7-9955-6b7bf4a15053"
        },
        "item": {
          "id": "07b17090-1547-4082-8790-e32795ff020b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "913da17a-c7da-4334-9db8-f01732c0ac15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f5f89c-52ac-4457-865a-f1cf0199a3a7",
        "cursor": {
          "ref": "a66f9ede-ef8f-404d-8eb6-06d8eb8fea8e",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7d1e9f0a-ca18-4272-8627-b0b523bd3216"
        },
        "item": {
          "id": "86f5f89c-52ac-4457-865a-f1cf0199a3a7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2754489c-d748-4c35-9c9e-5885c64af79e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d892f8f6-98c6-491b-8832-1a66bc6a6990",
        "cursor": {
          "ref": "d60a7b81-a3cb-4070-a177-3827e160ffc8",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fbdd4312-0233-4d7b-aa14-1c06fd253605"
        },
        "item": {
          "id": "d892f8f6-98c6-491b-8832-1a66bc6a6990",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "efc92684-3ace-403b-beca-ec1a9854637d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3f3d98-91d2-405e-afe4-903e0c02963b",
        "cursor": {
          "ref": "9ad0ebe6-a966-4eba-9c7c-25c2b3a2fc56",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1de636b7-0e76-4ef2-a547-7eec890fcb8e"
        },
        "item": {
          "id": "7d3f3d98-91d2-405e-afe4-903e0c02963b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "dcac9fec-51f3-4670-b870-67d1c677e14d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7aed006-43b1-42e5-bbb5-3309161963ff",
        "cursor": {
          "ref": "037138fd-960c-440e-b1d3-6f8368fe3266",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "efea6301-ad8d-4141-a752-2b561a44e9f7"
        },
        "item": {
          "id": "f7aed006-43b1-42e5-bbb5-3309161963ff",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "07920d34-483c-42b5-948d-e08db0424f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d8bfe7-9cdb-4aa8-96c3-caf6093451e5",
        "cursor": {
          "ref": "467606aa-0523-4c97-83b3-a32b558384c1",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5ee31728-858d-4275-a7cb-da5e812cbed9"
        },
        "item": {
          "id": "59d8bfe7-9cdb-4aa8-96c3-caf6093451e5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "75e30cef-9aca-418c-a2da-3abd6c13ebde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4afd70fc-cc54-4e64-975d-f26e9845b4af",
        "cursor": {
          "ref": "6b41a822-2708-4a3d-902e-a284f536935f",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e2ca0bb8-8c58-4bbf-9ac1-4afc0ba9ce72"
        },
        "item": {
          "id": "4afd70fc-cc54-4e64-975d-f26e9845b4af",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c12c3dda-edbe-44e6-8a34-23094bb6b680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03299608-fdcf-487c-924a-3460da44748a",
        "cursor": {
          "ref": "5f97d519-923f-49fe-bf31-b2760758bdb1",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9e847fc3-0b65-4bfc-9b3c-296ed224f774"
        },
        "item": {
          "id": "03299608-fdcf-487c-924a-3460da44748a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "fe786f32-32dc-473f-86ae-837567cf619c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c36751e-e976-403d-9158-711bda7cdbaa",
        "cursor": {
          "ref": "7187c022-0110-4628-ac4c-5fcd9a8fa05c",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "51605cca-40e3-4f2b-ad12-560f42549f05"
        },
        "item": {
          "id": "6c36751e-e976-403d-9158-711bda7cdbaa",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c2e50f67-3d74-4bf6-bd07-2b0df73c7b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b92c821-b01f-4c46-8361-885af73331e6",
        "cursor": {
          "ref": "4647a6b6-6867-498a-99ae-5f30a72561f5",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "23287b03-9806-4823-862b-311597f0513d"
        },
        "item": {
          "id": "5b92c821-b01f-4c46-8361-885af73331e6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "75278fb7-23e2-4e05-96a8-ae931cf1c378",
          "status": "OK",
          "code": 200,
          "responseTime": 215,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "62cdb9b7-53d8-4801-b63e-12344bd3a097",
        "cursor": {
          "ref": "eb1ed389-bfdb-4d4f-9e26-e1f661effdc6",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4896e4ce-38b4-4253-a41f-229cbaecdb74"
        },
        "item": {
          "id": "62cdb9b7-53d8-4801-b63e-12344bd3a097",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ab84861a-44ad-40dd-8cff-c65181e8221d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd309907-3b52-46a7-9631-b8f37a58db72",
        "cursor": {
          "ref": "766487f9-c961-422f-8e11-71674ad86e07",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7a02937d-5fd0-4795-bdb7-b7c1af9ba7b6"
        },
        "item": {
          "id": "fd309907-3b52-46a7-9631-b8f37a58db72",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "adfcff5d-fee2-4419-9aa2-fdee8cd578d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e2c4cf-e410-4047-a89a-9cd89e7e1f23",
        "cursor": {
          "ref": "ea207139-7f2a-41b3-bfb2-cbce796b7619",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8de6ffd1-00e9-4928-8ec9-c481165e7fc8"
        },
        "item": {
          "id": "94e2c4cf-e410-4047-a89a-9cd89e7e1f23",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "18338803-8492-460f-a90f-e388586cac11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d961db0e-e2a5-4fd2-9d2a-63f030754cb3",
        "cursor": {
          "ref": "347ba57c-fdf5-44c3-ac8a-f61930618cfa",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5cdf52f6-70e0-4cd6-acd2-3a4aa55c6e82"
        },
        "item": {
          "id": "d961db0e-e2a5-4fd2-9d2a-63f030754cb3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "591c54f6-4bd1-49fc-90b2-697a6bcb1acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea62837e-4ef2-44cd-b258-39c76a0ebed1",
        "cursor": {
          "ref": "e25d37c5-6b3a-45b5-80ac-7766d2221938",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d39f5b32-584e-48a7-9bd8-55c220636d55"
        },
        "item": {
          "id": "ea62837e-4ef2-44cd-b258-39c76a0ebed1",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ecc4abd1-6f48-4a9c-9c06-afc2373e086b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d719ada1-0717-4316-b420-db04249bea1d",
        "cursor": {
          "ref": "d6609858-fbd8-4c51-9872-38da45925d54",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "700e2964-df72-4ad6-8ab6-463fc31f7faa"
        },
        "item": {
          "id": "d719ada1-0717-4316-b420-db04249bea1d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "83d22d56-6290-445e-9e65-64bccdca848d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff807d88-5702-4010-a3d4-17ecc2a9dbaa",
        "cursor": {
          "ref": "712a9c5f-a28e-4e0b-bbf8-91b7b9249f35",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "acb479c0-0fab-45d7-b875-b2b5eae2e4fc"
        },
        "item": {
          "id": "ff807d88-5702-4010-a3d4-17ecc2a9dbaa",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "686e75c6-1805-4134-b3ca-ddf1607427fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d89e28-9662-4701-9ca1-7880cad0e6bd",
        "cursor": {
          "ref": "bfae9fd5-fbf1-4129-8afd-f47d2ae52f9b",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8f777b03-e245-4868-a49a-c0e6e936be96"
        },
        "item": {
          "id": "b8d89e28-9662-4701-9ca1-7880cad0e6bd",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3492cb56-1f3c-4825-8406-f138dddcfddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed1eb49-41bb-456b-a319-666b5c3e50a0",
        "cursor": {
          "ref": "f9ea25f2-1833-4f46-8b69-86f76a8708c3",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c5d24268-cc54-40ef-aaee-59876822c5e8"
        },
        "item": {
          "id": "3ed1eb49-41bb-456b-a319-666b5c3e50a0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d7679643-9e4e-461f-9066-a5ab2b974f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c4e1404-333f-4d89-a8ae-d582b0706257",
        "cursor": {
          "ref": "c52a6620-425a-43cd-a597-09967b55232e",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "cc6efe2b-777d-4ad7-b3e7-e3b4d99142fd"
        },
        "item": {
          "id": "4c4e1404-333f-4d89-a8ae-d582b0706257",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d4a6464a-7f99-42a9-90be-478800eb7865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 535,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8479ea-893b-4a7b-8318-c89fd42b0237",
        "cursor": {
          "ref": "f6ff8a83-8853-4fe2-ae62-820892bab31c",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "23785ced-e629-4c8b-a4e8-e683964cc801"
        },
        "item": {
          "id": "2b8479ea-893b-4a7b-8318-c89fd42b0237",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2c8819bd-317a-4ca5-85da-f92399180ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27815d53-340a-4b13-9bfb-12fe2ddc251c",
        "cursor": {
          "ref": "19fc60a8-6fce-478e-866b-1754fd9c289a",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2d3be5b1-677a-454a-9611-46ae557a66b3"
        },
        "item": {
          "id": "27815d53-340a-4b13-9bfb-12fe2ddc251c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "71f2f33c-0065-4ae5-8f59-2eb6a72594b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb48845f-0f59-4375-af5b-9e106fa606f6",
        "cursor": {
          "ref": "40b577e7-1175-4e30-a36b-fe688206c06d",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8f6c371c-e1ec-4fac-a066-1e71df52665d"
        },
        "item": {
          "id": "cb48845f-0f59-4375-af5b-9e106fa606f6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "acd46662-eabc-41be-ac70-b0322700a87a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a581e030-8ec6-44a1-9c09-5d46557a8e18",
        "cursor": {
          "ref": "77babc1f-a2f5-4d3f-9c26-d15c27f4b440",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "07ae24e1-1969-4cdf-8aa7-fef976f1fd17"
        },
        "item": {
          "id": "a581e030-8ec6-44a1-9c09-5d46557a8e18",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a95d563b-a1ad-48ba-abdb-93b9e92519e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e75d8ae-5aa4-41f9-9644-8ae5db1ba614",
        "cursor": {
          "ref": "504b2389-09a2-4cdc-ac05-c886c3008b34",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "283e7b5b-dd14-47e4-b029-257ef030fe97"
        },
        "item": {
          "id": "2e75d8ae-5aa4-41f9-9644-8ae5db1ba614",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "51b12000-9ebc-4745-a00c-84e1da04175e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be24f4ae-6159-4e8c-8cdb-b8eed3a6b379",
        "cursor": {
          "ref": "e633c457-7a8f-49db-83a6-13a19133861a",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e7c9d52d-f112-4320-94fd-b5143dba9e26"
        },
        "item": {
          "id": "be24f4ae-6159-4e8c-8cdb-b8eed3a6b379",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "497ba0ac-3efd-4abf-99d5-e7c8b21ec777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47dcb29c-45ae-446a-b4bf-e18785257b66",
        "cursor": {
          "ref": "04663bba-eb81-4bcc-954a-5b72ede876d3",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2cdacf9a-8c55-466e-b479-80f721152f16"
        },
        "item": {
          "id": "47dcb29c-45ae-446a-b4bf-e18785257b66",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5208bd59-f2f6-4e2e-bf0e-7bac6802f382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf56cbc8-7496-4697-92b0-81189d96b22f",
        "cursor": {
          "ref": "1b3c3940-8b23-489a-b7fb-62c9a321d083",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "76646a80-c2ca-4257-bcc6-378b465f1abb"
        },
        "item": {
          "id": "cf56cbc8-7496-4697-92b0-81189d96b22f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3a3b931b-7f7f-4b78-8235-c3ec4d79ca34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8981a8-c911-4e19-a8ca-582aa874f331",
        "cursor": {
          "ref": "bf04ae50-0fff-4074-b0eb-f36871acbabd",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "11d4d115-1ffb-4122-8301-d602c61f8f46"
        },
        "item": {
          "id": "ce8981a8-c911-4e19-a8ca-582aa874f331",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8f98828d-80bb-4a13-888f-f25fae0af282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6726e81-958a-4919-a903-1a72afbe3be8",
        "cursor": {
          "ref": "de32f2cf-8c09-440d-90ce-7266af52b7b4",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1f8d1e4a-d05f-4dd8-a2bb-27956c8c9bbc"
        },
        "item": {
          "id": "d6726e81-958a-4919-a903-1a72afbe3be8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "129eb91f-3918-4f91-aca1-7828ac87e916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b87cd1-2aff-44e1-9d73-8f53e2808029",
        "cursor": {
          "ref": "f0ea1ad3-f6e2-4277-9977-188d661687ea",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fb942dc0-912d-45e4-b23b-c58b302b9405"
        },
        "item": {
          "id": "a7b87cd1-2aff-44e1-9d73-8f53e2808029",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8ade375d-0363-4544-b80a-5172342b349a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37edfa8-00ce-4e88-ad7a-d0b47ef0a1e8",
        "cursor": {
          "ref": "e9c6690a-5de1-4f54-a7df-10ebeba41ca7",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f3b023a5-1cb6-497b-8073-5eb3497769ab"
        },
        "item": {
          "id": "c37edfa8-00ce-4e88-ad7a-d0b47ef0a1e8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2e0586bf-0370-4e7e-8cf5-7babf32dd2bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c372e31-d07c-47bd-b630-e4708ccfd299",
        "cursor": {
          "ref": "10b47d96-1c08-478b-b132-4a1b0024b2d9",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "66669c47-9579-4fa6-92be-f7ca6dc46639"
        },
        "item": {
          "id": "1c372e31-d07c-47bd-b630-e4708ccfd299",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c5d7d2b4-aa9c-49ce-9063-b363914d656d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf082d1-ac5c-42c5-9c81-272dacc410a4",
        "cursor": {
          "ref": "3b20aa7f-4a91-4412-9ccb-0930cbd41e86",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "73080c3b-dc8b-4d09-a7fd-1a1cbd08d24e"
        },
        "item": {
          "id": "3cf082d1-ac5c-42c5-9c81-272dacc410a4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "dc3ff0a6-79ce-4eab-970b-8ccbbf3df88a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7034030-2c0b-43a3-bc23-1bafe1dbf120",
        "cursor": {
          "ref": "b72af0ca-e05c-4030-a1b3-4180ed9da96c",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4054ee51-d20b-4cf4-87f4-e05a3ae9201c"
        },
        "item": {
          "id": "c7034030-2c0b-43a3-bc23-1bafe1dbf120",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "76921557-b07d-483d-b505-c17a6b7e6551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565e1a70-88e2-4271-8aa6-f9565bd965ef",
        "cursor": {
          "ref": "72863670-1464-4f4c-aefb-63d4f4559236",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3b1634b8-721d-4d9f-a334-d3de8fcd6132"
        },
        "item": {
          "id": "565e1a70-88e2-4271-8aa6-f9565bd965ef",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0b987baf-6eb4-4806-8e50-dc85c041e594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d4b6a3-7095-42d5-8895-a2892f34a70a",
        "cursor": {
          "ref": "b8dd86b3-74a1-4b4b-b89b-15f7a9ffaa20",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5a4e2412-6e01-498d-9fec-962261450e75"
        },
        "item": {
          "id": "47d4b6a3-7095-42d5-8895-a2892f34a70a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9eee16b3-0a21-467d-ae0e-78b9a5082900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7020c0-5514-41b5-97ee-7acdf1d88aa6",
        "cursor": {
          "ref": "754888fe-1fe4-4e8b-a370-2475f365a540",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f30dbce3-9240-4b79-aa59-37377f337082"
        },
        "item": {
          "id": "7d7020c0-5514-41b5-97ee-7acdf1d88aa6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "db5382f5-240a-4fd1-bde8-8c1552ce4503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd6c21b-2565-4654-b511-65c3fae49fc5",
        "cursor": {
          "ref": "648683e7-1e41-4741-b500-942b0d7e2060",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "beb1d206-e060-42ca-8c3e-e6e124b2d93a"
        },
        "item": {
          "id": "1bd6c21b-2565-4654-b511-65c3fae49fc5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4ad18082-5b37-4559-a719-9ec2e1d7fd3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90db2501-d847-4a6c-a09e-999ff7698acb",
        "cursor": {
          "ref": "86163a13-d91f-42d7-b565-e08f248c1b98",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1fc5ac30-f7c5-4249-992d-077befc7d150"
        },
        "item": {
          "id": "90db2501-d847-4a6c-a09e-999ff7698acb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "82f0f195-7dee-4f07-bd23-ed9ce1a168ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1a5973-7523-4da0-afe1-c298501989bd",
        "cursor": {
          "ref": "30c923a0-14dc-4675-bc32-32251f754d99",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "199b3044-730e-432f-b5ab-acb16b31b817"
        },
        "item": {
          "id": "ea1a5973-7523-4da0-afe1-c298501989bd",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "34a4c22a-78f0-4593-9891-e6978adf571f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a1a719-d5da-4d68-ac56-ba13139baa8e",
        "cursor": {
          "ref": "5adfad9d-faf3-4d79-a00d-92fcfbf32b4b",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a02d91dc-a96c-4be0-a2e5-d6daa36c0660"
        },
        "item": {
          "id": "30a1a719-d5da-4d68-ac56-ba13139baa8e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f264d59a-6dc6-4c5a-b93c-28cac5a48bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e9026e-5fb3-497d-aa89-990ef79ec0f9",
        "cursor": {
          "ref": "28b98ec6-89f6-4306-ba70-c7b8d142191f",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d200b08e-33a8-4660-952d-f94d23e7a280"
        },
        "item": {
          "id": "39e9026e-5fb3-497d-aa89-990ef79ec0f9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0b8f60bb-7877-4b1c-a2a1-ee457cdeebcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff657f0-7326-4bba-89ac-e5cb58bf35bc",
        "cursor": {
          "ref": "ec255dd7-645a-4e9a-960e-6cafdb300aa7",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cae804c5-5b10-4c6e-8fa3-bcccb8284d58"
        },
        "item": {
          "id": "7ff657f0-7326-4bba-89ac-e5cb58bf35bc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a5410d28-87f4-49e4-8ee1-2684d1550967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b108a0-c889-4364-a308-e479fff0e2a0",
        "cursor": {
          "ref": "3aebb07c-908e-4aa8-9b7d-98f29b2fa200",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4508da42-9c7d-4706-9635-ed4a13803241"
        },
        "item": {
          "id": "d2b108a0-c889-4364-a308-e479fff0e2a0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2dfecd68-059f-4fd3-bc52-487f0b4ce8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ee8d2e-6d94-4ee9-9b57-55228a1cc22b",
        "cursor": {
          "ref": "88cf52f2-8159-4eeb-acf6-245ec9555aed",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ae410bf1-9c41-46f3-9f28-247cbf396a55"
        },
        "item": {
          "id": "f8ee8d2e-6d94-4ee9-9b57-55228a1cc22b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f4d8e2f5-62ac-424d-b09d-b729a3d67569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "177b6982-9ce4-45b9-8fc8-6d34c325fe3e",
        "cursor": {
          "ref": "49628bd0-ace4-4194-8f5c-1571795b2a64",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1e58cbc4-21cb-4650-a980-28c317a15c38"
        },
        "item": {
          "id": "177b6982-9ce4-45b9-8fc8-6d34c325fe3e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1cb0dca9-db0c-4a98-bbdd-32983e2bc67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780e3780-c6fa-4f9f-a99a-2d833a2f9efc",
        "cursor": {
          "ref": "fb64fce5-75af-4d79-b804-28aef3d23a28",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "71448aa5-92e4-45e5-8e61-847ab8b40322"
        },
        "item": {
          "id": "780e3780-c6fa-4f9f-a99a-2d833a2f9efc",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "eb09564f-2c6e-4d74-960f-14687f78fd63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ae574c-f6de-40c5-8ef0-d7150e78da0e",
        "cursor": {
          "ref": "dcf7d97e-2c8a-4149-b78e-9d4e37589626",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0857838e-e840-4241-bbe5-feaccec56c2e"
        },
        "item": {
          "id": "75ae574c-f6de-40c5-8ef0-d7150e78da0e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7a4bbd3c-7f8e-404e-b7a5-d7ca9a766fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "060e5ace-5848-40f3-9a54-884e2f23f44c",
        "cursor": {
          "ref": "46974def-d710-44db-8a6d-25413d52479c",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "13bb9718-99c4-47da-be95-55890b805978"
        },
        "item": {
          "id": "060e5ace-5848-40f3-9a54-884e2f23f44c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b1451fe7-e655-4e78-8b61-a5125006d4cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90455d83-5705-4d7e-b4c4-95cdff57f28d",
        "cursor": {
          "ref": "96b56a0b-ce1f-41c3-8b14-51b0e5008af5",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1adb16fa-83cc-4c5d-9ff2-a96154a8a4a1"
        },
        "item": {
          "id": "90455d83-5705-4d7e-b4c4-95cdff57f28d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "18cbe0d8-6f0a-4075-b27c-b7a775177227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e06d50a-0177-476d-a3bf-a457d59c491e",
        "cursor": {
          "ref": "03da49b5-a428-4aaf-b048-3fde8f736823",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "90d16902-efaf-43be-b55e-c186af7720f5"
        },
        "item": {
          "id": "1e06d50a-0177-476d-a3bf-a457d59c491e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5d5adfce-eab9-4441-8c48-d2d29a645903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa60e8f-e92f-4141-b2b1-6b3de69df28e",
        "cursor": {
          "ref": "d0bce7ae-8ff0-4adc-9391-d6bee756c049",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "87b38431-31f3-4ed1-a485-8ca0535b71af"
        },
        "item": {
          "id": "7fa60e8f-e92f-4141-b2b1-6b3de69df28e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e7e90396-d8a7-4358-8ba8-53f7493f8e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57561bde-5287-496d-96b1-f57da49231ed",
        "cursor": {
          "ref": "36d6694b-7596-4222-9a9c-b255f7478647",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "acf7efe8-a09a-4184-8d62-27c665551a42"
        },
        "item": {
          "id": "57561bde-5287-496d-96b1-f57da49231ed",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ee1dedca-ea49-453a-a5cb-4562acbd36b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd3eef3-d7a2-45f8-bbe6-14fccdf84caa",
        "cursor": {
          "ref": "f21bb0b8-43eb-4714-a3fc-1d1eb8a98926",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9e7fe741-ac85-404d-b167-482d7ca750cd"
        },
        "item": {
          "id": "edd3eef3-d7a2-45f8-bbe6-14fccdf84caa",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "92269457-e076-41d1-8128-fb7a1a5315f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ef875d-783b-4426-876f-282b1485cab2",
        "cursor": {
          "ref": "4f160e9a-af6e-4b10-8f64-04f7a1388b27",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "66480456-5a23-48d9-84c1-339098d3b3e8"
        },
        "item": {
          "id": "45ef875d-783b-4426-876f-282b1485cab2",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "178fa55f-c973-4d3f-9582-fa8919c040c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac65fe1-56da-4cef-8d79-63fc2b34702f",
        "cursor": {
          "ref": "2d0e4df5-2f30-495f-b367-a59f0f55749d",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "49780178-9ea3-46e4-89f2-0927c4576299"
        },
        "item": {
          "id": "7ac65fe1-56da-4cef-8d79-63fc2b34702f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3173df3c-cb5f-4acc-92ea-9b930e1b2ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c489e08-a38f-45f5-a7ff-545bf75c1c86",
        "cursor": {
          "ref": "65dd45e2-b86a-4197-a752-6ddd56c0b1bc",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ca4199ce-725c-46db-8f16-e4ad9123c5c3"
        },
        "item": {
          "id": "6c489e08-a38f-45f5-a7ff-545bf75c1c86",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d6aab5db-2281-47e8-b4ef-1f560ab24cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334bfbd0-df7f-48f3-80ec-eddde52d6795",
        "cursor": {
          "ref": "97a904f7-dd0a-472d-b8e4-9e7bd5ed9c56",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "eb97902e-d1f8-436e-a915-70bda8790335"
        },
        "item": {
          "id": "334bfbd0-df7f-48f3-80ec-eddde52d6795",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ec860ca6-9337-48b0-95ed-13543b52e144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6673750-4828-4491-8338-e8d97c65ca33",
        "cursor": {
          "ref": "ecd0c9a9-05c9-4d8d-8a54-959f36886854",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ceb8bac8-6372-4d0e-b15d-48db194e356e"
        },
        "item": {
          "id": "c6673750-4828-4491-8338-e8d97c65ca33",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "cf21f017-e839-4708-a5ef-ba54888c6544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c560e3-ba3e-45b0-a446-175cd569d5ce",
        "cursor": {
          "ref": "5e8248b3-0374-44f3-aea1-115b8f3b3929",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d2670728-1738-4869-9dd8-6b27156326e2"
        },
        "item": {
          "id": "e5c560e3-ba3e-45b0-a446-175cd569d5ce",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9e9174ee-6081-4295-80fd-b1be9dd4e14a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ae4d1a-8266-4d1b-b4df-b38461ec8b1e",
        "cursor": {
          "ref": "80e6a9d3-c668-4bb4-a437-781881fe6d3c",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1831d4bd-d01e-48c2-8335-39074cb27b03"
        },
        "item": {
          "id": "31ae4d1a-8266-4d1b-b4df-b38461ec8b1e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5ef20288-1f41-4302-8f8f-5942e5ddd623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c04da74-0bdd-4030-aca7-f42ba4cd6969",
        "cursor": {
          "ref": "65fe8048-20b7-474b-b38a-5100d29b32a0",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "249b8008-4c2f-4811-92c3-0f1e1c95f8c3"
        },
        "item": {
          "id": "8c04da74-0bdd-4030-aca7-f42ba4cd6969",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "906952d9-b77f-463c-9b31-ad0a25ea56f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876f13d2-f325-47b5-97dc-b800795d61c2",
        "cursor": {
          "ref": "580e32a9-8d53-4883-a5e5-f76e2b4014c1",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b8ffda96-1837-42b2-87f6-1a494769ec44"
        },
        "item": {
          "id": "876f13d2-f325-47b5-97dc-b800795d61c2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9ea169f7-ea2e-4eac-b182-39e7e36ded19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6851bf8f-b420-4997-b1cb-2deeae86a40b",
        "cursor": {
          "ref": "6f9034d0-99a1-4f95-a868-70c4be441bf1",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "58fc1139-4819-46ea-9c5d-16bd5c78fea6"
        },
        "item": {
          "id": "6851bf8f-b420-4997-b1cb-2deeae86a40b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2f7383c9-2227-4e97-be40-80184037c306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8545bc8a-7abe-40aa-be23-62dcb2b22599",
        "cursor": {
          "ref": "8bd14c48-ffc8-44dd-b93e-b3f87be0f373",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a3a69c60-5602-4bd2-ad34-7f0f85dee174"
        },
        "item": {
          "id": "8545bc8a-7abe-40aa-be23-62dcb2b22599",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "69f2299a-8c3c-4d63-b5a8-ec9949ef0fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d61b16-63c5-4045-9cdc-b1d6ec6da2b4",
        "cursor": {
          "ref": "394771fa-4de6-4d77-87ee-80515aacc1f4",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3496b7be-a940-41ce-ba88-0fe7833247e6"
        },
        "item": {
          "id": "c2d61b16-63c5-4045-9cdc-b1d6ec6da2b4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d7ccc5b9-9219-418a-8bde-8d8f26bf9165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24cd0d2-f0a4-421a-9183-1b1551436c4b",
        "cursor": {
          "ref": "f3317bf2-4029-4583-8817-f4893f4021a7",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "77b209f3-3b06-47d7-a728-fc77b63c052b"
        },
        "item": {
          "id": "f24cd0d2-f0a4-421a-9183-1b1551436c4b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c1ef251b-3cd4-4984-bfa3-0db18df1d956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706e9995-17e7-4588-9054-7e05af9ed734",
        "cursor": {
          "ref": "f3a4ff4e-369e-4507-9405-2a1ecaa58bf4",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "bb62b985-4ebf-475b-a27d-7aecdc290944"
        },
        "item": {
          "id": "706e9995-17e7-4588-9054-7e05af9ed734",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f38ced8e-8a78-43f2-a44e-e52278abfe3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225daed6-4720-49df-86ee-533eb2f6fd69",
        "cursor": {
          "ref": "f3b12607-ea57-4f1e-8560-05cdef6c17ad",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9ffcf73b-9fff-4b85-bf2a-c4eba918095a"
        },
        "item": {
          "id": "225daed6-4720-49df-86ee-533eb2f6fd69",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3861e642-bd3e-42be-bf53-068ce0b608d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46213a58-ff8a-4c14-9efc-865b6f9515c7",
        "cursor": {
          "ref": "6c861ddc-4049-4fbb-a035-5ea36df30a18",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "feac46fe-f8ab-4fc5-81cd-e42123abaa2c"
        },
        "item": {
          "id": "46213a58-ff8a-4c14-9efc-865b6f9515c7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "99fd31a3-454e-42f3-8eec-e816ff624851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8209b70d-4f18-4ab1-a9ba-aa498ed38581",
        "cursor": {
          "ref": "c0a9d0d0-2ed8-428a-b42a-9ef734674da8",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "905afa00-4c9b-4471-bdef-1426a7f86685"
        },
        "item": {
          "id": "8209b70d-4f18-4ab1-a9ba-aa498ed38581",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "00d790a6-f69b-4598-a5ea-ac96f8d03ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74eeb60d-08a8-424e-a49c-402b3b6b6ef4",
        "cursor": {
          "ref": "57790fbe-d156-4418-a915-44163d7ef9cf",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "70bf2a26-89cb-44b6-af0d-4581265580d4"
        },
        "item": {
          "id": "74eeb60d-08a8-424e-a49c-402b3b6b6ef4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "10f47762-d742-48a9-b738-6c2c80582ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e5c51d-7198-4385-8711-b9db146770db",
        "cursor": {
          "ref": "bc6c0577-41b7-4feb-816e-9f60d5bb6179",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "676448d2-4809-4e9d-a654-057d69f1616b"
        },
        "item": {
          "id": "e5e5c51d-7198-4385-8711-b9db146770db",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2d5c2135-6973-435c-924d-ff124bdae883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9562c94-8d90-4fa3-947e-c56007af9d99",
        "cursor": {
          "ref": "126db9eb-2098-4a39-896d-02d6d7bbbbb1",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "aa78df95-b903-44ed-963c-a7ec1d3f1e64"
        },
        "item": {
          "id": "a9562c94-8d90-4fa3-947e-c56007af9d99",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2f1c7fb6-edd6-4d2f-bc07-892b178af0fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1fa5361-33ce-435c-97a6-d7f212d601b3",
        "cursor": {
          "ref": "6b9d714b-0937-4ea5-86dd-51c7be37c419",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a4dab313-3627-4ea5-9eaa-9030947cc9ea"
        },
        "item": {
          "id": "a1fa5361-33ce-435c-97a6-d7f212d601b3",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "537d8f20-d6e9-4e10-b169-fd3ed2053d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598d5762-e640-4327-acd2-02ed9b35c826",
        "cursor": {
          "ref": "f3e00a54-3c33-462e-a553-6adc898cb316",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e94bfe4c-3221-4b39-9516-186f4c170542"
        },
        "item": {
          "id": "598d5762-e640-4327-acd2-02ed9b35c826",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "762fb14f-84e8-4b88-babb-e098f56e76ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea5d1cd-3bf5-47d0-914f-8daa48a45e29",
        "cursor": {
          "ref": "4a6da44e-628f-465b-9123-035b1aabea32",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e10ddccd-7c56-4345-a020-08fb675a35e0"
        },
        "item": {
          "id": "cea5d1cd-3bf5-47d0-914f-8daa48a45e29",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b345e939-149d-4aa8-a865-8e4e2a8c6c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b94c9c-4873-4fe4-8bd1-cb49eb7a137a",
        "cursor": {
          "ref": "8a1d7449-4c7d-4704-abb1-a02e5c4c2ad6",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8ebd3eed-b252-4db1-91c1-8e52d01ff965"
        },
        "item": {
          "id": "f0b94c9c-4873-4fe4-8bd1-cb49eb7a137a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7103a202-0afa-4c8b-904b-3c3ed936918b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e57345c-3d02-4963-9ba6-09dbb2f8c290",
        "cursor": {
          "ref": "49e6adf4-3a4f-47ba-8418-9b9e43093a63",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d47483a6-e798-41cd-b211-412338f6ac4d"
        },
        "item": {
          "id": "0e57345c-3d02-4963-9ba6-09dbb2f8c290",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "bb56a9ec-615c-4a21-a96a-d85a0c1b1bb4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 39,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54449044-4a54-493d-8c38-e6eae980502e",
        "cursor": {
          "ref": "fdf72b0a-26fc-4ff8-b310-af5e7816bbf0",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f7153b74-2431-43d8-a680-11d8e33bc50a"
        },
        "item": {
          "id": "54449044-4a54-493d-8c38-e6eae980502e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "65a33e81-6114-4948-8a17-75aa1971b4bd",
          "status": "OK",
          "code": 200,
          "responseTime": 327,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d94dd7b-c0d3-4556-8e26-283738f97ca2",
        "cursor": {
          "ref": "0ee52b82-d9a4-44d0-b5b4-a7b2a74986bd",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ff97d18e-dc5d-4571-9a51-0f87560bc973"
        },
        "item": {
          "id": "2d94dd7b-c0d3-4556-8e26-283738f97ca2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "97b2b90e-6dba-44da-89e0-c748e0c7b317",
          "status": "OK",
          "code": 200,
          "responseTime": 338,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "980c52a6-355d-4f72-8fca-0b136a685800",
        "cursor": {
          "ref": "4e9da718-da58-4d52-8c0a-2379045437dd",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d1b3d0da-354d-4c5e-ac18-728e6e07497a"
        },
        "item": {
          "id": "980c52a6-355d-4f72-8fca-0b136a685800",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "f8dc0c69-3211-454f-b3fc-077d08a2ea11",
          "status": "OK",
          "code": 200,
          "responseTime": 492,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "25504475-f280-4566-aa2f-b8f7f4e20f5f",
        "cursor": {
          "ref": "44fb3b05-d3dd-4067-8778-0c7980898011",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "50eae1a2-df5e-4de3-9a3b-1e9830637a79"
        },
        "item": {
          "id": "25504475-f280-4566-aa2f-b8f7f4e20f5f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4992f52a-c8ab-43f7-84ae-3c650fae2fb0",
          "status": "OK",
          "code": 200,
          "responseTime": 349,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c373ff0c-62fe-4486-83d5-0c5bba2072b4",
        "cursor": {
          "ref": "9e563cd2-81bf-44dd-8a02-aa218dfdb842",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "43f15c43-b71f-4c1d-9d44-15d9793f1424"
        },
        "item": {
          "id": "c373ff0c-62fe-4486-83d5-0c5bba2072b4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bcb89501-ac50-462f-806e-9f5a8e5ee636",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c373ff0c-62fe-4486-83d5-0c5bba2072b4",
        "cursor": {
          "ref": "9e563cd2-81bf-44dd-8a02-aa218dfdb842",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "43f15c43-b71f-4c1d-9d44-15d9793f1424"
        },
        "item": {
          "id": "c373ff0c-62fe-4486-83d5-0c5bba2072b4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bcb89501-ac50-462f-806e-9f5a8e5ee636",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c373ff0c-62fe-4486-83d5-0c5bba2072b4",
        "cursor": {
          "ref": "9e563cd2-81bf-44dd-8a02-aa218dfdb842",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "43f15c43-b71f-4c1d-9d44-15d9793f1424"
        },
        "item": {
          "id": "c373ff0c-62fe-4486-83d5-0c5bba2072b4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bcb89501-ac50-462f-806e-9f5a8e5ee636",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8500c2e9-cc5b-4f3b-8b7b-9a93b418de1c",
        "cursor": {
          "ref": "1e0b34f2-06c6-49db-9fb3-805a0648cf6a",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "45542f44-5d40-4fe1-bcdf-53685183382f"
        },
        "item": {
          "id": "8500c2e9-cc5b-4f3b-8b7b-9a93b418de1c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "5143396e-c588-4da5-98af-c77ef9b6392a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 40,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "724aea71-f311-4b70-bcdd-e337f6e02cf0",
        "cursor": {
          "ref": "06c80ccb-1a6b-4a8b-924c-bebe12ccbfd9",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "497e79e1-d297-4bdb-814d-32a7542ec427"
        },
        "item": {
          "id": "724aea71-f311-4b70-bcdd-e337f6e02cf0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9600ca2d-b04a-4b2b-ab39-caed56cb04ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "724aea71-f311-4b70-bcdd-e337f6e02cf0",
        "cursor": {
          "ref": "06c80ccb-1a6b-4a8b-924c-bebe12ccbfd9",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "497e79e1-d297-4bdb-814d-32a7542ec427"
        },
        "item": {
          "id": "724aea71-f311-4b70-bcdd-e337f6e02cf0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9600ca2d-b04a-4b2b-ab39-caed56cb04ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b23f4010-179d-433f-9756-795290cdb4b7",
        "cursor": {
          "ref": "3adfd155-98d7-4044-a019-752cf1766ea1",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "663dbe63-faa1-4635-9296-8a4e044569cd"
        },
        "item": {
          "id": "b23f4010-179d-433f-9756-795290cdb4b7",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "d9d28c3a-65f3-48e3-9110-68366a5c5ebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1f0267f9-663f-419e-a813-d60742c5243d",
        "cursor": {
          "ref": "ffcb7367-1ae0-47a9-8d89-17a1307ba19d",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b7966008-08ad-45b5-8262-80c5cfa7125b"
        },
        "item": {
          "id": "1f0267f9-663f-419e-a813-d60742c5243d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c49c90e7-ff95-4bc2-91de-efcb76e52260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "1f0267f9-663f-419e-a813-d60742c5243d",
        "cursor": {
          "ref": "ffcb7367-1ae0-47a9-8d89-17a1307ba19d",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b7966008-08ad-45b5-8262-80c5cfa7125b"
        },
        "item": {
          "id": "1f0267f9-663f-419e-a813-d60742c5243d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c49c90e7-ff95-4bc2-91de-efcb76e52260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "be1414db-4050-4743-8da6-addc52ac7ee3",
        "cursor": {
          "ref": "c66ac81f-8afa-4eba-84a1-628688569a0c",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a82ac39e-9b5f-4cb1-a0c9-a4686e0fd677"
        },
        "item": {
          "id": "be1414db-4050-4743-8da6-addc52ac7ee3",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "a15356e1-5192-4c87-a75d-11e098c1c57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}